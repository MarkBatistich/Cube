
Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d30  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd0  08006fd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006fd0  08006fd0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fd0  08006fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08007048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08007048  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158fa  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026fa  00000000  00000000  00035992  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  00038090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  000393a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018129  00000000  00000000  0003a588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd92  00000000  00000000  000526b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009744f  00000000  00000000  00062443  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d74  00000000  00000000  000f9910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006dd0 	.word	0x08006dd0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08006dd0 	.word	0x08006dd0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	1c08      	adds	r0, r1, #0
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 fa8b 	bl	800073c <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 fa0d 	bl	8000650 <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 fa7d 	bl	800073c <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fa73 	bl	800073c <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fa1b 	bl	80006a0 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 fa11 	bl	80006a0 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__clzsi2>:
 800028c:	211c      	movs	r1, #28
 800028e:	2301      	movs	r3, #1
 8000290:	041b      	lsls	r3, r3, #16
 8000292:	4298      	cmp	r0, r3
 8000294:	d301      	bcc.n	800029a <__clzsi2+0xe>
 8000296:	0c00      	lsrs	r0, r0, #16
 8000298:	3910      	subs	r1, #16
 800029a:	0a1b      	lsrs	r3, r3, #8
 800029c:	4298      	cmp	r0, r3
 800029e:	d301      	bcc.n	80002a4 <__clzsi2+0x18>
 80002a0:	0a00      	lsrs	r0, r0, #8
 80002a2:	3908      	subs	r1, #8
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	4298      	cmp	r0, r3
 80002a8:	d301      	bcc.n	80002ae <__clzsi2+0x22>
 80002aa:	0900      	lsrs	r0, r0, #4
 80002ac:	3904      	subs	r1, #4
 80002ae:	a202      	add	r2, pc, #8	; (adr r2, 80002b8 <__clzsi2+0x2c>)
 80002b0:	5c10      	ldrb	r0, [r2, r0]
 80002b2:	1840      	adds	r0, r0, r1
 80002b4:	4770      	bx	lr
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	02020304 	.word	0x02020304
 80002bc:	01010101 	.word	0x01010101
	...

080002c8 <__aeabi_lmul>:
 80002c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ca:	46ce      	mov	lr, r9
 80002cc:	4647      	mov	r7, r8
 80002ce:	0415      	lsls	r5, r2, #16
 80002d0:	0c2d      	lsrs	r5, r5, #16
 80002d2:	002e      	movs	r6, r5
 80002d4:	b580      	push	{r7, lr}
 80002d6:	0407      	lsls	r7, r0, #16
 80002d8:	0c14      	lsrs	r4, r2, #16
 80002da:	0c3f      	lsrs	r7, r7, #16
 80002dc:	4699      	mov	r9, r3
 80002de:	0c03      	lsrs	r3, r0, #16
 80002e0:	437e      	muls	r6, r7
 80002e2:	435d      	muls	r5, r3
 80002e4:	4367      	muls	r7, r4
 80002e6:	4363      	muls	r3, r4
 80002e8:	197f      	adds	r7, r7, r5
 80002ea:	0c34      	lsrs	r4, r6, #16
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	469c      	mov	ip, r3
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d903      	bls.n	80002fc <__aeabi_lmul+0x34>
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	025b      	lsls	r3, r3, #9
 80002f8:	4698      	mov	r8, r3
 80002fa:	44c4      	add	ip, r8
 80002fc:	464b      	mov	r3, r9
 80002fe:	4343      	muls	r3, r0
 8000300:	4351      	muls	r1, r2
 8000302:	0c25      	lsrs	r5, r4, #16
 8000304:	0436      	lsls	r6, r6, #16
 8000306:	4465      	add	r5, ip
 8000308:	0c36      	lsrs	r6, r6, #16
 800030a:	0424      	lsls	r4, r4, #16
 800030c:	19a4      	adds	r4, r4, r6
 800030e:	195b      	adds	r3, r3, r5
 8000310:	1859      	adds	r1, r3, r1
 8000312:	0020      	movs	r0, r4
 8000314:	bc0c      	pop	{r2, r3}
 8000316:	4690      	mov	r8, r2
 8000318:	4699      	mov	r9, r3
 800031a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800031c <__aeabi_fadd>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	4647      	mov	r7, r8
 8000320:	46ce      	mov	lr, r9
 8000322:	0243      	lsls	r3, r0, #9
 8000324:	0a5b      	lsrs	r3, r3, #9
 8000326:	0044      	lsls	r4, r0, #1
 8000328:	0fc2      	lsrs	r2, r0, #31
 800032a:	469c      	mov	ip, r3
 800032c:	0048      	lsls	r0, r1, #1
 800032e:	00dd      	lsls	r5, r3, #3
 8000330:	024b      	lsls	r3, r1, #9
 8000332:	0e24      	lsrs	r4, r4, #24
 8000334:	0a5b      	lsrs	r3, r3, #9
 8000336:	0e00      	lsrs	r0, r0, #24
 8000338:	b580      	push	{r7, lr}
 800033a:	4698      	mov	r8, r3
 800033c:	0026      	movs	r6, r4
 800033e:	4691      	mov	r9, r2
 8000340:	0fc9      	lsrs	r1, r1, #31
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	1a27      	subs	r7, r4, r0
 8000346:	428a      	cmp	r2, r1
 8000348:	d029      	beq.n	800039e <__aeabi_fadd+0x82>
 800034a:	2f00      	cmp	r7, #0
 800034c:	dd15      	ble.n	800037a <__aeabi_fadd+0x5e>
 800034e:	2800      	cmp	r0, #0
 8000350:	d14a      	bne.n	80003e8 <__aeabi_fadd+0xcc>
 8000352:	2b00      	cmp	r3, #0
 8000354:	d000      	beq.n	8000358 <__aeabi_fadd+0x3c>
 8000356:	e095      	b.n	8000484 <__aeabi_fadd+0x168>
 8000358:	08ed      	lsrs	r5, r5, #3
 800035a:	2cff      	cmp	r4, #255	; 0xff
 800035c:	d100      	bne.n	8000360 <__aeabi_fadd+0x44>
 800035e:	e088      	b.n	8000472 <__aeabi_fadd+0x156>
 8000360:	026b      	lsls	r3, r5, #9
 8000362:	0a5b      	lsrs	r3, r3, #9
 8000364:	b2e6      	uxtb	r6, r4
 8000366:	025b      	lsls	r3, r3, #9
 8000368:	05f6      	lsls	r6, r6, #23
 800036a:	0a58      	lsrs	r0, r3, #9
 800036c:	4330      	orrs	r0, r6
 800036e:	07d2      	lsls	r2, r2, #31
 8000370:	4310      	orrs	r0, r2
 8000372:	bc0c      	pop	{r2, r3}
 8000374:	4690      	mov	r8, r2
 8000376:	4699      	mov	r9, r3
 8000378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800037a:	2f00      	cmp	r7, #0
 800037c:	d000      	beq.n	8000380 <__aeabi_fadd+0x64>
 800037e:	e087      	b.n	8000490 <__aeabi_fadd+0x174>
 8000380:	1c60      	adds	r0, r4, #1
 8000382:	b2c0      	uxtb	r0, r0
 8000384:	2801      	cmp	r0, #1
 8000386:	dc00      	bgt.n	800038a <__aeabi_fadd+0x6e>
 8000388:	e0b6      	b.n	80004f8 <__aeabi_fadd+0x1dc>
 800038a:	1aee      	subs	r6, r5, r3
 800038c:	0172      	lsls	r2, r6, #5
 800038e:	d500      	bpl.n	8000392 <__aeabi_fadd+0x76>
 8000390:	e0c5      	b.n	800051e <__aeabi_fadd+0x202>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d13d      	bne.n	8000412 <__aeabi_fadd+0xf6>
 8000396:	2200      	movs	r2, #0
 8000398:	2600      	movs	r6, #0
 800039a:	2300      	movs	r3, #0
 800039c:	e7e3      	b.n	8000366 <__aeabi_fadd+0x4a>
 800039e:	2f00      	cmp	r7, #0
 80003a0:	dc00      	bgt.n	80003a4 <__aeabi_fadd+0x88>
 80003a2:	e096      	b.n	80004d2 <__aeabi_fadd+0x1b6>
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d05d      	beq.n	8000464 <__aeabi_fadd+0x148>
 80003a8:	2cff      	cmp	r4, #255	; 0xff
 80003aa:	d060      	beq.n	800046e <__aeabi_fadd+0x152>
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	04d2      	lsls	r2, r2, #19
 80003b0:	4313      	orrs	r3, r2
 80003b2:	2f1b      	cmp	r7, #27
 80003b4:	dd00      	ble.n	80003b8 <__aeabi_fadd+0x9c>
 80003b6:	e0ec      	b.n	8000592 <__aeabi_fadd+0x276>
 80003b8:	2220      	movs	r2, #32
 80003ba:	1bd2      	subs	r2, r2, r7
 80003bc:	0018      	movs	r0, r3
 80003be:	4093      	lsls	r3, r2
 80003c0:	40f8      	lsrs	r0, r7
 80003c2:	1e5a      	subs	r2, r3, #1
 80003c4:	4193      	sbcs	r3, r2
 80003c6:	4303      	orrs	r3, r0
 80003c8:	18ed      	adds	r5, r5, r3
 80003ca:	016b      	lsls	r3, r5, #5
 80003cc:	d57b      	bpl.n	80004c6 <__aeabi_fadd+0x1aa>
 80003ce:	3401      	adds	r4, #1
 80003d0:	2cff      	cmp	r4, #255	; 0xff
 80003d2:	d100      	bne.n	80003d6 <__aeabi_fadd+0xba>
 80003d4:	e0b7      	b.n	8000546 <__aeabi_fadd+0x22a>
 80003d6:	2201      	movs	r2, #1
 80003d8:	2607      	movs	r6, #7
 80003da:	402a      	ands	r2, r5
 80003dc:	086b      	lsrs	r3, r5, #1
 80003de:	4d9a      	ldr	r5, [pc, #616]	; (8000648 <__aeabi_fadd+0x32c>)
 80003e0:	401d      	ands	r5, r3
 80003e2:	4315      	orrs	r5, r2
 80003e4:	402e      	ands	r6, r5
 80003e6:	e029      	b.n	800043c <__aeabi_fadd+0x120>
 80003e8:	2cff      	cmp	r4, #255	; 0xff
 80003ea:	d0b5      	beq.n	8000358 <__aeabi_fadd+0x3c>
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	04d2      	lsls	r2, r2, #19
 80003f0:	4313      	orrs	r3, r2
 80003f2:	2f1b      	cmp	r7, #27
 80003f4:	dd00      	ble.n	80003f8 <__aeabi_fadd+0xdc>
 80003f6:	e0b2      	b.n	800055e <__aeabi_fadd+0x242>
 80003f8:	2220      	movs	r2, #32
 80003fa:	1bd2      	subs	r2, r2, r7
 80003fc:	0019      	movs	r1, r3
 80003fe:	4093      	lsls	r3, r2
 8000400:	40f9      	lsrs	r1, r7
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	4193      	sbcs	r3, r2
 8000406:	430b      	orrs	r3, r1
 8000408:	1aed      	subs	r5, r5, r3
 800040a:	016b      	lsls	r3, r5, #5
 800040c:	d55b      	bpl.n	80004c6 <__aeabi_fadd+0x1aa>
 800040e:	01ad      	lsls	r5, r5, #6
 8000410:	09ae      	lsrs	r6, r5, #6
 8000412:	0030      	movs	r0, r6
 8000414:	f7ff ff3a 	bl	800028c <__clzsi2>
 8000418:	3805      	subs	r0, #5
 800041a:	4086      	lsls	r6, r0
 800041c:	4284      	cmp	r4, r0
 800041e:	dc65      	bgt.n	80004ec <__aeabi_fadd+0x1d0>
 8000420:	1b04      	subs	r4, r0, r4
 8000422:	0033      	movs	r3, r6
 8000424:	2020      	movs	r0, #32
 8000426:	3401      	adds	r4, #1
 8000428:	40e3      	lsrs	r3, r4
 800042a:	1b04      	subs	r4, r0, r4
 800042c:	40a6      	lsls	r6, r4
 800042e:	1e75      	subs	r5, r6, #1
 8000430:	41ae      	sbcs	r6, r5
 8000432:	4333      	orrs	r3, r6
 8000434:	2607      	movs	r6, #7
 8000436:	001d      	movs	r5, r3
 8000438:	2400      	movs	r4, #0
 800043a:	401e      	ands	r6, r3
 800043c:	2201      	movs	r2, #1
 800043e:	464b      	mov	r3, r9
 8000440:	401a      	ands	r2, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d004      	beq.n	8000450 <__aeabi_fadd+0x134>
 8000446:	230f      	movs	r3, #15
 8000448:	402b      	ands	r3, r5
 800044a:	2b04      	cmp	r3, #4
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x134>
 800044e:	3504      	adds	r5, #4
 8000450:	016b      	lsls	r3, r5, #5
 8000452:	d400      	bmi.n	8000456 <__aeabi_fadd+0x13a>
 8000454:	e780      	b.n	8000358 <__aeabi_fadd+0x3c>
 8000456:	3401      	adds	r4, #1
 8000458:	b2e6      	uxtb	r6, r4
 800045a:	2cff      	cmp	r4, #255	; 0xff
 800045c:	d12f      	bne.n	80004be <__aeabi_fadd+0x1a2>
 800045e:	26ff      	movs	r6, #255	; 0xff
 8000460:	2300      	movs	r3, #0
 8000462:	e780      	b.n	8000366 <__aeabi_fadd+0x4a>
 8000464:	2b00      	cmp	r3, #0
 8000466:	d152      	bne.n	800050e <__aeabi_fadd+0x1f2>
 8000468:	2cff      	cmp	r4, #255	; 0xff
 800046a:	d000      	beq.n	800046e <__aeabi_fadd+0x152>
 800046c:	e774      	b.n	8000358 <__aeabi_fadd+0x3c>
 800046e:	000a      	movs	r2, r1
 8000470:	08ed      	lsrs	r5, r5, #3
 8000472:	2d00      	cmp	r5, #0
 8000474:	d0f3      	beq.n	800045e <__aeabi_fadd+0x142>
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	03db      	lsls	r3, r3, #15
 800047a:	432b      	orrs	r3, r5
 800047c:	025b      	lsls	r3, r3, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	26ff      	movs	r6, #255	; 0xff
 8000482:	e770      	b.n	8000366 <__aeabi_fadd+0x4a>
 8000484:	3f01      	subs	r7, #1
 8000486:	2f00      	cmp	r7, #0
 8000488:	d0be      	beq.n	8000408 <__aeabi_fadd+0xec>
 800048a:	2cff      	cmp	r4, #255	; 0xff
 800048c:	d1b1      	bne.n	80003f2 <__aeabi_fadd+0xd6>
 800048e:	e763      	b.n	8000358 <__aeabi_fadd+0x3c>
 8000490:	2c00      	cmp	r4, #0
 8000492:	d047      	beq.n	8000524 <__aeabi_fadd+0x208>
 8000494:	28ff      	cmp	r0, #255	; 0xff
 8000496:	d069      	beq.n	800056c <__aeabi_fadd+0x250>
 8000498:	2480      	movs	r4, #128	; 0x80
 800049a:	04e4      	lsls	r4, r4, #19
 800049c:	427a      	negs	r2, r7
 800049e:	4325      	orrs	r5, r4
 80004a0:	2a1b      	cmp	r2, #27
 80004a2:	dd00      	ble.n	80004a6 <__aeabi_fadd+0x18a>
 80004a4:	e0c5      	b.n	8000632 <__aeabi_fadd+0x316>
 80004a6:	002c      	movs	r4, r5
 80004a8:	2620      	movs	r6, #32
 80004aa:	40d4      	lsrs	r4, r2
 80004ac:	1ab2      	subs	r2, r6, r2
 80004ae:	4095      	lsls	r5, r2
 80004b0:	1e6a      	subs	r2, r5, #1
 80004b2:	4195      	sbcs	r5, r2
 80004b4:	4325      	orrs	r5, r4
 80004b6:	1b5d      	subs	r5, r3, r5
 80004b8:	0004      	movs	r4, r0
 80004ba:	4689      	mov	r9, r1
 80004bc:	e7a5      	b.n	800040a <__aeabi_fadd+0xee>
 80004be:	01ab      	lsls	r3, r5, #6
 80004c0:	0a5b      	lsrs	r3, r3, #9
 80004c2:	e750      	b.n	8000366 <__aeabi_fadd+0x4a>
 80004c4:	2400      	movs	r4, #0
 80004c6:	2201      	movs	r2, #1
 80004c8:	464b      	mov	r3, r9
 80004ca:	401a      	ands	r2, r3
 80004cc:	076b      	lsls	r3, r5, #29
 80004ce:	d1ba      	bne.n	8000446 <__aeabi_fadd+0x12a>
 80004d0:	e742      	b.n	8000358 <__aeabi_fadd+0x3c>
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d13b      	bne.n	800054e <__aeabi_fadd+0x232>
 80004d6:	3401      	adds	r4, #1
 80004d8:	b2e0      	uxtb	r0, r4
 80004da:	2801      	cmp	r0, #1
 80004dc:	dd4a      	ble.n	8000574 <__aeabi_fadd+0x258>
 80004de:	2cff      	cmp	r4, #255	; 0xff
 80004e0:	d0bd      	beq.n	800045e <__aeabi_fadd+0x142>
 80004e2:	2607      	movs	r6, #7
 80004e4:	18ed      	adds	r5, r5, r3
 80004e6:	086d      	lsrs	r5, r5, #1
 80004e8:	402e      	ands	r6, r5
 80004ea:	e7a7      	b.n	800043c <__aeabi_fadd+0x120>
 80004ec:	2307      	movs	r3, #7
 80004ee:	4d57      	ldr	r5, [pc, #348]	; (800064c <__aeabi_fadd+0x330>)
 80004f0:	1a24      	subs	r4, r4, r0
 80004f2:	4035      	ands	r5, r6
 80004f4:	401e      	ands	r6, r3
 80004f6:	e7a1      	b.n	800043c <__aeabi_fadd+0x120>
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d11b      	bne.n	8000534 <__aeabi_fadd+0x218>
 80004fc:	2d00      	cmp	r5, #0
 80004fe:	d16e      	bne.n	80005de <__aeabi_fadd+0x2c2>
 8000500:	2b00      	cmp	r3, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_fadd+0x1ea>
 8000504:	e09a      	b.n	800063c <__aeabi_fadd+0x320>
 8000506:	000a      	movs	r2, r1
 8000508:	001d      	movs	r5, r3
 800050a:	003c      	movs	r4, r7
 800050c:	e724      	b.n	8000358 <__aeabi_fadd+0x3c>
 800050e:	3f01      	subs	r7, #1
 8000510:	2f00      	cmp	r7, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x1fa>
 8000514:	e758      	b.n	80003c8 <__aeabi_fadd+0xac>
 8000516:	2cff      	cmp	r4, #255	; 0xff
 8000518:	d000      	beq.n	800051c <__aeabi_fadd+0x200>
 800051a:	e74a      	b.n	80003b2 <__aeabi_fadd+0x96>
 800051c:	e7a7      	b.n	800046e <__aeabi_fadd+0x152>
 800051e:	1b5e      	subs	r6, r3, r5
 8000520:	4689      	mov	r9, r1
 8000522:	e776      	b.n	8000412 <__aeabi_fadd+0xf6>
 8000524:	2d00      	cmp	r5, #0
 8000526:	d11c      	bne.n	8000562 <__aeabi_fadd+0x246>
 8000528:	000a      	movs	r2, r1
 800052a:	28ff      	cmp	r0, #255	; 0xff
 800052c:	d01f      	beq.n	800056e <__aeabi_fadd+0x252>
 800052e:	0004      	movs	r4, r0
 8000530:	001d      	movs	r5, r3
 8000532:	e711      	b.n	8000358 <__aeabi_fadd+0x3c>
 8000534:	2d00      	cmp	r5, #0
 8000536:	d15d      	bne.n	80005f4 <__aeabi_fadd+0x2d8>
 8000538:	2b00      	cmp	r3, #0
 800053a:	d117      	bne.n	800056c <__aeabi_fadd+0x250>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	2200      	movs	r2, #0
 8000540:	03db      	lsls	r3, r3, #15
 8000542:	26ff      	movs	r6, #255	; 0xff
 8000544:	e70f      	b.n	8000366 <__aeabi_fadd+0x4a>
 8000546:	000a      	movs	r2, r1
 8000548:	26ff      	movs	r6, #255	; 0xff
 800054a:	2300      	movs	r3, #0
 800054c:	e70b      	b.n	8000366 <__aeabi_fadd+0x4a>
 800054e:	2c00      	cmp	r4, #0
 8000550:	d121      	bne.n	8000596 <__aeabi_fadd+0x27a>
 8000552:	2d00      	cmp	r5, #0
 8000554:	d166      	bne.n	8000624 <__aeabi_fadd+0x308>
 8000556:	28ff      	cmp	r0, #255	; 0xff
 8000558:	d1e9      	bne.n	800052e <__aeabi_fadd+0x212>
 800055a:	001d      	movs	r5, r3
 800055c:	e787      	b.n	800046e <__aeabi_fadd+0x152>
 800055e:	2301      	movs	r3, #1
 8000560:	e752      	b.n	8000408 <__aeabi_fadd+0xec>
 8000562:	1c7a      	adds	r2, r7, #1
 8000564:	d0a7      	beq.n	80004b6 <__aeabi_fadd+0x19a>
 8000566:	43fa      	mvns	r2, r7
 8000568:	28ff      	cmp	r0, #255	; 0xff
 800056a:	d199      	bne.n	80004a0 <__aeabi_fadd+0x184>
 800056c:	000a      	movs	r2, r1
 800056e:	001d      	movs	r5, r3
 8000570:	24ff      	movs	r4, #255	; 0xff
 8000572:	e6f1      	b.n	8000358 <__aeabi_fadd+0x3c>
 8000574:	2e00      	cmp	r6, #0
 8000576:	d121      	bne.n	80005bc <__aeabi_fadd+0x2a0>
 8000578:	2d00      	cmp	r5, #0
 800057a:	d04f      	beq.n	800061c <__aeabi_fadd+0x300>
 800057c:	2b00      	cmp	r3, #0
 800057e:	d04c      	beq.n	800061a <__aeabi_fadd+0x2fe>
 8000580:	18ed      	adds	r5, r5, r3
 8000582:	016b      	lsls	r3, r5, #5
 8000584:	d59e      	bpl.n	80004c4 <__aeabi_fadd+0x1a8>
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <__aeabi_fadd+0x330>)
 8000588:	3607      	adds	r6, #7
 800058a:	402e      	ands	r6, r5
 800058c:	2401      	movs	r4, #1
 800058e:	401d      	ands	r5, r3
 8000590:	e754      	b.n	800043c <__aeabi_fadd+0x120>
 8000592:	2301      	movs	r3, #1
 8000594:	e718      	b.n	80003c8 <__aeabi_fadd+0xac>
 8000596:	28ff      	cmp	r0, #255	; 0xff
 8000598:	d0df      	beq.n	800055a <__aeabi_fadd+0x23e>
 800059a:	2480      	movs	r4, #128	; 0x80
 800059c:	04e4      	lsls	r4, r4, #19
 800059e:	427f      	negs	r7, r7
 80005a0:	4325      	orrs	r5, r4
 80005a2:	2f1b      	cmp	r7, #27
 80005a4:	dc4d      	bgt.n	8000642 <__aeabi_fadd+0x326>
 80005a6:	2620      	movs	r6, #32
 80005a8:	1bf6      	subs	r6, r6, r7
 80005aa:	002c      	movs	r4, r5
 80005ac:	40b5      	lsls	r5, r6
 80005ae:	40fc      	lsrs	r4, r7
 80005b0:	1e6a      	subs	r2, r5, #1
 80005b2:	4195      	sbcs	r5, r2
 80005b4:	4325      	orrs	r5, r4
 80005b6:	18ed      	adds	r5, r5, r3
 80005b8:	0004      	movs	r4, r0
 80005ba:	e706      	b.n	80003ca <__aeabi_fadd+0xae>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d0cc      	beq.n	800055a <__aeabi_fadd+0x23e>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d100      	bne.n	80005c6 <__aeabi_fadd+0x2aa>
 80005c4:	e753      	b.n	800046e <__aeabi_fadd+0x152>
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4660      	mov	r0, ip
 80005ca:	03c9      	lsls	r1, r1, #15
 80005cc:	4208      	tst	r0, r1
 80005ce:	d003      	beq.n	80005d8 <__aeabi_fadd+0x2bc>
 80005d0:	4640      	mov	r0, r8
 80005d2:	4208      	tst	r0, r1
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x2bc>
 80005d6:	001d      	movs	r5, r3
 80005d8:	2101      	movs	r1, #1
 80005da:	4011      	ands	r1, r2
 80005dc:	e747      	b.n	800046e <__aeabi_fadd+0x152>
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fadd+0x2c8>
 80005e2:	e6b9      	b.n	8000358 <__aeabi_fadd+0x3c>
 80005e4:	1aea      	subs	r2, r5, r3
 80005e6:	0150      	lsls	r0, r2, #5
 80005e8:	d525      	bpl.n	8000636 <__aeabi_fadd+0x31a>
 80005ea:	2607      	movs	r6, #7
 80005ec:	1b5d      	subs	r5, r3, r5
 80005ee:	402e      	ands	r6, r5
 80005f0:	4689      	mov	r9, r1
 80005f2:	e723      	b.n	800043c <__aeabi_fadd+0x120>
 80005f4:	24ff      	movs	r4, #255	; 0xff
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d100      	bne.n	80005fc <__aeabi_fadd+0x2e0>
 80005fa:	e6ad      	b.n	8000358 <__aeabi_fadd+0x3c>
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	4660      	mov	r0, ip
 8000600:	03d2      	lsls	r2, r2, #15
 8000602:	4210      	tst	r0, r2
 8000604:	d004      	beq.n	8000610 <__aeabi_fadd+0x2f4>
 8000606:	4640      	mov	r0, r8
 8000608:	4210      	tst	r0, r2
 800060a:	d101      	bne.n	8000610 <__aeabi_fadd+0x2f4>
 800060c:	001d      	movs	r5, r3
 800060e:	4689      	mov	r9, r1
 8000610:	2201      	movs	r2, #1
 8000612:	464b      	mov	r3, r9
 8000614:	24ff      	movs	r4, #255	; 0xff
 8000616:	401a      	ands	r2, r3
 8000618:	e69e      	b.n	8000358 <__aeabi_fadd+0x3c>
 800061a:	002b      	movs	r3, r5
 800061c:	08dd      	lsrs	r5, r3, #3
 800061e:	000a      	movs	r2, r1
 8000620:	2400      	movs	r4, #0
 8000622:	e69d      	b.n	8000360 <__aeabi_fadd+0x44>
 8000624:	1c7a      	adds	r2, r7, #1
 8000626:	d0c6      	beq.n	80005b6 <__aeabi_fadd+0x29a>
 8000628:	43ff      	mvns	r7, r7
 800062a:	28ff      	cmp	r0, #255	; 0xff
 800062c:	d1b9      	bne.n	80005a2 <__aeabi_fadd+0x286>
 800062e:	001d      	movs	r5, r3
 8000630:	e71d      	b.n	800046e <__aeabi_fadd+0x152>
 8000632:	2501      	movs	r5, #1
 8000634:	e73f      	b.n	80004b6 <__aeabi_fadd+0x19a>
 8000636:	1e15      	subs	r5, r2, #0
 8000638:	d000      	beq.n	800063c <__aeabi_fadd+0x320>
 800063a:	e744      	b.n	80004c6 <__aeabi_fadd+0x1aa>
 800063c:	2200      	movs	r2, #0
 800063e:	2300      	movs	r3, #0
 8000640:	e691      	b.n	8000366 <__aeabi_fadd+0x4a>
 8000642:	2501      	movs	r5, #1
 8000644:	e7b7      	b.n	80005b6 <__aeabi_fadd+0x29a>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	7dffffff 	.word	0x7dffffff
 800064c:	fbffffff 	.word	0xfbffffff

08000650 <__eqsf2>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	0042      	lsls	r2, r0, #1
 8000654:	024e      	lsls	r6, r1, #9
 8000656:	004c      	lsls	r4, r1, #1
 8000658:	0245      	lsls	r5, r0, #9
 800065a:	0a6d      	lsrs	r5, r5, #9
 800065c:	0e12      	lsrs	r2, r2, #24
 800065e:	0fc3      	lsrs	r3, r0, #31
 8000660:	0a76      	lsrs	r6, r6, #9
 8000662:	0e24      	lsrs	r4, r4, #24
 8000664:	0fc9      	lsrs	r1, r1, #31
 8000666:	2aff      	cmp	r2, #255	; 0xff
 8000668:	d00f      	beq.n	800068a <__eqsf2+0x3a>
 800066a:	2cff      	cmp	r4, #255	; 0xff
 800066c:	d011      	beq.n	8000692 <__eqsf2+0x42>
 800066e:	2001      	movs	r0, #1
 8000670:	42a2      	cmp	r2, r4
 8000672:	d000      	beq.n	8000676 <__eqsf2+0x26>
 8000674:	bd70      	pop	{r4, r5, r6, pc}
 8000676:	42b5      	cmp	r5, r6
 8000678:	d1fc      	bne.n	8000674 <__eqsf2+0x24>
 800067a:	428b      	cmp	r3, r1
 800067c:	d00d      	beq.n	800069a <__eqsf2+0x4a>
 800067e:	2a00      	cmp	r2, #0
 8000680:	d1f8      	bne.n	8000674 <__eqsf2+0x24>
 8000682:	0028      	movs	r0, r5
 8000684:	1e45      	subs	r5, r0, #1
 8000686:	41a8      	sbcs	r0, r5
 8000688:	e7f4      	b.n	8000674 <__eqsf2+0x24>
 800068a:	2001      	movs	r0, #1
 800068c:	2d00      	cmp	r5, #0
 800068e:	d1f1      	bne.n	8000674 <__eqsf2+0x24>
 8000690:	e7eb      	b.n	800066a <__eqsf2+0x1a>
 8000692:	2001      	movs	r0, #1
 8000694:	2e00      	cmp	r6, #0
 8000696:	d1ed      	bne.n	8000674 <__eqsf2+0x24>
 8000698:	e7e9      	b.n	800066e <__eqsf2+0x1e>
 800069a:	2000      	movs	r0, #0
 800069c:	e7ea      	b.n	8000674 <__eqsf2+0x24>
 800069e:	46c0      	nop			; (mov r8, r8)

080006a0 <__gesf2>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	004a      	lsls	r2, r1, #1
 80006a4:	024e      	lsls	r6, r1, #9
 80006a6:	0245      	lsls	r5, r0, #9
 80006a8:	0044      	lsls	r4, r0, #1
 80006aa:	0a6d      	lsrs	r5, r5, #9
 80006ac:	0e24      	lsrs	r4, r4, #24
 80006ae:	0fc3      	lsrs	r3, r0, #31
 80006b0:	0a76      	lsrs	r6, r6, #9
 80006b2:	0e12      	lsrs	r2, r2, #24
 80006b4:	0fc9      	lsrs	r1, r1, #31
 80006b6:	2cff      	cmp	r4, #255	; 0xff
 80006b8:	d015      	beq.n	80006e6 <__gesf2+0x46>
 80006ba:	2aff      	cmp	r2, #255	; 0xff
 80006bc:	d00e      	beq.n	80006dc <__gesf2+0x3c>
 80006be:	2c00      	cmp	r4, #0
 80006c0:	d115      	bne.n	80006ee <__gesf2+0x4e>
 80006c2:	2a00      	cmp	r2, #0
 80006c4:	d101      	bne.n	80006ca <__gesf2+0x2a>
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d01c      	beq.n	8000704 <__gesf2+0x64>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	d014      	beq.n	80006f8 <__gesf2+0x58>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d027      	beq.n	8000722 <__gesf2+0x82>
 80006d2:	2002      	movs	r0, #2
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4018      	ands	r0, r3
 80006d8:	3801      	subs	r0, #1
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d0ee      	beq.n	80006be <__gesf2+0x1e>
 80006e0:	2002      	movs	r0, #2
 80006e2:	4240      	negs	r0, r0
 80006e4:	e7f9      	b.n	80006da <__gesf2+0x3a>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d1fa      	bne.n	80006e0 <__gesf2+0x40>
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d00e      	beq.n	800070c <__gesf2+0x6c>
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d10e      	bne.n	8000710 <__gesf2+0x70>
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d0ed      	beq.n	80006d2 <__gesf2+0x32>
 80006f6:	e00b      	b.n	8000710 <__gesf2+0x70>
 80006f8:	2301      	movs	r3, #1
 80006fa:	3901      	subs	r1, #1
 80006fc:	4399      	bics	r1, r3
 80006fe:	0008      	movs	r0, r1
 8000700:	3001      	adds	r0, #1
 8000702:	e7ea      	b.n	80006da <__gesf2+0x3a>
 8000704:	2000      	movs	r0, #0
 8000706:	2d00      	cmp	r5, #0
 8000708:	d0e7      	beq.n	80006da <__gesf2+0x3a>
 800070a:	e7e2      	b.n	80006d2 <__gesf2+0x32>
 800070c:	2e00      	cmp	r6, #0
 800070e:	d1e7      	bne.n	80006e0 <__gesf2+0x40>
 8000710:	428b      	cmp	r3, r1
 8000712:	d1de      	bne.n	80006d2 <__gesf2+0x32>
 8000714:	4294      	cmp	r4, r2
 8000716:	dd05      	ble.n	8000724 <__gesf2+0x84>
 8000718:	2102      	movs	r1, #2
 800071a:	1e58      	subs	r0, r3, #1
 800071c:	4008      	ands	r0, r1
 800071e:	3801      	subs	r0, #1
 8000720:	e7db      	b.n	80006da <__gesf2+0x3a>
 8000722:	2400      	movs	r4, #0
 8000724:	42a2      	cmp	r2, r4
 8000726:	dc04      	bgt.n	8000732 <__gesf2+0x92>
 8000728:	42b5      	cmp	r5, r6
 800072a:	d8d2      	bhi.n	80006d2 <__gesf2+0x32>
 800072c:	2000      	movs	r0, #0
 800072e:	42b5      	cmp	r5, r6
 8000730:	d2d3      	bcs.n	80006da <__gesf2+0x3a>
 8000732:	1e58      	subs	r0, r3, #1
 8000734:	2301      	movs	r3, #1
 8000736:	4398      	bics	r0, r3
 8000738:	3001      	adds	r0, #1
 800073a:	e7ce      	b.n	80006da <__gesf2+0x3a>

0800073c <__lesf2>:
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	0042      	lsls	r2, r0, #1
 8000740:	0244      	lsls	r4, r0, #9
 8000742:	024d      	lsls	r5, r1, #9
 8000744:	0fc3      	lsrs	r3, r0, #31
 8000746:	0048      	lsls	r0, r1, #1
 8000748:	0a64      	lsrs	r4, r4, #9
 800074a:	0e12      	lsrs	r2, r2, #24
 800074c:	0a6d      	lsrs	r5, r5, #9
 800074e:	0e00      	lsrs	r0, r0, #24
 8000750:	0fc9      	lsrs	r1, r1, #31
 8000752:	2aff      	cmp	r2, #255	; 0xff
 8000754:	d012      	beq.n	800077c <__lesf2+0x40>
 8000756:	28ff      	cmp	r0, #255	; 0xff
 8000758:	d00c      	beq.n	8000774 <__lesf2+0x38>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d112      	bne.n	8000784 <__lesf2+0x48>
 800075e:	2800      	cmp	r0, #0
 8000760:	d119      	bne.n	8000796 <__lesf2+0x5a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d117      	bne.n	8000796 <__lesf2+0x5a>
 8000766:	2c00      	cmp	r4, #0
 8000768:	d02b      	beq.n	80007c2 <__lesf2+0x86>
 800076a:	2002      	movs	r0, #2
 800076c:	3b01      	subs	r3, #1
 800076e:	4018      	ands	r0, r3
 8000770:	3801      	subs	r0, #1
 8000772:	e026      	b.n	80007c2 <__lesf2+0x86>
 8000774:	2d00      	cmp	r5, #0
 8000776:	d0f0      	beq.n	800075a <__lesf2+0x1e>
 8000778:	2002      	movs	r0, #2
 800077a:	e022      	b.n	80007c2 <__lesf2+0x86>
 800077c:	2c00      	cmp	r4, #0
 800077e:	d1fb      	bne.n	8000778 <__lesf2+0x3c>
 8000780:	28ff      	cmp	r0, #255	; 0xff
 8000782:	d01f      	beq.n	80007c4 <__lesf2+0x88>
 8000784:	2800      	cmp	r0, #0
 8000786:	d11f      	bne.n	80007c8 <__lesf2+0x8c>
 8000788:	2d00      	cmp	r5, #0
 800078a:	d11d      	bne.n	80007c8 <__lesf2+0x8c>
 800078c:	2002      	movs	r0, #2
 800078e:	3b01      	subs	r3, #1
 8000790:	4018      	ands	r0, r3
 8000792:	3801      	subs	r0, #1
 8000794:	e015      	b.n	80007c2 <__lesf2+0x86>
 8000796:	2c00      	cmp	r4, #0
 8000798:	d00e      	beq.n	80007b8 <__lesf2+0x7c>
 800079a:	428b      	cmp	r3, r1
 800079c:	d1e5      	bne.n	800076a <__lesf2+0x2e>
 800079e:	2200      	movs	r2, #0
 80007a0:	4290      	cmp	r0, r2
 80007a2:	dc04      	bgt.n	80007ae <__lesf2+0x72>
 80007a4:	42ac      	cmp	r4, r5
 80007a6:	d8e0      	bhi.n	800076a <__lesf2+0x2e>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42ac      	cmp	r4, r5
 80007ac:	d209      	bcs.n	80007c2 <__lesf2+0x86>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e004      	b.n	80007c2 <__lesf2+0x86>
 80007b8:	2301      	movs	r3, #1
 80007ba:	3901      	subs	r1, #1
 80007bc:	4399      	bics	r1, r3
 80007be:	0008      	movs	r0, r1
 80007c0:	3001      	adds	r0, #1
 80007c2:	bd30      	pop	{r4, r5, pc}
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d1d7      	bne.n	8000778 <__lesf2+0x3c>
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d1ce      	bne.n	800076a <__lesf2+0x2e>
 80007cc:	4282      	cmp	r2, r0
 80007ce:	dde7      	ble.n	80007a0 <__lesf2+0x64>
 80007d0:	2102      	movs	r1, #2
 80007d2:	1e58      	subs	r0, r3, #1
 80007d4:	4008      	ands	r0, r1
 80007d6:	3801      	subs	r0, #1
 80007d8:	e7f3      	b.n	80007c2 <__lesf2+0x86>
 80007da:	46c0      	nop			; (mov r8, r8)

080007dc <__aeabi_fmul>:
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	464e      	mov	r6, r9
 80007e0:	4657      	mov	r7, sl
 80007e2:	4645      	mov	r5, r8
 80007e4:	46de      	mov	lr, fp
 80007e6:	b5e0      	push	{r5, r6, r7, lr}
 80007e8:	0243      	lsls	r3, r0, #9
 80007ea:	0a5b      	lsrs	r3, r3, #9
 80007ec:	0045      	lsls	r5, r0, #1
 80007ee:	b083      	sub	sp, #12
 80007f0:	1c0f      	adds	r7, r1, #0
 80007f2:	4699      	mov	r9, r3
 80007f4:	0e2d      	lsrs	r5, r5, #24
 80007f6:	0fc6      	lsrs	r6, r0, #31
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d057      	beq.n	80008ac <__aeabi_fmul+0xd0>
 80007fc:	2dff      	cmp	r5, #255	; 0xff
 80007fe:	d024      	beq.n	800084a <__aeabi_fmul+0x6e>
 8000800:	2080      	movs	r0, #128	; 0x80
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	04c0      	lsls	r0, r0, #19
 8000806:	4318      	orrs	r0, r3
 8000808:	2300      	movs	r3, #0
 800080a:	4681      	mov	r9, r0
 800080c:	469a      	mov	sl, r3
 800080e:	469b      	mov	fp, r3
 8000810:	3d7f      	subs	r5, #127	; 0x7f
 8000812:	027c      	lsls	r4, r7, #9
 8000814:	007a      	lsls	r2, r7, #1
 8000816:	0ffb      	lsrs	r3, r7, #31
 8000818:	0a64      	lsrs	r4, r4, #9
 800081a:	0e12      	lsrs	r2, r2, #24
 800081c:	4698      	mov	r8, r3
 800081e:	d023      	beq.n	8000868 <__aeabi_fmul+0x8c>
 8000820:	2aff      	cmp	r2, #255	; 0xff
 8000822:	d04b      	beq.n	80008bc <__aeabi_fmul+0xe0>
 8000824:	00e3      	lsls	r3, r4, #3
 8000826:	2480      	movs	r4, #128	; 0x80
 8000828:	2000      	movs	r0, #0
 800082a:	04e4      	lsls	r4, r4, #19
 800082c:	3a7f      	subs	r2, #127	; 0x7f
 800082e:	431c      	orrs	r4, r3
 8000830:	18ad      	adds	r5, r5, r2
 8000832:	1c6b      	adds	r3, r5, #1
 8000834:	4647      	mov	r7, r8
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	4653      	mov	r3, sl
 800083a:	4077      	eors	r7, r6
 800083c:	003a      	movs	r2, r7
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d848      	bhi.n	80008d4 <__aeabi_fmul+0xf8>
 8000842:	497d      	ldr	r1, [pc, #500]	; (8000a38 <__aeabi_fmul+0x25c>)
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	58cb      	ldr	r3, [r1, r3]
 8000848:	469f      	mov	pc, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fmul+0x74>
 800084e:	e085      	b.n	800095c <__aeabi_fmul+0x180>
 8000850:	3308      	adds	r3, #8
 8000852:	469a      	mov	sl, r3
 8000854:	3b06      	subs	r3, #6
 8000856:	469b      	mov	fp, r3
 8000858:	027c      	lsls	r4, r7, #9
 800085a:	007a      	lsls	r2, r7, #1
 800085c:	0ffb      	lsrs	r3, r7, #31
 800085e:	25ff      	movs	r5, #255	; 0xff
 8000860:	0a64      	lsrs	r4, r4, #9
 8000862:	0e12      	lsrs	r2, r2, #24
 8000864:	4698      	mov	r8, r3
 8000866:	d1db      	bne.n	8000820 <__aeabi_fmul+0x44>
 8000868:	2c00      	cmp	r4, #0
 800086a:	d000      	beq.n	800086e <__aeabi_fmul+0x92>
 800086c:	e090      	b.n	8000990 <__aeabi_fmul+0x1b4>
 800086e:	4652      	mov	r2, sl
 8000870:	2301      	movs	r3, #1
 8000872:	431a      	orrs	r2, r3
 8000874:	4692      	mov	sl, r2
 8000876:	2001      	movs	r0, #1
 8000878:	e7db      	b.n	8000832 <__aeabi_fmul+0x56>
 800087a:	464c      	mov	r4, r9
 800087c:	4658      	mov	r0, fp
 800087e:	0017      	movs	r7, r2
 8000880:	2802      	cmp	r0, #2
 8000882:	d024      	beq.n	80008ce <__aeabi_fmul+0xf2>
 8000884:	2803      	cmp	r0, #3
 8000886:	d100      	bne.n	800088a <__aeabi_fmul+0xae>
 8000888:	e0cf      	b.n	8000a2a <__aeabi_fmul+0x24e>
 800088a:	2200      	movs	r2, #0
 800088c:	2300      	movs	r3, #0
 800088e:	2801      	cmp	r0, #1
 8000890:	d14d      	bne.n	800092e <__aeabi_fmul+0x152>
 8000892:	0258      	lsls	r0, r3, #9
 8000894:	05d2      	lsls	r2, r2, #23
 8000896:	0a40      	lsrs	r0, r0, #9
 8000898:	07ff      	lsls	r7, r7, #31
 800089a:	4310      	orrs	r0, r2
 800089c:	4338      	orrs	r0, r7
 800089e:	b003      	add	sp, #12
 80008a0:	bc3c      	pop	{r2, r3, r4, r5}
 80008a2:	4690      	mov	r8, r2
 80008a4:	4699      	mov	r9, r3
 80008a6:	46a2      	mov	sl, r4
 80008a8:	46ab      	mov	fp, r5
 80008aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d15b      	bne.n	8000968 <__aeabi_fmul+0x18c>
 80008b0:	2304      	movs	r3, #4
 80008b2:	469a      	mov	sl, r3
 80008b4:	3b03      	subs	r3, #3
 80008b6:	2500      	movs	r5, #0
 80008b8:	469b      	mov	fp, r3
 80008ba:	e7aa      	b.n	8000812 <__aeabi_fmul+0x36>
 80008bc:	35ff      	adds	r5, #255	; 0xff
 80008be:	2c00      	cmp	r4, #0
 80008c0:	d160      	bne.n	8000984 <__aeabi_fmul+0x1a8>
 80008c2:	4652      	mov	r2, sl
 80008c4:	2302      	movs	r3, #2
 80008c6:	431a      	orrs	r2, r3
 80008c8:	4692      	mov	sl, r2
 80008ca:	2002      	movs	r0, #2
 80008cc:	e7b1      	b.n	8000832 <__aeabi_fmul+0x56>
 80008ce:	22ff      	movs	r2, #255	; 0xff
 80008d0:	2300      	movs	r3, #0
 80008d2:	e7de      	b.n	8000892 <__aeabi_fmul+0xb6>
 80008d4:	464b      	mov	r3, r9
 80008d6:	0c1b      	lsrs	r3, r3, #16
 80008d8:	469c      	mov	ip, r3
 80008da:	464b      	mov	r3, r9
 80008dc:	0426      	lsls	r6, r4, #16
 80008de:	0c36      	lsrs	r6, r6, #16
 80008e0:	0418      	lsls	r0, r3, #16
 80008e2:	4661      	mov	r1, ip
 80008e4:	0033      	movs	r3, r6
 80008e6:	0c22      	lsrs	r2, r4, #16
 80008e8:	4664      	mov	r4, ip
 80008ea:	0c00      	lsrs	r0, r0, #16
 80008ec:	4343      	muls	r3, r0
 80008ee:	434e      	muls	r6, r1
 80008f0:	4350      	muls	r0, r2
 80008f2:	4354      	muls	r4, r2
 80008f4:	1980      	adds	r0, r0, r6
 80008f6:	0c1a      	lsrs	r2, r3, #16
 80008f8:	1812      	adds	r2, r2, r0
 80008fa:	4296      	cmp	r6, r2
 80008fc:	d903      	bls.n	8000906 <__aeabi_fmul+0x12a>
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0249      	lsls	r1, r1, #9
 8000902:	468c      	mov	ip, r1
 8000904:	4464      	add	r4, ip
 8000906:	041b      	lsls	r3, r3, #16
 8000908:	0c1b      	lsrs	r3, r3, #16
 800090a:	0410      	lsls	r0, r2, #16
 800090c:	18c0      	adds	r0, r0, r3
 800090e:	0183      	lsls	r3, r0, #6
 8000910:	1e5e      	subs	r6, r3, #1
 8000912:	41b3      	sbcs	r3, r6
 8000914:	0e80      	lsrs	r0, r0, #26
 8000916:	4318      	orrs	r0, r3
 8000918:	0c13      	lsrs	r3, r2, #16
 800091a:	191b      	adds	r3, r3, r4
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	4303      	orrs	r3, r0
 8000920:	001c      	movs	r4, r3
 8000922:	0123      	lsls	r3, r4, #4
 8000924:	d579      	bpl.n	8000a1a <__aeabi_fmul+0x23e>
 8000926:	2301      	movs	r3, #1
 8000928:	0862      	lsrs	r2, r4, #1
 800092a:	401c      	ands	r4, r3
 800092c:	4314      	orrs	r4, r2
 800092e:	9a01      	ldr	r2, [sp, #4]
 8000930:	327f      	adds	r2, #127	; 0x7f
 8000932:	2a00      	cmp	r2, #0
 8000934:	dd4d      	ble.n	80009d2 <__aeabi_fmul+0x1f6>
 8000936:	0763      	lsls	r3, r4, #29
 8000938:	d004      	beq.n	8000944 <__aeabi_fmul+0x168>
 800093a:	230f      	movs	r3, #15
 800093c:	4023      	ands	r3, r4
 800093e:	2b04      	cmp	r3, #4
 8000940:	d000      	beq.n	8000944 <__aeabi_fmul+0x168>
 8000942:	3404      	adds	r4, #4
 8000944:	0123      	lsls	r3, r4, #4
 8000946:	d503      	bpl.n	8000950 <__aeabi_fmul+0x174>
 8000948:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <__aeabi_fmul+0x260>)
 800094a:	9a01      	ldr	r2, [sp, #4]
 800094c:	401c      	ands	r4, r3
 800094e:	3280      	adds	r2, #128	; 0x80
 8000950:	2afe      	cmp	r2, #254	; 0xfe
 8000952:	dcbc      	bgt.n	80008ce <__aeabi_fmul+0xf2>
 8000954:	01a3      	lsls	r3, r4, #6
 8000956:	0a5b      	lsrs	r3, r3, #9
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	e79a      	b.n	8000892 <__aeabi_fmul+0xb6>
 800095c:	230c      	movs	r3, #12
 800095e:	469a      	mov	sl, r3
 8000960:	3b09      	subs	r3, #9
 8000962:	25ff      	movs	r5, #255	; 0xff
 8000964:	469b      	mov	fp, r3
 8000966:	e754      	b.n	8000812 <__aeabi_fmul+0x36>
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff fc8f 	bl	800028c <__clzsi2>
 800096e:	464a      	mov	r2, r9
 8000970:	1f43      	subs	r3, r0, #5
 8000972:	2576      	movs	r5, #118	; 0x76
 8000974:	409a      	lsls	r2, r3
 8000976:	2300      	movs	r3, #0
 8000978:	426d      	negs	r5, r5
 800097a:	4691      	mov	r9, r2
 800097c:	1a2d      	subs	r5, r5, r0
 800097e:	469a      	mov	sl, r3
 8000980:	469b      	mov	fp, r3
 8000982:	e746      	b.n	8000812 <__aeabi_fmul+0x36>
 8000984:	4652      	mov	r2, sl
 8000986:	2303      	movs	r3, #3
 8000988:	431a      	orrs	r2, r3
 800098a:	4692      	mov	sl, r2
 800098c:	2003      	movs	r0, #3
 800098e:	e750      	b.n	8000832 <__aeabi_fmul+0x56>
 8000990:	0020      	movs	r0, r4
 8000992:	f7ff fc7b 	bl	800028c <__clzsi2>
 8000996:	1f43      	subs	r3, r0, #5
 8000998:	1a2d      	subs	r5, r5, r0
 800099a:	409c      	lsls	r4, r3
 800099c:	3d76      	subs	r5, #118	; 0x76
 800099e:	2000      	movs	r0, #0
 80009a0:	e747      	b.n	8000832 <__aeabi_fmul+0x56>
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	2700      	movs	r7, #0
 80009a6:	03db      	lsls	r3, r3, #15
 80009a8:	22ff      	movs	r2, #255	; 0xff
 80009aa:	e772      	b.n	8000892 <__aeabi_fmul+0xb6>
 80009ac:	4642      	mov	r2, r8
 80009ae:	e766      	b.n	800087e <__aeabi_fmul+0xa2>
 80009b0:	464c      	mov	r4, r9
 80009b2:	0032      	movs	r2, r6
 80009b4:	4658      	mov	r0, fp
 80009b6:	e762      	b.n	800087e <__aeabi_fmul+0xa2>
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	464a      	mov	r2, r9
 80009bc:	03db      	lsls	r3, r3, #15
 80009be:	421a      	tst	r2, r3
 80009c0:	d022      	beq.n	8000a08 <__aeabi_fmul+0x22c>
 80009c2:	421c      	tst	r4, r3
 80009c4:	d120      	bne.n	8000a08 <__aeabi_fmul+0x22c>
 80009c6:	4323      	orrs	r3, r4
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	0a5b      	lsrs	r3, r3, #9
 80009cc:	4647      	mov	r7, r8
 80009ce:	22ff      	movs	r2, #255	; 0xff
 80009d0:	e75f      	b.n	8000892 <__aeabi_fmul+0xb6>
 80009d2:	2301      	movs	r3, #1
 80009d4:	1a9a      	subs	r2, r3, r2
 80009d6:	2a1b      	cmp	r2, #27
 80009d8:	dc21      	bgt.n	8000a1e <__aeabi_fmul+0x242>
 80009da:	0023      	movs	r3, r4
 80009dc:	9901      	ldr	r1, [sp, #4]
 80009de:	40d3      	lsrs	r3, r2
 80009e0:	319e      	adds	r1, #158	; 0x9e
 80009e2:	408c      	lsls	r4, r1
 80009e4:	001a      	movs	r2, r3
 80009e6:	0023      	movs	r3, r4
 80009e8:	1e5c      	subs	r4, r3, #1
 80009ea:	41a3      	sbcs	r3, r4
 80009ec:	4313      	orrs	r3, r2
 80009ee:	075a      	lsls	r2, r3, #29
 80009f0:	d004      	beq.n	80009fc <__aeabi_fmul+0x220>
 80009f2:	220f      	movs	r2, #15
 80009f4:	401a      	ands	r2, r3
 80009f6:	2a04      	cmp	r2, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fmul+0x220>
 80009fa:	3304      	adds	r3, #4
 80009fc:	015a      	lsls	r2, r3, #5
 80009fe:	d411      	bmi.n	8000a24 <__aeabi_fmul+0x248>
 8000a00:	019b      	lsls	r3, r3, #6
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	2200      	movs	r2, #0
 8000a06:	e744      	b.n	8000892 <__aeabi_fmul+0xb6>
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	025b      	lsls	r3, r3, #9
 8000a12:	0a5b      	lsrs	r3, r3, #9
 8000a14:	0037      	movs	r7, r6
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	e73b      	b.n	8000892 <__aeabi_fmul+0xb6>
 8000a1a:	9501      	str	r5, [sp, #4]
 8000a1c:	e787      	b.n	800092e <__aeabi_fmul+0x152>
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2300      	movs	r3, #0
 8000a22:	e736      	b.n	8000892 <__aeabi_fmul+0xb6>
 8000a24:	2201      	movs	r2, #1
 8000a26:	2300      	movs	r3, #0
 8000a28:	e733      	b.n	8000892 <__aeabi_fmul+0xb6>
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	03db      	lsls	r3, r3, #15
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	e72c      	b.n	8000892 <__aeabi_fmul+0xb6>
 8000a38:	08006e0c 	.word	0x08006e0c
 8000a3c:	f7ffffff 	.word	0xf7ffffff

08000a40 <__aeabi_f2iz>:
 8000a40:	0241      	lsls	r1, r0, #9
 8000a42:	0042      	lsls	r2, r0, #1
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0a49      	lsrs	r1, r1, #9
 8000a48:	0e12      	lsrs	r2, r2, #24
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_f2iz+0x2c>
 8000a50:	2a9d      	cmp	r2, #157	; 0x9d
 8000a52:	d80c      	bhi.n	8000a6e <__aeabi_f2iz+0x2e>
 8000a54:	2080      	movs	r0, #128	; 0x80
 8000a56:	0400      	lsls	r0, r0, #16
 8000a58:	4301      	orrs	r1, r0
 8000a5a:	2a95      	cmp	r2, #149	; 0x95
 8000a5c:	dc0a      	bgt.n	8000a74 <__aeabi_f2iz+0x34>
 8000a5e:	2096      	movs	r0, #150	; 0x96
 8000a60:	1a82      	subs	r2, r0, r2
 8000a62:	40d1      	lsrs	r1, r2
 8000a64:	4248      	negs	r0, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_f2iz+0x2c>
 8000a6a:	0008      	movs	r0, r1
 8000a6c:	4770      	bx	lr
 8000a6e:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <__aeabi_f2iz+0x3c>)
 8000a70:	1898      	adds	r0, r3, r2
 8000a72:	e7fb      	b.n	8000a6c <__aeabi_f2iz+0x2c>
 8000a74:	3a96      	subs	r2, #150	; 0x96
 8000a76:	4091      	lsls	r1, r2
 8000a78:	e7f4      	b.n	8000a64 <__aeabi_f2iz+0x24>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	7fffffff 	.word	0x7fffffff

08000a80 <__aeabi_i2f>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d03d      	beq.n	8000b02 <__aeabi_i2f+0x82>
 8000a86:	17c3      	asrs	r3, r0, #31
 8000a88:	18c5      	adds	r5, r0, r3
 8000a8a:	405d      	eors	r5, r3
 8000a8c:	0fc4      	lsrs	r4, r0, #31
 8000a8e:	0028      	movs	r0, r5
 8000a90:	f7ff fbfc 	bl	800028c <__clzsi2>
 8000a94:	229e      	movs	r2, #158	; 0x9e
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	2a96      	cmp	r2, #150	; 0x96
 8000a9a:	dc07      	bgt.n	8000aac <__aeabi_i2f+0x2c>
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	2808      	cmp	r0, #8
 8000aa0:	dd33      	ble.n	8000b0a <__aeabi_i2f+0x8a>
 8000aa2:	3808      	subs	r0, #8
 8000aa4:	4085      	lsls	r5, r0
 8000aa6:	0268      	lsls	r0, r5, #9
 8000aa8:	0a40      	lsrs	r0, r0, #9
 8000aaa:	e023      	b.n	8000af4 <__aeabi_i2f+0x74>
 8000aac:	2a99      	cmp	r2, #153	; 0x99
 8000aae:	dd0b      	ble.n	8000ac8 <__aeabi_i2f+0x48>
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	0029      	movs	r1, r5
 8000ab4:	1a1b      	subs	r3, r3, r0
 8000ab6:	40d9      	lsrs	r1, r3
 8000ab8:	0003      	movs	r3, r0
 8000aba:	331b      	adds	r3, #27
 8000abc:	409d      	lsls	r5, r3
 8000abe:	002b      	movs	r3, r5
 8000ac0:	1e5d      	subs	r5, r3, #1
 8000ac2:	41ab      	sbcs	r3, r5
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	000d      	movs	r5, r1
 8000ac8:	2805      	cmp	r0, #5
 8000aca:	dd01      	ble.n	8000ad0 <__aeabi_i2f+0x50>
 8000acc:	1f43      	subs	r3, r0, #5
 8000ace:	409d      	lsls	r5, r3
 8000ad0:	002b      	movs	r3, r5
 8000ad2:	490f      	ldr	r1, [pc, #60]	; (8000b10 <__aeabi_i2f+0x90>)
 8000ad4:	400b      	ands	r3, r1
 8000ad6:	076e      	lsls	r6, r5, #29
 8000ad8:	d009      	beq.n	8000aee <__aeabi_i2f+0x6e>
 8000ada:	260f      	movs	r6, #15
 8000adc:	4035      	ands	r5, r6
 8000ade:	2d04      	cmp	r5, #4
 8000ae0:	d005      	beq.n	8000aee <__aeabi_i2f+0x6e>
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	015d      	lsls	r5, r3, #5
 8000ae6:	d502      	bpl.n	8000aee <__aeabi_i2f+0x6e>
 8000ae8:	229f      	movs	r2, #159	; 0x9f
 8000aea:	400b      	ands	r3, r1
 8000aec:	1a12      	subs	r2, r2, r0
 8000aee:	019b      	lsls	r3, r3, #6
 8000af0:	0a58      	lsrs	r0, r3, #9
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	0240      	lsls	r0, r0, #9
 8000af6:	05d2      	lsls	r2, r2, #23
 8000af8:	0a40      	lsrs	r0, r0, #9
 8000afa:	07e4      	lsls	r4, r4, #31
 8000afc:	4310      	orrs	r0, r2
 8000afe:	4320      	orrs	r0, r4
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	2400      	movs	r4, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	2000      	movs	r0, #0
 8000b08:	e7f4      	b.n	8000af4 <__aeabi_i2f+0x74>
 8000b0a:	0268      	lsls	r0, r5, #9
 8000b0c:	0a40      	lsrs	r0, r0, #9
 8000b0e:	e7f1      	b.n	8000af4 <__aeabi_i2f+0x74>
 8000b10:	fbffffff 	.word	0xfbffffff

08000b14 <fix_abs>:
 * value is too large or there were garbage characters.
 */
extern fix16_t fix16_from_str(const char *buf);

static inline uint32_t fix_abs(fix16_t in)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    if(in == fix16_minimum)
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	061b      	lsls	r3, r3, #24
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d102      	bne.n	8000b2c <fix_abs+0x18>
    {
        // minimum negative number has same representation as
        // its absolute value in unsigned
        return 0x80000000;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	061b      	lsls	r3, r3, #24
 8000b2a:	e003      	b.n	8000b34 <fix_abs+0x20>
    }
    else
    {
        return ((in >= 0)?(in):(-in));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	17da      	asrs	r2, r3, #31
 8000b30:	189b      	adds	r3, r3, r2
 8000b32:	4053      	eors	r3, r2
    }
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <fix16_mul>:
 * detection.
 */
 
#if !defined(FIXMATH_NO_64BIT) && !defined(FIXMATH_OPTIMIZE_8BIT)
fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
{
 8000b3c:	b5b0      	push	{r4, r5, r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6278      	str	r0, [r7, #36]	; 0x24
 8000b44:	6239      	str	r1, [r7, #32]
	int64_t product = (int64_t)inArg0 * inArg1;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	17db      	asrs	r3, r3, #31
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	17db      	asrs	r3, r3, #31
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6938      	ldr	r0, [r7, #16]
 8000b5c:	6979      	ldr	r1, [r7, #20]
 8000b5e:	f7ff fbb3 	bl	80002c8 <__aeabi_lmul>
 8000b62:	0002      	movs	r2, r0
 8000b64:	000b      	movs	r3, r1
 8000b66:	633a      	str	r2, [r7, #48]	; 0x30
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
	
	#ifndef FIXMATH_NO_OVERFLOW
	// The upper 17 bits should all be the same (the sign).
	uint32_t upper = (product >> 47);
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	13db      	asrs	r3, r3, #15
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
	#endif
	
	if (product < 0)
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	da0f      	bge.n	8000ba0 <fix16_mul+0x64>
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (~upper)
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	3301      	adds	r3, #1
 8000b84:	d002      	beq.n	8000b8c <fix16_mul+0x50>
				return fix16_overflow;
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	061b      	lsls	r3, r3, #24
 8000b8a:	e02a      	b.n	8000be2 <fix16_mul+0xa6>
		#endif
		
		#ifndef FIXMATH_NO_ROUNDING
		// This adjustment is required in order to round -1/2 correctly
		product--;
 8000b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	2001      	movs	r0, #1
 8000b92:	4240      	negs	r0, r0
 8000b94:	17c1      	asrs	r1, r0, #31
 8000b96:	1812      	adds	r2, r2, r0
 8000b98:	414b      	adcs	r3, r1
 8000b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b9e:	e005      	b.n	8000bac <fix16_mul+0x70>
		#endif
	}
	else
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (upper)
 8000ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <fix16_mul+0x70>
				return fix16_overflow;
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	061b      	lsls	r3, r3, #24
 8000baa:	e01a      	b.n	8000be2 <fix16_mul+0xa6>
	}
	
	#ifdef FIXMATH_NO_ROUNDING
	return product >> 16;
	#else
	fix16_t result = product >> 16;
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bb2:	0c12      	lsrs	r2, r2, #16
 8000bb4:	61ba      	str	r2, [r7, #24]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	61ba      	str	r2, [r7, #24]
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbe:	141b      	asrs	r3, r3, #16
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	result += (product & 0x8000) >> 15;
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc8:	045b      	lsls	r3, r3, #17
 8000bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bcc:	0bd4      	lsrs	r4, r2, #15
 8000bce:	431c      	orrs	r4, r3
 8000bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd2:	13dd      	asrs	r5, r3, #15
 8000bd4:	0022      	movs	r2, r4
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	401a      	ands	r2, r3
 8000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
	
	return result;
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	#endif
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b00e      	add	sp, #56	; 0x38
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}

08000bea <fix16_div>:
	return result;
}
#endif

fix16_t fix16_div(fix16_t a, fix16_t b)
{
 8000bea:	b5b0      	push	{r4, r5, r7, lr}
 8000bec:	b094      	sub	sp, #80	; 0x50
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	61f8      	str	r0, [r7, #28]
 8000bf2:	61b9      	str	r1, [r7, #24]
	// This uses a hardware 32/32 bit division multiple times, until we have
	// computed all the bits in (a<<17)/b. Usually this takes 1-3 iterations.
	
	if (b == 0)
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <fix16_div+0x16>
			return fix16_minimum;
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	061b      	lsls	r3, r3, #24
 8000bfe:	e0c6      	b.n	8000d8e <fix16_div+0x1a4>
	
    uint32_t remainder = fix_abs(a);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff86 	bl	8000b14 <fix_abs>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t divider = fix_abs(b);
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff ff80 	bl	8000b14 <fix_abs>
 8000c14:	0003      	movs	r3, r0
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
    uint64_t quotient = 0;
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
    int bit_pos = 17;
 8000c20:	2311      	movs	r3, #17
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Kick-start the division a bit.
	// This improves speed in the worst-case scenarios where N and D are large
	// It gets a lower estimate for the result by N/(D >> 17 + 1).
	if (divider & 0xFFF00000)
 8000c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c26:	0d1b      	lsrs	r3, r3, #20
 8000c28:	051b      	lsls	r3, r3, #20
 8000c2a:	d028      	beq.n	8000c7e <fix16_div+0x94>
	{
		uint32_t shifted_div = ((divider >> 17) + 1);
 8000c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2e:	0c5b      	lsrs	r3, r3, #17
 8000c30:	3301      	adds	r3, #1
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
        quotient = remainder / shifted_div;
 8000c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c36:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c38:	f7ff fa62 	bl	8000100 <__udivsi3>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8000c40:	2300      	movs	r3, #0
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
        uint64_t tmp = ((uint64_t)quotient * (uint64_t)divider) >> 17;
 8000c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c50:	6838      	ldr	r0, [r7, #0]
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	f7ff fb38 	bl	80002c8 <__aeabi_lmul>
 8000c58:	0002      	movs	r2, r0
 8000c5a:	000b      	movs	r3, r1
 8000c5c:	03d9      	lsls	r1, r3, #15
 8000c5e:	0c50      	lsrs	r0, r2, #17
 8000c60:	4301      	orrs	r1, r0
 8000c62:	62b9      	str	r1, [r7, #40]	; 0x28
 8000c64:	0c5b      	lsrs	r3, r3, #17
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        remainder -= (uint32_t)(tmp);
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
	
	// If the divider is divisible by 2^n, take advantage of it.
	while (!(divider & 0xF) && bit_pos >= 4)
 8000c70:	e005      	b.n	8000c7e <fix16_div+0x94>
	{
		divider >>= 4;
 8000c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c74:	091b      	lsrs	r3, r3, #4
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
		bit_pos -= 4;
 8000c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (!(divider & 0xF) && bit_pos >= 4)
 8000c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c80:	220f      	movs	r2, #15
 8000c82:	4013      	ands	r3, r2
 8000c84:	d158      	bne.n	8000d38 <fix16_div+0x14e>
 8000c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	dcf2      	bgt.n	8000c72 <fix16_div+0x88>
	}
	
	while (remainder && bit_pos >= 0)
 8000c8c:	e054      	b.n	8000d38 <fix16_div+0x14e>
	{
		// Shift remainder as much as we can without overflowing
		int shift = clz(remainder);
 8000c8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c90:	f7ff fafc 	bl	800028c <__clzsi2>
 8000c94:	0003      	movs	r3, r0
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
		if (shift > bit_pos) shift = bit_pos;
 8000c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dd01      	ble.n	8000ca4 <fix16_div+0xba>
 8000ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
		remainder <<= shift;
 8000ca4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	0013      	movs	r3, r2
 8000cac:	64fb      	str	r3, [r7, #76]	; 0x4c
		bit_pos -= shift;
 8000cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		
		uint32_t div = remainder / divider;
 8000cb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000cb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000cba:	f7ff fa21 	bl	8000100 <__udivsi3>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
        remainder = remainder % divider;
 8000cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff faa0 	bl	800020c <__aeabi_uidivmod>
 8000ccc:	000b      	movs	r3, r1
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
        quotient += (uint64_t)div << bit_pos;
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cda:	3b20      	subs	r3, #32
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db03      	blt.n	8000ce8 <fix16_div+0xfe>
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0015      	movs	r5, r2
 8000ce6:	e00b      	b.n	8000d00 <fix16_div+0x116>
 8000ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cea:	2220      	movs	r2, #32
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	6938      	ldr	r0, [r7, #16]
 8000cf0:	6979      	ldr	r1, [r7, #20]
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	40da      	lsrs	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	000d      	movs	r5, r1
 8000cfe:	431d      	orrs	r5, r3
 8000d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0014      	movs	r4, r2
 8000d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0c:	1912      	adds	r2, r2, r4
 8000d0e:	416b      	adcs	r3, r5
 8000d10:	643a      	str	r2, [r7, #64]	; 0x40
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44

		#ifndef FIXMATH_NO_OVERFLOW
		if (div & ~(0xFFFFFFFF >> bit_pos))
 8000d14:	2301      	movs	r3, #1
 8000d16:	425a      	negs	r2, r3
 8000d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d1a:	40da      	lsrs	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d22:	4013      	ands	r3, r2
 8000d24:	d002      	beq.n	8000d2c <fix16_div+0x142>
				return fix16_overflow;
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	061b      	lsls	r3, r3, #24
 8000d2a:	e030      	b.n	8000d8e <fix16_div+0x1a4>
		#endif
		
		remainder <<= 1;
 8000d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	64fb      	str	r3, [r7, #76]	; 0x4c
		bit_pos--;
 8000d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d34:	3b01      	subs	r3, #1
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (remainder && bit_pos >= 0)
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <fix16_div+0x15a>
 8000d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	daa4      	bge.n	8000c8e <fix16_div+0xa4>
	}
	
	#ifndef FIXMATH_NO_ROUNDING
	// Quotient is always positive so rounding is easy
	quotient++;
 8000d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d46:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	185b      	adds	r3, r3, r1
 8000d4e:	4154      	adcs	r4, r2
 8000d50:	643b      	str	r3, [r7, #64]	; 0x40
 8000d52:	647c      	str	r4, [r7, #68]	; 0x44
	#endif
	
	fix16_t result = quotient >> 1;
 8000d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d56:	07db      	lsls	r3, r3, #31
 8000d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d5a:	0852      	lsrs	r2, r2, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	60ba      	str	r2, [r7, #8]
 8000d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
	
	// Figure out the sign of the result
	if ((a ^ b) & 0x80000000)
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	4053      	eors	r3, r2
 8000d74:	d50a      	bpl.n	8000d8c <fix16_div+0x1a2>
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (result == fix16_minimum)
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	061b      	lsls	r3, r3, #24
 8000d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d102      	bne.n	8000d86 <fix16_div+0x19c>
				return fix16_overflow;
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	061b      	lsls	r3, r3, #24
 8000d84:	e003      	b.n	8000d8e <fix16_div+0x1a4>
		#endif
		
		result = -result;
 8000d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d88:	425b      	negs	r3, r3
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	
	return result;
 8000d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b014      	add	sp, #80	; 0x50
 8000d94:	bdb0      	pop	{r4, r5, r7, pc}

08000d96 <fix_abs>:
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
    if(in == fix16_minimum)
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	061b      	lsls	r3, r3, #24
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d102      	bne.n	8000dae <fix_abs+0x18>
        return 0x80000000;
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	061b      	lsls	r3, r3, #24
 8000dac:	e003      	b.n	8000db6 <fix_abs+0x20>
        return ((in >= 0)?(in):(-in));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	17da      	asrs	r2, r3, #31
 8000db2:	189b      	adds	r3, r3, r2
 8000db4:	4053      	eors	r3, r2
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <fix16_sqrt>:
 * Note that for negative numbers we return -sqrt(-inValue).
 * Not sure if someone relies on this behaviour, but not going
 * to break it for now. It doesn't slow the code much overall.
 */
fix16_t fix16_sqrt(fix16_t inValue)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    uint8_t neg     = (inValue < 0);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0fdb      	lsrs	r3, r3, #31
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	230a      	movs	r3, #10
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	701a      	strb	r2, [r3, #0]
    uint32_t num    = fix_abs(inValue);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f7ff ffdd 	bl	8000d96 <fix_abs>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	617b      	str	r3, [r7, #20]
    uint32_t result = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]

    // Many numbers will be less than 15, so
    // this gives a good balance between time spent
    // in if vs. time spent in the while loop
    // when searching for the starting value.
    if (num & 0xFFF00000)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	0d1b      	lsrs	r3, r3, #20
 8000de8:	051b      	lsls	r3, r3, #20
 8000dea:	d003      	beq.n	8000df4 <fix16_sqrt+0x34>
        bit = (uint32_t)1 << 30;
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e006      	b.n	8000e02 <fix16_sqrt+0x42>
    else
        bit = (uint32_t)1 << 18;
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	02db      	lsls	r3, r3, #11
 8000df8:	60fb      	str	r3, [r7, #12]

    while (bit > num)
 8000dfa:	e002      	b.n	8000e02 <fix16_sqrt+0x42>
        bit >>= 2;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
    while (bit > num)
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d8f8      	bhi.n	8000dfc <fix16_sqrt+0x3c>

    // The main part is executed twice, in order to avoid
    // using 64 bit values in computations.
    for (n = 0; n < 2; n++)
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e044      	b.n	8000e9e <fix16_sqrt+0xde>
    {
        // First we get the top 24 bits of the answer.
        while (bit)
        {
            if (num >= result + bit)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d30b      	bcc.n	8000e38 <fix16_sqrt+0x78>
            {
                num -= result + bit;
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
                result = (result >> 1) + bit;
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	18d3      	adds	r3, r2, r3
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e002      	b.n	8000e3e <fix16_sqrt+0x7e>
            }
            else
            {
                result = (result >> 1);
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
            }
            bit >>= 2;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	60fb      	str	r3, [r7, #12]
        while (bit)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1e4      	bne.n	8000e14 <fix16_sqrt+0x54>
        }

        if (n == 0)
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11e      	bne.n	8000e92 <fix16_sqrt+0xd2>
        {
            // Then process it again to get the lowest 8 bits.
            if (num > 65535)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <fix16_sqrt+0x110>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d911      	bls.n	8000e80 <fix16_sqrt+0xc0>
                // by 16, so we have to add 1 to result manually and
                // adjust 'num' accordingly.
                // num = a - (result + 0.5)^2
                //	 = num + result^2 - (result + 0.5)^2
                //	 = num - result - 0.5
                num -= result;
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
                num    = (num << 16) - 0x8000;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <fix16_sqrt+0x114>)
 8000e6a:	4694      	mov	ip, r2
 8000e6c:	4463      	add	r3, ip
 8000e6e:	617b      	str	r3, [r7, #20]
                result = (result << 16) + 0x8000;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0212      	lsls	r2, r2, #8
 8000e78:	4694      	mov	ip, r2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	e005      	b.n	8000e8c <fix16_sqrt+0xcc>
            }
            else
            {
                num <<= 16;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	041b      	lsls	r3, r3, #16
 8000e84:	617b      	str	r3, [r7, #20]
                result <<= 16;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	613b      	str	r3, [r7, #16]
            }

            bit = 1 << 14;
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	01db      	lsls	r3, r3, #7
 8000e90:	60fb      	str	r3, [r7, #12]
    for (n = 0; n < 2; n++)
 8000e92:	210b      	movs	r1, #11
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	3201      	adds	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d9cd      	bls.n	8000e44 <fix16_sqrt+0x84>
        }
    }

#ifndef FIXMATH_NO_ROUNDING
    // Finally, if next bit would have been 1, round the result upwards.
    if (num > result)
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d902      	bls.n	8000eb6 <fix16_sqrt+0xf6>
    {
        result++;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
    }
#endif

    return (neg ? -(fix16_t)result : (fix16_t)result);
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <fix16_sqrt+0x106>
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	e000      	b.n	8000ec8 <fix16_sqrt+0x108>
 8000ec6:	693b      	ldr	r3, [r7, #16]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b006      	add	sp, #24
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	0000ffff 	.word	0x0000ffff
 8000ed4:	ffff8000 	.word	0xffff8000

08000ed8 <itoa_loop>:
    /* 5 decimals is enough for full fix16_t precision */
    1, 10, 100, 1000, 10000, 100000, 100000, 100000
};

static char *itoa_loop(char *buf, uint32_t scale, uint32_t value, bool skip)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	1cfb      	adds	r3, r7, #3
 8000ee8:	701a      	strb	r2, [r3, #0]
    while (scale)
 8000eea:	e02b      	b.n	8000f44 <itoa_loop+0x6c>
    {
        unsigned digit = (value / scale);
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff f906 	bl	8000100 <__udivsi3>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	617b      	str	r3, [r7, #20]
    
        if (!skip || digit || scale == 1)
 8000ef8:	1cfb      	adds	r3, r7, #3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4053      	eors	r3, r2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d105      	bne.n	8000f12 <itoa_loop+0x3a>
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <itoa_loop+0x3a>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d111      	bne.n	8000f36 <itoa_loop+0x5e>
        {
            skip = false;
 8000f12:	1cfb      	adds	r3, r7, #3
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
            *buf++ = '0' + digit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	1c59      	adds	r1, r3, #1
 8000f20:	60f9      	str	r1, [r7, #12]
 8000f22:	3230      	adds	r2, #48	; 0x30
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
            value %= scale;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff f96d 	bl	800020c <__aeabi_uidivmod>
 8000f32:	000b      	movs	r3, r1
 8000f34:	607b      	str	r3, [r7, #4]
        }
        
        scale /= 10;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	210a      	movs	r1, #10
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff f8e0 	bl	8000100 <__udivsi3>
 8000f40:	0003      	movs	r3, r0
 8000f42:	60bb      	str	r3, [r7, #8]
    while (scale)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1d0      	bne.n	8000eec <itoa_loop+0x14>
    }
    return buf;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b006      	add	sp, #24
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <fix16_to_str>:

void fix16_to_str(fix16_t value, char *buf, int decimals)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
    uint32_t uvalue = (value >= 0) ? value : -value;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	17da      	asrs	r2, r3, #31
 8000f64:	189b      	adds	r3, r3, r2
 8000f66:	4053      	eors	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
    if (value < 0)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da04      	bge.n	8000f7a <fix16_to_str+0x26>
        *buf++ = '-';
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	60ba      	str	r2, [r7, #8]
 8000f76:	222d      	movs	r2, #45	; 0x2d
 8000f78:	701a      	strb	r2, [r3, #0]

    /* Separate the integer and decimal parts of the value */
    unsigned intpart = uvalue >> 16;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	61fb      	str	r3, [r7, #28]
    uint32_t fracpart = uvalue & 0xFFFF;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	041b      	lsls	r3, r3, #16
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	61bb      	str	r3, [r7, #24]
    uint32_t scale = scales[decimals & 7];
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <fix16_to_str+0xb4>)
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	58d3      	ldr	r3, [r2, r3]
 8000f94:	613b      	str	r3, [r7, #16]
    fracpart = fix16_mul(fracpart, scale);
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff fdcd 	bl	8000b3c <fix16_mul>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]
    
    if (fracpart >= scale)
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d306      	bcc.n	8000fbc <fix16_to_str+0x68>
    {
        /* Handle carry from decimal part */
        intpart++;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
        fracpart -= scale;    
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	61bb      	str	r3, [r7, #24]
    }
    
    /* Format integer part */
    buf = itoa_loop(buf, 10000, intpart, true);
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	4913      	ldr	r1, [pc, #76]	; (800100c <fix16_to_str+0xb8>)
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f7ff ff88 	bl	8000ed8 <itoa_loop>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	60bb      	str	r3, [r7, #8]
    
    /* Format decimal part (if any) */
    if (scale != 1)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d012      	beq.n	8000ff8 <fix16_to_str+0xa4>
    {
        *buf++ = '.';
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	222e      	movs	r2, #46	; 0x2e
 8000fda:	701a      	strb	r2, [r3, #0]
        buf = itoa_loop(buf, scale / 10, fracpart, false);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	210a      	movs	r1, #10
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff f88d 	bl	8000100 <__udivsi3>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	0019      	movs	r1, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f7ff ff72 	bl	8000ed8 <itoa_loop>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	60bb      	str	r3, [r7, #8]
    }
    
    *buf = '\0';
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b008      	add	sp, #32
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	08006e4c 	.word	0x08006e4c
 800100c:	00002710 	.word	0x00002710

08001010 <fix16_atan2>:
{
	return ((fix16_pi >> 1) - fix16_asin(x));
}

fix16_t fix16_atan2(fix16_t inY , fix16_t inX)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	if((_fix16_atan_cache_index[0][hash] == inX) && (_fix16_atan_cache_index[1][hash] == inY))
		return _fix16_atan_cache_value[hash];
	#endif

	/* Absolute inY */
	mask = (inY >> (sizeof(fix16_t)*CHAR_BIT-1));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	61bb      	str	r3, [r7, #24]
	abs_inY = (inY + mask) ^ mask;
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4053      	eors	r3, r2
 800102a:	617b      	str	r3, [r7, #20]

	if (inX >= 0)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db2c      	blt.n	800108c <fix16_atan2+0x7c>
	{
		r = fix16_div( (inX - abs_inY), (inX + abs_inY));
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	1ad0      	subs	r0, r2, r3
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	0019      	movs	r1, r3
 8001040:	f7ff fdd3 	bl	8000bea <fix16_div>
 8001044:	0003      	movs	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
		r_3 = fix16_mul(fix16_mul(r, r),r);
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fd74 	bl	8000b3c <fix16_mul>
 8001054:	0002      	movs	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	0019      	movs	r1, r3
 800105a:	0010      	movs	r0, r2
 800105c:	f7ff fd6e 	bl	8000b3c <fix16_mul>
 8001060:	0003      	movs	r3, r0
 8001062:	60fb      	str	r3, [r7, #12]
		angle = fix16_mul(0x00003240 , r_3) - fix16_mul(0x0000FB50,r) + PI_DIV_4;
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	23c9      	movs	r3, #201	; 0xc9
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fd65 	bl	8000b3c <fix16_mul>
 8001072:	0004      	movs	r4, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4a21      	ldr	r2, [pc, #132]	; (80010fc <fix16_atan2+0xec>)
 8001078:	0019      	movs	r1, r3
 800107a:	0010      	movs	r0, r2
 800107c:	f7ff fd5e 	bl	8000b3c <fix16_mul>
 8001080:	0003      	movs	r3, r0
 8001082:	1ae3      	subs	r3, r4, r3
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <fix16_atan2+0xf0>)
 8001086:	189b      	adds	r3, r3, r2
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e02b      	b.n	80010e4 <fix16_atan2+0xd4>
	} else {
		r = fix16_div( (inX + abs_inY), (abs_inY - inX));
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	18d0      	adds	r0, r2, r3
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	0019      	movs	r1, r3
 800109a:	f7ff fda6 	bl	8000bea <fix16_div>
 800109e:	0003      	movs	r3, r0
 80010a0:	613b      	str	r3, [r7, #16]
		r_3 = fix16_mul(fix16_mul(r, r),r);
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fd47 	bl	8000b3c <fix16_mul>
 80010ae:	0002      	movs	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	0019      	movs	r1, r3
 80010b4:	0010      	movs	r0, r2
 80010b6:	f7ff fd41 	bl	8000b3c <fix16_mul>
 80010ba:	0003      	movs	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]
		angle = fix16_mul(0x00003240 , r_3)
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	23c9      	movs	r3, #201	; 0xc9
 80010c2:	019b      	lsls	r3, r3, #6
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff fd38 	bl	8000b3c <fix16_mul>
 80010cc:	0004      	movs	r4, r0
			- fix16_mul(0x0000FB50,r)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <fix16_atan2+0xec>)
 80010d2:	0019      	movs	r1, r3
 80010d4:	0010      	movs	r0, r2
 80010d6:	f7ff fd31 	bl	8000b3c <fix16_mul>
 80010da:	0003      	movs	r3, r0
 80010dc:	1ae3      	subs	r3, r4, r3
			+ THREE_PI_DIV_4;
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <fix16_atan2+0xf4>)
		angle = fix16_mul(0x00003240 , r_3)
 80010e0:	189b      	adds	r3, r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
	}
	if (inY < 0)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da02      	bge.n	80010f0 <fix16_atan2+0xe0>
	{
		angle = -angle;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	425b      	negs	r3, r3
 80010ee:	61fb      	str	r3, [r7, #28]
	_fix16_atan_cache_index[0][hash] = inX;
	_fix16_atan_cache_index[1][hash] = inY;
	_fix16_atan_cache_value[hash] = angle;
	#endif

	return angle;
 80010f0:	69fb      	ldr	r3, [r7, #28]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b009      	add	sp, #36	; 0x24
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	0000fb50 	.word	0x0000fb50
 8001100:	0000c90f 	.word	0x0000c90f
 8001104:	00025b2f 	.word	0x00025b2f

08001108 <fix16_from_int>:
static inline fix16_t fix16_from_int(int a)     { return a * fix16_one; }
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4353      	muls	r3, r2
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <fix16_from_float>:
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	float temp = a * fix16_one;
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fca7 	bl	8000a80 <__aeabi_i2f>
 8001132:	1c03      	adds	r3, r0, #0
 8001134:	1c19      	adds	r1, r3, #0
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fb50 	bl	80007dc <__aeabi_fmul>
 800113c:	1c03      	adds	r3, r0, #0
 800113e:	60fb      	str	r3, [r7, #12]
	temp += (temp >= 0) ? 0.5f : -0.5f;
 8001140:	2100      	movs	r1, #0
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff f898 	bl	8000278 <__aeabi_fcmpge>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d002      	beq.n	8001152 <fix16_from_float+0x32>
 800114c:	23fc      	movs	r3, #252	; 0xfc
 800114e:	059b      	lsls	r3, r3, #22
 8001150:	e001      	b.n	8001156 <fix16_from_float+0x36>
 8001152:	23bf      	movs	r3, #191	; 0xbf
 8001154:	061b      	lsls	r3, r3, #24
 8001156:	1c19      	adds	r1, r3, #0
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f7ff f8df 	bl	800031c <__aeabi_fadd>
 800115e:	1c03      	adds	r3, r0, #0
 8001160:	60fb      	str	r3, [r7, #12]
	return (fix16_t)temp;
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff fc6c 	bl	8000a40 <__aeabi_f2iz>
 8001168:	0003      	movs	r3, r0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	b29a      	uxth	r2, r3
 8001184:	2301      	movs	r3, #1
 8001186:	425b      	negs	r3, r3
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <_write+0x28>)
 800118c:	f004 fa98 	bl	80056c0 <HAL_UART_Transmit>
	return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	200001f8 	.word	0x200001f8

080011a0 <resetICM>:

void resetICM()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	uint8_t tx[2] = {W | DEVICE_CONFIG, 0x01};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <resetICM+0x4c>)
 80011aa:	8812      	ldrh	r2, [r2, #0]
 80011ac:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	0159      	lsls	r1, r3, #5
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	2200      	movs	r2, #0
 80011b8:	0018      	movs	r0, r3
 80011ba:	f001 fdbb 	bl	8002d34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx, 2, 1000);
 80011be:	23fa      	movs	r3, #250	; 0xfa
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	1d39      	adds	r1, r7, #4
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <resetICM+0x50>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	f002 fcd6 	bl	8003b78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	0159      	lsls	r1, r3, #5
 80011d0:	23a0      	movs	r3, #160	; 0xa0
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	2201      	movs	r2, #1
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 fdac 	bl	8002d34 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fecd 	bl	8001f7c <HAL_Delay>
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	08006de8 	.word	0x08006de8
 80011f0:	20000194 	.word	0x20000194

080011f4 <spiSet>:

void spiSet(uint8_t addr, uint8_t val)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	1c0a      	adds	r2, r1, #0
 8001204:	701a      	strb	r2, [r3, #0]
	uint8_t tx[2] = {0};
 8001206:	240c      	movs	r4, #12
 8001208:	193b      	adds	r3, r7, r4
 800120a:	2200      	movs	r2, #0
 800120c:	801a      	strh	r2, [r3, #0]
	tx[0] = W | addr;
 800120e:	193b      	adds	r3, r7, r4
 8001210:	1dfa      	adds	r2, r7, #7
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	701a      	strb	r2, [r3, #0]
	tx[1] = val;
 8001216:	193b      	adds	r3, r7, r4
 8001218:	1dba      	adds	r2, r7, #6
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	0159      	lsls	r1, r3, #5
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	2200      	movs	r2, #0
 8001228:	0018      	movs	r0, r3
 800122a:	f001 fd83 	bl	8002d34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx, 2, SPI_WAIT);
 800122e:	1939      	adds	r1, r7, r4
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <spiSet+0x60>)
 8001232:	2301      	movs	r3, #1
 8001234:	2202      	movs	r2, #2
 8001236:	f002 fc9f 	bl	8003b78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	0159      	lsls	r1, r3, #5
 800123e:	23a0      	movs	r3, #160	; 0xa0
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	2201      	movs	r2, #1
 8001244:	0018      	movs	r0, r3
 8001246:	f001 fd75 	bl	8002d34 <HAL_GPIO_WritePin>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b005      	add	sp, #20
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000194 	.word	0x20000194

08001258 <spiGet>:

void spiGet(uint8_t addr, uint8_t* rx, uint8_t num)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6039      	str	r1, [r7, #0]
 8001260:	0011      	movs	r1, r2
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	1c02      	adds	r2, r0, #0
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	1dbb      	adds	r3, r7, #6
 800126a:	1c0a      	adds	r2, r1, #0
 800126c:	701a      	strb	r2, [r3, #0]
	uint8_t tx = R | addr;
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	4252      	negs	r2, r2
 8001276:	4313      	orrs	r3, r2
 8001278:	b2da      	uxtb	r2, r3
 800127a:	240f      	movs	r4, #15
 800127c:	193b      	adds	r3, r7, r4
 800127e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	0159      	lsls	r1, r3, #5
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	2200      	movs	r2, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f001 fd52 	bl	8002d34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx, 1, SPI_WAIT);
 8001290:	1939      	adds	r1, r7, r4
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <spiGet+0x6c>)
 8001294:	2301      	movs	r3, #1
 8001296:	2201      	movs	r2, #1
 8001298:	f002 fc6e 	bl	8003b78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rx, num, SPI_WAIT);
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	4807      	ldr	r0, [pc, #28]	; (80012c4 <spiGet+0x6c>)
 80012a6:	2301      	movs	r3, #1
 80012a8:	f002 fdbe 	bl	8003e28 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	0159      	lsls	r1, r3, #5
 80012b0:	23a0      	movs	r3, #160	; 0xa0
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	2201      	movs	r2, #1
 80012b6:	0018      	movs	r0, r3
 80012b8:	f001 fd3c 	bl	8002d34 <HAL_GPIO_WritePin>
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b005      	add	sp, #20
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	20000194 	.word	0x20000194

080012c8 <printf16>:

void printf16(fix16_t num, int decimals){
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	decimals = decimals > 5 ? 5 : decimals;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	dd00      	ble.n	80012da <printf16+0x12>
 80012d8:	2305      	movs	r3, #5
 80012da:	603b      	str	r3, [r7, #0]
	char str[14] = {'0'};
 80012dc:	2108      	movs	r1, #8
 80012de:	000c      	movs	r4, r1
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	0018      	movs	r0, r3
 80012e4:	230e      	movs	r3, #14
 80012e6:	001a      	movs	r2, r3
 80012e8:	2100      	movs	r1, #0
 80012ea:	f004 fde7 	bl	8005ebc <memset>
 80012ee:	0021      	movs	r1, r4
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	701a      	strb	r2, [r3, #0]
	fix16_to_str(num, str, decimals);
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	000c      	movs	r4, r1
 80012fa:	1879      	adds	r1, r7, r1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fe28 	bl	8000f54 <fix16_to_str>
	printf("%s", str);
 8001304:	0021      	movs	r1, r4
 8001306:	187a      	adds	r2, r7, r1
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <printf16+0x54>)
 800130a:	0011      	movs	r1, r2
 800130c:	0018      	movs	r0, r3
 800130e:	f004 fddd 	bl	8005ecc <iprintf>
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b007      	add	sp, #28
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	08006dec 	.word	0x08006dec

08001320 <pn>:

void pn(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	printf("\r\n");
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <pn+0x14>)
 8001326:	0018      	movs	r0, r3
 8001328:	f004 fe4a 	bl	8005fc0 <puts>
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	08006df0 	.word	0x08006df0

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f000 fd97 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 f889 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f000 fa77 	bl	8001838 <MX_GPIO_Init>
  MX_TIM1_Init();
 800134a:	f000 f975 	bl	8001638 <MX_TIM1_Init>
  MX_TIM3_Init();
 800134e:	f000 f9dd 	bl	800170c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001352:	f000 fa3d 	bl	80017d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001356:	f000 f8c7 	bl	80014e8 <MX_ADC1_Init>
  MX_SPI1_Init();
 800135a:	f000 f92f 	bl	80015bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <main+0x10c>)
 8001360:	2100      	movs	r1, #0
 8001362:	0018      	movs	r0, r3
 8001364:	f003 faac 	bl	80048c0 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <main+0x110>)
 800136a:	213c      	movs	r1, #60	; 0x3c
 800136c:	0018      	movs	r0, r3
 800136e:	f003 fc27 	bl	8004bc0 <HAL_TIM_Encoder_Start>

  uint8_t rx[6] = { 0 };
 8001372:	003b      	movs	r3, r7
 8001374:	0018      	movs	r0, r3
 8001376:	2306      	movs	r3, #6
 8001378:	001a      	movs	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	f004 fd9e 	bl	8005ebc <memset>
  resetICM();
 8001380:	f7ff ff0e 	bl	80011a0 <resetICM>
  spiSet(GYRO_CONFIG0, 0x06);
 8001384:	2106      	movs	r1, #6
 8001386:	204f      	movs	r0, #79	; 0x4f
 8001388:	f7ff ff34 	bl	80011f4 <spiSet>
  spiSet(PWR_MGMT0, 0x0F);
 800138c:	210f      	movs	r1, #15
 800138e:	204e      	movs	r0, #78	; 0x4e
 8001390:	f7ff ff30 	bl	80011f4 <spiSet>
  HAL_Delay(45);
 8001394:	202d      	movs	r0, #45	; 0x2d
 8001396:	f000 fdf1 	bl	8001f7c <HAL_Delay>

  fix16_t P = fix16_from_float(32767.999985);
 800139a:	238e      	movs	r3, #142	; 0x8e
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	1c18      	adds	r0, r3, #0
 80013a0:	f7ff febe 	bl	8001120 <fix16_from_float>
 80013a4:	0003      	movs	r3, r0
 80013a6:	60fb      	str	r3, [r7, #12]
  fix16_t Q = fix16_atan2(140351, 65536);
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <main+0x114>)
 80013ae:	0019      	movs	r1, r3
 80013b0:	0010      	movs	r0, r2
 80013b2:	f7ff fe2d 	bl	8001010 <fix16_atan2>
 80013b6:	0003      	movs	r3, r0
 80013b8:	60bb      	str	r3, [r7, #8]
  P = fix16_div(P,Q);
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	0011      	movs	r1, r2
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fc12 	bl	8000bea <fix16_div>
 80013c6:	0003      	movs	r3, r0
 80013c8:	60fb      	str	r3, [r7, #12]
  Q = fix16_mul(Q, fix16_from_int(2));
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff fe9c 	bl	8001108 <fix16_from_int>
 80013d0:	0002      	movs	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff fbb0 	bl	8000b3c <fix16_mul>
 80013dc:	0003      	movs	r3, r0
 80013de:	60bb      	str	r3, [r7, #8]
  P = fix16_sqrt(P);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fcec 	bl	8000dc0 <fix16_sqrt>
 80013e8:	0003      	movs	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]

  printf("start\r\n");
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <main+0x118>)
 80013ee:	0018      	movs	r0, r3
 80013f0:	f004 fde6 	bl	8005fc0 <puts>
  printf16(P, 5);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2105      	movs	r1, #5
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ff65 	bl	80012c8 <printf16>
  pn();
 80013fe:	f7ff ff8f 	bl	8001320 <pn>
  printf16(Q, 5);
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2105      	movs	r1, #5
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff ff5e 	bl	80012c8 <printf16>
  pn();
 800140c:	f7ff ff88 	bl	8001320 <pn>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  spiGet(WHO_AM_I, rx, 1);
 8001410:	003b      	movs	r3, r7
 8001412:	2201      	movs	r2, #1
 8001414:	0019      	movs	r1, r3
 8001416:	2075      	movs	r0, #117	; 0x75
 8001418:	f7ff ff1e 	bl	8001258 <spiGet>
	  printf("WHO AM I: %d\r\n", rx[0]);
 800141c:	003b      	movs	r3, r7
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	001a      	movs	r2, r3
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <main+0x11c>)
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f004 fd50 	bl	8005ecc <iprintf>
	  HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	2110      	movs	r1, #16
 8001432:	0018      	movs	r0, r3
 8001434:	f001 fc9b 	bl	8002d6e <HAL_GPIO_TogglePin>
	  HAL_Delay (2000);   /* Insert delay 100 ms */
 8001438:	23fa      	movs	r3, #250	; 0xfa
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	0018      	movs	r0, r3
 800143e:	f000 fd9d 	bl	8001f7c <HAL_Delay>
	  spiGet(WHO_AM_I, rx, 1);
 8001442:	e7e5      	b.n	8001410 <main+0xd8>
 8001444:	20000098 	.word	0x20000098
 8001448:	20000148 	.word	0x20000148
 800144c:	0002243f 	.word	0x0002243f
 8001450:	08006df4 	.word	0x08006df4
 8001454:	08006dfc 	.word	0x08006dfc

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b093      	sub	sp, #76	; 0x4c
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	2414      	movs	r4, #20
 8001460:	193b      	adds	r3, r7, r4
 8001462:	0018      	movs	r0, r3
 8001464:	2334      	movs	r3, #52	; 0x34
 8001466:	001a      	movs	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f004 fd27 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	0018      	movs	r0, r3
 8001472:	2310      	movs	r3, #16
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f004 fd20 	bl	8005ebc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	0018      	movs	r0, r3
 8001482:	f001 fc8f 	bl	8002da4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001486:	193b      	adds	r3, r7, r4
 8001488:	2202      	movs	r2, #2
 800148a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	193b      	adds	r3, r7, r4
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001494:	193b      	adds	r3, r7, r4
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fcc7 	bl	8002e3c <HAL_RCC_OscConfig>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80014b2:	f000 fa33 	bl	800191c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2100      	movs	r1, #0
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 ffc8 	bl	8003468 <HAL_RCC_ClockConfig>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80014dc:	f000 fa1e 	bl	800191c <Error_Handler>
  }
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b013      	add	sp, #76	; 0x4c
 80014e6:	bd90      	pop	{r4, r7, pc}

080014e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	0018      	movs	r0, r3
 80014f2:	230c      	movs	r3, #12
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f004 fce0 	bl	8005ebc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <MX_ADC1_Init+0xcc>)
 80014fe:	4a2e      	ldr	r2, [pc, #184]	; (80015b8 <MX_ADC1_Init+0xd0>)
 8001500:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	05d2      	lsls	r2, r2, #23
 8001508:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800151e:	2204      	movs	r2, #4
 8001520:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001524:	2200      	movs	r2, #0
 8001526:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800152a:	2200      	movs	r2, #0
 800152c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001530:	2200      	movs	r2, #0
 8001532:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001536:	2201      	movs	r2, #1
 8001538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800153c:	2220      	movs	r2, #32
 800153e:	2100      	movs	r1, #0
 8001540:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001550:	222c      	movs	r2, #44	; 0x2c
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800155e:	2200      	movs	r2, #0
 8001560:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001564:	2200      	movs	r2, #0
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800156a:	223c      	movs	r2, #60	; 0x3c
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001572:	2200      	movs	r2, #0
 8001574:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_ADC1_Init+0xcc>)
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fe09 	bl	8002190 <HAL_ADC_Init>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001582:	f000 f9cb 	bl	800191c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_ADC1_Init+0xcc>)
 800159c:	0011      	movs	r1, r2
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 ffd8 	bl	8002554 <HAL_ADC_ConfigChannel>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f000 f9b8 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200000e4 	.word	0x200000e4
 80015b8:	40012400 	.word	0x40012400

080015bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_SPI1_Init+0x74>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_SPI1_Init+0x78>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_SPI1_Init+0x74>)
 80015c8:	2282      	movs	r2, #130	; 0x82
 80015ca:	0052      	lsls	r2, r2, #1
 80015cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_SPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_SPI1_Init+0x74>)
 80015d6:	22e0      	movs	r2, #224	; 0xe0
 80015d8:	00d2      	lsls	r2, r2, #3
 80015da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_SPI1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_SPI1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_SPI1_Init+0x74>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_SPI1_Init+0x74>)
 80015f2:	2238      	movs	r2, #56	; 0x38
 80015f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_SPI1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_SPI1_Init+0x74>)
 800160a:	2207      	movs	r2, #7
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_SPI1_Init+0x74>)
 8001616:	2208      	movs	r2, #8
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <MX_SPI1_Init+0x74>)
 800161c:	0018      	movs	r0, r3
 800161e:	f002 f9f3 	bl	8003a08 <HAL_SPI_Init>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001626:	f000 f979 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000194 	.word	0x20000194
 8001634:	40013000 	.word	0x40013000

08001638 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08d      	sub	sp, #52	; 0x34
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800163e:	240c      	movs	r4, #12
 8001640:	193b      	adds	r3, r7, r4
 8001642:	0018      	movs	r0, r3
 8001644:	2324      	movs	r3, #36	; 0x24
 8001646:	001a      	movs	r2, r3
 8001648:	2100      	movs	r1, #0
 800164a:	f004 fc37 	bl	8005ebc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164e:	003b      	movs	r3, r7
 8001650:	0018      	movs	r0, r3
 8001652:	230c      	movs	r3, #12
 8001654:	001a      	movs	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	f004 fc30 	bl	8005ebc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <MX_TIM1_Init+0xc8>)
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <MX_TIM1_Init+0xcc>)
 8001660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MX_TIM1_Init+0xc8>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <MX_TIM1_Init+0xc8>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <MX_TIM1_Init+0xc8>)
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <MX_TIM1_Init+0xd0>)
 8001672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_TIM1_Init+0xc8>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_TIM1_Init+0xc8>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_TIM1_Init+0xc8>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2201      	movs	r2, #1
 8001698:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2201      	movs	r2, #1
 80016b0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016be:	187a      	adds	r2, r7, r1
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_TIM1_Init+0xc8>)
 80016c2:	0011      	movs	r1, r2
 80016c4:	0018      	movs	r0, r3
 80016c6:	f003 f9d3 	bl	8004a70 <HAL_TIM_Encoder_Init>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80016ce:	f000 f925 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	003b      	movs	r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d8:	003b      	movs	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	003b      	movs	r3, r7
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e4:	003a      	movs	r2, r7
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_TIM1_Init+0xc8>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f003 ff30 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80016f4:	f000 f912 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b00d      	add	sp, #52	; 0x34
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000148 	.word	0x20000148
 8001704:	40012c00 	.word	0x40012c00
 8001708:	0000ffff 	.word	0x0000ffff

0800170c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001712:	231c      	movs	r3, #28
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	0018      	movs	r0, r3
 8001718:	230c      	movs	r3, #12
 800171a:	001a      	movs	r2, r3
 800171c:	2100      	movs	r1, #0
 800171e:	f004 fbcd 	bl	8005ebc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	003b      	movs	r3, r7
 8001724:	0018      	movs	r0, r3
 8001726:	231c      	movs	r3, #28
 8001728:	001a      	movs	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f004 fbc6 	bl	8005ebc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_TIM3_Init+0xb8>)
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <MX_TIM3_Init+0xbc>)
 8001734:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <MX_TIM3_Init+0xb8>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <MX_TIM3_Init+0xb8>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_TIM3_Init+0xb8>)
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_TIM3_Init+0xc0>)
 8001746:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_TIM3_Init+0xb8>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <MX_TIM3_Init+0xb8>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_TIM3_Init+0xb8>)
 8001756:	0018      	movs	r0, r3
 8001758:	f003 f85a 	bl	8004810 <HAL_TIM_PWM_Init>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 f8dc 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	211c      	movs	r1, #28
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001772:	187a      	adds	r2, r7, r1
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_TIM3_Init+0xb8>)
 8001776:	0011      	movs	r1, r2
 8001778:	0018      	movs	r0, r3
 800177a:	f003 fee9 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	1e03      	subs	r3, r0, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001782:	f000 f8cb 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001786:	003b      	movs	r3, r7
 8001788:	2260      	movs	r2, #96	; 0x60
 800178a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800178c:	003b      	movs	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001792:	003b      	movs	r3, r7
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001798:	003b      	movs	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	0039      	movs	r1, r7
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_TIM3_Init+0xb8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	0018      	movs	r0, r3
 80017a6:	f003 fab1 	bl	8004d0c <HAL_TIM_PWM_ConfigChannel>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80017ae:	f000 f8b5 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <MX_TIM3_Init+0xb8>)
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fa0f 	bl	8001bd8 <HAL_TIM_MspPostInit>

}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b00a      	add	sp, #40	; 0x28
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000098 	.word	0x20000098
 80017c8:	40000400 	.word	0x40000400
 80017cc:	0000ffff 	.word	0x0000ffff

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <MX_USART2_UART_Init+0x64>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017dc:	22e1      	movs	r2, #225	; 0xe1
 80017de:	0252      	lsls	r2, r2, #9
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <MX_USART2_UART_Init+0x60>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_USART2_UART_Init+0x60>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_USART2_UART_Init+0x60>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_USART2_UART_Init+0x60>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_USART2_UART_Init+0x60>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <MX_USART2_UART_Init+0x60>)
 800181a:	0018      	movs	r0, r3
 800181c:	f003 fefa 	bl	8005614 <HAL_UART_Init>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 f87a 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	200001f8 	.word	0x200001f8
 8001834:	40004400 	.word	0x40004400

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	240c      	movs	r4, #12
 8001840:	193b      	adds	r3, r7, r4
 8001842:	0018      	movs	r0, r3
 8001844:	2314      	movs	r3, #20
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f004 fb37 	bl	8005ebc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <MX_GPIO_Init+0xd8>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <MX_GPIO_Init+0xd8>)
 8001854:	2102      	movs	r1, #2
 8001856:	430a      	orrs	r2, r1
 8001858:	635a      	str	r2, [r3, #52]	; 0x34
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <MX_GPIO_Init+0xd8>)
 800185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <MX_GPIO_Init+0xd8>)
 8001868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <MX_GPIO_Init+0xd8>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <MX_GPIO_Init+0xd8>)
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_Pin|DIR_Pin, GPIO_PIN_RESET);
 800187e:	23c0      	movs	r3, #192	; 0xc0
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4824      	ldr	r0, [pc, #144]	; (8001914 <MX_GPIO_Init+0xdc>)
 8001884:	2200      	movs	r2, #0
 8001886:	0019      	movs	r1, r3
 8001888:	f001 fa54 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CS_Pin, GPIO_PIN_RESET);
 800188c:	4922      	ldr	r1, [pc, #136]	; (8001918 <MX_GPIO_Init+0xe0>)
 800188e:	23a0      	movs	r3, #160	; 0xa0
 8001890:	05db      	lsls	r3, r3, #23
 8001892:	2200      	movs	r2, #0
 8001894:	0018      	movs	r0, r3
 8001896:	f001 fa4d 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BRAKE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin|DIR_Pin;
 800189a:	193b      	adds	r3, r7, r4
 800189c:	22c0      	movs	r2, #192	; 0xc0
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2201      	movs	r2, #1
 80018a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <MX_GPIO_Init+0xdc>)
 80018b8:	0019      	movs	r1, r3
 80018ba:	0010      	movs	r0, r2
 80018bc:	f001 f8d6 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CS_Pin;
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	4a15      	ldr	r2, [pc, #84]	; (8001918 <MX_GPIO_Init+0xe0>)
 80018c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	2201      	movs	r2, #1
 80018ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	193a      	adds	r2, r7, r4
 80018da:	23a0      	movs	r3, #160	; 0xa0
 80018dc:	05db      	lsls	r3, r3, #23
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 f8c3 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	2220      	movs	r2, #32
 80018ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80018f8:	193a      	adds	r2, r7, r4
 80018fa:	23a0      	movs	r3, #160	; 0xa0
 80018fc:	05db      	lsls	r3, r3, #23
 80018fe:	0011      	movs	r1, r2
 8001900:	0018      	movs	r0, r3
 8001902:	f001 f8b3 	bl	8002a6c <HAL_GPIO_Init>

}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b009      	add	sp, #36	; 0x24
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	50000400 	.word	0x50000400
 8001918:	00001010 	.word	0x00001010

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001922:	e7fe      	b.n	8001922 <Error_Handler+0x6>

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2201      	movs	r2, #1
 800193c:	4013      	ands	r3, r2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0549      	lsls	r1, r1, #21
 800194c:	430a      	orrs	r2, r1
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_MspInit+0x44>)
 8001952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	055b      	lsls	r3, r3, #21
 8001958:	4013      	ands	r3, r2
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b090      	sub	sp, #64	; 0x40
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	232c      	movs	r3, #44	; 0x2c
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	0018      	movs	r0, r3
 800197a:	2314      	movs	r3, #20
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f004 fa9c 	bl	8005ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	2314      	movs	r3, #20
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	0018      	movs	r0, r3
 800198a:	2318      	movs	r3, #24
 800198c:	001a      	movs	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	f004 fa94 	bl	8005ebc <memset>
  if(hadc->Instance==ADC1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_ADC_MspInit+0xb0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d13a      	bne.n	8001a14 <HAL_ADC_MspInit+0xa8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800199e:	2114      	movs	r1, #20
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	01d2      	lsls	r2, r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	0018      	movs	r0, r3
 80019b2:	f001 ff03 	bl	80037bc <HAL_RCCEx_PeriphCLKConfig>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d001      	beq.n	80019be <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80019ba:	f7ff ffaf 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 80019c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0349      	lsls	r1, r1, #13
 80019c8:	430a      	orrs	r2, r1
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 80019ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	035b      	lsls	r3, r3, #13
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 80019dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	635a      	str	r2, [r3, #52]	; 0x34
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BAT_MEAS_Pin;
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2203      	movs	r2, #3
 80019fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8001a06:	187a      	adds	r2, r7, r1
 8001a08:	23a0      	movs	r3, #160	; 0xa0
 8001a0a:	05db      	lsls	r3, r3, #23
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f001 f82c 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b010      	add	sp, #64	; 0x40
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40012400 	.word	0x40012400
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	2314      	movs	r3, #20
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	0018      	movs	r0, r3
 8001a32:	2314      	movs	r3, #20
 8001a34:	001a      	movs	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	f004 fa40 	bl	8005ebc <memset>
  if(hspi->Instance==SPI1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_SPI_MspInit+0x8c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d130      	bne.n	8001aa8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0149      	lsls	r1, r1, #5
 8001a50:	430a      	orrs	r2, r1
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_SPI_MspInit+0x90>)
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 8001a7a:	2114      	movs	r1, #20
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_SPI_MspInit+0x94>)
 8001a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2202      	movs	r2, #2
 8001a86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	187a      	adds	r2, r7, r1
 8001a9c:	23a0      	movs	r3, #160	; 0xa0
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	0011      	movs	r1, r2
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 ffe2 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b00a      	add	sp, #40	; 0x28
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40013000 	.word	0x40013000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	00000882 	.word	0x00000882

08001abc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08b      	sub	sp, #44	; 0x2c
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2314      	movs	r3, #20
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f004 f9f4 	bl	8005ebc <memset>
  if(htim_encoder->Instance==TIM1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_TIM_Encoder_MspInit+0xd4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d154      	bne.n	8001b88 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0109      	lsls	r1, r1, #4
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b00:	2101      	movs	r1, #1
 8001b02:	430a      	orrs	r2, r1
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b18:	2102      	movs	r1, #2
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b2a:	2114      	movs	r1, #20
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	0052      	lsls	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	000c      	movs	r4, r1
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	2202      	movs	r2, #2
 8001b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	193b      	adds	r3, r7, r4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b48:	193b      	adds	r3, r7, r4
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	193a      	adds	r2, r7, r4
 8001b50:	23a0      	movs	r3, #160	; 0xa0
 8001b52:	05db      	lsls	r3, r3, #23
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 ff88 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b5c:	0021      	movs	r1, r4
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2208      	movs	r2, #8
 8001b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2202      	movs	r2, #2
 8001b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	2201      	movs	r2, #1
 8001b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001b80:	0019      	movs	r1, r3
 8001b82:	0010      	movs	r0, r2
 8001b84:	f000 ff72 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b00b      	add	sp, #44	; 0x2c
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	50000400 	.word	0x50000400

08001b9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_TIM_PWM_MspInit+0x34>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10b      	bne.n	8001bc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	230c      	movs	r3, #12
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	0018      	movs	r0, r3
 8001be6:	2314      	movs	r3, #20
 8001be8:	001a      	movs	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	f004 f966 	bl	8005ebc <memset>
  if(htim->Instance==TIM3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_TIM_MspPostInit+0x70>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_TIM_MspPostInit+0x74>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_TIM_MspPostInit+0x74>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_TIM_MspPostInit+0x74>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c12:	210c      	movs	r1, #12
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	187b      	adds	r3, r7, r1
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	187a      	adds	r2, r7, r1
 8001c34:	23a0      	movs	r3, #160	; 0xa0
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	0011      	movs	r1, r2
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f000 ff16 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b008      	add	sp, #32
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40000400 	.word	0x40000400
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	2314      	movs	r3, #20
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	2314      	movs	r3, #20
 8001c60:	001a      	movs	r2, r3
 8001c62:	2100      	movs	r1, #0
 8001c64:	f004 f92a 	bl	8005ebc <memset>
  if(huart->Instance==USART2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_UART_MspInit+0x8c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d130      	bne.n	8001cd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_UART_MspInit+0x90>)
 8001c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_UART_MspInit+0x90>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0289      	lsls	r1, r1, #10
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_UART_MspInit+0x90>)
 8001c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_UART_MspInit+0x90>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_UART_MspInit+0x90>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_UART_MspInit+0x90>)
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ca6:	2114      	movs	r1, #20
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	187a      	adds	r2, r7, r1
 8001cc8:	23a0      	movs	r3, #160	; 0xa0
 8001cca:	05db      	lsls	r3, r3, #23
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fecc 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b00a      	add	sp, #40	; 0x28
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f91c 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e00a      	b.n	8001d3a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d24:	e000      	b.n	8001d28 <_read+0x16>
 8001d26:	bf00      	nop
 8001d28:	0001      	movs	r1, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbf0      	blt.n	8001d24 <_read+0x12>
	}

return len;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b006      	add	sp, #24
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	return -1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	425b      	negs	r3, r3
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	0192      	lsls	r2, r2, #6
 8001d70:	605a      	str	r2, [r3, #4]
	return 0;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_isatty>:

int _isatty(int file)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	return 1;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
	return 0;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	18d3      	adds	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f004 f848 	bl	8005e68 <__errno>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	425b      	negs	r3, r3
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	18d2      	adds	r2, r2, r3
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <_sbrk+0x64>)
 8001df4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b006      	add	sp, #24
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20002000 	.word	0x20002000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	2000008c 	.word	0x2000008c
 8001e0c:	20000290 	.word	0x20000290

08001e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e20:	f7ff fff6 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	; (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	; (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e4a:	f004 f813 	bl	8005e74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e4e:	f7ff fa73 	bl	8001338 <main>

08001e52 <LoopForever>:

LoopForever:
  b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   r0, =_estack
 8001e54:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e60:	08006fd8 	.word	0x08006fd8
  ldr r2, =_sbss
 8001e64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e68:	20000290 	.word	0x20000290

08001e6c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x3c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Init+0x3c>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0049      	lsls	r1, r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 f810 	bl	8001eb0 <HAL_InitTick>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e001      	b.n	8001ea0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fd42 	bl	8001924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	230f      	movs	r3, #15
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_InitTick+0x88>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02b      	beq.n	8001f20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_InitTick+0x8c>)
 8001eca:	681c      	ldr	r4, [r3, #0]
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_InitTick+0x88>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	23fa      	movs	r3, #250	; 0xfa
 8001ed4:	0098      	lsls	r0, r3, #2
 8001ed6:	f7fe f913 	bl	8000100 <__udivsi3>
 8001eda:	0003      	movs	r3, r0
 8001edc:	0019      	movs	r1, r3
 8001ede:	0020      	movs	r0, r4
 8001ee0:	f7fe f90e 	bl	8000100 <__udivsi3>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f000 fdb3 	bl	8002a52 <HAL_SYSTICK_Config>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d112      	bne.n	8001f16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d80a      	bhi.n	8001f0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	425b      	negs	r3, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 fd92 	bl	8002a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_InitTick+0x90>)
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e00d      	b.n	8001f28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e008      	b.n	8001f28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f16:	230f      	movs	r3, #15
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e003      	b.n	8001f28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	230f      	movs	r3, #15
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b005      	add	sp, #20
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x1c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	18d2      	adds	r2, r2, r3
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_IncTick+0x20>)
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000288 	.word	0x20000288

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_GetTick+0x10>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	20000288 	.word	0x20000288

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_GetTick>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_Delay+0x40>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	189b      	adds	r3, r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	f7ff ffe0 	bl	8001f68 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b004      	add	sp, #16
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	601a      	str	r2, [r3, #0]
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	fe3fffff 	.word	0xfe3fffff

08001fe8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	23e0      	movs	r3, #224	; 0xe0
 8001ff6:	045b      	lsls	r3, r3, #17
 8001ff8:	4013      	ands	r3, r2
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}

08002002 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	2104      	movs	r1, #4
 8002016:	400a      	ands	r2, r1
 8002018:	2107      	movs	r1, #7
 800201a:	4091      	lsls	r1, r2
 800201c:	000a      	movs	r2, r1
 800201e:	43d2      	mvns	r2, r2
 8002020:	401a      	ands	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2104      	movs	r1, #4
 8002026:	400b      	ands	r3, r1
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4099      	lsls	r1, r3
 800202c:	000b      	movs	r3, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}

0800203c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	211f      	movs	r1, #31
 8002050:	400a      	ands	r2, r1
 8002052:	210f      	movs	r1, #15
 8002054:	4091      	lsls	r1, r2
 8002056:	000a      	movs	r2, r1
 8002058:	43d2      	mvns	r2, r2
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	210f      	movs	r1, #15
 8002062:	4019      	ands	r1, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	201f      	movs	r0, #31
 8002068:	4003      	ands	r3, r0
 800206a:	4099      	lsls	r1, r3
 800206c:	000b      	movs	r3, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b004      	add	sp, #16
 800207a:	bd80      	pop	{r7, pc}

0800207c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	035b      	lsls	r3, r3, #13
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	0352      	lsls	r2, r2, #13
 80020b0:	0b52      	lsrs	r2, r2, #13
 80020b2:	43d2      	mvns	r2, r2
 80020b4:	401a      	ands	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	0212      	lsls	r2, r2, #8
 80020d8:	43d2      	mvns	r2, r2
 80020da:	401a      	ands	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	400b      	ands	r3, r1
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80020e6:	400b      	ands	r3, r1
 80020e8:	431a      	orrs	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	07ffff00 	.word	0x07ffff00

080020fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a05      	ldr	r2, [pc, #20]	; (8002120 <LL_ADC_EnableInternalRegulator+0x24>)
 800210a:	4013      	ands	r3, r2
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0552      	lsls	r2, r2, #21
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b002      	add	sp, #8
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	6fffffe8 	.word	0x6fffffe8

08002124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	401a      	ands	r2, r3
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	055b      	lsls	r3, r3, #21
 800213a:	429a      	cmp	r2, r3
 800213c:	d101      	bne.n	8002142 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002142:	2300      	movs	r3, #0
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b002      	add	sp, #8
 800214a:	bd80      	pop	{r7, pc}

0800214c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2201      	movs	r2, #1
 800215a:	4013      	ands	r3, r2
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <LL_ADC_IsEnabled+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_IsEnabled+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	0018      	movs	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	b002      	add	sp, #8
 800216c:	bd80      	pop	{r7, pc}

0800216e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2204      	movs	r2, #4
 800217c:	4013      	ands	r3, r2
 800217e:	2b04      	cmp	r3, #4
 8002180:	d101      	bne.n	8002186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002186:	2300      	movs	r3, #0
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002198:	231f      	movs	r3, #31
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1b3      	b.n	800251e <HAL_ADC_Init+0x38e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff fbd3 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2254      	movs	r2, #84	; 0x54
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff ffa3 	bl	8002124 <LL_ADC_IsInternalRegulatorEnabled>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d115      	bne.n	800220e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7ff ff88 	bl	80020fc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ec:	4bce      	ldr	r3, [pc, #824]	; (8002528 <HAL_ADC_Init+0x398>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	49ce      	ldr	r1, [pc, #824]	; (800252c <HAL_ADC_Init+0x39c>)
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7fd ff84 	bl	8000100 <__udivsi3>
 80021f8:	0003      	movs	r3, r0
 80021fa:	3301      	adds	r3, #1
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff ff86 	bl	8002124 <LL_ADC_IsInternalRegulatorEnabled>
 8002218:	1e03      	subs	r3, r0, #0
 800221a:	d10f      	bne.n	800223c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	2210      	movs	r2, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2201      	movs	r2, #1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002234:	231f      	movs	r3, #31
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff ff94 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 8002246:	0003      	movs	r3, r0
 8002248:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	2210      	movs	r2, #16
 8002250:	4013      	ands	r3, r2
 8002252:	d000      	beq.n	8002256 <HAL_ADC_Init+0xc6>
 8002254:	e156      	b.n	8002504 <HAL_ADC_Init+0x374>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d000      	beq.n	800225e <HAL_ADC_Init+0xce>
 800225c:	e152      	b.n	8002504 <HAL_ADC_Init+0x374>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4ab3      	ldr	r2, [pc, #716]	; (8002530 <HAL_ADC_Init+0x3a0>)
 8002264:	4013      	ands	r3, r2
 8002266:	2202      	movs	r2, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff ff6a 	bl	800214c <LL_ADC_IsEnabled>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d156      	bne.n	800232a <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2218      	movs	r2, #24
 8002284:	4393      	bics	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0f9b      	lsrs	r3, r3, #30
 800229a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223c      	movs	r2, #60	; 0x3c
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d111      	bne.n	80022d6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0f9b      	lsrs	r3, r3, #30
 80022b8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022be:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80022c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80022ca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	2201      	movs	r2, #1
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4a95      	ldr	r2, [pc, #596]	; (8002534 <HAL_ADC_Init+0x3a4>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d018      	beq.n	800232a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	05db      	lsls	r3, r3, #23
 8002300:	429a      	cmp	r2, r3
 8002302:	d012      	beq.n	800232a <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	429a      	cmp	r2, r3
 800230e:	d00c      	beq.n	800232a <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002310:	4b89      	ldr	r3, [pc, #548]	; (8002538 <HAL_ADC_Init+0x3a8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a89      	ldr	r2, [pc, #548]	; (800253c <HAL_ADC_Init+0x3ac>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	23f0      	movs	r3, #240	; 0xf0
 8002320:	039b      	lsls	r3, r3, #14
 8002322:	401a      	ands	r2, r3
 8002324:	4b84      	ldr	r3, [pc, #528]	; (8002538 <HAL_ADC_Init+0x3a8>)
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7e1b      	ldrb	r3, [r3, #24]
 800232e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7e5b      	ldrb	r3, [r3, #25]
 8002334:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002336:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e9b      	ldrb	r3, [r3, #26]
 800233c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800233e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_ADC_Init+0x1be>
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	015b      	lsls	r3, r3, #5
 800234c:	e000      	b.n	8002350 <HAL_ADC_Init+0x1c0>
 800234e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002350:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002356:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	da04      	bge.n	800236a <HAL_ADC_Init+0x1da>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	e001      	b.n	800236e <HAL_ADC_Init+0x1de>
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800236e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	5c5b      	ldrb	r3, [r3, r1]
 8002376:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002378:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	5c9b      	ldrb	r3, [r3, r2]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d115      	bne.n	80023b6 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7e9b      	ldrb	r3, [r3, #26]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	0252      	lsls	r2, r2, #9
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	e00b      	b.n	80023b6 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	2220      	movs	r2, #32
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c2:	23e0      	movs	r3, #224	; 0xe0
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023cc:	4313      	orrs	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4a59      	ldr	r2, [pc, #356]	; (8002540 <HAL_ADC_Init+0x3b0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	4a54      	ldr	r2, [pc, #336]	; (8002544 <HAL_ADC_Init+0x3b4>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	001a      	movs	r2, r3
 800240a:	2100      	movs	r1, #0
 800240c:	f7ff fdf9 	bl	8002002 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	494b      	ldr	r1, [pc, #300]	; (8002548 <HAL_ADC_Init+0x3b8>)
 800241a:	001a      	movs	r2, r3
 800241c:	f7ff fdf1 	bl	8002002 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2110      	movs	r1, #16
 8002434:	4249      	negs	r1, r1
 8002436:	430a      	orrs	r2, r1
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
 800243a:	e03c      	b.n	80024b6 <HAL_ADC_Init+0x326>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	039b      	lsls	r3, r3, #14
 8002444:	429a      	cmp	r2, r3
 8002446:	d136      	bne.n	80024b6 <HAL_ADC_Init+0x326>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	e00c      	b.n	8002468 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	40da      	lsrs	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	220f      	movs	r2, #15
 800245c:	4013      	ands	r3, r2
 800245e:	2b0f      	cmp	r3, #15
 8002460:	d006      	beq.n	8002470 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	3301      	adds	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b07      	cmp	r3, #7
 800246c:	d9ef      	bls.n	800244e <HAL_ADC_Init+0x2be>
 800246e:	e000      	b.n	8002472 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002470:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d109      	bne.n	800248c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2110      	movs	r1, #16
 8002484:	4249      	negs	r1, r1
 8002486:	430a      	orrs	r2, r1
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
 800248a:	e014      	b.n	80024b6 <HAL_ADC_Init+0x326>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a2d      	ldr	r2, [pc, #180]	; (800254c <HAL_ADC_Init+0x3bc>)
 8002498:	4694      	mov	ip, r2
 800249a:	4463      	add	r3, ip
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	221c      	movs	r2, #28
 80024a0:	4013      	ands	r3, r2
 80024a2:	2210      	movs	r2, #16
 80024a4:	4252      	negs	r2, r2
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0011      	movs	r1, r2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_ADC_Init+0x3c0>)
 80024be:	4013      	ands	r3, r2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d10b      	bne.n	80024de <HAL_ADC_Init+0x34e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	2203      	movs	r2, #3
 80024d2:	4393      	bics	r3, r2
 80024d4:	2201      	movs	r2, #1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80024dc:	e01c      	b.n	8002518 <HAL_ADC_Init+0x388>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	2212      	movs	r2, #18
 80024e4:	4393      	bics	r3, r2
 80024e6:	2210      	movs	r2, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2201      	movs	r2, #1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80024fa:	231f      	movs	r3, #31
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002502:	e009      	b.n	8002518 <HAL_ADC_Init+0x388>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	2210      	movs	r2, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002510:	231f      	movs	r3, #31
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002518:	231f      	movs	r3, #31
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	781b      	ldrb	r3, [r3, #0]
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b008      	add	sp, #32
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	20000000 	.word	0x20000000
 800252c:	00030d40 	.word	0x00030d40
 8002530:	fffffefd 	.word	0xfffffefd
 8002534:	1ffffc02 	.word	0x1ffffc02
 8002538:	40012708 	.word	0x40012708
 800253c:	ffc3ffff 	.word	0xffc3ffff
 8002540:	fffe0219 	.word	0xfffe0219
 8002544:	dffffc02 	.word	0xdffffc02
 8002548:	07ffff04 	.word	0x07ffff04
 800254c:	3fffffff 	.word	0x3fffffff
 8002550:	833fffe7 	.word	0x833fffe7

08002554 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2317      	movs	r3, #23
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2254      	movs	r2, #84	; 0x54
 800256e:	5c9b      	ldrb	r3, [r3, r2]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x24>
 8002574:	2302      	movs	r3, #2
 8002576:	e1c0      	b.n	80028fa <HAL_ADC_ConfigChannel+0x3a6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2254      	movs	r2, #84	; 0x54
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff fdf2 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d000      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x3c>
 800258e:	e1a3      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d100      	bne.n	800259a <HAL_ADC_ConfigChannel+0x46>
 8002598:	e143      	b.n	8002822 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025aa:	4ac1      	ldr	r2, [pc, #772]	; (80028b0 <HAL_ADC_ConfigChannel+0x35c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d108      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0019      	movs	r1, r3
 80025ba:	0010      	movs	r0, r2
 80025bc:	f7ff fd5e 	bl	800207c <LL_ADC_REG_SetSequencerChAdd>
 80025c0:	e0c9      	b.n	8002756 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	211f      	movs	r1, #31
 80025cc:	400b      	ands	r3, r1
 80025ce:	210f      	movs	r1, #15
 80025d0:	4099      	lsls	r1, r3
 80025d2:	000b      	movs	r3, r1
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	035b      	lsls	r3, r3, #13
 80025e0:	0b5b      	lsrs	r3, r3, #13
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x9c>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	221f      	movs	r2, #31
 80025ec:	4013      	ands	r3, r2
 80025ee:	e098      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	4013      	ands	r3, r2
 80025f8:	d000      	beq.n	80025fc <HAL_ADC_ConfigChannel+0xa8>
 80025fa:	e091      	b.n	8002720 <HAL_ADC_ConfigChannel+0x1cc>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2202      	movs	r2, #2
 8002602:	4013      	ands	r3, r2
 8002604:	d000      	beq.n	8002608 <HAL_ADC_ConfigChannel+0xb4>
 8002606:	e089      	b.n	800271c <HAL_ADC_ConfigChannel+0x1c8>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2204      	movs	r2, #4
 800260e:	4013      	ands	r3, r2
 8002610:	d000      	beq.n	8002614 <HAL_ADC_ConfigChannel+0xc0>
 8002612:	e081      	b.n	8002718 <HAL_ADC_ConfigChannel+0x1c4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2208      	movs	r2, #8
 800261a:	4013      	ands	r3, r2
 800261c:	d000      	beq.n	8002620 <HAL_ADC_ConfigChannel+0xcc>
 800261e:	e079      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1c0>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2210      	movs	r2, #16
 8002626:	4013      	ands	r3, r2
 8002628:	d000      	beq.n	800262c <HAL_ADC_ConfigChannel+0xd8>
 800262a:	e071      	b.n	8002710 <HAL_ADC_ConfigChannel+0x1bc>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2220      	movs	r2, #32
 8002632:	4013      	ands	r3, r2
 8002634:	d000      	beq.n	8002638 <HAL_ADC_ConfigChannel+0xe4>
 8002636:	e069      	b.n	800270c <HAL_ADC_ConfigChannel+0x1b8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2240      	movs	r2, #64	; 0x40
 800263e:	4013      	ands	r3, r2
 8002640:	d000      	beq.n	8002644 <HAL_ADC_ConfigChannel+0xf0>
 8002642:	e061      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1b4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	4013      	ands	r3, r2
 800264c:	d000      	beq.n	8002650 <HAL_ADC_ConfigChannel+0xfc>
 800264e:	e059      	b.n	8002704 <HAL_ADC_ConfigChannel+0x1b0>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d151      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x1ac>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4013      	ands	r3, r2
 8002666:	d149      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1a8>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4013      	ands	r3, r2
 8002672:	d141      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1a4>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4013      	ands	r3, r2
 800267e:	d139      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1a0>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	015b      	lsls	r3, r3, #5
 8002688:	4013      	ands	r3, r2
 800268a:	d131      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x19c>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	019b      	lsls	r3, r3, #6
 8002694:	4013      	ands	r3, r2
 8002696:	d129      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x198>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	01db      	lsls	r3, r3, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	d121      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x194>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	4013      	ands	r3, r2
 80026ae:	d119      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x190>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	025b      	lsls	r3, r3, #9
 80026b8:	4013      	ands	r3, r2
 80026ba:	d111      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x18c>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	d109      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x188>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	02db      	lsls	r3, r3, #11
 80026d0:	4013      	ands	r3, r2
 80026d2:	d001      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0x184>
 80026d4:	2312      	movs	r3, #18
 80026d6:	e024      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026d8:	2300      	movs	r3, #0
 80026da:	e022      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026dc:	2311      	movs	r3, #17
 80026de:	e020      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026e0:	2310      	movs	r3, #16
 80026e2:	e01e      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026e4:	230f      	movs	r3, #15
 80026e6:	e01c      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026e8:	230e      	movs	r3, #14
 80026ea:	e01a      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026ec:	230d      	movs	r3, #13
 80026ee:	e018      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026f0:	230c      	movs	r3, #12
 80026f2:	e016      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026f4:	230b      	movs	r3, #11
 80026f6:	e014      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026f8:	230a      	movs	r3, #10
 80026fa:	e012      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 80026fc:	2309      	movs	r3, #9
 80026fe:	e010      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002700:	2308      	movs	r3, #8
 8002702:	e00e      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002704:	2307      	movs	r3, #7
 8002706:	e00c      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002708:	2306      	movs	r3, #6
 800270a:	e00a      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 800270c:	2305      	movs	r3, #5
 800270e:	e008      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002710:	2304      	movs	r3, #4
 8002712:	e006      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002714:	2303      	movs	r3, #3
 8002716:	e004      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002718:	2302      	movs	r3, #2
 800271a:	e002      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x1ce>
 8002720:	2300      	movs	r3, #0
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6852      	ldr	r2, [r2, #4]
 8002726:	201f      	movs	r0, #31
 8002728:	4002      	ands	r2, r0
 800272a:	4093      	lsls	r3, r2
 800272c:	000a      	movs	r2, r1
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	429a      	cmp	r2, r3
 8002742:	d808      	bhi.n	8002756 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	001a      	movs	r2, r3
 8002752:	f7ff fc73 	bl	800203c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	001a      	movs	r2, r3
 8002764:	f7ff fcae 	bl	80020c4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db00      	blt.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
 8002770:	e0bc      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002772:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fc37 	bl	8001fe8 <LL_ADC_GetCommonPathInternalCh>
 800277a:	0003      	movs	r3, r0
 800277c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_ADC_ConfigChannel+0x364>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d122      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002790:	d11d      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	0412      	lsls	r2, r2, #16
 8002798:	4313      	orrs	r3, r2
 800279a:	4a46      	ldr	r2, [pc, #280]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 800279c:	0019      	movs	r1, r3
 800279e:	0010      	movs	r0, r2
 80027a0:	f7ff fc0e 	bl	8001fc0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a4:	4b45      	ldr	r3, [pc, #276]	; (80028bc <HAL_ADC_ConfigChannel+0x368>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4945      	ldr	r1, [pc, #276]	; (80028c0 <HAL_ADC_ConfigChannel+0x36c>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fd fca8 	bl	8000100 <__udivsi3>
 80027b0:	0003      	movs	r3, r0
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	0013      	movs	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	189b      	adds	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027be:	e002      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f9      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027cc:	e08e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3c      	ldr	r2, [pc, #240]	; (80028c4 <HAL_ADC_ConfigChannel+0x370>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10e      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x2a2>
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	045b      	lsls	r3, r3, #17
 80027de:	4013      	ands	r3, r2
 80027e0:	d109      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	0452      	lsls	r2, r2, #17
 80027e8:	4313      	orrs	r3, r2
 80027ea:	4a32      	ldr	r2, [pc, #200]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 80027ec:	0019      	movs	r1, r3
 80027ee:	0010      	movs	r0, r2
 80027f0:	f7ff fbe6 	bl	8001fc0 <LL_ADC_SetCommonPathInternalCh>
 80027f4:	e07a      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <HAL_ADC_ConfigChannel+0x374>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d000      	beq.n	8002802 <HAL_ADC_ConfigChannel+0x2ae>
 8002800:	e074      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	03db      	lsls	r3, r3, #15
 8002808:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800280a:	d000      	beq.n	800280e <HAL_ADC_ConfigChannel+0x2ba>
 800280c:	e06e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	03d2      	lsls	r2, r2, #15
 8002814:	4313      	orrs	r3, r2
 8002816:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 8002818:	0019      	movs	r1, r3
 800281a:	0010      	movs	r0, r2
 800281c:	f7ff fbd0 	bl	8001fc0 <LL_ADC_SetCommonPathInternalCh>
 8002820:	e064      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	429a      	cmp	r2, r3
 800282c:	d004      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_ADC_ConfigChannel+0x35c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d107      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0019      	movs	r1, r3
 8002842:	0010      	movs	r0, r2
 8002844:	f7ff fc2b 	bl	800209e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	da4d      	bge.n	80028ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 8002852:	0018      	movs	r0, r3
 8002854:	f7ff fbc8 	bl	8001fe8 <LL_ADC_GetCommonPathInternalCh>
 8002858:	0003      	movs	r3, r0
 800285a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <HAL_ADC_ConfigChannel+0x364>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_ADC_ConfigChannel+0x378>)
 800286a:	4013      	ands	r3, r2
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 800286e:	0019      	movs	r1, r3
 8002870:	0010      	movs	r0, r2
 8002872:	f7ff fba5 	bl	8001fc0 <LL_ADC_SetCommonPathInternalCh>
 8002876:	e039      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_ADC_ConfigChannel+0x370>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d108      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <HAL_ADC_ConfigChannel+0x37c>)
 8002886:	4013      	ands	r3, r2
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 800288a:	0019      	movs	r1, r3
 800288c:	0010      	movs	r0, r2
 800288e:	f7ff fb97 	bl	8001fc0 <LL_ADC_SetCommonPathInternalCh>
 8002892:	e02b      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_ADC_ConfigChannel+0x374>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d126      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_ADC_ConfigChannel+0x380>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_ADC_ConfigChannel+0x360>)
 80028a6:	0019      	movs	r1, r3
 80028a8:	0010      	movs	r0, r2
 80028aa:	f7ff fb89 	bl	8001fc0 <LL_ADC_SetCommonPathInternalCh>
 80028ae:	e01d      	b.n	80028ec <HAL_ADC_ConfigChannel+0x398>
 80028b0:	80000004 	.word	0x80000004
 80028b4:	40012708 	.word	0x40012708
 80028b8:	b0001000 	.word	0xb0001000
 80028bc:	20000000 	.word	0x20000000
 80028c0:	00030d40 	.word	0x00030d40
 80028c4:	b8004000 	.word	0xb8004000
 80028c8:	b4002000 	.word	0xb4002000
 80028cc:	ff7fffff 	.word	0xff7fffff
 80028d0:	feffffff 	.word	0xfeffffff
 80028d4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	2220      	movs	r2, #32
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028e4:	2317      	movs	r3, #23
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2254      	movs	r2, #84	; 0x54
 80028f0:	2100      	movs	r1, #0
 80028f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80028f4:	2317      	movs	r3, #23
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	781b      	ldrb	r3, [r3, #0]
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b006      	add	sp, #24
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	0002      	movs	r2, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b7f      	cmp	r3, #127	; 0x7f
 8002918:	d828      	bhi.n	800296c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800291a:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <__NVIC_SetPriority+0xd4>)
 800291c:	1dfb      	adds	r3, r7, #7
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b25b      	sxtb	r3, r3
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	33c0      	adds	r3, #192	; 0xc0
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	589b      	ldr	r3, [r3, r2]
 800292a:	1dfa      	adds	r2, r7, #7
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	0011      	movs	r1, r2
 8002930:	2203      	movs	r2, #3
 8002932:	400a      	ands	r2, r1
 8002934:	00d2      	lsls	r2, r2, #3
 8002936:	21ff      	movs	r1, #255	; 0xff
 8002938:	4091      	lsls	r1, r2
 800293a:	000a      	movs	r2, r1
 800293c:	43d2      	mvns	r2, r2
 800293e:	401a      	ands	r2, r3
 8002940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	22ff      	movs	r2, #255	; 0xff
 8002948:	401a      	ands	r2, r3
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	0018      	movs	r0, r3
 8002950:	2303      	movs	r3, #3
 8002952:	4003      	ands	r3, r0
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002958:	481f      	ldr	r0, [pc, #124]	; (80029d8 <__NVIC_SetPriority+0xd4>)
 800295a:	1dfb      	adds	r3, r7, #7
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b25b      	sxtb	r3, r3
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	430a      	orrs	r2, r1
 8002964:	33c0      	adds	r3, #192	; 0xc0
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800296a:	e031      	b.n	80029d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <__NVIC_SetPriority+0xd8>)
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	0019      	movs	r1, r3
 8002974:	230f      	movs	r3, #15
 8002976:	400b      	ands	r3, r1
 8002978:	3b08      	subs	r3, #8
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3306      	adds	r3, #6
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1dfa      	adds	r2, r7, #7
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	0011      	movs	r1, r2
 800298c:	2203      	movs	r2, #3
 800298e:	400a      	ands	r2, r1
 8002990:	00d2      	lsls	r2, r2, #3
 8002992:	21ff      	movs	r1, #255	; 0xff
 8002994:	4091      	lsls	r1, r2
 8002996:	000a      	movs	r2, r1
 8002998:	43d2      	mvns	r2, r2
 800299a:	401a      	ands	r2, r3
 800299c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	22ff      	movs	r2, #255	; 0xff
 80029a4:	401a      	ands	r2, r3
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	0018      	movs	r0, r3
 80029ac:	2303      	movs	r3, #3
 80029ae:	4003      	ands	r3, r0
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029b4:	4809      	ldr	r0, [pc, #36]	; (80029dc <__NVIC_SetPriority+0xd8>)
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	001c      	movs	r4, r3
 80029bc:	230f      	movs	r3, #15
 80029be:	4023      	ands	r3, r4
 80029c0:	3b08      	subs	r3, #8
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	430a      	orrs	r2, r1
 80029c6:	3306      	adds	r3, #6
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	18c3      	adds	r3, r0, r3
 80029cc:	3304      	adds	r3, #4
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b003      	add	sp, #12
 80029d6:	bd90      	pop	{r4, r7, pc}
 80029d8:	e000e100 	.word	0xe000e100
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <SysTick_Config+0x40>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e010      	b.n	8002a18 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <SysTick_Config+0x44>)
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	3a01      	subs	r2, #1
 80029fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	2301      	movs	r3, #1
 8002a00:	425b      	negs	r3, r3
 8002a02:	2103      	movs	r1, #3
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff ff7d 	bl	8002904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <SysTick_Config+0x44>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a10:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <SysTick_Config+0x44>)
 8002a12:	2207      	movs	r2, #7
 8002a14:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	0018      	movs	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	00ffffff 	.word	0x00ffffff
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	210f      	movs	r1, #15
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	1c02      	adds	r2, r0, #0
 8002a38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7ff ff5d 	bl	8002904 <__NVIC_SetPriority>
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b004      	add	sp, #16
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff ffbf 	bl	80029e0 <SysTick_Config>
 8002a62:	0003      	movs	r3, r0
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7a:	e147      	b.n	8002d0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4091      	lsls	r1, r2
 8002a86:	000a      	movs	r2, r1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_GPIO_Init+0x28>
 8002a92:	e138      	b.n	8002d06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d005      	beq.n	8002aac <HAL_GPIO_Init+0x40>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d130      	bne.n	8002b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	43da      	mvns	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	43da      	mvns	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	2201      	movs	r2, #1
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
 8002b00:	0013      	movs	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d017      	beq.n	8002b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d123      	bne.n	8002b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	58d3      	ldr	r3, [r2, r3]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2207      	movs	r2, #7
 8002b68:	4013      	ands	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	43da      	mvns	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2107      	movs	r1, #7
 8002b82:	400b      	ands	r3, r1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	6939      	ldr	r1, [r7, #16]
 8002b9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	23c0      	movs	r3, #192	; 0xc0
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d100      	bne.n	8002be0 <HAL_GPIO_Init+0x174>
 8002bde:	e092      	b.n	8002d06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002be0:	4a50      	ldr	r2, [pc, #320]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3318      	adds	r3, #24
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	589b      	ldr	r3, [r3, r2]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	23a0      	movs	r3, #160	; 0xa0
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x1ca>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <HAL_GPIO_Init+0x2bc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x1c6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a44      	ldr	r2, [pc, #272]	; (8002d2c <HAL_GPIO_Init+0x2c0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x1c2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a43      	ldr	r2, [pc, #268]	; (8002d30 <HAL_GPIO_Init+0x2c4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x1be>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x1cc>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x1cc>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x1cc>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x1cc>
 8002c36:	2300      	movs	r3, #0
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	4093      	lsls	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c48:	4936      	ldr	r1, [pc, #216]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3318      	adds	r3, #24
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	58d3      	ldr	r3, [r2, r3]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	43da      	mvns	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	025b      	lsls	r3, r3, #9
 8002c70:	4013      	ands	r3, r2
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c7c:	4929      	ldr	r1, [pc, #164]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002c84:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002c86:	2384      	movs	r3, #132	; 0x84
 8002c88:	58d3      	ldr	r3, [r2, r3]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	029b      	lsls	r3, r3, #10
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002caa:	491e      	ldr	r1, [pc, #120]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002cac:	2284      	movs	r2, #132	; 0x84
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	035b      	lsls	r3, r3, #13
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	039b      	lsls	r3, r3, #14
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_GPIO_Init+0x2b8>)
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	40da      	lsrs	r2, r3
 8002d14:	1e13      	subs	r3, r2, #0
 8002d16:	d000      	beq.n	8002d1a <HAL_GPIO_Init+0x2ae>
 8002d18:	e6b0      	b.n	8002a7c <HAL_GPIO_Init+0x10>
  }
}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b006      	add	sp, #24
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	40021800 	.word	0x40021800
 8002d28:	50000400 	.word	0x50000400
 8002d2c:	50000800 	.word	0x50000800
 8002d30:	50000c00 	.word	0x50000c00

08002d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	0008      	movs	r0, r1
 8002d3e:	0011      	movs	r1, r2
 8002d40:	1cbb      	adds	r3, r7, #2
 8002d42:	1c02      	adds	r2, r0, #0
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	1c7b      	adds	r3, r7, #1
 8002d48:	1c0a      	adds	r2, r1, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d4c:	1c7b      	adds	r3, r7, #1
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d54:	1cbb      	adds	r3, r7, #2
 8002d56:	881a      	ldrh	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d5c:	e003      	b.n	8002d66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d5e:	1cbb      	adds	r3, r7, #2
 8002d60:	881a      	ldrh	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	000a      	movs	r2, r1
 8002d78:	1cbb      	adds	r3, r7, #2
 8002d7a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d82:	1cbb      	adds	r3, r7, #2
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	041a      	lsls	r2, r3, #16
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	1cb9      	adds	r1, r7, #2
 8002d92:	8809      	ldrh	r1, [r1, #0]
 8002d94:	400b      	ands	r3, r1
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b004      	add	sp, #16
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d11f      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	0013      	movs	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4912      	ldr	r1, [pc, #72]	; (8002e20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fd f992 	bl	8000100 <__udivsi3>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	3301      	adds	r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de2:	e008      	b.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e001      	b.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e009      	b.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d0ed      	beq.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b004      	add	sp, #16
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	40007000 	.word	0x40007000
 8002e18:	fffff9ff 	.word	0xfffff9ff
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	000f4240 	.word	0x000f4240

08002e24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	23e0      	movs	r3, #224	; 0xe0
 8002e2e:	01db      	lsls	r3, r3, #7
 8002e30:	4013      	ands	r3, r2
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000

08002e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e2f9      	b.n	8003442 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d100      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1e>
 8002e58:	e07c      	b.n	8002f54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5a:	4bc3      	ldr	r3, [pc, #780]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2238      	movs	r2, #56	; 0x38
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e64:	4bc0      	ldr	r3, [pc, #768]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2203      	movs	r2, #3
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3e>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d002      	beq.n	8002e80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4bb9      	ldr	r3, [pc, #740]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	029b      	lsls	r3, r3, #10
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d062      	beq.n	8002f52 <HAL_RCC_OscConfig+0x116>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d15e      	bne.n	8002f52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e2d4      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x78>
 8002ea4:	4bb0      	ldr	r3, [pc, #704]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4baf      	ldr	r3, [pc, #700]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	0249      	lsls	r1, r1, #9
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e020      	b.n	8002ef6 <HAL_RCC_OscConfig+0xba>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	23a0      	movs	r3, #160	; 0xa0
 8002eba:	02db      	lsls	r3, r3, #11
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d10e      	bne.n	8002ede <HAL_RCC_OscConfig+0xa2>
 8002ec0:	4ba9      	ldr	r3, [pc, #676]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4ba8      	ldr	r3, [pc, #672]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	02c9      	lsls	r1, r1, #11
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	4ba6      	ldr	r3, [pc, #664]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4ba5      	ldr	r3, [pc, #660]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0249      	lsls	r1, r1, #9
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e00b      	b.n	8002ef6 <HAL_RCC_OscConfig+0xba>
 8002ede:	4ba2      	ldr	r3, [pc, #648]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4ba1      	ldr	r3, [pc, #644]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ee4:	49a1      	ldr	r1, [pc, #644]	; (800316c <HAL_RCC_OscConfig+0x330>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	4b9f      	ldr	r3, [pc, #636]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b9e      	ldr	r3, [pc, #632]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ef0:	499f      	ldr	r1, [pc, #636]	; (8003170 <HAL_RCC_OscConfig+0x334>)
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7ff f833 	bl	8001f68 <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff f82e 	bl	8001f68 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e293      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1a:	4b93      	ldr	r3, [pc, #588]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	029b      	lsls	r3, r3, #10
 8002f22:	4013      	ands	r3, r2
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xcc>
 8002f26:	e015      	b.n	8002f54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff f81e 	bl	8001f68 <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f32:	f7ff f819 	bl	8001f68 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b64      	cmp	r3, #100	; 0x64
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e27e      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f44:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	029b      	lsls	r3, r3, #10
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0xf6>
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d100      	bne.n	8002f60 <HAL_RCC_OscConfig+0x124>
 8002f5e:	e099      	b.n	8003094 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2238      	movs	r2, #56	; 0x38
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	4013      	ands	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_OscConfig+0x144>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d002      	beq.n	8002f86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d135      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x162>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e251      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b72      	ldr	r3, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a74      	ldr	r2, [pc, #464]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	021a      	lsls	r2, r3, #8
 8002fae:	4b6e      	ldr	r3, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fba:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0x33c>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002fce:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0adb      	lsrs	r3, r3, #11
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	4a68      	ldr	r2, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x340>)
 8002fda:	40da      	lsrs	r2, r3
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_OscConfig+0x344>)
 8002fde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_OscConfig+0x348>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7fe ff63 	bl	8001eb0 <HAL_InitTick>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d051      	beq.n	8003092 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e227      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d030      	beq.n	800305c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x33c>)
 8003000:	4013      	ands	r3, r2
 8003002:	0019      	movs	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	4b57      	ldr	r3, [pc, #348]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b55      	ldr	r3, [pc, #340]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	0049      	lsls	r1, r1, #1
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe ffa4 	bl	8001f68 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003026:	f7fe ff9f 	bl	8001f68 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e204      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003038:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4013      	ands	r3, r2
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b48      	ldr	r3, [pc, #288]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x338>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	021a      	lsls	r2, r3, #8
 8003054:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	e01b      	b.n	8003094 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003062:	4949      	ldr	r1, [pc, #292]	; (8003188 <HAL_RCC_OscConfig+0x34c>)
 8003064:	400a      	ands	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe ff7e 	bl	8001f68 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fe ff79 	bl	8001f68 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1de      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	4b38      	ldr	r3, [pc, #224]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4013      	ands	r3, r2
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x236>
 8003090:	e000      	b.n	8003094 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2208      	movs	r2, #8
 800309a:	4013      	ands	r3, r2
 800309c:	d047      	beq.n	800312e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2238      	movs	r2, #56	; 0x38
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b18      	cmp	r3, #24
 80030a8:	d10a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	2202      	movs	r2, #2
 80030b0:	4013      	ands	r3, r2
 80030b2:	d03c      	beq.n	800312e <HAL_RCC_OscConfig+0x2f2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d138      	bne.n	800312e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e1c0      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 80030ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	430a      	orrs	r2, r1
 80030d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe ff48 	bl	8001f68 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe ff43 	bl	8001f68 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e1a8      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f0:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	2202      	movs	r2, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	d0f1      	beq.n	80030de <HAL_RCC_OscConfig+0x2a2>
 80030fa:	e018      	b.n	800312e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003102:	2101      	movs	r1, #1
 8003104:	438a      	bics	r2, r1
 8003106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe ff2e 	bl	8001f68 <HAL_GetTick>
 800310c:	0003      	movs	r3, r0
 800310e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe ff29 	bl	8001f68 <HAL_GetTick>
 8003116:	0002      	movs	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e18e      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003124:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	2202      	movs	r2, #2
 800312a:	4013      	ands	r3, r2
 800312c:	d1f1      	bne.n	8003112 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2204      	movs	r2, #4
 8003134:	4013      	ands	r3, r2
 8003136:	d100      	bne.n	800313a <HAL_RCC_OscConfig+0x2fe>
 8003138:	e0c6      	b.n	80032c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	231f      	movs	r3, #31
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2238      	movs	r2, #56	; 0x38
 8003148:	4013      	ands	r3, r2
 800314a:	2b20      	cmp	r3, #32
 800314c:	d11e      	bne.n	800318c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCC_OscConfig+0x32c>)
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	2202      	movs	r2, #2
 8003154:	4013      	ands	r3, r2
 8003156:	d100      	bne.n	800315a <HAL_RCC_OscConfig+0x31e>
 8003158:	e0b6      	b.n	80032c8 <HAL_RCC_OscConfig+0x48c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d000      	beq.n	8003164 <HAL_RCC_OscConfig+0x328>
 8003162:	e0b1      	b.n	80032c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e16c      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
 8003168:	40021000 	.word	0x40021000
 800316c:	fffeffff 	.word	0xfffeffff
 8003170:	fffbffff 	.word	0xfffbffff
 8003174:	ffff80ff 	.word	0xffff80ff
 8003178:	ffffc7ff 	.word	0xffffc7ff
 800317c:	00f42400 	.word	0x00f42400
 8003180:	20000000 	.word	0x20000000
 8003184:	20000004 	.word	0x20000004
 8003188:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800318c:	4baf      	ldr	r3, [pc, #700]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800318e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	055b      	lsls	r3, r3, #21
 8003194:	4013      	ands	r3, r2
 8003196:	d101      	bne.n	800319c <HAL_RCC_OscConfig+0x360>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x362>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d011      	beq.n	80031c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4baa      	ldr	r3, [pc, #680]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80031a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a6:	4ba9      	ldr	r3, [pc, #676]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0549      	lsls	r1, r1, #21
 80031ac:	430a      	orrs	r2, r1
 80031ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80031b0:	4ba6      	ldr	r3, [pc, #664]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80031b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	055b      	lsls	r3, r3, #21
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031be:	231f      	movs	r3, #31
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031c6:	4ba2      	ldr	r3, [pc, #648]	; (8003450 <HAL_RCC_OscConfig+0x614>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d11a      	bne.n	8003208 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d2:	4b9f      	ldr	r3, [pc, #636]	; (8003450 <HAL_RCC_OscConfig+0x614>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b9e      	ldr	r3, [pc, #632]	; (8003450 <HAL_RCC_OscConfig+0x614>)
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	0049      	lsls	r1, r1, #1
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fec2 	bl	8001f68 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fe febd 	bl	8001f68 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e122      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_OscConfig+0x614>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x3e2>
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003214:	4b8d      	ldr	r3, [pc, #564]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003216:	2101      	movs	r1, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c
 800321c:	e01c      	b.n	8003258 <HAL_RCC_OscConfig+0x41c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x404>
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800322c:	2104      	movs	r1, #4
 800322e:	430a      	orrs	r2, r1
 8003230:	65da      	str	r2, [r3, #92]	; 0x5c
 8003232:	4b86      	ldr	r3, [pc, #536]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003236:	4b85      	ldr	r3, [pc, #532]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003238:	2101      	movs	r1, #1
 800323a:	430a      	orrs	r2, r1
 800323c:	65da      	str	r2, [r3, #92]	; 0x5c
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0x41c>
 8003240:	4b82      	ldr	r3, [pc, #520]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003244:	4b81      	ldr	r3, [pc, #516]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003246:	2101      	movs	r1, #1
 8003248:	438a      	bics	r2, r1
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
 800324c:	4b7f      	ldr	r3, [pc, #508]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800324e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003250:	4b7e      	ldr	r3, [pc, #504]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003252:	2104      	movs	r1, #4
 8003254:	438a      	bics	r2, r1
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d014      	beq.n	800328a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fe82 	bl	8001f68 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003268:	e009      	b.n	800327e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fe7d 	bl	8001f68 <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	4a77      	ldr	r2, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x618>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0e1      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327e:	4b73      	ldr	r3, [pc, #460]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2202      	movs	r2, #2
 8003284:	4013      	ands	r3, r2
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x42e>
 8003288:	e013      	b.n	80032b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fe6d 	bl	8001f68 <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003292:	e009      	b.n	80032a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe fe68 	bl	8001f68 <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x618>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0cc      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032a8:	4b68      	ldr	r3, [pc, #416]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2202      	movs	r2, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032b2:	231f      	movs	r3, #31
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032bc:	4b63      	ldr	r3, [pc, #396]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80032be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032c0:	4b62      	ldr	r3, [pc, #392]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80032c2:	4965      	ldr	r1, [pc, #404]	; (8003458 <HAL_RCC_OscConfig+0x61c>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d100      	bne.n	80032d2 <HAL_RCC_OscConfig+0x496>
 80032d0:	e0b6      	b.n	8003440 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d2:	4b5e      	ldr	r3, [pc, #376]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2238      	movs	r2, #56	; 0x38
 80032d8:	4013      	ands	r3, r2
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d100      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4a4>
 80032de:	e07e      	b.n	80033de <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d153      	bne.n	8003390 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b58      	ldr	r3, [pc, #352]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80032ee:	495b      	ldr	r1, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x620>)
 80032f0:	400a      	ands	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fe38 	bl	8001f68 <HAL_GetTick>
 80032f8:	0003      	movs	r3, r0
 80032fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe fe33 	bl	8001f68 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e098      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003310:	4b4e      	ldr	r3, [pc, #312]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	049b      	lsls	r3, r3, #18
 8003318:	4013      	ands	r3, r2
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331c:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a4f      	ldr	r2, [pc, #316]	; (8003460 <HAL_RCC_OscConfig+0x624>)
 8003322:	4013      	ands	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1a      	ldr	r2, [r3, #32]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	431a      	orrs	r2, r3
 8003344:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003346:	430a      	orrs	r2, r1
 8003348:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334a:	4b40      	ldr	r3, [pc, #256]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0449      	lsls	r1, r1, #17
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003358:	4b3c      	ldr	r3, [pc, #240]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800335e:	2180      	movs	r1, #128	; 0x80
 8003360:	0549      	lsls	r1, r1, #21
 8003362:	430a      	orrs	r2, r1
 8003364:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe fdff 	bl	8001f68 <HAL_GetTick>
 800336a:	0003      	movs	r3, r0
 800336c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fe fdfa 	bl	8001f68 <HAL_GetTick>
 8003374:	0002      	movs	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e05f      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003382:	4b32      	ldr	r3, [pc, #200]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	049b      	lsls	r3, r3, #18
 800338a:	4013      	ands	r3, r2
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x534>
 800338e:	e057      	b.n	8003440 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <HAL_RCC_OscConfig+0x610>)
 8003396:	4931      	ldr	r1, [pc, #196]	; (800345c <HAL_RCC_OscConfig+0x620>)
 8003398:	400a      	ands	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_OscConfig+0x610>)
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80033a2:	2103      	movs	r1, #3
 80033a4:	438a      	bics	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80033a8:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80033ae:	492d      	ldr	r1, [pc, #180]	; (8003464 <HAL_RCC_OscConfig+0x628>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe fdd8 	bl	8001f68 <HAL_GetTick>
 80033b8:	0003      	movs	r3, r0
 80033ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033be:	f7fe fdd3 	bl	8001f68 <HAL_GetTick>
 80033c2:	0002      	movs	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e038      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	049b      	lsls	r3, r3, #18
 80033d8:	4013      	ands	r3, r2
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x582>
 80033dc:	e030      	b.n	8003440 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e02b      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80033ea:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_RCC_OscConfig+0x610>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2203      	movs	r2, #3
 80033f4:	401a      	ands	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d11e      	bne.n	800343c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2270      	movs	r2, #112	; 0x70
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d117      	bne.n	800343c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	23fe      	movs	r3, #254	; 0xfe
 8003410:	01db      	lsls	r3, r3, #7
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d10e      	bne.n	800343c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	23f8      	movs	r3, #248	; 0xf8
 8003422:	039b      	lsls	r3, r3, #14
 8003424:	401a      	ands	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d106      	bne.n	800343c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	0f5b      	lsrs	r3, r3, #29
 8003432:	075a      	lsls	r2, r3, #29
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b008      	add	sp, #32
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
 8003454:	00001388 	.word	0x00001388
 8003458:	efffffff 	.word	0xefffffff
 800345c:	feffffff 	.word	0xfeffffff
 8003460:	1fc1808c 	.word	0x1fc1808c
 8003464:	effeffff 	.word	0xeffeffff

08003468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0e9      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2207      	movs	r2, #7
 8003482:	4013      	ands	r3, r2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d91e      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b73      	ldr	r3, [pc, #460]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2207      	movs	r2, #7
 8003490:	4393      	bics	r3, r2
 8003492:	0019      	movs	r1, r3
 8003494:	4b70      	ldr	r3, [pc, #448]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800349c:	f7fe fd64 	bl	8001f68 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034a4:	e009      	b.n	80034ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a6:	f7fe fd5f 	bl	8001f68 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	4a6a      	ldr	r2, [pc, #424]	; (800365c <HAL_RCC_ClockConfig+0x1f4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0ca      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2207      	movs	r2, #7
 80034c0:	4013      	ands	r3, r2
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1ee      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2202      	movs	r2, #2
 80034ce:	4013      	ands	r3, r2
 80034d0:	d015      	beq.n	80034fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2204      	movs	r2, #4
 80034d8:	4013      	ands	r3, r2
 80034da:	d006      	beq.n	80034ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034dc:	4b60      	ldr	r3, [pc, #384]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 80034e2:	21e0      	movs	r1, #224	; 0xe0
 80034e4:	01c9      	lsls	r1, r1, #7
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ea:	4b5d      	ldr	r3, [pc, #372]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <HAL_RCC_ClockConfig+0x1fc>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	d057      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	d12b      	bne.n	8003574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e097      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b02      	cmp	r3, #2
 8003526:	d107      	bne.n	8003538 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	049b      	lsls	r3, r3, #18
 8003530:	4013      	ands	r3, r2
 8003532:	d11f      	bne.n	8003574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e08b      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4013      	ands	r3, r2
 800354a:	d113      	bne.n	8003574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e07f      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d106      	bne.n	8003566 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	2202      	movs	r2, #2
 800355e:	4013      	ands	r3, r2
 8003560:	d108      	bne.n	8003574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e074      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003566:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	2202      	movs	r2, #2
 800356c:	4013      	ands	r3, r2
 800356e:	d101      	bne.n	8003574 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e06d      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2207      	movs	r2, #7
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003588:	f7fe fcee 	bl	8001f68 <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003590:	e009      	b.n	80035a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003592:	f7fe fce9 	bl	8001f68 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <HAL_RCC_ClockConfig+0x1f4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e054      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2238      	movs	r2, #56	; 0x38
 80035ac:	401a      	ands	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d1ec      	bne.n	8003592 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2207      	movs	r2, #7
 80035be:	4013      	ands	r3, r2
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d21e      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2207      	movs	r2, #7
 80035cc:	4393      	bics	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d8:	f7fe fcc6 	bl	8001f68 <HAL_GetTick>
 80035dc:	0003      	movs	r3, r0
 80035de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035e0:	e009      	b.n	80035f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7fe fcc1 	bl	8001f68 <HAL_GetTick>
 80035e6:	0002      	movs	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	4a1b      	ldr	r2, [pc, #108]	; (800365c <HAL_RCC_ClockConfig+0x1f4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e02c      	b.n	8003650 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2207      	movs	r2, #7
 80035fc:	4013      	ands	r3, r2
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d1ee      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2204      	movs	r2, #4
 800360a:	4013      	ands	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	4a15      	ldr	r2, [pc, #84]	; (8003668 <HAL_RCC_ClockConfig+0x200>)
 8003614:	4013      	ands	r3, r2
 8003616:	0019      	movs	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003622:	f000 f829 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003626:	0001      	movs	r1, r0
 8003628:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_RCC_ClockConfig+0x1f8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	220f      	movs	r2, #15
 8003630:	401a      	ands	r2, r3
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x204>)
 8003634:	0092      	lsls	r2, r2, #2
 8003636:	58d3      	ldr	r3, [r2, r3]
 8003638:	221f      	movs	r2, #31
 800363a:	4013      	ands	r3, r2
 800363c:	000a      	movs	r2, r1
 800363e:	40da      	lsrs	r2, r3
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_ClockConfig+0x208>)
 8003642:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x20c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0018      	movs	r0, r3
 800364a:	f7fe fc31 	bl	8001eb0 <HAL_InitTick>
 800364e:	0003      	movs	r3, r0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40022000 	.word	0x40022000
 800365c:	00001388 	.word	0x00001388
 8003660:	40021000 	.word	0x40021000
 8003664:	fffff0ff 	.word	0xfffff0ff
 8003668:	ffff8fff 	.word	0xffff8fff
 800366c:	08006e6c 	.word	0x08006e6c
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2238      	movs	r2, #56	; 0x38
 8003684:	4013      	ands	r3, r2
 8003686:	d10f      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0adb      	lsrs	r3, r3, #11
 800368e:	2207      	movs	r2, #7
 8003690:	4013      	ands	r3, r2
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	0013      	movs	r3, r2
 8003698:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	4835      	ldr	r0, [pc, #212]	; (8003774 <HAL_RCC_GetSysClockFreq+0xfc>)
 800369e:	f7fc fd2f 	bl	8000100 <__udivsi3>
 80036a2:	0003      	movs	r3, r0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e05d      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2238      	movs	r2, #56	; 0x38
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b4:	4b30      	ldr	r3, [pc, #192]	; (8003778 <HAL_RCC_GetSysClockFreq+0x100>)
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	e054      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2238      	movs	r2, #56	; 0x38
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d138      	bne.n	8003738 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2203      	movs	r2, #3
 80036cc:	4013      	ands	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	2207      	movs	r2, #7
 80036d8:	4013      	ands	r3, r2
 80036da:	3301      	adds	r3, #1
 80036dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d10d      	bne.n	8003700 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4824      	ldr	r0, [pc, #144]	; (8003778 <HAL_RCC_GetSysClockFreq+0x100>)
 80036e8:	f7fc fd0a 	bl	8000100 <__udivsi3>
 80036ec:	0003      	movs	r3, r0
 80036ee:	0019      	movs	r1, r3
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	227f      	movs	r2, #127	; 0x7f
 80036f8:	4013      	ands	r3, r2
 80036fa:	434b      	muls	r3, r1
 80036fc:	617b      	str	r3, [r7, #20]
        break;
 80036fe:	e00d      	b.n	800371c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	481c      	ldr	r0, [pc, #112]	; (8003774 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003704:	f7fc fcfc 	bl	8000100 <__udivsi3>
 8003708:	0003      	movs	r3, r0
 800370a:	0019      	movs	r1, r3
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	227f      	movs	r2, #127	; 0x7f
 8003714:	4013      	ands	r3, r2
 8003716:	434b      	muls	r3, r1
 8003718:	617b      	str	r3, [r7, #20]
        break;
 800371a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0f5b      	lsrs	r3, r3, #29
 8003722:	2207      	movs	r2, #7
 8003724:	4013      	ands	r3, r2
 8003726:	3301      	adds	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	6978      	ldr	r0, [r7, #20]
 800372e:	f7fc fce7 	bl	8000100 <__udivsi3>
 8003732:	0003      	movs	r3, r0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	e015      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2238      	movs	r2, #56	; 0x38
 800373e:	4013      	ands	r3, r2
 8003740:	2b20      	cmp	r3, #32
 8003742:	d103      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_GetSysClockFreq+0xf8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2238      	movs	r2, #56	; 0x38
 8003752:	4013      	ands	r3, r2
 8003754:	2b18      	cmp	r3, #24
 8003756:	d103      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003758:	23fa      	movs	r3, #250	; 0xfa
 800375a:	01db      	lsls	r3, r3, #7
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e001      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003764:	693b      	ldr	r3, [r7, #16]
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	40021000 	.word	0x40021000
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_RCC_GetHCLKFreq+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	20000000 	.word	0x20000000

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003794:	f7ff fff2 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8003798:	0004      	movs	r4, r0
 800379a:	f7ff fb43 	bl	8002e24 <LL_RCC_GetAPB1Prescaler>
 800379e:	0003      	movs	r3, r0
 80037a0:	0b1a      	lsrs	r2, r3, #12
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	58d3      	ldr	r3, [r2, r3]
 80037a8:	221f      	movs	r2, #31
 80037aa:	4013      	ands	r3, r2
 80037ac:	40dc      	lsrs	r4, r3
 80037ae:	0023      	movs	r3, r4
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	08006eac 	.word	0x08006eac

080037bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037c4:	2313      	movs	r3, #19
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037cc:	2312      	movs	r3, #18
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	029b      	lsls	r3, r3, #10
 80037dc:	4013      	ands	r3, r2
 80037de:	d100      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80037e0:	e0a4      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e2:	2311      	movs	r3, #17
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b7f      	ldr	r3, [pc, #508]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	055b      	lsls	r3, r3, #21
 80037f2:	4013      	ands	r3, r2
 80037f4:	d111      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	4b7c      	ldr	r3, [pc, #496]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	0549      	lsls	r1, r1, #21
 8003800:	430a      	orrs	r2, r1
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c
 8003804:	4b78      	ldr	r3, [pc, #480]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	055b      	lsls	r3, r3, #21
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2311      	movs	r3, #17
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381a:	4b74      	ldr	r3, [pc, #464]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	0049      	lsls	r1, r1, #1
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003828:	f7fe fb9e 	bl	8001f68 <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003830:	e00b      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fe fb99 	bl	8001f68 <HAL_GetTick>
 8003836:	0002      	movs	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d904      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003840:	2313      	movs	r3, #19
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2203      	movs	r2, #3
 8003846:	701a      	strb	r2, [r3, #0]
        break;
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384a:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4013      	ands	r3, r2
 8003854:	d0ed      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8003856:	2313      	movs	r3, #19
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d154      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003860:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003864:	23c0      	movs	r3, #192	; 0xc0
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4013      	ands	r3, r2
 800386a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d019      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d014      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800387c:	4b5a      	ldr	r3, [pc, #360]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	4a5b      	ldr	r2, [pc, #364]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003882:	4013      	ands	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003886:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800388a:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800388c:	2180      	movs	r1, #128	; 0x80
 800388e:	0249      	lsls	r1, r1, #9
 8003890:	430a      	orrs	r2, r1
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003894:	4b54      	ldr	r3, [pc, #336]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003896:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003898:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800389a:	4956      	ldr	r1, [pc, #344]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800389c:	400a      	ands	r2, r1
 800389e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a0:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2201      	movs	r2, #1
 80038aa:	4013      	ands	r3, r2
 80038ac:	d016      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fe fb5b 	bl	8001f68 <HAL_GetTick>
 80038b2:	0003      	movs	r3, r0
 80038b4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	e00c      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fe fb56 	bl	8001f68 <HAL_GetTick>
 80038bc:	0002      	movs	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d904      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80038c8:	2313      	movs	r3, #19
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2203      	movs	r2, #3
 80038ce:	701a      	strb	r2, [r3, #0]
            break;
 80038d0:	e004      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2202      	movs	r2, #2
 80038d8:	4013      	ands	r3, r2
 80038da:	d0ed      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80038dc:	2313      	movs	r3, #19
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10a      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	4a41      	ldr	r2, [pc, #260]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038f6:	430a      	orrs	r2, r1
 80038f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80038fa:	e00c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038fc:	2312      	movs	r3, #18
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2213      	movs	r2, #19
 8003902:	18ba      	adds	r2, r7, r2
 8003904:	7812      	ldrb	r2, [r2, #0]
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e005      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390a:	2312      	movs	r3, #18
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2213      	movs	r2, #19
 8003910:	18ba      	adds	r2, r7, r2
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003916:	2311      	movs	r3, #17
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003924:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003926:	4935      	ldr	r1, [pc, #212]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003928:	400a      	ands	r2, r1
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2201      	movs	r2, #1
 8003932:	4013      	ands	r3, r2
 8003934:	d009      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	2203      	movs	r2, #3
 800393c:	4393      	bics	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003946:	430a      	orrs	r2, r1
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2220      	movs	r2, #32
 8003950:	4013      	ands	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003964:	430a      	orrs	r2, r1
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	01db      	lsls	r3, r3, #7
 8003970:	4013      	ands	r3, r2
 8003972:	d015      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	0899      	lsrs	r1, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003982:	430a      	orrs	r2, r1
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	429a      	cmp	r2, r3
 8003990:	d106      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	0249      	lsls	r1, r1, #9
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	4013      	ands	r3, r2
 80039aa:	d016      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039bc:	430a      	orrs	r2, r1
 80039be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	01db      	lsls	r3, r3, #7
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d106      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430a      	orrs	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80039da:	2312      	movs	r3, #18
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	781b      	ldrb	r3, [r3, #0]
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b006      	add	sp, #24
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	fffffcff 	.word	0xfffffcff
 80039f4:	fffeffff 	.word	0xfffeffff
 80039f8:	00001388 	.word	0x00001388
 80039fc:	efffffff 	.word	0xefffffff
 8003a00:	ffffcfff 	.word	0xffffcfff
 8003a04:	ffff3fff 	.word	0xffff3fff

08003a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0a8      	b.n	8003b6c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	2382      	movs	r3, #130	; 0x82
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d009      	beq.n	8003a42 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	61da      	str	r2, [r3, #28]
 8003a34:	e005      	b.n	8003a42 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	225d      	movs	r2, #93	; 0x5d
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d107      	bne.n	8003a64 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	225c      	movs	r2, #92	; 0x5c
 8003a58:	2100      	movs	r1, #0
 8003a5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7fd ffe0 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	225d      	movs	r2, #93	; 0x5d
 8003a68:	2102      	movs	r1, #2
 8003a6a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2140      	movs	r1, #64	; 0x40
 8003a78:	438a      	bics	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	23e0      	movs	r3, #224	; 0xe0
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d902      	bls.n	8003a8e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e002      	b.n	8003a94 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	015b      	lsls	r3, r3, #5
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	23f0      	movs	r3, #240	; 0xf0
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d008      	beq.n	8003ab2 <HAL_SPI_Init+0xaa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	23e0      	movs	r3, #224	; 0xe0
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	2382      	movs	r3, #130	; 0x82
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	2384      	movs	r3, #132	; 0x84
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2102      	movs	r1, #2
 8003ace:	400b      	ands	r3, r1
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	400b      	ands	r3, r1
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6999      	ldr	r1, [r3, #24]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2138      	movs	r1, #56	; 0x38
 8003aee:	400b      	ands	r3, r1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	2180      	movs	r1, #128	; 0x80
 8003af8:	400b      	ands	r3, r1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	0011      	movs	r1, r2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	019b      	lsls	r3, r3, #6
 8003b06:	401a      	ands	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	2204      	movs	r2, #4
 8003b18:	401a      	ands	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2110      	movs	r1, #16
 8003b20:	400b      	ands	r3, r1
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	2108      	movs	r1, #8
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	23f0      	movs	r3, #240	; 0xf0
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	400b      	ands	r3, r1
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	015b      	lsls	r3, r3, #5
 8003b42:	401a      	ands	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4907      	ldr	r1, [pc, #28]	; (8003b74 <HAL_SPI_Init+0x16c>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	225d      	movs	r2, #93	; 0x5d
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b004      	add	sp, #16
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	fffff7ff 	.word	0xfffff7ff

08003b78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	1dbb      	adds	r3, r7, #6
 8003b86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b88:	231f      	movs	r3, #31
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	225c      	movs	r2, #92	; 0x5c
 8003b94:	5c9b      	ldrb	r3, [r3, r2]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_SPI_Transmit+0x26>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e140      	b.n	8003e20 <HAL_SPI_Transmit+0x2a8>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	225c      	movs	r2, #92	; 0x5c
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba6:	f7fe f9df 	bl	8001f68 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003bae:	2316      	movs	r3, #22
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	1dba      	adds	r2, r7, #6
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	225d      	movs	r2, #93	; 0x5d
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d004      	beq.n	8003bce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003bc4:	231f      	movs	r3, #31
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
    goto error;
 8003bcc:	e11d      	b.n	8003e0a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_SPI_Transmit+0x64>
 8003bd4:	1dbb      	adds	r3, r7, #6
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003bdc:	231f      	movs	r3, #31
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003be4:	e111      	b.n	8003e0a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	225d      	movs	r2, #93	; 0x5d
 8003bea:	2103      	movs	r1, #3
 8003bec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1dba      	adds	r2, r7, #6
 8003bfe:	8812      	ldrh	r2, [r2, #0]
 8003c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1dba      	adds	r2, r7, #6
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2244      	movs	r2, #68	; 0x44
 8003c14:	2100      	movs	r1, #0
 8003c16:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2246      	movs	r2, #70	; 0x46
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d110      	bne.n	8003c5a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	438a      	bics	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	01c9      	lsls	r1, r1, #7
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d007      	beq.n	8003c78 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	23e0      	movs	r3, #224	; 0xe0
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d94e      	bls.n	8003d22 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <HAL_SPI_Transmit+0x11e>
 8003c8c:	2316      	movs	r3, #22
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d13f      	bne.n	8003d16 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	1c9a      	adds	r2, r3, #2
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cba:	e02c      	b.n	8003d16 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d112      	bne.n	8003cf0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cee:	e012      	b.n	8003d16 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf0:	f7fe f93a 	bl	8001f68 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d802      	bhi.n	8003d06 <HAL_SPI_Transmit+0x18e>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_SPI_Transmit+0x194>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003d0c:	231f      	movs	r3, #31
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2203      	movs	r2, #3
 8003d12:	701a      	strb	r2, [r3, #0]
          goto error;
 8003d14:	e079      	b.n	8003e0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cd      	bne.n	8003cbc <HAL_SPI_Transmit+0x144>
 8003d20:	e04f      	b.n	8003dc2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_SPI_Transmit+0x1bc>
 8003d2a:	2316      	movs	r3, #22
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d141      	bne.n	8003db8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	7812      	ldrb	r2, [r2, #0]
 8003d40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003d5a:	e02d      	b.n	8003db8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2202      	movs	r2, #2
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d113      	bne.n	8003d92 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d90:	e012      	b.n	8003db8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d92:	f7fe f8e9 	bl	8001f68 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d802      	bhi.n	8003da8 <HAL_SPI_Transmit+0x230>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	d102      	bne.n	8003dae <HAL_SPI_Transmit+0x236>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003dae:	231f      	movs	r3, #31
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2203      	movs	r2, #3
 8003db4:	701a      	strb	r2, [r3, #0]
          goto error;
 8003db6:	e028      	b.n	8003e0a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1cc      	bne.n	8003d5c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 fcdb 	bl	8004784 <SPI_EndRxTxTransaction>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003dfe:	231f      	movs	r3, #31
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e000      	b.n	8003e0a <HAL_SPI_Transmit+0x292>
  }

error:
 8003e08:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	225d      	movs	r2, #93	; 0x5d
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	225c      	movs	r2, #92	; 0x5c
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e1a:	231f      	movs	r3, #31
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	781b      	ldrb	r3, [r3, #0]
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b008      	add	sp, #32
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e38:	2317      	movs	r3, #23
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	2382      	movs	r3, #130	; 0x82
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d113      	bne.n	8003e74 <HAL_SPI_Receive+0x4c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	225d      	movs	r2, #93	; 0x5d
 8003e58:	2104      	movs	r1, #4
 8003e5a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e5c:	1dbb      	adds	r3, r7, #6
 8003e5e:	881c      	ldrh	r4, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	0023      	movs	r3, r4
 8003e6c:	f000 f928 	bl	80040c0 <HAL_SPI_TransmitReceive>
 8003e70:	0003      	movs	r3, r0
 8003e72:	e11c      	b.n	80040ae <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	225c      	movs	r2, #92	; 0x5c
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_Receive+0x5a>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e115      	b.n	80040ae <HAL_SPI_Receive+0x286>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	225c      	movs	r2, #92	; 0x5c
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8a:	f7fe f86d 	bl	8001f68 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	225d      	movs	r2, #93	; 0x5d
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d004      	beq.n	8003ea8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003e9e:	2317      	movs	r3, #23
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ea6:	e0f7      	b.n	8004098 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_SPI_Receive+0x8e>
 8003eae:	1dbb      	adds	r3, r7, #6
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003eb6:	2317      	movs	r3, #23
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	2201      	movs	r2, #1
 8003ebc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ebe:	e0eb      	b.n	8004098 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	225d      	movs	r2, #93	; 0x5d
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1dba      	adds	r2, r7, #6
 8003ed8:	2144      	movs	r1, #68	; 0x44
 8003eda:	8812      	ldrh	r2, [r2, #0]
 8003edc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1dba      	adds	r2, r7, #6
 8003ee2:	2146      	movs	r1, #70	; 0x46
 8003ee4:	8812      	ldrh	r2, [r2, #0]
 8003ee6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	23e0      	movs	r3, #224	; 0xe0
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d908      	bls.n	8003f24 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4966      	ldr	r1, [pc, #408]	; (80040b8 <HAL_SPI_Receive+0x290>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e008      	b.n	8003f36 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2180      	movs	r1, #128	; 0x80
 8003f30:	0149      	lsls	r1, r1, #5
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d10f      	bne.n	8003f62 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2140      	movs	r1, #64	; 0x40
 8003f4e:	438a      	bics	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4957      	ldr	r1, [pc, #348]	; (80040bc <HAL_SPI_Receive+0x294>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2240      	movs	r2, #64	; 0x40
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d007      	beq.n	8003f80 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	23e0      	movs	r3, #224	; 0xe0
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d900      	bls.n	8003f8e <HAL_SPI_Receive+0x166>
 8003f8c:	e069      	b.n	8004062 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f8e:	e031      	b.n	8003ff4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2201      	movs	r2, #1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d117      	bne.n	8003fce <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2246      	movs	r2, #70	; 0x46
 8003fbe:	5a9b      	ldrh	r3, [r3, r2]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b299      	uxth	r1, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2246      	movs	r2, #70	; 0x46
 8003fca:	5299      	strh	r1, [r3, r2]
 8003fcc:	e012      	b.n	8003ff4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fce:	f7fd ffcb 	bl	8001f68 <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d802      	bhi.n	8003fe4 <HAL_SPI_Receive+0x1bc>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Receive+0x1c2>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003fea:	2317      	movs	r3, #23
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	2203      	movs	r2, #3
 8003ff0:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ff2:	e051      	b.n	8004098 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2246      	movs	r2, #70	; 0x46
 8003ff8:	5a9b      	ldrh	r3, [r3, r2]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1c7      	bne.n	8003f90 <HAL_SPI_Receive+0x168>
 8004000:	e035      	b.n	800406e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2201      	movs	r2, #1
 800400a:	4013      	ands	r3, r2
 800400c:	2b01      	cmp	r3, #1
 800400e:	d115      	bne.n	800403c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	b292      	uxth	r2, r2
 800401c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2246      	movs	r2, #70	; 0x46
 800402c:	5a9b      	ldrh	r3, [r3, r2]
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b299      	uxth	r1, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2246      	movs	r2, #70	; 0x46
 8004038:	5299      	strh	r1, [r3, r2]
 800403a:	e012      	b.n	8004062 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403c:	f7fd ff94 	bl	8001f68 <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d802      	bhi.n	8004052 <HAL_SPI_Receive+0x22a>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_SPI_Receive+0x230>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004058:	2317      	movs	r3, #23
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	2203      	movs	r2, #3
 800405e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004060:	e01a      	b.n	8004098 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2246      	movs	r2, #70	; 0x46
 8004066:	5a9b      	ldrh	r3, [r3, r2]
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1c9      	bne.n	8004002 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 fb27 	bl	80046c8 <SPI_EndRxTransaction>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800408c:	2317      	movs	r3, #23
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e000      	b.n	8004098 <HAL_SPI_Receive+0x270>
  }

error :
 8004096:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	225d      	movs	r2, #93	; 0x5d
 800409c:	2101      	movs	r1, #1
 800409e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	225c      	movs	r2, #92	; 0x5c
 80040a4:	2100      	movs	r1, #0
 80040a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80040a8:	2317      	movs	r3, #23
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b007      	add	sp, #28
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	ffffefff 	.word	0xffffefff
 80040bc:	ffffbfff 	.word	0xffffbfff

080040c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08a      	sub	sp, #40	; 0x28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	001a      	movs	r2, r3
 80040ce:	1cbb      	adds	r3, r7, #2
 80040d0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040d2:	2301      	movs	r3, #1
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040d6:	2323      	movs	r3, #35	; 0x23
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	225c      	movs	r2, #92	; 0x5c
 80040e2:	5c9b      	ldrb	r3, [r3, r2]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x2c>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e1b6      	b.n	800445a <HAL_SPI_TransmitReceive+0x39a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	225c      	movs	r2, #92	; 0x5c
 80040f0:	2101      	movs	r1, #1
 80040f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040f4:	f7fd ff38 	bl	8001f68 <HAL_GetTick>
 80040f8:	0003      	movs	r3, r0
 80040fa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040fc:	201b      	movs	r0, #27
 80040fe:	183b      	adds	r3, r7, r0
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	215d      	movs	r1, #93	; 0x5d
 8004104:	5c52      	ldrb	r2, [r2, r1]
 8004106:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800410e:	2312      	movs	r3, #18
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	1cba      	adds	r2, r7, #2
 8004114:	8812      	ldrh	r2, [r2, #0]
 8004116:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004118:	183b      	adds	r3, r7, r0
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d012      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x86>
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	2382      	movs	r3, #130	; 0x82
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	429a      	cmp	r2, r3
 8004128:	d108      	bne.n	800413c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d104      	bne.n	800413c <HAL_SPI_TransmitReceive+0x7c>
 8004132:	231b      	movs	r3, #27
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d004      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800413c:	2323      	movs	r3, #35	; 0x23
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2202      	movs	r2, #2
 8004142:	701a      	strb	r2, [r3, #0]
    goto error;
 8004144:	e17e      	b.n	8004444 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <HAL_SPI_TransmitReceive+0x9a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_SPI_TransmitReceive+0x9a>
 8004152:	1cbb      	adds	r3, r7, #2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800415a:	2323      	movs	r3, #35	; 0x23
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
    goto error;
 8004162:	e16f      	b.n	8004444 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	225d      	movs	r2, #93	; 0x5d
 8004168:	5c9b      	ldrb	r3, [r3, r2]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b04      	cmp	r3, #4
 800416e:	d003      	beq.n	8004178 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	225d      	movs	r2, #93	; 0x5d
 8004174:	2105      	movs	r1, #5
 8004176:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1cba      	adds	r2, r7, #2
 8004188:	2146      	movs	r1, #70	; 0x46
 800418a:	8812      	ldrh	r2, [r2, #0]
 800418c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1cba      	adds	r2, r7, #2
 8004192:	2144      	movs	r1, #68	; 0x44
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1cba      	adds	r2, r7, #2
 80041a2:	8812      	ldrh	r2, [r2, #0]
 80041a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1cba      	adds	r2, r7, #2
 80041aa:	8812      	ldrh	r2, [r2, #0]
 80041ac:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	23e0      	movs	r3, #224	; 0xe0
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d908      	bls.n	80041d8 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	49a4      	ldr	r1, [pc, #656]	; (8004464 <HAL_SPI_TransmitReceive+0x3a4>)
 80041d2:	400a      	ands	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	e008      	b.n	80041ea <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	0149      	lsls	r1, r1, #5
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b40      	cmp	r3, #64	; 0x40
 80041f6:	d007      	beq.n	8004208 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2140      	movs	r1, #64	; 0x40
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	23e0      	movs	r3, #224	; 0xe0
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	429a      	cmp	r2, r3
 8004212:	d800      	bhi.n	8004216 <HAL_SPI_TransmitReceive+0x156>
 8004214:	e07f      	b.n	8004316 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_SPI_TransmitReceive+0x16a>
 800421e:	2312      	movs	r3, #18
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d000      	beq.n	800422a <HAL_SPI_TransmitReceive+0x16a>
 8004228:	e069      	b.n	80042fe <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424e:	e056      	b.n	80042fe <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2202      	movs	r2, #2
 8004258:	4013      	ands	r3, r2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d11b      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x1d6>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d016      	beq.n	8004296 <HAL_SPI_TransmitReceive+0x1d6>
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	2b01      	cmp	r3, #1
 800426c:	d113      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d11c      	bne.n	80042de <HAL_SPI_TransmitReceive+0x21e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2246      	movs	r2, #70	; 0x46
 80042a8:	5a9b      	ldrh	r3, [r3, r2]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d016      	beq.n	80042de <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	b292      	uxth	r2, r2
 80042bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2246      	movs	r2, #70	; 0x46
 80042cc:	5a9b      	ldrh	r3, [r3, r2]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b299      	uxth	r1, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2246      	movs	r2, #70	; 0x46
 80042d8:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042da:	2301      	movs	r3, #1
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042de:	f7fd fe43 	bl	8001f68 <HAL_GetTick>
 80042e2:	0002      	movs	r2, r0
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d807      	bhi.n	80042fe <HAL_SPI_TransmitReceive+0x23e>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	3301      	adds	r3, #1
 80042f2:	d004      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 80042f4:	2323      	movs	r3, #35	; 0x23
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	2203      	movs	r2, #3
 80042fa:	701a      	strb	r2, [r3, #0]
        goto error;
 80042fc:	e0a2      	b.n	8004444 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1a3      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x190>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2246      	movs	r2, #70	; 0x46
 800430c:	5a9b      	ldrh	r3, [r3, r2]
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d19d      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x190>
 8004314:	e085      	b.n	8004422 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_SPI_TransmitReceive+0x26a>
 800431e:	2312      	movs	r3, #18
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d000      	beq.n	800432a <HAL_SPI_TransmitReceive+0x26a>
 8004328:	e070      	b.n	800440c <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004350:	e05c      	b.n	800440c <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2202      	movs	r2, #2
 800435a:	4013      	ands	r3, r2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d11c      	bne.n	800439a <HAL_SPI_TransmitReceive+0x2da>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d017      	beq.n	800439a <HAL_SPI_TransmitReceive+0x2da>
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	2b01      	cmp	r3, #1
 800436e:	d114      	bne.n	800439a <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d11e      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x326>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2246      	movs	r2, #70	; 0x46
 80043ac:	5a9b      	ldrh	r3, [r3, r2]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d018      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	001a      	movs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2246      	movs	r2, #70	; 0x46
 80043d4:	5a9b      	ldrh	r3, [r3, r2]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b299      	uxth	r1, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2246      	movs	r2, #70	; 0x46
 80043e0:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e2:	2301      	movs	r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043e6:	f7fd fdbf 	bl	8001f68 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d802      	bhi.n	80043fc <HAL_SPI_TransmitReceive+0x33c>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	3301      	adds	r3, #1
 80043fa:	d102      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x342>
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8004402:	2323      	movs	r3, #35	; 0x23
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2203      	movs	r2, #3
 8004408:	701a      	strb	r2, [r3, #0]
        goto error;
 800440a:	e01b      	b.n	8004444 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d19d      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x292>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2246      	movs	r2, #70	; 0x46
 800441a:	5a9b      	ldrh	r3, [r3, r2]
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d197      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 f9ab 	bl	8004784 <SPI_EndRxTxTransaction>
 800442e:	1e03      	subs	r3, r0, #0
 8004430:	d007      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8004432:	2323      	movs	r3, #35	; 0x23
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	661a      	str	r2, [r3, #96]	; 0x60
 8004440:	e000      	b.n	8004444 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8004442:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	225d      	movs	r2, #93	; 0x5d
 8004448:	2101      	movs	r1, #1
 800444a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	225c      	movs	r2, #92	; 0x5c
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004454:	2323      	movs	r3, #35	; 0x23
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	781b      	ldrb	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b00a      	add	sp, #40	; 0x28
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	ffffefff 	.word	0xffffefff

08004468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004478:	f7fd fd76 	bl	8001f68 <HAL_GetTick>
 800447c:	0002      	movs	r2, r0
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	18d3      	adds	r3, r2, r3
 8004486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004488:	f7fd fd6e 	bl	8001f68 <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004490:	4b3a      	ldr	r3, [pc, #232]	; (800457c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	015b      	lsls	r3, r3, #5
 8004496:	0d1b      	lsrs	r3, r3, #20
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	4353      	muls	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	e058      	b.n	8004552 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	d055      	beq.n	8004552 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a6:	f7fd fd5f 	bl	8001f68 <HAL_GetTick>
 80044aa:	0002      	movs	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d902      	bls.n	80044bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d142      	bne.n	8004542 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	21e0      	movs	r1, #224	; 0xe0
 80044c8:	438a      	bics	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	2382      	movs	r3, #130	; 0x82
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d113      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0x98>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d005      	beq.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d107      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	438a      	bics	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	019b      	lsls	r3, r3, #6
 8004508:	429a      	cmp	r2, r3
 800450a:	d110      	bne.n	800452e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	491a      	ldr	r1, [pc, #104]	; (8004580 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004518:	400a      	ands	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	0189      	lsls	r1, r1, #6
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	225d      	movs	r2, #93	; 0x5d
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	225c      	movs	r2, #92	; 0x5c
 800453a:	2100      	movs	r1, #0
 800453c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e017      	b.n	8004572 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3b01      	subs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	425a      	negs	r2, r3
 8004562:	4153      	adcs	r3, r2
 8004564:	b2db      	uxtb	r3, r3
 8004566:	001a      	movs	r2, r3
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d197      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	b008      	add	sp, #32
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	20000000 	.word	0x20000000
 8004580:	ffffdfff 	.word	0xffffdfff

08004584 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004592:	2317      	movs	r3, #23
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800459a:	f7fd fce5 	bl	8001f68 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	18d3      	adds	r3, r2, r3
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045aa:	f7fd fcdd 	bl	8001f68 <HAL_GetTick>
 80045ae:	0003      	movs	r3, r0
 80045b0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045ba:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	0013      	movs	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	00da      	lsls	r2, r3, #3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	0d1b      	lsrs	r3, r3, #20
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	4353      	muls	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045d0:	e068      	b.n	80046a4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	23c0      	movs	r3, #192	; 0xc0
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	429a      	cmp	r2, r3
 80045da:	d10a      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d107      	bne.n	80045f2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	2117      	movs	r1, #23
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	d055      	beq.n	80046a4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f8:	f7fd fcb6 	bl	8001f68 <HAL_GetTick>
 80045fc:	0002      	movs	r2, r0
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	429a      	cmp	r2, r3
 8004606:	d902      	bls.n	800460e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d142      	bne.n	8004694 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	21e0      	movs	r1, #224	; 0xe0
 800461a:	438a      	bics	r2, r1
 800461c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	2382      	movs	r3, #130	; 0x82
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	429a      	cmp	r2, r3
 8004628:	d113      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xce>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	429a      	cmp	r2, r3
 8004634:	d005      	beq.n	8004642 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	429a      	cmp	r2, r3
 8004640:	d107      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	438a      	bics	r2, r1
 8004650:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	019b      	lsls	r3, r3, #6
 800465a:	429a      	cmp	r2, r3
 800465c:	d110      	bne.n	8004680 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4916      	ldr	r1, [pc, #88]	; (80046c4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800466a:	400a      	ands	r2, r1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	0189      	lsls	r1, r1, #6
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	225d      	movs	r2, #93	; 0x5d
 8004684:	2101      	movs	r1, #1
 8004686:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	225c      	movs	r2, #92	; 0x5c
 800468c:	2100      	movs	r1, #0
 800468e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e010      	b.n	80046b6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d18e      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b00a      	add	sp, #40	; 0x28
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	20000000 	.word	0x20000000
 80046c4:	ffffdfff 	.word	0xffffdfff

080046c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	2382      	movs	r3, #130	; 0x82
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	429a      	cmp	r2, r3
 80046de:	d113      	bne.n	8004708 <SPI_EndRxTransaction+0x40>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d005      	beq.n	80046f8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d107      	bne.n	8004708 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2140      	movs	r1, #64	; 0x40
 8004704:	438a      	bics	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	0013      	movs	r3, r2
 8004712:	2200      	movs	r2, #0
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	f7ff fea7 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d007      	beq.n	800472e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	2220      	movs	r2, #32
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e026      	b.n	800477c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	2382      	movs	r3, #130	; 0x82
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	429a      	cmp	r2, r3
 8004738:	d11f      	bne.n	800477a <SPI_EndRxTransaction+0xb2>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	429a      	cmp	r2, r3
 8004744:	d005      	beq.n	8004752 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	429a      	cmp	r2, r3
 8004750:	d113      	bne.n	800477a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	23c0      	movs	r3, #192	; 0xc0
 8004756:	00d9      	lsls	r1, r3, #3
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	0013      	movs	r3, r2
 8004760:	2200      	movs	r2, #0
 8004762:	f7ff ff0f 	bl	8004584 <SPI_WaitFifoStateUntilTimeout>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d007      	beq.n	800477a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	2220      	movs	r2, #32
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e000      	b.n	800477c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	0018      	movs	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	b004      	add	sp, #16
 8004782:	bd80      	pop	{r7, pc}

08004784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	23c0      	movs	r3, #192	; 0xc0
 8004794:	0159      	lsls	r1, r3, #5
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	0013      	movs	r3, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	f7ff fef0 	bl	8004584 <SPI_WaitFifoStateUntilTimeout>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d007      	beq.n	80047b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	2220      	movs	r2, #32
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e027      	b.n	8004808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	0013      	movs	r3, r2
 80047c2:	2200      	movs	r2, #0
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	f7ff fe4f 	bl	8004468 <SPI_WaitFlagStateUntilTimeout>
 80047ca:	1e03      	subs	r3, r0, #0
 80047cc:	d007      	beq.n	80047de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	2220      	movs	r2, #32
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e014      	b.n	8004808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	23c0      	movs	r3, #192	; 0xc0
 80047e2:	00d9      	lsls	r1, r3, #3
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	0013      	movs	r3, r2
 80047ec:	2200      	movs	r2, #0
 80047ee:	f7ff fec9 	bl	8004584 <SPI_WaitFifoStateUntilTimeout>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d007      	beq.n	8004806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fa:	2220      	movs	r2, #32
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e000      	b.n	8004808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b004      	add	sp, #16
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e04a      	b.n	80048b8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	223d      	movs	r2, #61	; 0x3d
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	223c      	movs	r2, #60	; 0x3c
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fd f9af 	bl	8001b9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	223d      	movs	r2, #61	; 0x3d
 8004842:	2102      	movs	r1, #2
 8004844:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3304      	adds	r3, #4
 800484e:	0019      	movs	r1, r3
 8004850:	0010      	movs	r0, r2
 8004852:	f000 fb51 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2248      	movs	r2, #72	; 0x48
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	223e      	movs	r2, #62	; 0x3e
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	223f      	movs	r2, #63	; 0x3f
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2240      	movs	r2, #64	; 0x40
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2241      	movs	r2, #65	; 0x41
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2242      	movs	r2, #66	; 0x42
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2243      	movs	r2, #67	; 0x43
 800488a:	2101      	movs	r1, #1
 800488c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2244      	movs	r2, #68	; 0x44
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2245      	movs	r2, #69	; 0x45
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2246      	movs	r2, #70	; 0x46
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2247      	movs	r2, #71	; 0x47
 80048aa:	2101      	movs	r1, #1
 80048ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	223d      	movs	r2, #61	; 0x3d
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x22>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	223e      	movs	r2, #62	; 0x3e
 80048d4:	5c9b      	ldrb	r3, [r3, r2]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	4193      	sbcs	r3, r2
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e037      	b.n	8004952 <HAL_TIM_PWM_Start+0x92>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d108      	bne.n	80048fa <HAL_TIM_PWM_Start+0x3a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	223f      	movs	r2, #63	; 0x3f
 80048ec:	5c9b      	ldrb	r3, [r3, r2]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	1e5a      	subs	r2, r3, #1
 80048f4:	4193      	sbcs	r3, r2
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e02b      	b.n	8004952 <HAL_TIM_PWM_Start+0x92>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d108      	bne.n	8004912 <HAL_TIM_PWM_Start+0x52>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2240      	movs	r2, #64	; 0x40
 8004904:	5c9b      	ldrb	r3, [r3, r2]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	1e5a      	subs	r2, r3, #1
 800490c:	4193      	sbcs	r3, r2
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e01f      	b.n	8004952 <HAL_TIM_PWM_Start+0x92>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d108      	bne.n	800492a <HAL_TIM_PWM_Start+0x6a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2241      	movs	r2, #65	; 0x41
 800491c:	5c9b      	ldrb	r3, [r3, r2]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	4193      	sbcs	r3, r2
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e013      	b.n	8004952 <HAL_TIM_PWM_Start+0x92>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d108      	bne.n	8004942 <HAL_TIM_PWM_Start+0x82>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2242      	movs	r2, #66	; 0x42
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	4193      	sbcs	r3, r2
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e007      	b.n	8004952 <HAL_TIM_PWM_Start+0x92>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2243      	movs	r2, #67	; 0x43
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	1e5a      	subs	r2, r3, #1
 800494e:	4193      	sbcs	r3, r2
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e07b      	b.n	8004a52 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d104      	bne.n	800496a <HAL_TIM_PWM_Start+0xaa>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	223e      	movs	r2, #62	; 0x3e
 8004964:	2102      	movs	r1, #2
 8004966:	5499      	strb	r1, [r3, r2]
 8004968:	e023      	b.n	80049b2 <HAL_TIM_PWM_Start+0xf2>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d104      	bne.n	800497a <HAL_TIM_PWM_Start+0xba>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	223f      	movs	r2, #63	; 0x3f
 8004974:	2102      	movs	r1, #2
 8004976:	5499      	strb	r1, [r3, r2]
 8004978:	e01b      	b.n	80049b2 <HAL_TIM_PWM_Start+0xf2>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b08      	cmp	r3, #8
 800497e:	d104      	bne.n	800498a <HAL_TIM_PWM_Start+0xca>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	2102      	movs	r1, #2
 8004986:	5499      	strb	r1, [r3, r2]
 8004988:	e013      	b.n	80049b2 <HAL_TIM_PWM_Start+0xf2>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d104      	bne.n	800499a <HAL_TIM_PWM_Start+0xda>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2241      	movs	r2, #65	; 0x41
 8004994:	2102      	movs	r1, #2
 8004996:	5499      	strb	r1, [r3, r2]
 8004998:	e00b      	b.n	80049b2 <HAL_TIM_PWM_Start+0xf2>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b10      	cmp	r3, #16
 800499e:	d104      	bne.n	80049aa <HAL_TIM_PWM_Start+0xea>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2242      	movs	r2, #66	; 0x42
 80049a4:	2102      	movs	r1, #2
 80049a6:	5499      	strb	r1, [r3, r2]
 80049a8:	e003      	b.n	80049b2 <HAL_TIM_PWM_Start+0xf2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2243      	movs	r2, #67	; 0x43
 80049ae:	2102      	movs	r1, #2
 80049b0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	0018      	movs	r0, r3
 80049bc:	f000 fda4 	bl	8005508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a25      	ldr	r2, [pc, #148]	; (8004a5c <HAL_TIM_PWM_Start+0x19c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIM_PWM_Start+0x11e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a24      	ldr	r2, [pc, #144]	; (8004a60 <HAL_TIM_PWM_Start+0x1a0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_PWM_Start+0x11e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <HAL_TIM_PWM_Start+0x1a4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x122>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_PWM_Start+0x124>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2180      	movs	r1, #128	; 0x80
 80049f4:	0209      	lsls	r1, r1, #8
 80049f6:	430a      	orrs	r2, r1
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_TIM_PWM_Start+0x19c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x14e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <HAL_TIM_PWM_Start+0x1a8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d116      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_TIM_PWM_Start+0x1ac>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b06      	cmp	r3, #6
 8004a1e:	d016      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x18e>
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	025b      	lsls	r3, r3, #9
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d011      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2101      	movs	r1, #1
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	e008      	b.n	8004a4e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2101      	movs	r1, #1
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e000      	b.n	8004a50 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	0018      	movs	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b004      	add	sp, #16
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	00010007 	.word	0x00010007

08004a70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e090      	b.n	8004ba6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	223d      	movs	r2, #61	; 0x3d
 8004a88:	5c9b      	ldrb	r3, [r3, r2]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	223c      	movs	r2, #60	; 0x3c
 8004a94:	2100      	movs	r1, #0
 8004a96:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fd f80e 	bl	8001abc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	223d      	movs	r2, #61	; 0x3d
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	493f      	ldr	r1, [pc, #252]	; (8004bb0 <HAL_TIM_Encoder_Init+0x140>)
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	0010      	movs	r0, r2
 8004ac4:	f000 fa18 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_TIM_Encoder_Init+0x144>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	4313      	orrs	r3, r2
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <HAL_TIM_Encoder_Init+0x148>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4a2b      	ldr	r2, [pc, #172]	; (8004bbc <HAL_TIM_Encoder_Init+0x14c>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	011a      	lsls	r2, r3, #4
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	031b      	lsls	r3, r3, #12
 8004b32:	4313      	orrs	r3, r2
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2222      	movs	r2, #34	; 0x22
 8004b3e:	4393      	bics	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2288      	movs	r2, #136	; 0x88
 8004b46:	4393      	bics	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	4313      	orrs	r3, r2
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2248      	movs	r2, #72	; 0x48
 8004b78:	2101      	movs	r1, #1
 8004b7a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	223e      	movs	r2, #62	; 0x3e
 8004b80:	2101      	movs	r1, #1
 8004b82:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	223f      	movs	r2, #63	; 0x3f
 8004b88:	2101      	movs	r1, #1
 8004b8a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2244      	movs	r2, #68	; 0x44
 8004b90:	2101      	movs	r1, #1
 8004b92:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2245      	movs	r2, #69	; 0x45
 8004b98:	2101      	movs	r1, #1
 8004b9a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	223d      	movs	r2, #61	; 0x3d
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b006      	add	sp, #24
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	fffebff8 	.word	0xfffebff8
 8004bb4:	fffffcfc 	.word	0xfffffcfc
 8004bb8:	fffff3f3 	.word	0xfffff3f3
 8004bbc:	ffff0f0f 	.word	0xffff0f0f

08004bc0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bca:	230f      	movs	r3, #15
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	213e      	movs	r1, #62	; 0x3e
 8004bd2:	5c52      	ldrb	r2, [r2, r1]
 8004bd4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004bd6:	230e      	movs	r3, #14
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	213f      	movs	r1, #63	; 0x3f
 8004bde:	5c52      	ldrb	r2, [r2, r1]
 8004be0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004be2:	230d      	movs	r3, #13
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	2144      	movs	r1, #68	; 0x44
 8004bea:	5c52      	ldrb	r2, [r2, r1]
 8004bec:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bee:	230c      	movs	r3, #12
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	2145      	movs	r1, #69	; 0x45
 8004bf6:	5c52      	ldrb	r2, [r2, r1]
 8004bf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d114      	bne.n	8004c2a <HAL_TIM_Encoder_Start+0x6a>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c00:	230f      	movs	r3, #15
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d104      	bne.n	8004c14 <HAL_TIM_Encoder_Start+0x54>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c0a:	230d      	movs	r3, #13
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Encoder_Start+0x58>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e074      	b.n	8004d02 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	223e      	movs	r2, #62	; 0x3e
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2244      	movs	r2, #68	; 0x44
 8004c24:	2102      	movs	r1, #2
 8004c26:	5499      	strb	r1, [r3, r2]
 8004c28:	e03d      	b.n	8004ca6 <HAL_TIM_Encoder_Start+0xe6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d114      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x9a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c30:	230e      	movs	r3, #14
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d104      	bne.n	8004c44 <HAL_TIM_Encoder_Start+0x84>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Encoder_Start+0x88>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e05c      	b.n	8004d02 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	223f      	movs	r2, #63	; 0x3f
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2245      	movs	r2, #69	; 0x45
 8004c54:	2102      	movs	r1, #2
 8004c56:	5499      	strb	r1, [r3, r2]
 8004c58:	e025      	b.n	8004ca6 <HAL_TIM_Encoder_Start+0xe6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c5a:	230f      	movs	r3, #15
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0xc2>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c64:	230e      	movs	r3, #14
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d109      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0xc2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6e:	230d      	movs	r3, #13
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d104      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0xc2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c78:	230c      	movs	r3, #12
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_TIM_Encoder_Start+0xc6>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e03d      	b.n	8004d02 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	223e      	movs	r2, #62	; 0x3e
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	223f      	movs	r2, #63	; 0x3f
 8004c92:	2102      	movs	r1, #2
 8004c94:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2244      	movs	r2, #68	; 0x44
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2245      	movs	r2, #69	; 0x45
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_TIM_Encoder_Start+0xf2>
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d008      	beq.n	8004cc2 <HAL_TIM_Encoder_Start+0x102>
 8004cb0:	e00f      	b.n	8004cd2 <HAL_TIM_Encoder_Start+0x112>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2100      	movs	r1, #0
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f000 fc24 	bl	8005508 <TIM_CCxChannelCmd>
      break;
 8004cc0:	e016      	b.n	8004cf0 <HAL_TIM_Encoder_Start+0x130>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	2104      	movs	r1, #4
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 fc1c 	bl	8005508 <TIM_CCxChannelCmd>
      break;
 8004cd0:	e00e      	b.n	8004cf0 <HAL_TIM_Encoder_Start+0x130>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2100      	movs	r1, #0
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 fc14 	bl	8005508 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f000 fc0d 	bl	8005508 <TIM_CCxChannelCmd>
      break;
 8004cee:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	223c      	movs	r2, #60	; 0x3c
 8004d1c:	5c9b      	ldrb	r3, [r3, r2]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0df      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	223c      	movs	r2, #60	; 0x3c
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b14      	cmp	r3, #20
 8004d32:	d900      	bls.n	8004d36 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004d34:	e0d1      	b.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	009a      	lsls	r2, r3, #2
 8004d3a:	4b6d      	ldr	r3, [pc, #436]	; (8004ef0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8004d3c:	18d3      	adds	r3, r2, r3
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0011      	movs	r1, r2
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f000 f940 	bl	8004fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6999      	ldr	r1, [r3, #24]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	619a      	str	r2, [r3, #24]
      break;
 8004d82:	e0ab      	b.n	8004edc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f99f 	bl	80050d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	0109      	lsls	r1, r1, #4
 8004da0:	430a      	orrs	r2, r1
 8004da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4951      	ldr	r1, [pc, #324]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6999      	ldr	r1, [r3, #24]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	619a      	str	r2, [r3, #24]
      break;
 8004dc8:	e088      	b.n	8004edc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	0011      	movs	r1, r2
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 f9fa 	bl	80051cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2108      	movs	r1, #8
 8004de4:	430a      	orrs	r2, r1
 8004de6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2104      	movs	r1, #4
 8004df4:	438a      	bics	r2, r1
 8004df6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69d9      	ldr	r1, [r3, #28]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	61da      	str	r2, [r3, #28]
      break;
 8004e0a:	e067      	b.n	8004edc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	0011      	movs	r1, r2
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 fa5b 	bl	80052d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2180      	movs	r1, #128	; 0x80
 8004e26:	0109      	lsls	r1, r1, #4
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	492f      	ldr	r1, [pc, #188]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004e38:	400a      	ands	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69d9      	ldr	r1, [r3, #28]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	021a      	lsls	r2, r3, #8
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
      break;
 8004e50:	e044      	b.n	8004edc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0011      	movs	r1, r2
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f000 fa9c 	bl	8005398 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2108      	movs	r1, #8
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	438a      	bics	r2, r1
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e92:	e023      	b.n	8004edc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	0011      	movs	r1, r2
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f000 fad5 	bl	800544c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0109      	lsls	r1, r1, #4
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	490d      	ldr	r1, [pc, #52]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	021a      	lsls	r2, r3, #8
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8004eda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	223c      	movs	r2, #60	; 0x3c
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	08006ecc 	.word	0x08006ecc
 8004ef4:	fffffbff 	.word	0xfffffbff

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <TIM_Base_SetConfig+0xc0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0x20>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <TIM_Base_SetConfig+0xc4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d108      	bne.n	8004f2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2270      	movs	r2, #112	; 0x70
 8004f1c:	4393      	bics	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <TIM_Base_SetConfig+0xc0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00f      	beq.n	8004f52 <TIM_Base_SetConfig+0x5a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <TIM_Base_SetConfig+0xc4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_Base_SetConfig+0x5a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <TIM_Base_SetConfig+0xc8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <TIM_Base_SetConfig+0x5a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <TIM_Base_SetConfig+0xcc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_Base_SetConfig+0x5a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <TIM_Base_SetConfig+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <TIM_Base_SetConfig+0xd4>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	4393      	bics	r3, r2
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <TIM_Base_SetConfig+0xc0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <TIM_Base_SetConfig+0xcc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0xaa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <TIM_Base_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d103      	bne.n	8004faa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	615a      	str	r2, [r3, #20]
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b004      	add	sp, #16
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40002000 	.word	0x40002000
 8004fc4:	40014400 	.word	0x40014400
 8004fc8:	40014800 	.word	0x40014800
 8004fcc:	fffffcff 	.word	0xfffffcff

08004fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4393      	bics	r3, r2
 8004fe2:	001a      	movs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a2e      	ldr	r2, [pc, #184]	; (80050b8 <TIM_OC1_SetConfig+0xe8>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2203      	movs	r2, #3
 8005006:	4393      	bics	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2202      	movs	r2, #2
 8005018:	4393      	bics	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a24      	ldr	r2, [pc, #144]	; (80050bc <TIM_OC1_SetConfig+0xec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_OC1_SetConfig+0x6e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a23      	ldr	r2, [pc, #140]	; (80050c0 <TIM_OC1_SetConfig+0xf0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC1_SetConfig+0x6e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <TIM_OC1_SetConfig+0xf4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10c      	bne.n	8005058 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2208      	movs	r2, #8
 8005042:	4393      	bics	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2204      	movs	r2, #4
 8005054:	4393      	bics	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a18      	ldr	r2, [pc, #96]	; (80050bc <TIM_OC1_SetConfig+0xec>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC1_SetConfig+0xa0>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <TIM_OC1_SetConfig+0xf0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC1_SetConfig+0xa0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a16      	ldr	r2, [pc, #88]	; (80050c4 <TIM_OC1_SetConfig+0xf4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d111      	bne.n	8005094 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <TIM_OC1_SetConfig+0xf8>)
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4a14      	ldr	r2, [pc, #80]	; (80050cc <TIM_OC1_SetConfig+0xfc>)
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b006      	add	sp, #24
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	fffeff8f 	.word	0xfffeff8f
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014400 	.word	0x40014400
 80050c4:	40014800 	.word	0x40014800
 80050c8:	fffffeff 	.word	0xfffffeff
 80050cc:	fffffdff 	.word	0xfffffdff

080050d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	2210      	movs	r2, #16
 80050e0:	4393      	bics	r3, r2
 80050e2:	001a      	movs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <TIM_OC2_SetConfig+0xe0>)
 80050fe:	4013      	ands	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a2b      	ldr	r2, [pc, #172]	; (80051b4 <TIM_OC2_SetConfig+0xe4>)
 8005106:	4013      	ands	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2220      	movs	r2, #32
 800511a:	4393      	bics	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <TIM_OC2_SetConfig+0xe8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10d      	bne.n	800514e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	4393      	bics	r3, r2
 8005138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2240      	movs	r2, #64	; 0x40
 800514a:	4393      	bics	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <TIM_OC2_SetConfig+0xe8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_OC2_SetConfig+0x96>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <TIM_OC2_SetConfig+0xec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC2_SetConfig+0x96>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <TIM_OC2_SetConfig+0xf0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d113      	bne.n	800518e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <TIM_OC2_SetConfig+0xf4>)
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <TIM_OC2_SetConfig+0xf8>)
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b006      	add	sp, #24
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	feff8fff 	.word	0xfeff8fff
 80051b4:	fffffcff 	.word	0xfffffcff
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	fffffbff 	.word	0xfffffbff
 80051c8:	fffff7ff 	.word	0xfffff7ff

080051cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a33      	ldr	r2, [pc, #204]	; (80052a8 <TIM_OC3_SetConfig+0xdc>)
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <TIM_OC3_SetConfig+0xe0>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2203      	movs	r2, #3
 8005200:	4393      	bics	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <TIM_OC3_SetConfig+0xe4>)
 8005212:	4013      	ands	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	021b      	lsls	r3, r3, #8
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a23      	ldr	r2, [pc, #140]	; (80052b4 <TIM_OC3_SetConfig+0xe8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10d      	bne.n	8005246 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4a22      	ldr	r2, [pc, #136]	; (80052b8 <TIM_OC3_SetConfig+0xec>)
 800522e:	4013      	ands	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <TIM_OC3_SetConfig+0xf0>)
 8005242:	4013      	ands	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <TIM_OC3_SetConfig+0xe8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_OC3_SetConfig+0x92>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <TIM_OC3_SetConfig+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC3_SetConfig+0x92>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <TIM_OC3_SetConfig+0xf8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d113      	bne.n	8005286 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <TIM_OC3_SetConfig+0xfc>)
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4a18      	ldr	r2, [pc, #96]	; (80052cc <TIM_OC3_SetConfig+0x100>)
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b006      	add	sp, #24
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	fffffeff 	.word	0xfffffeff
 80052ac:	fffeff8f 	.word	0xfffeff8f
 80052b0:	fffffdff 	.word	0xfffffdff
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	fffff7ff 	.word	0xfffff7ff
 80052bc:	fffffbff 	.word	0xfffffbff
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800
 80052c8:	ffffefff 	.word	0xffffefff
 80052cc:	ffffdfff 	.word	0xffffdfff

080052d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a26      	ldr	r2, [pc, #152]	; (8005378 <TIM_OC4_SetConfig+0xa8>)
 80052e0:	401a      	ands	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a20      	ldr	r2, [pc, #128]	; (800537c <TIM_OC4_SetConfig+0xac>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <TIM_OC4_SetConfig+0xb0>)
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4a1b      	ldr	r2, [pc, #108]	; (8005384 <TIM_OC4_SetConfig+0xb4>)
 8005318:	4013      	ands	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	031b      	lsls	r3, r3, #12
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a17      	ldr	r2, [pc, #92]	; (8005388 <TIM_OC4_SetConfig+0xb8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_OC4_SetConfig+0x70>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a16      	ldr	r2, [pc, #88]	; (800538c <TIM_OC4_SetConfig+0xbc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC4_SetConfig+0x70>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a15      	ldr	r2, [pc, #84]	; (8005390 <TIM_OC4_SetConfig+0xc0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4a14      	ldr	r2, [pc, #80]	; (8005394 <TIM_OC4_SetConfig+0xc4>)
 8005344:	4013      	ands	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b006      	add	sp, #24
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	ffffefff 	.word	0xffffefff
 800537c:	feff8fff 	.word	0xfeff8fff
 8005380:	fffffcff 	.word	0xfffffcff
 8005384:	ffffdfff 	.word	0xffffdfff
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	ffffbfff 	.word	0xffffbfff

08005398 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4a23      	ldr	r2, [pc, #140]	; (8005434 <TIM_OC5_SetConfig+0x9c>)
 80053a8:	401a      	ands	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <TIM_OC5_SetConfig+0xa0>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4a19      	ldr	r2, [pc, #100]	; (800543c <TIM_OC5_SetConfig+0xa4>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a15      	ldr	r2, [pc, #84]	; (8005440 <TIM_OC5_SetConfig+0xa8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_OC5_SetConfig+0x66>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <TIM_OC5_SetConfig+0xac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC5_SetConfig+0x66>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <TIM_OC5_SetConfig+0xb0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d109      	bne.n	8005412 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <TIM_OC5_SetConfig+0x9c>)
 8005402:	4013      	ands	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	46c0      	nop			; (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b006      	add	sp, #24
 8005432:	bd80      	pop	{r7, pc}
 8005434:	fffeffff 	.word	0xfffeffff
 8005438:	fffeff8f 	.word	0xfffeff8f
 800543c:	fffdffff 	.word	0xfffdffff
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800

0800544c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4a24      	ldr	r2, [pc, #144]	; (80054ec <TIM_OC6_SetConfig+0xa0>)
 800545c:	401a      	ands	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <TIM_OC6_SetConfig+0xa4>)
 8005478:	4013      	ands	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <TIM_OC6_SetConfig+0xa8>)
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	051b      	lsls	r3, r3, #20
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <TIM_OC6_SetConfig+0xac>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC6_SetConfig+0x68>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a15      	ldr	r2, [pc, #84]	; (80054fc <TIM_OC6_SetConfig+0xb0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC6_SetConfig+0x68>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a14      	ldr	r2, [pc, #80]	; (8005500 <TIM_OC6_SetConfig+0xb4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d109      	bne.n	80054c8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <TIM_OC6_SetConfig+0xb8>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	621a      	str	r2, [r3, #32]
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b006      	add	sp, #24
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	ffefffff 	.word	0xffefffff
 80054f0:	feff8fff 	.word	0xfeff8fff
 80054f4:	ffdfffff 	.word	0xffdfffff
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40014400 	.word	0x40014400
 8005500:	40014800 	.word	0x40014800
 8005504:	fffbffff 	.word	0xfffbffff

08005508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	221f      	movs	r2, #31
 8005518:	4013      	ands	r3, r2
 800551a:	2201      	movs	r2, #1
 800551c:	409a      	lsls	r2, r3
 800551e:	0013      	movs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	43d2      	mvns	r2, r2
 800552a:	401a      	ands	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1a      	ldr	r2, [r3, #32]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	211f      	movs	r1, #31
 8005538:	400b      	ands	r3, r1
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4099      	lsls	r1, r3
 800553e:	000b      	movs	r3, r1
 8005540:	431a      	orrs	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b006      	add	sp, #24
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	223c      	movs	r2, #60	; 0x3c
 800555e:	5c9b      	ldrb	r3, [r3, r2]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e04a      	b.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223c      	movs	r2, #60	; 0x3c
 800556c:	2101      	movs	r1, #1
 800556e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	223d      	movs	r2, #61	; 0x3d
 8005574:	2102      	movs	r1, #2
 8005576:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2270      	movs	r2, #112	; 0x70
 80055a8:	4393      	bics	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a11      	ldr	r2, [pc, #68]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a10      	ldr	r2, [pc, #64]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10c      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2280      	movs	r2, #128	; 0x80
 80055d6:	4393      	bics	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	223d      	movs	r2, #61	; 0x3d
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	223c      	movs	r2, #60	; 0x3c
 80055f8:	2100      	movs	r1, #0
 80055fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b004      	add	sp, #16
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	40012c00 	.word	0x40012c00
 800560c:	ff0fffff 	.word	0xff0fffff
 8005610:	40000400 	.word	0x40000400

08005614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e046      	b.n	80056b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2284      	movs	r2, #132	; 0x84
 800562a:	589b      	ldr	r3, [r3, r2]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	2100      	movs	r1, #0
 8005636:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0018      	movs	r0, r3
 800563c:	f7fc fb08 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2284      	movs	r2, #132	; 0x84
 8005644:	2124      	movs	r1, #36	; 0x24
 8005646:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2101      	movs	r1, #1
 8005654:	438a      	bics	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f000 f8dc 	bl	8005818 <UART_SetConfig>
 8005660:	0003      	movs	r3, r0
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e024      	b.n	80056b4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f000 fa37 	bl	8005ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	490d      	ldr	r1, [pc, #52]	; (80056bc <HAL_UART_Init+0xa8>)
 8005686:	400a      	ands	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	212a      	movs	r1, #42	; 0x2a
 8005696:	438a      	bics	r2, r1
 8005698:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2101      	movs	r1, #1
 80056a6:	430a      	orrs	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 facf 	bl	8005c50 <UART_CheckIdleState>
 80056b2:	0003      	movs	r3, r0
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b002      	add	sp, #8
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	ffffb7ff 	.word	0xffffb7ff

080056c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08a      	sub	sp, #40	; 0x28
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	1dbb      	adds	r3, r7, #6
 80056ce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2284      	movs	r2, #132	; 0x84
 80056d4:	589b      	ldr	r3, [r3, r2]
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d000      	beq.n	80056dc <HAL_UART_Transmit+0x1c>
 80056da:	e097      	b.n	800580c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_UART_Transmit+0x2a>
 80056e2:	1dbb      	adds	r3, r7, #6
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e08f      	b.n	800580e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	015b      	lsls	r3, r3, #5
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d109      	bne.n	800570e <HAL_UART_Transmit+0x4e>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2201      	movs	r2, #1
 8005706:	4013      	ands	r3, r2
 8005708:	d001      	beq.n	800570e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e07f      	b.n	800580e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2280      	movs	r2, #128	; 0x80
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_UART_Transmit+0x5c>
 8005718:	2302      	movs	r3, #2
 800571a:	e078      	b.n	800580e <HAL_UART_Transmit+0x14e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	2101      	movs	r1, #1
 8005722:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	228c      	movs	r2, #140	; 0x8c
 8005728:	2100      	movs	r1, #0
 800572a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2284      	movs	r2, #132	; 0x84
 8005730:	2121      	movs	r1, #33	; 0x21
 8005732:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005734:	f7fc fc18 	bl	8001f68 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1dba      	adds	r2, r7, #6
 8005740:	2154      	movs	r1, #84	; 0x54
 8005742:	8812      	ldrh	r2, [r2, #0]
 8005744:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1dba      	adds	r2, r7, #6
 800574a:	2156      	movs	r1, #86	; 0x56
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	015b      	lsls	r3, r3, #5
 8005758:	429a      	cmp	r2, r3
 800575a:	d108      	bne.n	800576e <HAL_UART_Transmit+0xae>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e003      	b.n	8005776 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2280      	movs	r2, #128	; 0x80
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800577e:	e02c      	b.n	80057da <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	0013      	movs	r3, r2
 800578a:	2200      	movs	r2, #0
 800578c:	2180      	movs	r1, #128	; 0x80
 800578e:	f000 faab 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 8005792:	1e03      	subs	r3, r0, #0
 8005794:	d001      	beq.n	800579a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e039      	b.n	800580e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	001a      	movs	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	05d2      	lsls	r2, r2, #23
 80057ac:	0dd2      	lsrs	r2, r2, #23
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3302      	adds	r3, #2
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e007      	b.n	80057c8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2256      	movs	r2, #86	; 0x56
 80057cc:	5a9b      	ldrh	r3, [r3, r2]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b299      	uxth	r1, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2256      	movs	r2, #86	; 0x56
 80057d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2256      	movs	r2, #86	; 0x56
 80057de:	5a9b      	ldrh	r3, [r3, r2]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1cc      	bne.n	8005780 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	0013      	movs	r3, r2
 80057f0:	2200      	movs	r2, #0
 80057f2:	2140      	movs	r1, #64	; 0x40
 80057f4:	f000 fa78 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 80057f8:	1e03      	subs	r3, r0, #0
 80057fa:	d001      	beq.n	8005800 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2284      	movs	r2, #132	; 0x84
 8005804:	2120      	movs	r1, #32
 8005806:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e000      	b.n	800580e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800580c:	2302      	movs	r3, #2
  }
}
 800580e:	0018      	movs	r0, r3
 8005810:	46bd      	mov	sp, r7
 8005812:	b008      	add	sp, #32
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005820:	231e      	movs	r3, #30
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a9f      	ldr	r2, [pc, #636]	; (8005ac4 <UART_SetConfig+0x2ac>)
 8005848:	4013      	ands	r3, r2
 800584a:	0019      	movs	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	430a      	orrs	r2, r1
 8005854:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4a9a      	ldr	r2, [pc, #616]	; (8005ac8 <UART_SetConfig+0x2b0>)
 800585e:	4013      	ands	r3, r2
 8005860:	0019      	movs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	617b      	str	r3, [r7, #20]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a91      	ldr	r2, [pc, #580]	; (8005acc <UART_SetConfig+0x2b4>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	220f      	movs	r2, #15
 800589c:	4393      	bics	r3, r2
 800589e:	0019      	movs	r1, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a87      	ldr	r2, [pc, #540]	; (8005ad0 <UART_SetConfig+0x2b8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d125      	bne.n	8005902 <UART_SetConfig+0xea>
 80058b6:	4b87      	ldr	r3, [pc, #540]	; (8005ad4 <UART_SetConfig+0x2bc>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	2203      	movs	r2, #3
 80058bc:	4013      	ands	r3, r2
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d00f      	beq.n	80058e2 <UART_SetConfig+0xca>
 80058c2:	d304      	bcc.n	80058ce <UART_SetConfig+0xb6>
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d007      	beq.n	80058d8 <UART_SetConfig+0xc0>
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d00f      	beq.n	80058ec <UART_SetConfig+0xd4>
 80058cc:	e013      	b.n	80058f6 <UART_SetConfig+0xde>
 80058ce:	231f      	movs	r3, #31
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e022      	b.n	800591e <UART_SetConfig+0x106>
 80058d8:	231f      	movs	r3, #31
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	2202      	movs	r2, #2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e01d      	b.n	800591e <UART_SetConfig+0x106>
 80058e2:	231f      	movs	r3, #31
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	2204      	movs	r2, #4
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e018      	b.n	800591e <UART_SetConfig+0x106>
 80058ec:	231f      	movs	r3, #31
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2208      	movs	r2, #8
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	e013      	b.n	800591e <UART_SetConfig+0x106>
 80058f6:	231f      	movs	r3, #31
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	2210      	movs	r2, #16
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	e00d      	b.n	800591e <UART_SetConfig+0x106>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a74      	ldr	r2, [pc, #464]	; (8005ad8 <UART_SetConfig+0x2c0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d104      	bne.n	8005916 <UART_SetConfig+0xfe>
 800590c:	231f      	movs	r3, #31
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	e003      	b.n	800591e <UART_SetConfig+0x106>
 8005916:	231f      	movs	r3, #31
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	2210      	movs	r2, #16
 800591c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69da      	ldr	r2, [r3, #28]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	429a      	cmp	r2, r3
 8005928:	d000      	beq.n	800592c <UART_SetConfig+0x114>
 800592a:	e065      	b.n	80059f8 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 800592c:	231f      	movs	r3, #31
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d00d      	beq.n	8005952 <UART_SetConfig+0x13a>
 8005936:	dc02      	bgt.n	800593e <UART_SetConfig+0x126>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <UART_SetConfig+0x130>
 800593c:	e015      	b.n	800596a <UART_SetConfig+0x152>
 800593e:	2b04      	cmp	r3, #4
 8005940:	d00a      	beq.n	8005958 <UART_SetConfig+0x140>
 8005942:	2b08      	cmp	r3, #8
 8005944:	d00d      	beq.n	8005962 <UART_SetConfig+0x14a>
 8005946:	e010      	b.n	800596a <UART_SetConfig+0x152>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fd ff22 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 800594c:	0003      	movs	r3, r0
 800594e:	61bb      	str	r3, [r7, #24]
        break;
 8005950:	e012      	b.n	8005978 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005952:	4b62      	ldr	r3, [pc, #392]	; (8005adc <UART_SetConfig+0x2c4>)
 8005954:	61bb      	str	r3, [r7, #24]
        break;
 8005956:	e00f      	b.n	8005978 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005958:	f7fd fe8e 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 800595c:	0003      	movs	r3, r0
 800595e:	61bb      	str	r3, [r7, #24]
        break;
 8005960:	e00a      	b.n	8005978 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	61bb      	str	r3, [r7, #24]
        break;
 8005968:	e006      	b.n	8005978 <UART_SetConfig+0x160>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800596e:	231e      	movs	r3, #30
 8005970:	18fb      	adds	r3, r7, r3
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
        break;
 8005976:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d100      	bne.n	8005980 <UART_SetConfig+0x168>
 800597e:	e08c      	b.n	8005a9a <UART_SetConfig+0x282>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005984:	4b56      	ldr	r3, [pc, #344]	; (8005ae0 <UART_SetConfig+0x2c8>)
 8005986:	0052      	lsls	r2, r2, #1
 8005988:	5ad3      	ldrh	r3, [r2, r3]
 800598a:	0019      	movs	r1, r3
 800598c:	69b8      	ldr	r0, [r7, #24]
 800598e:	f7fa fbb7 	bl	8000100 <__udivsi3>
 8005992:	0003      	movs	r3, r0
 8005994:	005a      	lsls	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	18d2      	adds	r2, r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	0019      	movs	r1, r3
 80059a4:	0010      	movs	r0, r2
 80059a6:	f7fa fbab 	bl	8000100 <__udivsi3>
 80059aa:	0003      	movs	r3, r0
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b0f      	cmp	r3, #15
 80059b4:	d91b      	bls.n	80059ee <UART_SetConfig+0x1d6>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4a4a      	ldr	r2, [pc, #296]	; (8005ae4 <UART_SetConfig+0x2cc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d817      	bhi.n	80059ee <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	200e      	movs	r0, #14
 80059c4:	183b      	adds	r3, r7, r0
 80059c6:	210f      	movs	r1, #15
 80059c8:	438a      	bics	r2, r1
 80059ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2207      	movs	r2, #7
 80059d4:	4013      	ands	r3, r2
 80059d6:	b299      	uxth	r1, r3
 80059d8:	183b      	adds	r3, r7, r0
 80059da:	183a      	adds	r2, r7, r0
 80059dc:	8812      	ldrh	r2, [r2, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	183a      	adds	r2, r7, r0
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	e055      	b.n	8005a9a <UART_SetConfig+0x282>
      }
      else
      {
        ret = HAL_ERROR;
 80059ee:	231e      	movs	r3, #30
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e050      	b.n	8005a9a <UART_SetConfig+0x282>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059f8:	231f      	movs	r3, #31
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d00d      	beq.n	8005a1e <UART_SetConfig+0x206>
 8005a02:	dc02      	bgt.n	8005a0a <UART_SetConfig+0x1f2>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <UART_SetConfig+0x1fc>
 8005a08:	e015      	b.n	8005a36 <UART_SetConfig+0x21e>
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d00a      	beq.n	8005a24 <UART_SetConfig+0x20c>
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d00d      	beq.n	8005a2e <UART_SetConfig+0x216>
 8005a12:	e010      	b.n	8005a36 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fd febc 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	61bb      	str	r3, [r7, #24]
        break;
 8005a1c:	e012      	b.n	8005a44 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1e:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <UART_SetConfig+0x2c4>)
 8005a20:	61bb      	str	r3, [r7, #24]
        break;
 8005a22:	e00f      	b.n	8005a44 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a24:	f7fd fe28 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	61bb      	str	r3, [r7, #24]
        break;
 8005a2c:	e00a      	b.n	8005a44 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	61bb      	str	r3, [r7, #24]
        break;
 8005a34:	e006      	b.n	8005a44 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a3a:	231e      	movs	r3, #30
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
        break;
 8005a42:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d027      	beq.n	8005a9a <UART_SetConfig+0x282>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <UART_SetConfig+0x2c8>)
 8005a50:	0052      	lsls	r2, r2, #1
 8005a52:	5ad3      	ldrh	r3, [r2, r3]
 8005a54:	0019      	movs	r1, r3
 8005a56:	69b8      	ldr	r0, [r7, #24]
 8005a58:	f7fa fb52 	bl	8000100 <__udivsi3>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	001a      	movs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	18d2      	adds	r2, r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	0010      	movs	r0, r2
 8005a70:	f7fa fb46 	bl	8000100 <__udivsi3>
 8005a74:	0003      	movs	r3, r0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b0f      	cmp	r3, #15
 8005a7e:	d908      	bls.n	8005a92 <UART_SetConfig+0x27a>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <UART_SetConfig+0x2cc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d804      	bhi.n	8005a92 <UART_SetConfig+0x27a>
      {
        huart->Instance->BRR = usartdiv;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	e003      	b.n	8005a9a <UART_SetConfig+0x282>
      }
      else
      {
        ret = HAL_ERROR;
 8005a92:	231e      	movs	r3, #30
 8005a94:	18fb      	adds	r3, r7, r3
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	226a      	movs	r2, #106	; 0x6a
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2268      	movs	r2, #104	; 0x68
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ab6:	231e      	movs	r3, #30
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	781b      	ldrb	r3, [r3, #0]
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b008      	add	sp, #32
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	cfff69f3 	.word	0xcfff69f3
 8005ac8:	ffffcfff 	.word	0xffffcfff
 8005acc:	11fff4ff 	.word	0x11fff4ff
 8005ad0:	40013800 	.word	0x40013800
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40004400 	.word	0x40004400
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	08006f20 	.word	0x08006f20
 8005ae4:	0000ffff 	.word	0x0000ffff

08005ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	2201      	movs	r2, #1
 8005af6:	4013      	ands	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4a4a      	ldr	r2, [pc, #296]	; (8005c2c <UART_AdvFeatureConfig+0x144>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	0019      	movs	r1, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	2202      	movs	r2, #2
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d00b      	beq.n	8005b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4a43      	ldr	r2, [pc, #268]	; (8005c30 <UART_AdvFeatureConfig+0x148>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	0019      	movs	r1, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	2204      	movs	r2, #4
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d00b      	beq.n	8005b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <UART_AdvFeatureConfig+0x14c>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	0019      	movs	r1, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4a34      	ldr	r2, [pc, #208]	; (8005c38 <UART_AdvFeatureConfig+0x150>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	0019      	movs	r1, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d00b      	beq.n	8005b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <UART_AdvFeatureConfig+0x154>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4a25      	ldr	r2, [pc, #148]	; (8005c40 <UART_AdvFeatureConfig+0x158>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <UART_AdvFeatureConfig+0x15c>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	035b      	lsls	r3, r3, #13
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d10b      	bne.n	8005c02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <UART_AdvFeatureConfig+0x160>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <UART_AdvFeatureConfig+0x164>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	fffdffff 	.word	0xfffdffff
 8005c30:	fffeffff 	.word	0xfffeffff
 8005c34:	fffbffff 	.word	0xfffbffff
 8005c38:	ffff7fff 	.word	0xffff7fff
 8005c3c:	ffffefff 	.word	0xffffefff
 8005c40:	ffffdfff 	.word	0xffffdfff
 8005c44:	ffefffff 	.word	0xffefffff
 8005c48:	ff9fffff 	.word	0xff9fffff
 8005c4c:	fff7ffff 	.word	0xfff7ffff

08005c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	228c      	movs	r2, #140	; 0x8c
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c60:	f7fc f982 	bl	8001f68 <HAL_GetTick>
 8005c64:	0003      	movs	r3, r0
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d10d      	bne.n	8005c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	0399      	lsls	r1, r3, #14
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <UART_CheckIdleState+0x94>)
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	0013      	movs	r3, r2
 8005c84:	2200      	movs	r2, #0
 8005c86:	f000 f82f 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 8005c8a:	1e03      	subs	r3, r0, #0
 8005c8c:	d001      	beq.n	8005c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e024      	b.n	8005cdc <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d10d      	bne.n	8005cbc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	2380      	movs	r3, #128	; 0x80
 8005ca4:	03d9      	lsls	r1, r3, #15
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <UART_CheckIdleState+0x94>)
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	0013      	movs	r3, r2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f000 f81a 	bl	8005ce8 <UART_WaitOnFlagUntilTimeout>
 8005cb4:	1e03      	subs	r3, r0, #0
 8005cb6:	d001      	beq.n	8005cbc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e00f      	b.n	8005cdc <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2284      	movs	r2, #132	; 0x84
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2288      	movs	r2, #136	; 0x88
 8005cc8:	2120      	movs	r1, #32
 8005cca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2280      	movs	r2, #128	; 0x80
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	0018      	movs	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	b004      	add	sp, #16
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	01ffffff 	.word	0x01ffffff

08005ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b094      	sub	sp, #80	; 0x50
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	1dfb      	adds	r3, r7, #7
 8005cf6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf8:	e09f      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x152>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	d100      	bne.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005d00:	e09b      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x152>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d02:	f7fc f931 	bl	8001f68 <HAL_GetTick>
 8005d06:	0002      	movs	r2, r0
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d13b      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d18:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
 8005d22:	2301      	movs	r3, #1
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	f383 8810 	msr	PRIMASK, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	494b      	ldr	r1, [pc, #300]	; (8005e64 <UART_WaitOnFlagUntilTimeout+0x17c>)
 8005d38:	400a      	ands	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d46:	f3ef 8310 	mrs	r3, PRIMASK
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d50:	2301      	movs	r3, #1
 8005d52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	f383 8810 	msr	PRIMASK, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2101      	movs	r1, #1
 8005d66:	438a      	bics	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d70:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2284      	movs	r2, #132	; 0x84
 8005d78:	2120      	movs	r1, #32
 8005d7a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2288      	movs	r2, #136	; 0x88
 8005d80:	2120      	movs	r1, #32
 8005d82:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	2100      	movs	r1, #0
 8005d8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e065      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x174>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2204      	movs	r2, #4
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d04e      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x152>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	401a      	ands	r2, r3
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d144      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x152>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2280      	movs	r2, #128	; 0x80
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dba:	f3ef 8310 	mrs	r3, PRIMASK
 8005dbe:	613b      	str	r3, [r7, #16]
  return(result);
 8005dc0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f383 8810 	msr	PRIMASK, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4922      	ldr	r1, [pc, #136]	; (8005e64 <UART_WaitOnFlagUntilTimeout+0x17c>)
 8005dda:	400a      	ands	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df2:	2301      	movs	r3, #1
 8005df4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f383 8810 	msr	PRIMASK, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2101      	movs	r1, #1
 8005e08:	438a      	bics	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2284      	movs	r2, #132	; 0x84
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2288      	movs	r2, #136	; 0x88
 8005e22:	2120      	movs	r1, #32
 8005e24:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	228c      	movs	r2, #140	; 0x8c
 8005e2a:	2120      	movs	r1, #32
 8005e2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2280      	movs	r2, #128	; 0x80
 8005e32:	2100      	movs	r1, #0
 8005e34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e010      	b.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	425a      	negs	r2, r3
 8005e4a:	4153      	adcs	r3, r2
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	001a      	movs	r2, r3
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d100      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x172>
 8005e58:	e74f      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b014      	add	sp, #80	; 0x50
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	fffffe5f 	.word	0xfffffe5f

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	2600      	movs	r6, #0
 8005e78:	4d0c      	ldr	r5, [pc, #48]	; (8005eac <__libc_init_array+0x38>)
 8005e7a:	4c0d      	ldr	r4, [pc, #52]	; (8005eb0 <__libc_init_array+0x3c>)
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	2600      	movs	r6, #0
 8005e86:	f000 ffa3 	bl	8006dd0 <_init>
 8005e8a:	4d0a      	ldr	r5, [pc, #40]	; (8005eb4 <__libc_init_array+0x40>)
 8005e8c:	4c0a      	ldr	r4, [pc, #40]	; (8005eb8 <__libc_init_array+0x44>)
 8005e8e:	1b64      	subs	r4, r4, r5
 8005e90:	10a4      	asrs	r4, r4, #2
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	00b3      	lsls	r3, r6, #2
 8005e9a:	58eb      	ldr	r3, [r5, r3]
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	00b3      	lsls	r3, r6, #2
 8005ea4:	58eb      	ldr	r3, [r5, r3]
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	08006fd0 	.word	0x08006fd0
 8005eb0:	08006fd0 	.word	0x08006fd0
 8005eb4:	08006fd0 	.word	0x08006fd0
 8005eb8:	08006fd4 	.word	0x08006fd4

08005ebc <memset>:
 8005ebc:	0003      	movs	r3, r0
 8005ebe:	1812      	adds	r2, r2, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	7019      	strb	r1, [r3, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <iprintf>:
 8005ecc:	b40f      	push	{r0, r1, r2, r3}
 8005ece:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <iprintf+0x30>)
 8005ed0:	b513      	push	{r0, r1, r4, lr}
 8005ed2:	681c      	ldr	r4, [r3, #0]
 8005ed4:	2c00      	cmp	r4, #0
 8005ed6:	d005      	beq.n	8005ee4 <iprintf+0x18>
 8005ed8:	69a3      	ldr	r3, [r4, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <iprintf+0x18>
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f000 fa3c 	bl	800635c <__sinit>
 8005ee4:	ab05      	add	r3, sp, #20
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	68a1      	ldr	r1, [r4, #8]
 8005eea:	0020      	movs	r0, r4
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	f000 fc05 	bl	80066fc <_vfiprintf_r>
 8005ef2:	bc16      	pop	{r1, r2, r4}
 8005ef4:	bc08      	pop	{r3}
 8005ef6:	b004      	add	sp, #16
 8005ef8:	4718      	bx	r3
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <_puts_r>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	0005      	movs	r5, r0
 8005f04:	000e      	movs	r6, r1
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d004      	beq.n	8005f14 <_puts_r+0x14>
 8005f0a:	6983      	ldr	r3, [r0, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <_puts_r+0x14>
 8005f10:	f000 fa24 	bl	800635c <__sinit>
 8005f14:	69ab      	ldr	r3, [r5, #24]
 8005f16:	68ac      	ldr	r4, [r5, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <_puts_r+0x22>
 8005f1c:	0028      	movs	r0, r5
 8005f1e:	f000 fa1d 	bl	800635c <__sinit>
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <_puts_r+0xb4>)
 8005f24:	429c      	cmp	r4, r3
 8005f26:	d10f      	bne.n	8005f48 <_puts_r+0x48>
 8005f28:	686c      	ldr	r4, [r5, #4]
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	071b      	lsls	r3, r3, #28
 8005f2e:	d502      	bpl.n	8005f36 <_puts_r+0x36>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11f      	bne.n	8005f76 <_puts_r+0x76>
 8005f36:	0021      	movs	r1, r4
 8005f38:	0028      	movs	r0, r5
 8005f3a:	f000 f8a1 	bl	8006080 <__swsetup_r>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d019      	beq.n	8005f76 <_puts_r+0x76>
 8005f42:	2001      	movs	r0, #1
 8005f44:	4240      	negs	r0, r0
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <_puts_r+0xb8>)
 8005f4a:	429c      	cmp	r4, r3
 8005f4c:	d101      	bne.n	8005f52 <_puts_r+0x52>
 8005f4e:	68ac      	ldr	r4, [r5, #8]
 8005f50:	e7eb      	b.n	8005f2a <_puts_r+0x2a>
 8005f52:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <_puts_r+0xbc>)
 8005f54:	429c      	cmp	r4, r3
 8005f56:	d1e8      	bne.n	8005f2a <_puts_r+0x2a>
 8005f58:	68ec      	ldr	r4, [r5, #12]
 8005f5a:	e7e6      	b.n	8005f2a <_puts_r+0x2a>
 8005f5c:	3601      	adds	r6, #1
 8005f5e:	60a3      	str	r3, [r4, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da04      	bge.n	8005f6e <_puts_r+0x6e>
 8005f64:	69a2      	ldr	r2, [r4, #24]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	dc16      	bgt.n	8005f98 <_puts_r+0x98>
 8005f6a:	290a      	cmp	r1, #10
 8005f6c:	d014      	beq.n	8005f98 <_puts_r+0x98>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	7019      	strb	r1, [r3, #0]
 8005f76:	68a3      	ldr	r3, [r4, #8]
 8005f78:	7831      	ldrb	r1, [r6, #0]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	d1ed      	bne.n	8005f5c <_puts_r+0x5c>
 8005f80:	60a3      	str	r3, [r4, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da0f      	bge.n	8005fa6 <_puts_r+0xa6>
 8005f86:	0022      	movs	r2, r4
 8005f88:	310a      	adds	r1, #10
 8005f8a:	0028      	movs	r0, r5
 8005f8c:	f000 f822 	bl	8005fd4 <__swbuf_r>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d0d6      	beq.n	8005f42 <_puts_r+0x42>
 8005f94:	200a      	movs	r0, #10
 8005f96:	e7d6      	b.n	8005f46 <_puts_r+0x46>
 8005f98:	0022      	movs	r2, r4
 8005f9a:	0028      	movs	r0, r5
 8005f9c:	f000 f81a 	bl	8005fd4 <__swbuf_r>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d1e8      	bne.n	8005f76 <_puts_r+0x76>
 8005fa4:	e7cd      	b.n	8005f42 <_puts_r+0x42>
 8005fa6:	200a      	movs	r0, #10
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	7018      	strb	r0, [r3, #0]
 8005fb0:	e7c9      	b.n	8005f46 <_puts_r+0x46>
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	08006f5c 	.word	0x08006f5c
 8005fb8:	08006f7c 	.word	0x08006f7c
 8005fbc:	08006f3c 	.word	0x08006f3c

08005fc0 <puts>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <puts+0x10>)
 8005fc4:	0001      	movs	r1, r0
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	f7ff ff9a 	bl	8005f00 <_puts_r>
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	2000000c 	.word	0x2000000c

08005fd4 <__swbuf_r>:
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd6:	0005      	movs	r5, r0
 8005fd8:	000e      	movs	r6, r1
 8005fda:	0014      	movs	r4, r2
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d004      	beq.n	8005fea <__swbuf_r+0x16>
 8005fe0:	6983      	ldr	r3, [r0, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <__swbuf_r+0x16>
 8005fe6:	f000 f9b9 	bl	800635c <__sinit>
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <__swbuf_r+0xa0>)
 8005fec:	429c      	cmp	r4, r3
 8005fee:	d12d      	bne.n	800604c <__swbuf_r+0x78>
 8005ff0:	686c      	ldr	r4, [r5, #4]
 8005ff2:	69a3      	ldr	r3, [r4, #24]
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	071b      	lsls	r3, r3, #28
 8005ffa:	d531      	bpl.n	8006060 <__swbuf_r+0x8c>
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02e      	beq.n	8006060 <__swbuf_r+0x8c>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	6922      	ldr	r2, [r4, #16]
 8006006:	b2f7      	uxtb	r7, r6
 8006008:	1a98      	subs	r0, r3, r2
 800600a:	6963      	ldr	r3, [r4, #20]
 800600c:	b2f6      	uxtb	r6, r6
 800600e:	4283      	cmp	r3, r0
 8006010:	dc05      	bgt.n	800601e <__swbuf_r+0x4a>
 8006012:	0021      	movs	r1, r4
 8006014:	0028      	movs	r0, r5
 8006016:	f000 f933 	bl	8006280 <_fflush_r>
 800601a:	2800      	cmp	r0, #0
 800601c:	d126      	bne.n	800606c <__swbuf_r+0x98>
 800601e:	68a3      	ldr	r3, [r4, #8]
 8006020:	3001      	adds	r0, #1
 8006022:	3b01      	subs	r3, #1
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	6022      	str	r2, [r4, #0]
 800602c:	701f      	strb	r7, [r3, #0]
 800602e:	6963      	ldr	r3, [r4, #20]
 8006030:	4283      	cmp	r3, r0
 8006032:	d004      	beq.n	800603e <__swbuf_r+0x6a>
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	07db      	lsls	r3, r3, #31
 8006038:	d51a      	bpl.n	8006070 <__swbuf_r+0x9c>
 800603a:	2e0a      	cmp	r6, #10
 800603c:	d118      	bne.n	8006070 <__swbuf_r+0x9c>
 800603e:	0021      	movs	r1, r4
 8006040:	0028      	movs	r0, r5
 8006042:	f000 f91d 	bl	8006280 <_fflush_r>
 8006046:	2800      	cmp	r0, #0
 8006048:	d012      	beq.n	8006070 <__swbuf_r+0x9c>
 800604a:	e00f      	b.n	800606c <__swbuf_r+0x98>
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <__swbuf_r+0xa4>)
 800604e:	429c      	cmp	r4, r3
 8006050:	d101      	bne.n	8006056 <__swbuf_r+0x82>
 8006052:	68ac      	ldr	r4, [r5, #8]
 8006054:	e7cd      	b.n	8005ff2 <__swbuf_r+0x1e>
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <__swbuf_r+0xa8>)
 8006058:	429c      	cmp	r4, r3
 800605a:	d1ca      	bne.n	8005ff2 <__swbuf_r+0x1e>
 800605c:	68ec      	ldr	r4, [r5, #12]
 800605e:	e7c8      	b.n	8005ff2 <__swbuf_r+0x1e>
 8006060:	0021      	movs	r1, r4
 8006062:	0028      	movs	r0, r5
 8006064:	f000 f80c 	bl	8006080 <__swsetup_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	d0ca      	beq.n	8006002 <__swbuf_r+0x2e>
 800606c:	2601      	movs	r6, #1
 800606e:	4276      	negs	r6, r6
 8006070:	0030      	movs	r0, r6
 8006072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006074:	08006f5c 	.word	0x08006f5c
 8006078:	08006f7c 	.word	0x08006f7c
 800607c:	08006f3c 	.word	0x08006f3c

08006080 <__swsetup_r>:
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <__swsetup_r+0xdc>)
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	681d      	ldr	r5, [r3, #0]
 8006086:	0006      	movs	r6, r0
 8006088:	000c      	movs	r4, r1
 800608a:	2d00      	cmp	r5, #0
 800608c:	d005      	beq.n	800609a <__swsetup_r+0x1a>
 800608e:	69ab      	ldr	r3, [r5, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <__swsetup_r+0x1a>
 8006094:	0028      	movs	r0, r5
 8006096:	f000 f961 	bl	800635c <__sinit>
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <__swsetup_r+0xe0>)
 800609c:	429c      	cmp	r4, r3
 800609e:	d10f      	bne.n	80060c0 <__swsetup_r+0x40>
 80060a0:	686c      	ldr	r4, [r5, #4]
 80060a2:	230c      	movs	r3, #12
 80060a4:	5ee2      	ldrsh	r2, [r4, r3]
 80060a6:	b293      	uxth	r3, r2
 80060a8:	0719      	lsls	r1, r3, #28
 80060aa:	d42d      	bmi.n	8006108 <__swsetup_r+0x88>
 80060ac:	06d9      	lsls	r1, r3, #27
 80060ae:	d411      	bmi.n	80060d4 <__swsetup_r+0x54>
 80060b0:	2309      	movs	r3, #9
 80060b2:	2001      	movs	r0, #1
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	3337      	adds	r3, #55	; 0x37
 80060b8:	4313      	orrs	r3, r2
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	4240      	negs	r0, r0
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	4b28      	ldr	r3, [pc, #160]	; (8006164 <__swsetup_r+0xe4>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d101      	bne.n	80060ca <__swsetup_r+0x4a>
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	e7eb      	b.n	80060a2 <__swsetup_r+0x22>
 80060ca:	4b27      	ldr	r3, [pc, #156]	; (8006168 <__swsetup_r+0xe8>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d1e8      	bne.n	80060a2 <__swsetup_r+0x22>
 80060d0:	68ec      	ldr	r4, [r5, #12]
 80060d2:	e7e6      	b.n	80060a2 <__swsetup_r+0x22>
 80060d4:	075b      	lsls	r3, r3, #29
 80060d6:	d513      	bpl.n	8006100 <__swsetup_r+0x80>
 80060d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060da:	2900      	cmp	r1, #0
 80060dc:	d008      	beq.n	80060f0 <__swsetup_r+0x70>
 80060de:	0023      	movs	r3, r4
 80060e0:	3344      	adds	r3, #68	; 0x44
 80060e2:	4299      	cmp	r1, r3
 80060e4:	d002      	beq.n	80060ec <__swsetup_r+0x6c>
 80060e6:	0030      	movs	r0, r6
 80060e8:	f000 fa38 	bl	800655c <_free_r>
 80060ec:	2300      	movs	r3, #0
 80060ee:	6363      	str	r3, [r4, #52]	; 0x34
 80060f0:	2224      	movs	r2, #36	; 0x24
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	4393      	bics	r3, r2
 80060f6:	81a3      	strh	r3, [r4, #12]
 80060f8:	2300      	movs	r3, #0
 80060fa:	6063      	str	r3, [r4, #4]
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	6023      	str	r3, [r4, #0]
 8006100:	2308      	movs	r3, #8
 8006102:	89a2      	ldrh	r2, [r4, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10b      	bne.n	8006126 <__swsetup_r+0xa6>
 800610e:	21a0      	movs	r1, #160	; 0xa0
 8006110:	2280      	movs	r2, #128	; 0x80
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	0089      	lsls	r1, r1, #2
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	400b      	ands	r3, r1
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <__swsetup_r+0xa6>
 800611e:	0021      	movs	r1, r4
 8006120:	0030      	movs	r0, r6
 8006122:	f000 f9d7 	bl	80064d4 <__smakebuf_r>
 8006126:	2301      	movs	r3, #1
 8006128:	89a2      	ldrh	r2, [r4, #12]
 800612a:	4013      	ands	r3, r2
 800612c:	d011      	beq.n	8006152 <__swsetup_r+0xd2>
 800612e:	2300      	movs	r3, #0
 8006130:	60a3      	str	r3, [r4, #8]
 8006132:	6963      	ldr	r3, [r4, #20]
 8006134:	425b      	negs	r3, r3
 8006136:	61a3      	str	r3, [r4, #24]
 8006138:	2000      	movs	r0, #0
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	4283      	cmp	r3, r0
 800613e:	d1be      	bne.n	80060be <__swsetup_r+0x3e>
 8006140:	230c      	movs	r3, #12
 8006142:	5ee2      	ldrsh	r2, [r4, r3]
 8006144:	0613      	lsls	r3, r2, #24
 8006146:	d5ba      	bpl.n	80060be <__swsetup_r+0x3e>
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	4313      	orrs	r3, r2
 800614c:	81a3      	strh	r3, [r4, #12]
 800614e:	3801      	subs	r0, #1
 8006150:	e7b5      	b.n	80060be <__swsetup_r+0x3e>
 8006152:	0792      	lsls	r2, r2, #30
 8006154:	d400      	bmi.n	8006158 <__swsetup_r+0xd8>
 8006156:	6963      	ldr	r3, [r4, #20]
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	e7ed      	b.n	8006138 <__swsetup_r+0xb8>
 800615c:	2000000c 	.word	0x2000000c
 8006160:	08006f5c 	.word	0x08006f5c
 8006164:	08006f7c 	.word	0x08006f7c
 8006168:	08006f3c 	.word	0x08006f3c

0800616c <__sflush_r>:
 800616c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800616e:	898a      	ldrh	r2, [r1, #12]
 8006170:	0005      	movs	r5, r0
 8006172:	000c      	movs	r4, r1
 8006174:	0713      	lsls	r3, r2, #28
 8006176:	d460      	bmi.n	800623a <__sflush_r+0xce>
 8006178:	684b      	ldr	r3, [r1, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	dc04      	bgt.n	8006188 <__sflush_r+0x1c>
 800617e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	dc01      	bgt.n	8006188 <__sflush_r+0x1c>
 8006184:	2000      	movs	r0, #0
 8006186:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006188:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800618a:	2f00      	cmp	r7, #0
 800618c:	d0fa      	beq.n	8006184 <__sflush_r+0x18>
 800618e:	2300      	movs	r3, #0
 8006190:	682e      	ldr	r6, [r5, #0]
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	2380      	movs	r3, #128	; 0x80
 8006196:	015b      	lsls	r3, r3, #5
 8006198:	6a21      	ldr	r1, [r4, #32]
 800619a:	401a      	ands	r2, r3
 800619c:	d034      	beq.n	8006208 <__sflush_r+0x9c>
 800619e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	075b      	lsls	r3, r3, #29
 80061a4:	d506      	bpl.n	80061b4 <__sflush_r+0x48>
 80061a6:	6863      	ldr	r3, [r4, #4]
 80061a8:	1ac0      	subs	r0, r0, r3
 80061aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <__sflush_r+0x48>
 80061b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061b2:	1ac0      	subs	r0, r0, r3
 80061b4:	0002      	movs	r2, r0
 80061b6:	6a21      	ldr	r1, [r4, #32]
 80061b8:	2300      	movs	r3, #0
 80061ba:	0028      	movs	r0, r5
 80061bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80061be:	47b8      	blx	r7
 80061c0:	89a1      	ldrh	r1, [r4, #12]
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d106      	bne.n	80061d4 <__sflush_r+0x68>
 80061c6:	682b      	ldr	r3, [r5, #0]
 80061c8:	2b1d      	cmp	r3, #29
 80061ca:	d830      	bhi.n	800622e <__sflush_r+0xc2>
 80061cc:	4a2b      	ldr	r2, [pc, #172]	; (800627c <__sflush_r+0x110>)
 80061ce:	40da      	lsrs	r2, r3
 80061d0:	07d3      	lsls	r3, r2, #31
 80061d2:	d52c      	bpl.n	800622e <__sflush_r+0xc2>
 80061d4:	2300      	movs	r3, #0
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	6023      	str	r3, [r4, #0]
 80061dc:	04cb      	lsls	r3, r1, #19
 80061de:	d505      	bpl.n	80061ec <__sflush_r+0x80>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <__sflush_r+0x7e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d100      	bne.n	80061ec <__sflush_r+0x80>
 80061ea:	6560      	str	r0, [r4, #84]	; 0x54
 80061ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ee:	602e      	str	r6, [r5, #0]
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d0c7      	beq.n	8006184 <__sflush_r+0x18>
 80061f4:	0023      	movs	r3, r4
 80061f6:	3344      	adds	r3, #68	; 0x44
 80061f8:	4299      	cmp	r1, r3
 80061fa:	d002      	beq.n	8006202 <__sflush_r+0x96>
 80061fc:	0028      	movs	r0, r5
 80061fe:	f000 f9ad 	bl	800655c <_free_r>
 8006202:	2000      	movs	r0, #0
 8006204:	6360      	str	r0, [r4, #52]	; 0x34
 8006206:	e7be      	b.n	8006186 <__sflush_r+0x1a>
 8006208:	2301      	movs	r3, #1
 800620a:	0028      	movs	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d1c6      	bne.n	80061a0 <__sflush_r+0x34>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0c3      	beq.n	80061a0 <__sflush_r+0x34>
 8006218:	2b1d      	cmp	r3, #29
 800621a:	d001      	beq.n	8006220 <__sflush_r+0xb4>
 800621c:	2b16      	cmp	r3, #22
 800621e:	d101      	bne.n	8006224 <__sflush_r+0xb8>
 8006220:	602e      	str	r6, [r5, #0]
 8006222:	e7af      	b.n	8006184 <__sflush_r+0x18>
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	89a2      	ldrh	r2, [r4, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	81a3      	strh	r3, [r4, #12]
 800622c:	e7ab      	b.n	8006186 <__sflush_r+0x1a>
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	430b      	orrs	r3, r1
 8006232:	2001      	movs	r0, #1
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	4240      	negs	r0, r0
 8006238:	e7a5      	b.n	8006186 <__sflush_r+0x1a>
 800623a:	690f      	ldr	r7, [r1, #16]
 800623c:	2f00      	cmp	r7, #0
 800623e:	d0a1      	beq.n	8006184 <__sflush_r+0x18>
 8006240:	680b      	ldr	r3, [r1, #0]
 8006242:	600f      	str	r7, [r1, #0]
 8006244:	1bdb      	subs	r3, r3, r7
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	2300      	movs	r3, #0
 800624a:	0792      	lsls	r2, r2, #30
 800624c:	d100      	bne.n	8006250 <__sflush_r+0xe4>
 800624e:	694b      	ldr	r3, [r1, #20]
 8006250:	60a3      	str	r3, [r4, #8]
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	dc00      	bgt.n	800625a <__sflush_r+0xee>
 8006258:	e794      	b.n	8006184 <__sflush_r+0x18>
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	003a      	movs	r2, r7
 800625e:	6a21      	ldr	r1, [r4, #32]
 8006260:	0028      	movs	r0, r5
 8006262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006264:	47b0      	blx	r6
 8006266:	2800      	cmp	r0, #0
 8006268:	dc03      	bgt.n	8006272 <__sflush_r+0x106>
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	89a2      	ldrh	r2, [r4, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	e7df      	b.n	8006232 <__sflush_r+0xc6>
 8006272:	9b01      	ldr	r3, [sp, #4]
 8006274:	183f      	adds	r7, r7, r0
 8006276:	1a1b      	subs	r3, r3, r0
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	e7ea      	b.n	8006252 <__sflush_r+0xe6>
 800627c:	20400001 	.word	0x20400001

08006280 <_fflush_r>:
 8006280:	690b      	ldr	r3, [r1, #16]
 8006282:	b570      	push	{r4, r5, r6, lr}
 8006284:	0005      	movs	r5, r0
 8006286:	000c      	movs	r4, r1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <_fflush_r+0x10>
 800628c:	2000      	movs	r0, #0
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	2800      	cmp	r0, #0
 8006292:	d004      	beq.n	800629e <_fflush_r+0x1e>
 8006294:	6983      	ldr	r3, [r0, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <_fflush_r+0x1e>
 800629a:	f000 f85f 	bl	800635c <__sinit>
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <_fflush_r+0x4c>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d109      	bne.n	80062b8 <_fflush_r+0x38>
 80062a4:	686c      	ldr	r4, [r5, #4]
 80062a6:	220c      	movs	r2, #12
 80062a8:	5ea3      	ldrsh	r3, [r4, r2]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ee      	beq.n	800628c <_fflush_r+0xc>
 80062ae:	0021      	movs	r1, r4
 80062b0:	0028      	movs	r0, r5
 80062b2:	f7ff ff5b 	bl	800616c <__sflush_r>
 80062b6:	e7ea      	b.n	800628e <_fflush_r+0xe>
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <_fflush_r+0x50>)
 80062ba:	429c      	cmp	r4, r3
 80062bc:	d101      	bne.n	80062c2 <_fflush_r+0x42>
 80062be:	68ac      	ldr	r4, [r5, #8]
 80062c0:	e7f1      	b.n	80062a6 <_fflush_r+0x26>
 80062c2:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <_fflush_r+0x54>)
 80062c4:	429c      	cmp	r4, r3
 80062c6:	d1ee      	bne.n	80062a6 <_fflush_r+0x26>
 80062c8:	68ec      	ldr	r4, [r5, #12]
 80062ca:	e7ec      	b.n	80062a6 <_fflush_r+0x26>
 80062cc:	08006f5c 	.word	0x08006f5c
 80062d0:	08006f7c 	.word	0x08006f7c
 80062d4:	08006f3c 	.word	0x08006f3c

080062d8 <std>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b510      	push	{r4, lr}
 80062dc:	0004      	movs	r4, r0
 80062de:	6003      	str	r3, [r0, #0]
 80062e0:	6043      	str	r3, [r0, #4]
 80062e2:	6083      	str	r3, [r0, #8]
 80062e4:	8181      	strh	r1, [r0, #12]
 80062e6:	6643      	str	r3, [r0, #100]	; 0x64
 80062e8:	81c2      	strh	r2, [r0, #14]
 80062ea:	6103      	str	r3, [r0, #16]
 80062ec:	6143      	str	r3, [r0, #20]
 80062ee:	6183      	str	r3, [r0, #24]
 80062f0:	0019      	movs	r1, r3
 80062f2:	2208      	movs	r2, #8
 80062f4:	305c      	adds	r0, #92	; 0x5c
 80062f6:	f7ff fde1 	bl	8005ebc <memset>
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <std+0x38>)
 80062fc:	6224      	str	r4, [r4, #32]
 80062fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <std+0x3c>)
 8006302:	62a3      	str	r3, [r4, #40]	; 0x28
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <std+0x40>)
 8006306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006308:	4b04      	ldr	r3, [pc, #16]	; (800631c <std+0x44>)
 800630a:	6323      	str	r3, [r4, #48]	; 0x30
 800630c:	bd10      	pop	{r4, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	08006c39 	.word	0x08006c39
 8006314:	08006c61 	.word	0x08006c61
 8006318:	08006c99 	.word	0x08006c99
 800631c:	08006cc5 	.word	0x08006cc5

08006320 <_cleanup_r>:
 8006320:	b510      	push	{r4, lr}
 8006322:	4902      	ldr	r1, [pc, #8]	; (800632c <_cleanup_r+0xc>)
 8006324:	f000 f88c 	bl	8006440 <_fwalk_reent>
 8006328:	bd10      	pop	{r4, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	08006281 	.word	0x08006281

08006330 <__sfmoreglue>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	2568      	movs	r5, #104	; 0x68
 8006334:	1e4a      	subs	r2, r1, #1
 8006336:	4355      	muls	r5, r2
 8006338:	000e      	movs	r6, r1
 800633a:	0029      	movs	r1, r5
 800633c:	3174      	adds	r1, #116	; 0x74
 800633e:	f000 f957 	bl	80065f0 <_malloc_r>
 8006342:	1e04      	subs	r4, r0, #0
 8006344:	d008      	beq.n	8006358 <__sfmoreglue+0x28>
 8006346:	2100      	movs	r1, #0
 8006348:	002a      	movs	r2, r5
 800634a:	6001      	str	r1, [r0, #0]
 800634c:	6046      	str	r6, [r0, #4]
 800634e:	300c      	adds	r0, #12
 8006350:	60a0      	str	r0, [r4, #8]
 8006352:	3268      	adds	r2, #104	; 0x68
 8006354:	f7ff fdb2 	bl	8005ebc <memset>
 8006358:	0020      	movs	r0, r4
 800635a:	bd70      	pop	{r4, r5, r6, pc}

0800635c <__sinit>:
 800635c:	6983      	ldr	r3, [r0, #24]
 800635e:	b513      	push	{r0, r1, r4, lr}
 8006360:	0004      	movs	r4, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d128      	bne.n	80063b8 <__sinit+0x5c>
 8006366:	6483      	str	r3, [r0, #72]	; 0x48
 8006368:	64c3      	str	r3, [r0, #76]	; 0x4c
 800636a:	6503      	str	r3, [r0, #80]	; 0x50
 800636c:	4b13      	ldr	r3, [pc, #76]	; (80063bc <__sinit+0x60>)
 800636e:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <__sinit+0x64>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6282      	str	r2, [r0, #40]	; 0x28
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	4298      	cmp	r0, r3
 8006378:	d101      	bne.n	800637e <__sinit+0x22>
 800637a:	2301      	movs	r3, #1
 800637c:	6183      	str	r3, [r0, #24]
 800637e:	0020      	movs	r0, r4
 8006380:	f000 f820 	bl	80063c4 <__sfp>
 8006384:	6060      	str	r0, [r4, #4]
 8006386:	0020      	movs	r0, r4
 8006388:	f000 f81c 	bl	80063c4 <__sfp>
 800638c:	60a0      	str	r0, [r4, #8]
 800638e:	0020      	movs	r0, r4
 8006390:	f000 f818 	bl	80063c4 <__sfp>
 8006394:	2200      	movs	r2, #0
 8006396:	60e0      	str	r0, [r4, #12]
 8006398:	2104      	movs	r1, #4
 800639a:	6860      	ldr	r0, [r4, #4]
 800639c:	f7ff ff9c 	bl	80062d8 <std>
 80063a0:	2201      	movs	r2, #1
 80063a2:	2109      	movs	r1, #9
 80063a4:	68a0      	ldr	r0, [r4, #8]
 80063a6:	f7ff ff97 	bl	80062d8 <std>
 80063aa:	2202      	movs	r2, #2
 80063ac:	2112      	movs	r1, #18
 80063ae:	68e0      	ldr	r0, [r4, #12]
 80063b0:	f7ff ff92 	bl	80062d8 <std>
 80063b4:	2301      	movs	r3, #1
 80063b6:	61a3      	str	r3, [r4, #24]
 80063b8:	bd13      	pop	{r0, r1, r4, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	08006f38 	.word	0x08006f38
 80063c0:	08006321 	.word	0x08006321

080063c4 <__sfp>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <__sfp+0x74>)
 80063c8:	0007      	movs	r7, r0
 80063ca:	681e      	ldr	r6, [r3, #0]
 80063cc:	69b3      	ldr	r3, [r6, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <__sfp+0x14>
 80063d2:	0030      	movs	r0, r6
 80063d4:	f7ff ffc2 	bl	800635c <__sinit>
 80063d8:	3648      	adds	r6, #72	; 0x48
 80063da:	68b4      	ldr	r4, [r6, #8]
 80063dc:	6873      	ldr	r3, [r6, #4]
 80063de:	3b01      	subs	r3, #1
 80063e0:	d504      	bpl.n	80063ec <__sfp+0x28>
 80063e2:	6833      	ldr	r3, [r6, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <__sfp+0x34>
 80063e8:	6836      	ldr	r6, [r6, #0]
 80063ea:	e7f6      	b.n	80063da <__sfp+0x16>
 80063ec:	220c      	movs	r2, #12
 80063ee:	5ea5      	ldrsh	r5, [r4, r2]
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	d00d      	beq.n	8006410 <__sfp+0x4c>
 80063f4:	3468      	adds	r4, #104	; 0x68
 80063f6:	e7f2      	b.n	80063de <__sfp+0x1a>
 80063f8:	2104      	movs	r1, #4
 80063fa:	0038      	movs	r0, r7
 80063fc:	f7ff ff98 	bl	8006330 <__sfmoreglue>
 8006400:	6030      	str	r0, [r6, #0]
 8006402:	2800      	cmp	r0, #0
 8006404:	d1f0      	bne.n	80063e8 <__sfp+0x24>
 8006406:	230c      	movs	r3, #12
 8006408:	0004      	movs	r4, r0
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	0020      	movs	r0, r4
 800640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006410:	0020      	movs	r0, r4
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <__sfp+0x78>)
 8006414:	6665      	str	r5, [r4, #100]	; 0x64
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	6065      	str	r5, [r4, #4]
 800641a:	60a5      	str	r5, [r4, #8]
 800641c:	60e3      	str	r3, [r4, #12]
 800641e:	6125      	str	r5, [r4, #16]
 8006420:	6165      	str	r5, [r4, #20]
 8006422:	61a5      	str	r5, [r4, #24]
 8006424:	2208      	movs	r2, #8
 8006426:	0029      	movs	r1, r5
 8006428:	305c      	adds	r0, #92	; 0x5c
 800642a:	f7ff fd47 	bl	8005ebc <memset>
 800642e:	6365      	str	r5, [r4, #52]	; 0x34
 8006430:	63a5      	str	r5, [r4, #56]	; 0x38
 8006432:	64a5      	str	r5, [r4, #72]	; 0x48
 8006434:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006436:	e7e9      	b.n	800640c <__sfp+0x48>
 8006438:	08006f38 	.word	0x08006f38
 800643c:	ffff0001 	.word	0xffff0001

08006440 <_fwalk_reent>:
 8006440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006442:	0004      	movs	r4, r0
 8006444:	0007      	movs	r7, r0
 8006446:	2600      	movs	r6, #0
 8006448:	9101      	str	r1, [sp, #4]
 800644a:	3448      	adds	r4, #72	; 0x48
 800644c:	2c00      	cmp	r4, #0
 800644e:	d101      	bne.n	8006454 <_fwalk_reent+0x14>
 8006450:	0030      	movs	r0, r6
 8006452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	68a5      	ldr	r5, [r4, #8]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	9b00      	ldr	r3, [sp, #0]
 800645c:	3b01      	subs	r3, #1
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	d501      	bpl.n	8006466 <_fwalk_reent+0x26>
 8006462:	6824      	ldr	r4, [r4, #0]
 8006464:	e7f2      	b.n	800644c <_fwalk_reent+0xc>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d908      	bls.n	800647e <_fwalk_reent+0x3e>
 800646c:	220e      	movs	r2, #14
 800646e:	5eab      	ldrsh	r3, [r5, r2]
 8006470:	3301      	adds	r3, #1
 8006472:	d004      	beq.n	800647e <_fwalk_reent+0x3e>
 8006474:	0029      	movs	r1, r5
 8006476:	0038      	movs	r0, r7
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	4798      	blx	r3
 800647c:	4306      	orrs	r6, r0
 800647e:	3568      	adds	r5, #104	; 0x68
 8006480:	e7eb      	b.n	800645a <_fwalk_reent+0x1a>
	...

08006484 <__swhatbuf_r>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	000e      	movs	r6, r1
 8006488:	001d      	movs	r5, r3
 800648a:	230e      	movs	r3, #14
 800648c:	5ec9      	ldrsh	r1, [r1, r3]
 800648e:	b096      	sub	sp, #88	; 0x58
 8006490:	0014      	movs	r4, r2
 8006492:	2900      	cmp	r1, #0
 8006494:	da07      	bge.n	80064a6 <__swhatbuf_r+0x22>
 8006496:	2300      	movs	r3, #0
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	89b3      	ldrh	r3, [r6, #12]
 800649c:	061b      	lsls	r3, r3, #24
 800649e:	d411      	bmi.n	80064c4 <__swhatbuf_r+0x40>
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	e00f      	b.n	80064c6 <__swhatbuf_r+0x42>
 80064a6:	466a      	mov	r2, sp
 80064a8:	f000 fc38 	bl	8006d1c <_fstat_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	dbf2      	blt.n	8006496 <__swhatbuf_r+0x12>
 80064b0:	22f0      	movs	r2, #240	; 0xf0
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	0212      	lsls	r2, r2, #8
 80064b6:	4013      	ands	r3, r2
 80064b8:	4a05      	ldr	r2, [pc, #20]	; (80064d0 <__swhatbuf_r+0x4c>)
 80064ba:	189b      	adds	r3, r3, r2
 80064bc:	425a      	negs	r2, r3
 80064be:	4153      	adcs	r3, r2
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	e7ed      	b.n	80064a0 <__swhatbuf_r+0x1c>
 80064c4:	2340      	movs	r3, #64	; 0x40
 80064c6:	2000      	movs	r0, #0
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	b016      	add	sp, #88	; 0x58
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	ffffe000 	.word	0xffffe000

080064d4 <__smakebuf_r>:
 80064d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d6:	2602      	movs	r6, #2
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	0005      	movs	r5, r0
 80064dc:	000c      	movs	r4, r1
 80064de:	4233      	tst	r3, r6
 80064e0:	d006      	beq.n	80064f0 <__smakebuf_r+0x1c>
 80064e2:	0023      	movs	r3, r4
 80064e4:	3347      	adds	r3, #71	; 0x47
 80064e6:	6023      	str	r3, [r4, #0]
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	2301      	movs	r3, #1
 80064ec:	6163      	str	r3, [r4, #20]
 80064ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80064f0:	ab01      	add	r3, sp, #4
 80064f2:	466a      	mov	r2, sp
 80064f4:	f7ff ffc6 	bl	8006484 <__swhatbuf_r>
 80064f8:	9900      	ldr	r1, [sp, #0]
 80064fa:	0007      	movs	r7, r0
 80064fc:	0028      	movs	r0, r5
 80064fe:	f000 f877 	bl	80065f0 <_malloc_r>
 8006502:	2800      	cmp	r0, #0
 8006504:	d108      	bne.n	8006518 <__smakebuf_r+0x44>
 8006506:	220c      	movs	r2, #12
 8006508:	5ea3      	ldrsh	r3, [r4, r2]
 800650a:	059a      	lsls	r2, r3, #22
 800650c:	d4ef      	bmi.n	80064ee <__smakebuf_r+0x1a>
 800650e:	2203      	movs	r2, #3
 8006510:	4393      	bics	r3, r2
 8006512:	431e      	orrs	r6, r3
 8006514:	81a6      	strh	r6, [r4, #12]
 8006516:	e7e4      	b.n	80064e2 <__smakebuf_r+0xe>
 8006518:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <__smakebuf_r+0x84>)
 800651a:	62ab      	str	r3, [r5, #40]	; 0x28
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	89a2      	ldrh	r2, [r4, #12]
 8006520:	6020      	str	r0, [r4, #0]
 8006522:	4313      	orrs	r3, r2
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	6120      	str	r0, [r4, #16]
 800652a:	6163      	str	r3, [r4, #20]
 800652c:	9b01      	ldr	r3, [sp, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00d      	beq.n	800654e <__smakebuf_r+0x7a>
 8006532:	230e      	movs	r3, #14
 8006534:	5ee1      	ldrsh	r1, [r4, r3]
 8006536:	0028      	movs	r0, r5
 8006538:	f000 fc02 	bl	8006d40 <_isatty_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	d006      	beq.n	800654e <__smakebuf_r+0x7a>
 8006540:	2203      	movs	r2, #3
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	4393      	bics	r3, r2
 8006546:	001a      	movs	r2, r3
 8006548:	2301      	movs	r3, #1
 800654a:	4313      	orrs	r3, r2
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	89a0      	ldrh	r0, [r4, #12]
 8006550:	4338      	orrs	r0, r7
 8006552:	81a0      	strh	r0, [r4, #12]
 8006554:	e7cb      	b.n	80064ee <__smakebuf_r+0x1a>
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	08006321 	.word	0x08006321

0800655c <_free_r>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	0005      	movs	r5, r0
 8006560:	2900      	cmp	r1, #0
 8006562:	d010      	beq.n	8006586 <_free_r+0x2a>
 8006564:	1f0c      	subs	r4, r1, #4
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da00      	bge.n	800656e <_free_r+0x12>
 800656c:	18e4      	adds	r4, r4, r3
 800656e:	0028      	movs	r0, r5
 8006570:	f000 fc17 	bl	8006da2 <__malloc_lock>
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <_free_r+0x90>)
 8006576:	6813      	ldr	r3, [r2, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <_free_r+0x2c>
 800657c:	6063      	str	r3, [r4, #4]
 800657e:	6014      	str	r4, [r2, #0]
 8006580:	0028      	movs	r0, r5
 8006582:	f000 fc0f 	bl	8006da4 <__malloc_unlock>
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	42a3      	cmp	r3, r4
 800658a:	d909      	bls.n	80065a0 <_free_r+0x44>
 800658c:	6821      	ldr	r1, [r4, #0]
 800658e:	1860      	adds	r0, r4, r1
 8006590:	4283      	cmp	r3, r0
 8006592:	d1f3      	bne.n	800657c <_free_r+0x20>
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	1841      	adds	r1, r0, r1
 800659a:	6021      	str	r1, [r4, #0]
 800659c:	e7ee      	b.n	800657c <_free_r+0x20>
 800659e:	0013      	movs	r3, r2
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	d001      	beq.n	80065aa <_free_r+0x4e>
 80065a6:	42a2      	cmp	r2, r4
 80065a8:	d9f9      	bls.n	800659e <_free_r+0x42>
 80065aa:	6819      	ldr	r1, [r3, #0]
 80065ac:	1858      	adds	r0, r3, r1
 80065ae:	42a0      	cmp	r0, r4
 80065b0:	d10b      	bne.n	80065ca <_free_r+0x6e>
 80065b2:	6820      	ldr	r0, [r4, #0]
 80065b4:	1809      	adds	r1, r1, r0
 80065b6:	1858      	adds	r0, r3, r1
 80065b8:	6019      	str	r1, [r3, #0]
 80065ba:	4282      	cmp	r2, r0
 80065bc:	d1e0      	bne.n	8006580 <_free_r+0x24>
 80065be:	6810      	ldr	r0, [r2, #0]
 80065c0:	6852      	ldr	r2, [r2, #4]
 80065c2:	1841      	adds	r1, r0, r1
 80065c4:	6019      	str	r1, [r3, #0]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	e7da      	b.n	8006580 <_free_r+0x24>
 80065ca:	42a0      	cmp	r0, r4
 80065cc:	d902      	bls.n	80065d4 <_free_r+0x78>
 80065ce:	230c      	movs	r3, #12
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	e7d5      	b.n	8006580 <_free_r+0x24>
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	1860      	adds	r0, r4, r1
 80065d8:	4282      	cmp	r2, r0
 80065da:	d103      	bne.n	80065e4 <_free_r+0x88>
 80065dc:	6810      	ldr	r0, [r2, #0]
 80065de:	6852      	ldr	r2, [r2, #4]
 80065e0:	1841      	adds	r1, r0, r1
 80065e2:	6021      	str	r1, [r4, #0]
 80065e4:	6062      	str	r2, [r4, #4]
 80065e6:	605c      	str	r4, [r3, #4]
 80065e8:	e7ca      	b.n	8006580 <_free_r+0x24>
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	20000090 	.word	0x20000090

080065f0 <_malloc_r>:
 80065f0:	2303      	movs	r3, #3
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	1ccd      	adds	r5, r1, #3
 80065f6:	439d      	bics	r5, r3
 80065f8:	3508      	adds	r5, #8
 80065fa:	0006      	movs	r6, r0
 80065fc:	2d0c      	cmp	r5, #12
 80065fe:	d21e      	bcs.n	800663e <_malloc_r+0x4e>
 8006600:	250c      	movs	r5, #12
 8006602:	42a9      	cmp	r1, r5
 8006604:	d81d      	bhi.n	8006642 <_malloc_r+0x52>
 8006606:	0030      	movs	r0, r6
 8006608:	f000 fbcb 	bl	8006da2 <__malloc_lock>
 800660c:	4a25      	ldr	r2, [pc, #148]	; (80066a4 <_malloc_r+0xb4>)
 800660e:	6814      	ldr	r4, [r2, #0]
 8006610:	0021      	movs	r1, r4
 8006612:	2900      	cmp	r1, #0
 8006614:	d119      	bne.n	800664a <_malloc_r+0x5a>
 8006616:	4c24      	ldr	r4, [pc, #144]	; (80066a8 <_malloc_r+0xb8>)
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <_malloc_r+0x36>
 800661e:	0030      	movs	r0, r6
 8006620:	f000 faf8 	bl	8006c14 <_sbrk_r>
 8006624:	6020      	str	r0, [r4, #0]
 8006626:	0029      	movs	r1, r5
 8006628:	0030      	movs	r0, r6
 800662a:	f000 faf3 	bl	8006c14 <_sbrk_r>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	d12b      	bne.n	800668a <_malloc_r+0x9a>
 8006632:	230c      	movs	r3, #12
 8006634:	0030      	movs	r0, r6
 8006636:	6033      	str	r3, [r6, #0]
 8006638:	f000 fbb4 	bl	8006da4 <__malloc_unlock>
 800663c:	e003      	b.n	8006646 <_malloc_r+0x56>
 800663e:	2d00      	cmp	r5, #0
 8006640:	dadf      	bge.n	8006602 <_malloc_r+0x12>
 8006642:	230c      	movs	r3, #12
 8006644:	6033      	str	r3, [r6, #0]
 8006646:	2000      	movs	r0, #0
 8006648:	bd70      	pop	{r4, r5, r6, pc}
 800664a:	680b      	ldr	r3, [r1, #0]
 800664c:	1b5b      	subs	r3, r3, r5
 800664e:	d419      	bmi.n	8006684 <_malloc_r+0x94>
 8006650:	2b0b      	cmp	r3, #11
 8006652:	d903      	bls.n	800665c <_malloc_r+0x6c>
 8006654:	600b      	str	r3, [r1, #0]
 8006656:	18cc      	adds	r4, r1, r3
 8006658:	6025      	str	r5, [r4, #0]
 800665a:	e003      	b.n	8006664 <_malloc_r+0x74>
 800665c:	684b      	ldr	r3, [r1, #4]
 800665e:	428c      	cmp	r4, r1
 8006660:	d10d      	bne.n	800667e <_malloc_r+0x8e>
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	0030      	movs	r0, r6
 8006666:	f000 fb9d 	bl	8006da4 <__malloc_unlock>
 800666a:	0020      	movs	r0, r4
 800666c:	2207      	movs	r2, #7
 800666e:	300b      	adds	r0, #11
 8006670:	1d23      	adds	r3, r4, #4
 8006672:	4390      	bics	r0, r2
 8006674:	1ac3      	subs	r3, r0, r3
 8006676:	d0e7      	beq.n	8006648 <_malloc_r+0x58>
 8006678:	425a      	negs	r2, r3
 800667a:	50e2      	str	r2, [r4, r3]
 800667c:	e7e4      	b.n	8006648 <_malloc_r+0x58>
 800667e:	6063      	str	r3, [r4, #4]
 8006680:	000c      	movs	r4, r1
 8006682:	e7ef      	b.n	8006664 <_malloc_r+0x74>
 8006684:	000c      	movs	r4, r1
 8006686:	6849      	ldr	r1, [r1, #4]
 8006688:	e7c3      	b.n	8006612 <_malloc_r+0x22>
 800668a:	2303      	movs	r3, #3
 800668c:	1cc4      	adds	r4, r0, #3
 800668e:	439c      	bics	r4, r3
 8006690:	42a0      	cmp	r0, r4
 8006692:	d0e1      	beq.n	8006658 <_malloc_r+0x68>
 8006694:	1a21      	subs	r1, r4, r0
 8006696:	0030      	movs	r0, r6
 8006698:	f000 fabc 	bl	8006c14 <_sbrk_r>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d1db      	bne.n	8006658 <_malloc_r+0x68>
 80066a0:	e7c7      	b.n	8006632 <_malloc_r+0x42>
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	20000090 	.word	0x20000090
 80066a8:	20000094 	.word	0x20000094

080066ac <__sfputc_r>:
 80066ac:	6893      	ldr	r3, [r2, #8]
 80066ae:	b510      	push	{r4, lr}
 80066b0:	3b01      	subs	r3, #1
 80066b2:	6093      	str	r3, [r2, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da04      	bge.n	80066c2 <__sfputc_r+0x16>
 80066b8:	6994      	ldr	r4, [r2, #24]
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	db07      	blt.n	80066ce <__sfputc_r+0x22>
 80066be:	290a      	cmp	r1, #10
 80066c0:	d005      	beq.n	80066ce <__sfputc_r+0x22>
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	1c58      	adds	r0, r3, #1
 80066c6:	6010      	str	r0, [r2, #0]
 80066c8:	7019      	strb	r1, [r3, #0]
 80066ca:	0008      	movs	r0, r1
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	f7ff fc81 	bl	8005fd4 <__swbuf_r>
 80066d2:	0001      	movs	r1, r0
 80066d4:	e7f9      	b.n	80066ca <__sfputc_r+0x1e>

080066d6 <__sfputs_r>:
 80066d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d8:	0006      	movs	r6, r0
 80066da:	000f      	movs	r7, r1
 80066dc:	0014      	movs	r4, r2
 80066de:	18d5      	adds	r5, r2, r3
 80066e0:	42ac      	cmp	r4, r5
 80066e2:	d101      	bne.n	80066e8 <__sfputs_r+0x12>
 80066e4:	2000      	movs	r0, #0
 80066e6:	e007      	b.n	80066f8 <__sfputs_r+0x22>
 80066e8:	7821      	ldrb	r1, [r4, #0]
 80066ea:	003a      	movs	r2, r7
 80066ec:	0030      	movs	r0, r6
 80066ee:	f7ff ffdd 	bl	80066ac <__sfputc_r>
 80066f2:	3401      	adds	r4, #1
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d1f3      	bne.n	80066e0 <__sfputs_r+0xa>
 80066f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066fc <_vfiprintf_r>:
 80066fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fe:	b0a1      	sub	sp, #132	; 0x84
 8006700:	9003      	str	r0, [sp, #12]
 8006702:	000f      	movs	r7, r1
 8006704:	0016      	movs	r6, r2
 8006706:	001d      	movs	r5, r3
 8006708:	2800      	cmp	r0, #0
 800670a:	d005      	beq.n	8006718 <_vfiprintf_r+0x1c>
 800670c:	6983      	ldr	r3, [r0, #24]
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <_vfiprintf_r+0x1c>
 8006714:	f7ff fe22 	bl	800635c <__sinit>
 8006718:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <_vfiprintf_r+0x20c>)
 800671a:	429f      	cmp	r7, r3
 800671c:	d15c      	bne.n	80067d8 <_vfiprintf_r+0xdc>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	685f      	ldr	r7, [r3, #4]
 8006722:	89bb      	ldrh	r3, [r7, #12]
 8006724:	071b      	lsls	r3, r3, #28
 8006726:	d563      	bpl.n	80067f0 <_vfiprintf_r+0xf4>
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d060      	beq.n	80067f0 <_vfiprintf_r+0xf4>
 800672e:	2300      	movs	r3, #0
 8006730:	ac08      	add	r4, sp, #32
 8006732:	6163      	str	r3, [r4, #20]
 8006734:	3320      	adds	r3, #32
 8006736:	7663      	strb	r3, [r4, #25]
 8006738:	3310      	adds	r3, #16
 800673a:	76a3      	strb	r3, [r4, #26]
 800673c:	9507      	str	r5, [sp, #28]
 800673e:	0035      	movs	r5, r6
 8006740:	782b      	ldrb	r3, [r5, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <_vfiprintf_r+0x4e>
 8006746:	2b25      	cmp	r3, #37	; 0x25
 8006748:	d15c      	bne.n	8006804 <_vfiprintf_r+0x108>
 800674a:	1bab      	subs	r3, r5, r6
 800674c:	9305      	str	r3, [sp, #20]
 800674e:	d00c      	beq.n	800676a <_vfiprintf_r+0x6e>
 8006750:	0032      	movs	r2, r6
 8006752:	0039      	movs	r1, r7
 8006754:	9803      	ldr	r0, [sp, #12]
 8006756:	f7ff ffbe 	bl	80066d6 <__sfputs_r>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d100      	bne.n	8006760 <_vfiprintf_r+0x64>
 800675e:	e0c4      	b.n	80068ea <_vfiprintf_r+0x1ee>
 8006760:	6962      	ldr	r2, [r4, #20]
 8006762:	9b05      	ldr	r3, [sp, #20]
 8006764:	4694      	mov	ip, r2
 8006766:	4463      	add	r3, ip
 8006768:	6163      	str	r3, [r4, #20]
 800676a:	782b      	ldrb	r3, [r5, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d100      	bne.n	8006772 <_vfiprintf_r+0x76>
 8006770:	e0bb      	b.n	80068ea <_vfiprintf_r+0x1ee>
 8006772:	2201      	movs	r2, #1
 8006774:	2300      	movs	r3, #0
 8006776:	4252      	negs	r2, r2
 8006778:	6062      	str	r2, [r4, #4]
 800677a:	a904      	add	r1, sp, #16
 800677c:	3254      	adds	r2, #84	; 0x54
 800677e:	1852      	adds	r2, r2, r1
 8006780:	1c6e      	adds	r6, r5, #1
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	60e3      	str	r3, [r4, #12]
 8006786:	60a3      	str	r3, [r4, #8]
 8006788:	7013      	strb	r3, [r2, #0]
 800678a:	65a3      	str	r3, [r4, #88]	; 0x58
 800678c:	7831      	ldrb	r1, [r6, #0]
 800678e:	2205      	movs	r2, #5
 8006790:	485e      	ldr	r0, [pc, #376]	; (800690c <_vfiprintf_r+0x210>)
 8006792:	f000 fafb 	bl	8006d8c <memchr>
 8006796:	1c75      	adds	r5, r6, #1
 8006798:	2800      	cmp	r0, #0
 800679a:	d135      	bne.n	8006808 <_vfiprintf_r+0x10c>
 800679c:	6822      	ldr	r2, [r4, #0]
 800679e:	06d3      	lsls	r3, r2, #27
 80067a0:	d504      	bpl.n	80067ac <_vfiprintf_r+0xb0>
 80067a2:	2353      	movs	r3, #83	; 0x53
 80067a4:	a904      	add	r1, sp, #16
 80067a6:	185b      	adds	r3, r3, r1
 80067a8:	2120      	movs	r1, #32
 80067aa:	7019      	strb	r1, [r3, #0]
 80067ac:	0713      	lsls	r3, r2, #28
 80067ae:	d504      	bpl.n	80067ba <_vfiprintf_r+0xbe>
 80067b0:	2353      	movs	r3, #83	; 0x53
 80067b2:	a904      	add	r1, sp, #16
 80067b4:	185b      	adds	r3, r3, r1
 80067b6:	212b      	movs	r1, #43	; 0x2b
 80067b8:	7019      	strb	r1, [r3, #0]
 80067ba:	7833      	ldrb	r3, [r6, #0]
 80067bc:	2b2a      	cmp	r3, #42	; 0x2a
 80067be:	d02c      	beq.n	800681a <_vfiprintf_r+0x11e>
 80067c0:	0035      	movs	r5, r6
 80067c2:	2100      	movs	r1, #0
 80067c4:	200a      	movs	r0, #10
 80067c6:	68e3      	ldr	r3, [r4, #12]
 80067c8:	782a      	ldrb	r2, [r5, #0]
 80067ca:	1c6e      	adds	r6, r5, #1
 80067cc:	3a30      	subs	r2, #48	; 0x30
 80067ce:	2a09      	cmp	r2, #9
 80067d0:	d964      	bls.n	800689c <_vfiprintf_r+0x1a0>
 80067d2:	2900      	cmp	r1, #0
 80067d4:	d02e      	beq.n	8006834 <_vfiprintf_r+0x138>
 80067d6:	e026      	b.n	8006826 <_vfiprintf_r+0x12a>
 80067d8:	4b4d      	ldr	r3, [pc, #308]	; (8006910 <_vfiprintf_r+0x214>)
 80067da:	429f      	cmp	r7, r3
 80067dc:	d102      	bne.n	80067e4 <_vfiprintf_r+0xe8>
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	689f      	ldr	r7, [r3, #8]
 80067e2:	e79e      	b.n	8006722 <_vfiprintf_r+0x26>
 80067e4:	4b4b      	ldr	r3, [pc, #300]	; (8006914 <_vfiprintf_r+0x218>)
 80067e6:	429f      	cmp	r7, r3
 80067e8:	d19b      	bne.n	8006722 <_vfiprintf_r+0x26>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	68df      	ldr	r7, [r3, #12]
 80067ee:	e798      	b.n	8006722 <_vfiprintf_r+0x26>
 80067f0:	0039      	movs	r1, r7
 80067f2:	9803      	ldr	r0, [sp, #12]
 80067f4:	f7ff fc44 	bl	8006080 <__swsetup_r>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d098      	beq.n	800672e <_vfiprintf_r+0x32>
 80067fc:	2001      	movs	r0, #1
 80067fe:	4240      	negs	r0, r0
 8006800:	b021      	add	sp, #132	; 0x84
 8006802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006804:	3501      	adds	r5, #1
 8006806:	e79b      	b.n	8006740 <_vfiprintf_r+0x44>
 8006808:	4b40      	ldr	r3, [pc, #256]	; (800690c <_vfiprintf_r+0x210>)
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	1ac0      	subs	r0, r0, r3
 800680e:	2301      	movs	r3, #1
 8006810:	4083      	lsls	r3, r0
 8006812:	4313      	orrs	r3, r2
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	002e      	movs	r6, r5
 8006818:	e7b8      	b.n	800678c <_vfiprintf_r+0x90>
 800681a:	9b07      	ldr	r3, [sp, #28]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	9107      	str	r1, [sp, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	db01      	blt.n	800682a <_vfiprintf_r+0x12e>
 8006826:	930b      	str	r3, [sp, #44]	; 0x2c
 8006828:	e004      	b.n	8006834 <_vfiprintf_r+0x138>
 800682a:	425b      	negs	r3, r3
 800682c:	60e3      	str	r3, [r4, #12]
 800682e:	2302      	movs	r3, #2
 8006830:	4313      	orrs	r3, r2
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	782b      	ldrb	r3, [r5, #0]
 8006836:	2b2e      	cmp	r3, #46	; 0x2e
 8006838:	d10a      	bne.n	8006850 <_vfiprintf_r+0x154>
 800683a:	786b      	ldrb	r3, [r5, #1]
 800683c:	2b2a      	cmp	r3, #42	; 0x2a
 800683e:	d135      	bne.n	80068ac <_vfiprintf_r+0x1b0>
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	3502      	adds	r5, #2
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	9207      	str	r2, [sp, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	db2b      	blt.n	80068a6 <_vfiprintf_r+0x1aa>
 800684e:	9309      	str	r3, [sp, #36]	; 0x24
 8006850:	4e31      	ldr	r6, [pc, #196]	; (8006918 <_vfiprintf_r+0x21c>)
 8006852:	7829      	ldrb	r1, [r5, #0]
 8006854:	2203      	movs	r2, #3
 8006856:	0030      	movs	r0, r6
 8006858:	f000 fa98 	bl	8006d8c <memchr>
 800685c:	2800      	cmp	r0, #0
 800685e:	d006      	beq.n	800686e <_vfiprintf_r+0x172>
 8006860:	2340      	movs	r3, #64	; 0x40
 8006862:	1b80      	subs	r0, r0, r6
 8006864:	4083      	lsls	r3, r0
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	3501      	adds	r5, #1
 800686a:	4313      	orrs	r3, r2
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	7829      	ldrb	r1, [r5, #0]
 8006870:	2206      	movs	r2, #6
 8006872:	482a      	ldr	r0, [pc, #168]	; (800691c <_vfiprintf_r+0x220>)
 8006874:	1c6e      	adds	r6, r5, #1
 8006876:	7621      	strb	r1, [r4, #24]
 8006878:	f000 fa88 	bl	8006d8c <memchr>
 800687c:	2800      	cmp	r0, #0
 800687e:	d03a      	beq.n	80068f6 <_vfiprintf_r+0x1fa>
 8006880:	4b27      	ldr	r3, [pc, #156]	; (8006920 <_vfiprintf_r+0x224>)
 8006882:	2b00      	cmp	r3, #0
 8006884:	d125      	bne.n	80068d2 <_vfiprintf_r+0x1d6>
 8006886:	2207      	movs	r2, #7
 8006888:	9b07      	ldr	r3, [sp, #28]
 800688a:	3307      	adds	r3, #7
 800688c:	4393      	bics	r3, r2
 800688e:	3308      	adds	r3, #8
 8006890:	9307      	str	r3, [sp, #28]
 8006892:	6963      	ldr	r3, [r4, #20]
 8006894:	9a04      	ldr	r2, [sp, #16]
 8006896:	189b      	adds	r3, r3, r2
 8006898:	6163      	str	r3, [r4, #20]
 800689a:	e750      	b.n	800673e <_vfiprintf_r+0x42>
 800689c:	4343      	muls	r3, r0
 800689e:	2101      	movs	r1, #1
 80068a0:	189b      	adds	r3, r3, r2
 80068a2:	0035      	movs	r5, r6
 80068a4:	e790      	b.n	80067c8 <_vfiprintf_r+0xcc>
 80068a6:	2301      	movs	r3, #1
 80068a8:	425b      	negs	r3, r3
 80068aa:	e7d0      	b.n	800684e <_vfiprintf_r+0x152>
 80068ac:	2300      	movs	r3, #0
 80068ae:	200a      	movs	r0, #10
 80068b0:	001a      	movs	r2, r3
 80068b2:	3501      	adds	r5, #1
 80068b4:	6063      	str	r3, [r4, #4]
 80068b6:	7829      	ldrb	r1, [r5, #0]
 80068b8:	1c6e      	adds	r6, r5, #1
 80068ba:	3930      	subs	r1, #48	; 0x30
 80068bc:	2909      	cmp	r1, #9
 80068be:	d903      	bls.n	80068c8 <_vfiprintf_r+0x1cc>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0c5      	beq.n	8006850 <_vfiprintf_r+0x154>
 80068c4:	9209      	str	r2, [sp, #36]	; 0x24
 80068c6:	e7c3      	b.n	8006850 <_vfiprintf_r+0x154>
 80068c8:	4342      	muls	r2, r0
 80068ca:	2301      	movs	r3, #1
 80068cc:	1852      	adds	r2, r2, r1
 80068ce:	0035      	movs	r5, r6
 80068d0:	e7f1      	b.n	80068b6 <_vfiprintf_r+0x1ba>
 80068d2:	ab07      	add	r3, sp, #28
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	003a      	movs	r2, r7
 80068d8:	4b12      	ldr	r3, [pc, #72]	; (8006924 <_vfiprintf_r+0x228>)
 80068da:	0021      	movs	r1, r4
 80068dc:	9803      	ldr	r0, [sp, #12]
 80068de:	e000      	b.n	80068e2 <_vfiprintf_r+0x1e6>
 80068e0:	bf00      	nop
 80068e2:	9004      	str	r0, [sp, #16]
 80068e4:	9b04      	ldr	r3, [sp, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	d1d3      	bne.n	8006892 <_vfiprintf_r+0x196>
 80068ea:	89bb      	ldrh	r3, [r7, #12]
 80068ec:	065b      	lsls	r3, r3, #25
 80068ee:	d500      	bpl.n	80068f2 <_vfiprintf_r+0x1f6>
 80068f0:	e784      	b.n	80067fc <_vfiprintf_r+0x100>
 80068f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068f4:	e784      	b.n	8006800 <_vfiprintf_r+0x104>
 80068f6:	ab07      	add	r3, sp, #28
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	003a      	movs	r2, r7
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <_vfiprintf_r+0x228>)
 80068fe:	0021      	movs	r1, r4
 8006900:	9803      	ldr	r0, [sp, #12]
 8006902:	f000 f87f 	bl	8006a04 <_printf_i>
 8006906:	e7ec      	b.n	80068e2 <_vfiprintf_r+0x1e6>
 8006908:	08006f5c 	.word	0x08006f5c
 800690c:	08006f9c 	.word	0x08006f9c
 8006910:	08006f7c 	.word	0x08006f7c
 8006914:	08006f3c 	.word	0x08006f3c
 8006918:	08006fa2 	.word	0x08006fa2
 800691c:	08006fa6 	.word	0x08006fa6
 8006920:	00000000 	.word	0x00000000
 8006924:	080066d7 	.word	0x080066d7

08006928 <_printf_common>:
 8006928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800692a:	0015      	movs	r5, r2
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	688a      	ldr	r2, [r1, #8]
 8006930:	690b      	ldr	r3, [r1, #16]
 8006932:	9000      	str	r0, [sp, #0]
 8006934:	000c      	movs	r4, r1
 8006936:	4293      	cmp	r3, r2
 8006938:	da00      	bge.n	800693c <_printf_common+0x14>
 800693a:	0013      	movs	r3, r2
 800693c:	0022      	movs	r2, r4
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	3243      	adds	r2, #67	; 0x43
 8006942:	7812      	ldrb	r2, [r2, #0]
 8006944:	2a00      	cmp	r2, #0
 8006946:	d001      	beq.n	800694c <_printf_common+0x24>
 8006948:	3301      	adds	r3, #1
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	069b      	lsls	r3, r3, #26
 8006950:	d502      	bpl.n	8006958 <_printf_common+0x30>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	3302      	adds	r3, #2
 8006956:	602b      	str	r3, [r5, #0]
 8006958:	2706      	movs	r7, #6
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	401f      	ands	r7, r3
 800695e:	d027      	beq.n	80069b0 <_printf_common+0x88>
 8006960:	0023      	movs	r3, r4
 8006962:	3343      	adds	r3, #67	; 0x43
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	1e5a      	subs	r2, r3, #1
 8006968:	4193      	sbcs	r3, r2
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d430      	bmi.n	80069d2 <_printf_common+0xaa>
 8006970:	0022      	movs	r2, r4
 8006972:	9901      	ldr	r1, [sp, #4]
 8006974:	3243      	adds	r2, #67	; 0x43
 8006976:	9800      	ldr	r0, [sp, #0]
 8006978:	9e08      	ldr	r6, [sp, #32]
 800697a:	47b0      	blx	r6
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d025      	beq.n	80069cc <_printf_common+0xa4>
 8006980:	2306      	movs	r3, #6
 8006982:	6820      	ldr	r0, [r4, #0]
 8006984:	682a      	ldr	r2, [r5, #0]
 8006986:	68e1      	ldr	r1, [r4, #12]
 8006988:	4003      	ands	r3, r0
 800698a:	2500      	movs	r5, #0
 800698c:	2b04      	cmp	r3, #4
 800698e:	d103      	bne.n	8006998 <_printf_common+0x70>
 8006990:	1a8d      	subs	r5, r1, r2
 8006992:	43eb      	mvns	r3, r5
 8006994:	17db      	asrs	r3, r3, #31
 8006996:	401d      	ands	r5, r3
 8006998:	68a3      	ldr	r3, [r4, #8]
 800699a:	6922      	ldr	r2, [r4, #16]
 800699c:	4293      	cmp	r3, r2
 800699e:	dd01      	ble.n	80069a4 <_printf_common+0x7c>
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	18ed      	adds	r5, r5, r3
 80069a4:	2700      	movs	r7, #0
 80069a6:	42bd      	cmp	r5, r7
 80069a8:	d120      	bne.n	80069ec <_printf_common+0xc4>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e010      	b.n	80069d0 <_printf_common+0xa8>
 80069ae:	3701      	adds	r7, #1
 80069b0:	68e3      	ldr	r3, [r4, #12]
 80069b2:	682a      	ldr	r2, [r5, #0]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	42bb      	cmp	r3, r7
 80069b8:	ddd2      	ble.n	8006960 <_printf_common+0x38>
 80069ba:	0022      	movs	r2, r4
 80069bc:	2301      	movs	r3, #1
 80069be:	3219      	adds	r2, #25
 80069c0:	9901      	ldr	r1, [sp, #4]
 80069c2:	9800      	ldr	r0, [sp, #0]
 80069c4:	9e08      	ldr	r6, [sp, #32]
 80069c6:	47b0      	blx	r6
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d1f0      	bne.n	80069ae <_printf_common+0x86>
 80069cc:	2001      	movs	r0, #1
 80069ce:	4240      	negs	r0, r0
 80069d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069d2:	2030      	movs	r0, #48	; 0x30
 80069d4:	18e1      	adds	r1, r4, r3
 80069d6:	3143      	adds	r1, #67	; 0x43
 80069d8:	7008      	strb	r0, [r1, #0]
 80069da:	0021      	movs	r1, r4
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	3145      	adds	r1, #69	; 0x45
 80069e0:	7809      	ldrb	r1, [r1, #0]
 80069e2:	18a2      	adds	r2, r4, r2
 80069e4:	3243      	adds	r2, #67	; 0x43
 80069e6:	3302      	adds	r3, #2
 80069e8:	7011      	strb	r1, [r2, #0]
 80069ea:	e7c1      	b.n	8006970 <_printf_common+0x48>
 80069ec:	0022      	movs	r2, r4
 80069ee:	2301      	movs	r3, #1
 80069f0:	321a      	adds	r2, #26
 80069f2:	9901      	ldr	r1, [sp, #4]
 80069f4:	9800      	ldr	r0, [sp, #0]
 80069f6:	9e08      	ldr	r6, [sp, #32]
 80069f8:	47b0      	blx	r6
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d0e6      	beq.n	80069cc <_printf_common+0xa4>
 80069fe:	3701      	adds	r7, #1
 8006a00:	e7d1      	b.n	80069a6 <_printf_common+0x7e>
	...

08006a04 <_printf_i>:
 8006a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a06:	b089      	sub	sp, #36	; 0x24
 8006a08:	9204      	str	r2, [sp, #16]
 8006a0a:	000a      	movs	r2, r1
 8006a0c:	3243      	adds	r2, #67	; 0x43
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	9003      	str	r0, [sp, #12]
 8006a12:	9202      	str	r2, [sp, #8]
 8006a14:	7e0a      	ldrb	r2, [r1, #24]
 8006a16:	000c      	movs	r4, r1
 8006a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a1a:	2a6e      	cmp	r2, #110	; 0x6e
 8006a1c:	d100      	bne.n	8006a20 <_printf_i+0x1c>
 8006a1e:	e086      	b.n	8006b2e <_printf_i+0x12a>
 8006a20:	d81f      	bhi.n	8006a62 <_printf_i+0x5e>
 8006a22:	2a63      	cmp	r2, #99	; 0x63
 8006a24:	d033      	beq.n	8006a8e <_printf_i+0x8a>
 8006a26:	d808      	bhi.n	8006a3a <_printf_i+0x36>
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d100      	bne.n	8006a2e <_printf_i+0x2a>
 8006a2c:	e08c      	b.n	8006b48 <_printf_i+0x144>
 8006a2e:	2a58      	cmp	r2, #88	; 0x58
 8006a30:	d04d      	beq.n	8006ace <_printf_i+0xca>
 8006a32:	0025      	movs	r5, r4
 8006a34:	3542      	adds	r5, #66	; 0x42
 8006a36:	702a      	strb	r2, [r5, #0]
 8006a38:	e030      	b.n	8006a9c <_printf_i+0x98>
 8006a3a:	2a64      	cmp	r2, #100	; 0x64
 8006a3c:	d001      	beq.n	8006a42 <_printf_i+0x3e>
 8006a3e:	2a69      	cmp	r2, #105	; 0x69
 8006a40:	d1f7      	bne.n	8006a32 <_printf_i+0x2e>
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6825      	ldr	r5, [r4, #0]
 8006a46:	1d0a      	adds	r2, r1, #4
 8006a48:	0628      	lsls	r0, r5, #24
 8006a4a:	d529      	bpl.n	8006aa0 <_printf_i+0x9c>
 8006a4c:	6808      	ldr	r0, [r1, #0]
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	2800      	cmp	r0, #0
 8006a52:	da03      	bge.n	8006a5c <_printf_i+0x58>
 8006a54:	232d      	movs	r3, #45	; 0x2d
 8006a56:	9a02      	ldr	r2, [sp, #8]
 8006a58:	4240      	negs	r0, r0
 8006a5a:	7013      	strb	r3, [r2, #0]
 8006a5c:	4e6b      	ldr	r6, [pc, #428]	; (8006c0c <_printf_i+0x208>)
 8006a5e:	270a      	movs	r7, #10
 8006a60:	e04f      	b.n	8006b02 <_printf_i+0xfe>
 8006a62:	2a73      	cmp	r2, #115	; 0x73
 8006a64:	d074      	beq.n	8006b50 <_printf_i+0x14c>
 8006a66:	d808      	bhi.n	8006a7a <_printf_i+0x76>
 8006a68:	2a6f      	cmp	r2, #111	; 0x6f
 8006a6a:	d01f      	beq.n	8006aac <_printf_i+0xa8>
 8006a6c:	2a70      	cmp	r2, #112	; 0x70
 8006a6e:	d1e0      	bne.n	8006a32 <_printf_i+0x2e>
 8006a70:	2220      	movs	r2, #32
 8006a72:	6809      	ldr	r1, [r1, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	6022      	str	r2, [r4, #0]
 8006a78:	e003      	b.n	8006a82 <_printf_i+0x7e>
 8006a7a:	2a75      	cmp	r2, #117	; 0x75
 8006a7c:	d016      	beq.n	8006aac <_printf_i+0xa8>
 8006a7e:	2a78      	cmp	r2, #120	; 0x78
 8006a80:	d1d7      	bne.n	8006a32 <_printf_i+0x2e>
 8006a82:	0022      	movs	r2, r4
 8006a84:	2178      	movs	r1, #120	; 0x78
 8006a86:	3245      	adds	r2, #69	; 0x45
 8006a88:	7011      	strb	r1, [r2, #0]
 8006a8a:	4e61      	ldr	r6, [pc, #388]	; (8006c10 <_printf_i+0x20c>)
 8006a8c:	e022      	b.n	8006ad4 <_printf_i+0xd0>
 8006a8e:	0025      	movs	r5, r4
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	3542      	adds	r5, #66	; 0x42
 8006a94:	1d11      	adds	r1, r2, #4
 8006a96:	6019      	str	r1, [r3, #0]
 8006a98:	6813      	ldr	r3, [r2, #0]
 8006a9a:	702b      	strb	r3, [r5, #0]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e065      	b.n	8006b6c <_printf_i+0x168>
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	0669      	lsls	r1, r5, #25
 8006aa6:	d5d3      	bpl.n	8006a50 <_printf_i+0x4c>
 8006aa8:	b200      	sxth	r0, r0
 8006aaa:	e7d1      	b.n	8006a50 <_printf_i+0x4c>
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	6825      	ldr	r5, [r4, #0]
 8006ab0:	1d08      	adds	r0, r1, #4
 8006ab2:	6018      	str	r0, [r3, #0]
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	062e      	lsls	r6, r5, #24
 8006ab8:	d505      	bpl.n	8006ac6 <_printf_i+0xc2>
 8006aba:	4e54      	ldr	r6, [pc, #336]	; (8006c0c <_printf_i+0x208>)
 8006abc:	2708      	movs	r7, #8
 8006abe:	2a6f      	cmp	r2, #111	; 0x6f
 8006ac0:	d01b      	beq.n	8006afa <_printf_i+0xf6>
 8006ac2:	270a      	movs	r7, #10
 8006ac4:	e019      	b.n	8006afa <_printf_i+0xf6>
 8006ac6:	066d      	lsls	r5, r5, #25
 8006ac8:	d5f7      	bpl.n	8006aba <_printf_i+0xb6>
 8006aca:	b280      	uxth	r0, r0
 8006acc:	e7f5      	b.n	8006aba <_printf_i+0xb6>
 8006ace:	3145      	adds	r1, #69	; 0x45
 8006ad0:	4e4e      	ldr	r6, [pc, #312]	; (8006c0c <_printf_i+0x208>)
 8006ad2:	700a      	strb	r2, [r1, #0]
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	1d01      	adds	r1, r0, #4
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	6019      	str	r1, [r3, #0]
 8006ade:	0615      	lsls	r5, r2, #24
 8006ae0:	d521      	bpl.n	8006b26 <_printf_i+0x122>
 8006ae2:	07d3      	lsls	r3, r2, #31
 8006ae4:	d502      	bpl.n	8006aec <_printf_i+0xe8>
 8006ae6:	2320      	movs	r3, #32
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	6022      	str	r2, [r4, #0]
 8006aec:	2710      	movs	r7, #16
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d103      	bne.n	8006afa <_printf_i+0xf6>
 8006af2:	2320      	movs	r3, #32
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	439a      	bics	r2, r3
 8006af8:	6022      	str	r2, [r4, #0]
 8006afa:	0023      	movs	r3, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	3343      	adds	r3, #67	; 0x43
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	60a3      	str	r3, [r4, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	db58      	blt.n	8006bbc <_printf_i+0x1b8>
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	6821      	ldr	r1, [r4, #0]
 8006b0e:	4391      	bics	r1, r2
 8006b10:	6021      	str	r1, [r4, #0]
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d154      	bne.n	8006bc0 <_printf_i+0x1bc>
 8006b16:	9d02      	ldr	r5, [sp, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05a      	beq.n	8006bd2 <_printf_i+0x1ce>
 8006b1c:	0025      	movs	r5, r4
 8006b1e:	7833      	ldrb	r3, [r6, #0]
 8006b20:	3542      	adds	r5, #66	; 0x42
 8006b22:	702b      	strb	r3, [r5, #0]
 8006b24:	e055      	b.n	8006bd2 <_printf_i+0x1ce>
 8006b26:	0655      	lsls	r5, r2, #25
 8006b28:	d5db      	bpl.n	8006ae2 <_printf_i+0xde>
 8006b2a:	b280      	uxth	r0, r0
 8006b2c:	e7d9      	b.n	8006ae2 <_printf_i+0xde>
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	680d      	ldr	r5, [r1, #0]
 8006b32:	1d10      	adds	r0, r2, #4
 8006b34:	6949      	ldr	r1, [r1, #20]
 8006b36:	6018      	str	r0, [r3, #0]
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	062e      	lsls	r6, r5, #24
 8006b3c:	d501      	bpl.n	8006b42 <_printf_i+0x13e>
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	e002      	b.n	8006b48 <_printf_i+0x144>
 8006b42:	066d      	lsls	r5, r5, #25
 8006b44:	d5fb      	bpl.n	8006b3e <_printf_i+0x13a>
 8006b46:	8019      	strh	r1, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9d02      	ldr	r5, [sp, #8]
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	e04f      	b.n	8006bf0 <_printf_i+0x1ec>
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	1d11      	adds	r1, r2, #4
 8006b54:	6019      	str	r1, [r3, #0]
 8006b56:	6815      	ldr	r5, [r2, #0]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6862      	ldr	r2, [r4, #4]
 8006b5c:	0028      	movs	r0, r5
 8006b5e:	f000 f915 	bl	8006d8c <memchr>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d001      	beq.n	8006b6a <_printf_i+0x166>
 8006b66:	1b40      	subs	r0, r0, r5
 8006b68:	6060      	str	r0, [r4, #4]
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9a02      	ldr	r2, [sp, #8]
 8006b72:	7013      	strb	r3, [r2, #0]
 8006b74:	e03c      	b.n	8006bf0 <_printf_i+0x1ec>
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	002a      	movs	r2, r5
 8006b7a:	9904      	ldr	r1, [sp, #16]
 8006b7c:	9803      	ldr	r0, [sp, #12]
 8006b7e:	9d05      	ldr	r5, [sp, #20]
 8006b80:	47a8      	blx	r5
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d03e      	beq.n	8006c04 <_printf_i+0x200>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	079b      	lsls	r3, r3, #30
 8006b8a:	d415      	bmi.n	8006bb8 <_printf_i+0x1b4>
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	4298      	cmp	r0, r3
 8006b92:	da39      	bge.n	8006c08 <_printf_i+0x204>
 8006b94:	0018      	movs	r0, r3
 8006b96:	e037      	b.n	8006c08 <_printf_i+0x204>
 8006b98:	0022      	movs	r2, r4
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	3219      	adds	r2, #25
 8006b9e:	9904      	ldr	r1, [sp, #16]
 8006ba0:	9803      	ldr	r0, [sp, #12]
 8006ba2:	9e05      	ldr	r6, [sp, #20]
 8006ba4:	47b0      	blx	r6
 8006ba6:	1c43      	adds	r3, r0, #1
 8006ba8:	d02c      	beq.n	8006c04 <_printf_i+0x200>
 8006baa:	3501      	adds	r5, #1
 8006bac:	68e3      	ldr	r3, [r4, #12]
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	42ab      	cmp	r3, r5
 8006bb4:	dcf0      	bgt.n	8006b98 <_printf_i+0x194>
 8006bb6:	e7e9      	b.n	8006b8c <_printf_i+0x188>
 8006bb8:	2500      	movs	r5, #0
 8006bba:	e7f7      	b.n	8006bac <_printf_i+0x1a8>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d0ad      	beq.n	8006b1c <_printf_i+0x118>
 8006bc0:	9d02      	ldr	r5, [sp, #8]
 8006bc2:	0039      	movs	r1, r7
 8006bc4:	f7f9 fb22 	bl	800020c <__aeabi_uidivmod>
 8006bc8:	5c73      	ldrb	r3, [r6, r1]
 8006bca:	3d01      	subs	r5, #1
 8006bcc:	702b      	strb	r3, [r5, #0]
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d1f7      	bne.n	8006bc2 <_printf_i+0x1be>
 8006bd2:	2f08      	cmp	r7, #8
 8006bd4:	d109      	bne.n	8006bea <_printf_i+0x1e6>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	07db      	lsls	r3, r3, #31
 8006bda:	d506      	bpl.n	8006bea <_printf_i+0x1e6>
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	4293      	cmp	r3, r2
 8006be2:	dc02      	bgt.n	8006bea <_printf_i+0x1e6>
 8006be4:	2330      	movs	r3, #48	; 0x30
 8006be6:	3d01      	subs	r5, #1
 8006be8:	702b      	strb	r3, [r5, #0]
 8006bea:	9b02      	ldr	r3, [sp, #8]
 8006bec:	1b5b      	subs	r3, r3, r5
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	9b05      	ldr	r3, [sp, #20]
 8006bf2:	aa07      	add	r2, sp, #28
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	0021      	movs	r1, r4
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	9803      	ldr	r0, [sp, #12]
 8006bfc:	f7ff fe94 	bl	8006928 <_printf_common>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d1b8      	bne.n	8006b76 <_printf_i+0x172>
 8006c04:	2001      	movs	r0, #1
 8006c06:	4240      	negs	r0, r0
 8006c08:	b009      	add	sp, #36	; 0x24
 8006c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c0c:	08006fad 	.word	0x08006fad
 8006c10:	08006fbe 	.word	0x08006fbe

08006c14 <_sbrk_r>:
 8006c14:	2300      	movs	r3, #0
 8006c16:	b570      	push	{r4, r5, r6, lr}
 8006c18:	4c06      	ldr	r4, [pc, #24]	; (8006c34 <_sbrk_r+0x20>)
 8006c1a:	0005      	movs	r5, r0
 8006c1c:	0008      	movs	r0, r1
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	f7fb f8c0 	bl	8001da4 <_sbrk>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d103      	bne.n	8006c30 <_sbrk_r+0x1c>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d000      	beq.n	8006c30 <_sbrk_r+0x1c>
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	2000028c 	.word	0x2000028c

08006c38 <__sread>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	000c      	movs	r4, r1
 8006c3c:	250e      	movs	r5, #14
 8006c3e:	5f49      	ldrsh	r1, [r1, r5]
 8006c40:	f000 f8b2 	bl	8006da8 <_read_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	db03      	blt.n	8006c50 <__sread+0x18>
 8006c48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c4a:	181b      	adds	r3, r3, r0
 8006c4c:	6563      	str	r3, [r4, #84]	; 0x54
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	4a02      	ldr	r2, [pc, #8]	; (8006c5c <__sread+0x24>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	e7f9      	b.n	8006c4e <__sread+0x16>
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	ffffefff 	.word	0xffffefff

08006c60 <__swrite>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	001f      	movs	r7, r3
 8006c64:	898b      	ldrh	r3, [r1, #12]
 8006c66:	0005      	movs	r5, r0
 8006c68:	000c      	movs	r4, r1
 8006c6a:	0016      	movs	r6, r2
 8006c6c:	05db      	lsls	r3, r3, #23
 8006c6e:	d505      	bpl.n	8006c7c <__swrite+0x1c>
 8006c70:	230e      	movs	r3, #14
 8006c72:	5ec9      	ldrsh	r1, [r1, r3]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2302      	movs	r3, #2
 8006c78:	f000 f874 	bl	8006d64 <_lseek_r>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	4a05      	ldr	r2, [pc, #20]	; (8006c94 <__swrite+0x34>)
 8006c80:	0028      	movs	r0, r5
 8006c82:	4013      	ands	r3, r2
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	0032      	movs	r2, r6
 8006c88:	230e      	movs	r3, #14
 8006c8a:	5ee1      	ldrsh	r1, [r4, r3]
 8006c8c:	003b      	movs	r3, r7
 8006c8e:	f000 f81f 	bl	8006cd0 <_write_r>
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c94:	ffffefff 	.word	0xffffefff

08006c98 <__sseek>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	000c      	movs	r4, r1
 8006c9c:	250e      	movs	r5, #14
 8006c9e:	5f49      	ldrsh	r1, [r1, r5]
 8006ca0:	f000 f860 	bl	8006d64 <_lseek_r>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	1c42      	adds	r2, r0, #1
 8006ca8:	d103      	bne.n	8006cb2 <__sseek+0x1a>
 8006caa:	4a05      	ldr	r2, [pc, #20]	; (8006cc0 <__sseek+0x28>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	2280      	movs	r2, #128	; 0x80
 8006cb4:	0152      	lsls	r2, r2, #5
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	6560      	str	r0, [r4, #84]	; 0x54
 8006cbc:	e7f8      	b.n	8006cb0 <__sseek+0x18>
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	ffffefff 	.word	0xffffefff

08006cc4 <__sclose>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	230e      	movs	r3, #14
 8006cc8:	5ec9      	ldrsh	r1, [r1, r3]
 8006cca:	f000 f815 	bl	8006cf8 <_close_r>
 8006cce:	bd10      	pop	{r4, pc}

08006cd0 <_write_r>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	0005      	movs	r5, r0
 8006cd4:	0008      	movs	r0, r1
 8006cd6:	0011      	movs	r1, r2
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4c06      	ldr	r4, [pc, #24]	; (8006cf4 <_write_r+0x24>)
 8006cdc:	6022      	str	r2, [r4, #0]
 8006cde:	001a      	movs	r2, r3
 8006ce0:	f7fa fa48 	bl	8001174 <_write>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d103      	bne.n	8006cf0 <_write_r+0x20>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d000      	beq.n	8006cf0 <_write_r+0x20>
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	2000028c 	.word	0x2000028c

08006cf8 <_close_r>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b570      	push	{r4, r5, r6, lr}
 8006cfc:	4c06      	ldr	r4, [pc, #24]	; (8006d18 <_close_r+0x20>)
 8006cfe:	0005      	movs	r5, r0
 8006d00:	0008      	movs	r0, r1
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	f7fb f822 	bl	8001d4c <_close>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d103      	bne.n	8006d14 <_close_r+0x1c>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d000      	beq.n	8006d14 <_close_r+0x1c>
 8006d12:	602b      	str	r3, [r5, #0]
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	2000028c 	.word	0x2000028c

08006d1c <_fstat_r>:
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	b570      	push	{r4, r5, r6, lr}
 8006d20:	4c06      	ldr	r4, [pc, #24]	; (8006d3c <_fstat_r+0x20>)
 8006d22:	0005      	movs	r5, r0
 8006d24:	0008      	movs	r0, r1
 8006d26:	0011      	movs	r1, r2
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	f7fb f819 	bl	8001d60 <_fstat>
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	d103      	bne.n	8006d3a <_fstat_r+0x1e>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d000      	beq.n	8006d3a <_fstat_r+0x1e>
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	2000028c 	.word	0x2000028c

08006d40 <_isatty_r>:
 8006d40:	2300      	movs	r3, #0
 8006d42:	b570      	push	{r4, r5, r6, lr}
 8006d44:	4c06      	ldr	r4, [pc, #24]	; (8006d60 <_isatty_r+0x20>)
 8006d46:	0005      	movs	r5, r0
 8006d48:	0008      	movs	r0, r1
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	f7fb f816 	bl	8001d7c <_isatty>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d103      	bne.n	8006d5c <_isatty_r+0x1c>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d000      	beq.n	8006d5c <_isatty_r+0x1c>
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	bd70      	pop	{r4, r5, r6, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	2000028c 	.word	0x2000028c

08006d64 <_lseek_r>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	0005      	movs	r5, r0
 8006d68:	0008      	movs	r0, r1
 8006d6a:	0011      	movs	r1, r2
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	4c06      	ldr	r4, [pc, #24]	; (8006d88 <_lseek_r+0x24>)
 8006d70:	6022      	str	r2, [r4, #0]
 8006d72:	001a      	movs	r2, r3
 8006d74:	f7fb f80b 	bl	8001d8e <_lseek>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d103      	bne.n	8006d84 <_lseek_r+0x20>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d000      	beq.n	8006d84 <_lseek_r+0x20>
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	bd70      	pop	{r4, r5, r6, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	2000028c 	.word	0x2000028c

08006d8c <memchr>:
 8006d8c:	b2c9      	uxtb	r1, r1
 8006d8e:	1882      	adds	r2, r0, r2
 8006d90:	4290      	cmp	r0, r2
 8006d92:	d101      	bne.n	8006d98 <memchr+0xc>
 8006d94:	2000      	movs	r0, #0
 8006d96:	4770      	bx	lr
 8006d98:	7803      	ldrb	r3, [r0, #0]
 8006d9a:	428b      	cmp	r3, r1
 8006d9c:	d0fb      	beq.n	8006d96 <memchr+0xa>
 8006d9e:	3001      	adds	r0, #1
 8006da0:	e7f6      	b.n	8006d90 <memchr+0x4>

08006da2 <__malloc_lock>:
 8006da2:	4770      	bx	lr

08006da4 <__malloc_unlock>:
 8006da4:	4770      	bx	lr
	...

08006da8 <_read_r>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	0005      	movs	r5, r0
 8006dac:	0008      	movs	r0, r1
 8006dae:	0011      	movs	r1, r2
 8006db0:	2200      	movs	r2, #0
 8006db2:	4c06      	ldr	r4, [pc, #24]	; (8006dcc <_read_r+0x24>)
 8006db4:	6022      	str	r2, [r4, #0]
 8006db6:	001a      	movs	r2, r3
 8006db8:	f7fa ffab 	bl	8001d12 <_read>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d103      	bne.n	8006dc8 <_read_r+0x20>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d000      	beq.n	8006dc8 <_read_r+0x20>
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	2000028c 	.word	0x2000028c

08006dd0 <_init>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	46c0      	nop			; (mov r8, r8)
 8006dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd6:	bc08      	pop	{r3}
 8006dd8:	469e      	mov	lr, r3
 8006dda:	4770      	bx	lr

08006ddc <_fini>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr
