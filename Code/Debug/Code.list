
Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800792c  0800792c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800792c  0800792c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800792c  0800792c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  080079a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080079a4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a6c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026a4  00000000  00000000  00035b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  000381a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  000394e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180b8  00000000  00000000  0003a700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb53  00000000  00000000  000527b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097568  00000000  00000000  0006230b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e78  00000000  00000000  000f98f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007720 	.word	0x08007720

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08007720 	.word	0x08007720

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	1c08      	adds	r0, r1, #0
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fa8b 	bl	8000910 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fa0d 	bl	8000824 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fa7d 	bl	8000910 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fa73 	bl	8000910 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fa1b 	bl	8000874 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fa11 	bl	8000874 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <__aeabi_lmul>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	0415      	lsls	r5, r2, #16
 80004a4:	0c2d      	lsrs	r5, r5, #16
 80004a6:	002e      	movs	r6, r5
 80004a8:	b580      	push	{r7, lr}
 80004aa:	0407      	lsls	r7, r0, #16
 80004ac:	0c14      	lsrs	r4, r2, #16
 80004ae:	0c3f      	lsrs	r7, r7, #16
 80004b0:	4699      	mov	r9, r3
 80004b2:	0c03      	lsrs	r3, r0, #16
 80004b4:	437e      	muls	r6, r7
 80004b6:	435d      	muls	r5, r3
 80004b8:	4367      	muls	r7, r4
 80004ba:	4363      	muls	r3, r4
 80004bc:	197f      	adds	r7, r7, r5
 80004be:	0c34      	lsrs	r4, r6, #16
 80004c0:	19e4      	adds	r4, r4, r7
 80004c2:	469c      	mov	ip, r3
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	d903      	bls.n	80004d0 <__aeabi_lmul+0x34>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	025b      	lsls	r3, r3, #9
 80004cc:	4698      	mov	r8, r3
 80004ce:	44c4      	add	ip, r8
 80004d0:	464b      	mov	r3, r9
 80004d2:	4343      	muls	r3, r0
 80004d4:	4351      	muls	r1, r2
 80004d6:	0c25      	lsrs	r5, r4, #16
 80004d8:	0436      	lsls	r6, r6, #16
 80004da:	4465      	add	r5, ip
 80004dc:	0c36      	lsrs	r6, r6, #16
 80004de:	0424      	lsls	r4, r4, #16
 80004e0:	19a4      	adds	r4, r4, r6
 80004e2:	195b      	adds	r3, r3, r5
 80004e4:	1859      	adds	r1, r3, r1
 80004e6:	0020      	movs	r0, r4
 80004e8:	bc0c      	pop	{r2, r3}
 80004ea:	4690      	mov	r8, r2
 80004ec:	4699      	mov	r9, r3
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004f0 <__aeabi_fadd>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	4647      	mov	r7, r8
 80004f4:	46ce      	mov	lr, r9
 80004f6:	0243      	lsls	r3, r0, #9
 80004f8:	0a5b      	lsrs	r3, r3, #9
 80004fa:	0044      	lsls	r4, r0, #1
 80004fc:	0fc2      	lsrs	r2, r0, #31
 80004fe:	469c      	mov	ip, r3
 8000500:	0048      	lsls	r0, r1, #1
 8000502:	00dd      	lsls	r5, r3, #3
 8000504:	024b      	lsls	r3, r1, #9
 8000506:	0e24      	lsrs	r4, r4, #24
 8000508:	0a5b      	lsrs	r3, r3, #9
 800050a:	0e00      	lsrs	r0, r0, #24
 800050c:	b580      	push	{r7, lr}
 800050e:	4698      	mov	r8, r3
 8000510:	0026      	movs	r6, r4
 8000512:	4691      	mov	r9, r2
 8000514:	0fc9      	lsrs	r1, r1, #31
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	1a27      	subs	r7, r4, r0
 800051a:	428a      	cmp	r2, r1
 800051c:	d029      	beq.n	8000572 <__aeabi_fadd+0x82>
 800051e:	2f00      	cmp	r7, #0
 8000520:	dd15      	ble.n	800054e <__aeabi_fadd+0x5e>
 8000522:	2800      	cmp	r0, #0
 8000524:	d14a      	bne.n	80005bc <__aeabi_fadd+0xcc>
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <__aeabi_fadd+0x3c>
 800052a:	e095      	b.n	8000658 <__aeabi_fadd+0x168>
 800052c:	08ed      	lsrs	r5, r5, #3
 800052e:	2cff      	cmp	r4, #255	; 0xff
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x44>
 8000532:	e088      	b.n	8000646 <__aeabi_fadd+0x156>
 8000534:	026b      	lsls	r3, r5, #9
 8000536:	0a5b      	lsrs	r3, r3, #9
 8000538:	b2e6      	uxtb	r6, r4
 800053a:	025b      	lsls	r3, r3, #9
 800053c:	05f6      	lsls	r6, r6, #23
 800053e:	0a58      	lsrs	r0, r3, #9
 8000540:	4330      	orrs	r0, r6
 8000542:	07d2      	lsls	r2, r2, #31
 8000544:	4310      	orrs	r0, r2
 8000546:	bc0c      	pop	{r2, r3}
 8000548:	4690      	mov	r8, r2
 800054a:	4699      	mov	r9, r3
 800054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800054e:	2f00      	cmp	r7, #0
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x64>
 8000552:	e087      	b.n	8000664 <__aeabi_fadd+0x174>
 8000554:	1c60      	adds	r0, r4, #1
 8000556:	b2c0      	uxtb	r0, r0
 8000558:	2801      	cmp	r0, #1
 800055a:	dc00      	bgt.n	800055e <__aeabi_fadd+0x6e>
 800055c:	e0b6      	b.n	80006cc <__aeabi_fadd+0x1dc>
 800055e:	1aee      	subs	r6, r5, r3
 8000560:	0172      	lsls	r2, r6, #5
 8000562:	d500      	bpl.n	8000566 <__aeabi_fadd+0x76>
 8000564:	e0c5      	b.n	80006f2 <__aeabi_fadd+0x202>
 8000566:	2e00      	cmp	r6, #0
 8000568:	d13d      	bne.n	80005e6 <__aeabi_fadd+0xf6>
 800056a:	2200      	movs	r2, #0
 800056c:	2600      	movs	r6, #0
 800056e:	2300      	movs	r3, #0
 8000570:	e7e3      	b.n	800053a <__aeabi_fadd+0x4a>
 8000572:	2f00      	cmp	r7, #0
 8000574:	dc00      	bgt.n	8000578 <__aeabi_fadd+0x88>
 8000576:	e096      	b.n	80006a6 <__aeabi_fadd+0x1b6>
 8000578:	2800      	cmp	r0, #0
 800057a:	d05d      	beq.n	8000638 <__aeabi_fadd+0x148>
 800057c:	2cff      	cmp	r4, #255	; 0xff
 800057e:	d060      	beq.n	8000642 <__aeabi_fadd+0x152>
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	04d2      	lsls	r2, r2, #19
 8000584:	4313      	orrs	r3, r2
 8000586:	2f1b      	cmp	r7, #27
 8000588:	dd00      	ble.n	800058c <__aeabi_fadd+0x9c>
 800058a:	e0ec      	b.n	8000766 <__aeabi_fadd+0x276>
 800058c:	2220      	movs	r2, #32
 800058e:	1bd2      	subs	r2, r2, r7
 8000590:	0018      	movs	r0, r3
 8000592:	4093      	lsls	r3, r2
 8000594:	40f8      	lsrs	r0, r7
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	4193      	sbcs	r3, r2
 800059a:	4303      	orrs	r3, r0
 800059c:	18ed      	adds	r5, r5, r3
 800059e:	016b      	lsls	r3, r5, #5
 80005a0:	d57b      	bpl.n	800069a <__aeabi_fadd+0x1aa>
 80005a2:	3401      	adds	r4, #1
 80005a4:	2cff      	cmp	r4, #255	; 0xff
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0xba>
 80005a8:	e0b7      	b.n	800071a <__aeabi_fadd+0x22a>
 80005aa:	2201      	movs	r2, #1
 80005ac:	2607      	movs	r6, #7
 80005ae:	402a      	ands	r2, r5
 80005b0:	086b      	lsrs	r3, r5, #1
 80005b2:	4d9a      	ldr	r5, [pc, #616]	; (800081c <__aeabi_fadd+0x32c>)
 80005b4:	401d      	ands	r5, r3
 80005b6:	4315      	orrs	r5, r2
 80005b8:	402e      	ands	r6, r5
 80005ba:	e029      	b.n	8000610 <__aeabi_fadd+0x120>
 80005bc:	2cff      	cmp	r4, #255	; 0xff
 80005be:	d0b5      	beq.n	800052c <__aeabi_fadd+0x3c>
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	04d2      	lsls	r2, r2, #19
 80005c4:	4313      	orrs	r3, r2
 80005c6:	2f1b      	cmp	r7, #27
 80005c8:	dd00      	ble.n	80005cc <__aeabi_fadd+0xdc>
 80005ca:	e0b2      	b.n	8000732 <__aeabi_fadd+0x242>
 80005cc:	2220      	movs	r2, #32
 80005ce:	1bd2      	subs	r2, r2, r7
 80005d0:	0019      	movs	r1, r3
 80005d2:	4093      	lsls	r3, r2
 80005d4:	40f9      	lsrs	r1, r7
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	4193      	sbcs	r3, r2
 80005da:	430b      	orrs	r3, r1
 80005dc:	1aed      	subs	r5, r5, r3
 80005de:	016b      	lsls	r3, r5, #5
 80005e0:	d55b      	bpl.n	800069a <__aeabi_fadd+0x1aa>
 80005e2:	01ad      	lsls	r5, r5, #6
 80005e4:	09ae      	lsrs	r6, r5, #6
 80005e6:	0030      	movs	r0, r6
 80005e8:	f7ff ff3a 	bl	8000460 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4086      	lsls	r6, r0
 80005f0:	4284      	cmp	r4, r0
 80005f2:	dc65      	bgt.n	80006c0 <__aeabi_fadd+0x1d0>
 80005f4:	1b04      	subs	r4, r0, r4
 80005f6:	0033      	movs	r3, r6
 80005f8:	2020      	movs	r0, #32
 80005fa:	3401      	adds	r4, #1
 80005fc:	40e3      	lsrs	r3, r4
 80005fe:	1b04      	subs	r4, r0, r4
 8000600:	40a6      	lsls	r6, r4
 8000602:	1e75      	subs	r5, r6, #1
 8000604:	41ae      	sbcs	r6, r5
 8000606:	4333      	orrs	r3, r6
 8000608:	2607      	movs	r6, #7
 800060a:	001d      	movs	r5, r3
 800060c:	2400      	movs	r4, #0
 800060e:	401e      	ands	r6, r3
 8000610:	2201      	movs	r2, #1
 8000612:	464b      	mov	r3, r9
 8000614:	401a      	ands	r2, r3
 8000616:	2e00      	cmp	r6, #0
 8000618:	d004      	beq.n	8000624 <__aeabi_fadd+0x134>
 800061a:	230f      	movs	r3, #15
 800061c:	402b      	ands	r3, r5
 800061e:	2b04      	cmp	r3, #4
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x134>
 8000622:	3504      	adds	r5, #4
 8000624:	016b      	lsls	r3, r5, #5
 8000626:	d400      	bmi.n	800062a <__aeabi_fadd+0x13a>
 8000628:	e780      	b.n	800052c <__aeabi_fadd+0x3c>
 800062a:	3401      	adds	r4, #1
 800062c:	b2e6      	uxtb	r6, r4
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d12f      	bne.n	8000692 <__aeabi_fadd+0x1a2>
 8000632:	26ff      	movs	r6, #255	; 0xff
 8000634:	2300      	movs	r3, #0
 8000636:	e780      	b.n	800053a <__aeabi_fadd+0x4a>
 8000638:	2b00      	cmp	r3, #0
 800063a:	d152      	bne.n	80006e2 <__aeabi_fadd+0x1f2>
 800063c:	2cff      	cmp	r4, #255	; 0xff
 800063e:	d000      	beq.n	8000642 <__aeabi_fadd+0x152>
 8000640:	e774      	b.n	800052c <__aeabi_fadd+0x3c>
 8000642:	000a      	movs	r2, r1
 8000644:	08ed      	lsrs	r5, r5, #3
 8000646:	2d00      	cmp	r5, #0
 8000648:	d0f3      	beq.n	8000632 <__aeabi_fadd+0x142>
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	03db      	lsls	r3, r3, #15
 800064e:	432b      	orrs	r3, r5
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	26ff      	movs	r6, #255	; 0xff
 8000656:	e770      	b.n	800053a <__aeabi_fadd+0x4a>
 8000658:	3f01      	subs	r7, #1
 800065a:	2f00      	cmp	r7, #0
 800065c:	d0be      	beq.n	80005dc <__aeabi_fadd+0xec>
 800065e:	2cff      	cmp	r4, #255	; 0xff
 8000660:	d1b1      	bne.n	80005c6 <__aeabi_fadd+0xd6>
 8000662:	e763      	b.n	800052c <__aeabi_fadd+0x3c>
 8000664:	2c00      	cmp	r4, #0
 8000666:	d047      	beq.n	80006f8 <__aeabi_fadd+0x208>
 8000668:	28ff      	cmp	r0, #255	; 0xff
 800066a:	d069      	beq.n	8000740 <__aeabi_fadd+0x250>
 800066c:	2480      	movs	r4, #128	; 0x80
 800066e:	04e4      	lsls	r4, r4, #19
 8000670:	427a      	negs	r2, r7
 8000672:	4325      	orrs	r5, r4
 8000674:	2a1b      	cmp	r2, #27
 8000676:	dd00      	ble.n	800067a <__aeabi_fadd+0x18a>
 8000678:	e0c5      	b.n	8000806 <__aeabi_fadd+0x316>
 800067a:	002c      	movs	r4, r5
 800067c:	2620      	movs	r6, #32
 800067e:	40d4      	lsrs	r4, r2
 8000680:	1ab2      	subs	r2, r6, r2
 8000682:	4095      	lsls	r5, r2
 8000684:	1e6a      	subs	r2, r5, #1
 8000686:	4195      	sbcs	r5, r2
 8000688:	4325      	orrs	r5, r4
 800068a:	1b5d      	subs	r5, r3, r5
 800068c:	0004      	movs	r4, r0
 800068e:	4689      	mov	r9, r1
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0xee>
 8000692:	01ab      	lsls	r3, r5, #6
 8000694:	0a5b      	lsrs	r3, r3, #9
 8000696:	e750      	b.n	800053a <__aeabi_fadd+0x4a>
 8000698:	2400      	movs	r4, #0
 800069a:	2201      	movs	r2, #1
 800069c:	464b      	mov	r3, r9
 800069e:	401a      	ands	r2, r3
 80006a0:	076b      	lsls	r3, r5, #29
 80006a2:	d1ba      	bne.n	800061a <__aeabi_fadd+0x12a>
 80006a4:	e742      	b.n	800052c <__aeabi_fadd+0x3c>
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d13b      	bne.n	8000722 <__aeabi_fadd+0x232>
 80006aa:	3401      	adds	r4, #1
 80006ac:	b2e0      	uxtb	r0, r4
 80006ae:	2801      	cmp	r0, #1
 80006b0:	dd4a      	ble.n	8000748 <__aeabi_fadd+0x258>
 80006b2:	2cff      	cmp	r4, #255	; 0xff
 80006b4:	d0bd      	beq.n	8000632 <__aeabi_fadd+0x142>
 80006b6:	2607      	movs	r6, #7
 80006b8:	18ed      	adds	r5, r5, r3
 80006ba:	086d      	lsrs	r5, r5, #1
 80006bc:	402e      	ands	r6, r5
 80006be:	e7a7      	b.n	8000610 <__aeabi_fadd+0x120>
 80006c0:	2307      	movs	r3, #7
 80006c2:	4d57      	ldr	r5, [pc, #348]	; (8000820 <__aeabi_fadd+0x330>)
 80006c4:	1a24      	subs	r4, r4, r0
 80006c6:	4035      	ands	r5, r6
 80006c8:	401e      	ands	r6, r3
 80006ca:	e7a1      	b.n	8000610 <__aeabi_fadd+0x120>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d11b      	bne.n	8000708 <__aeabi_fadd+0x218>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d16e      	bne.n	80007b2 <__aeabi_fadd+0x2c2>
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x1ea>
 80006d8:	e09a      	b.n	8000810 <__aeabi_fadd+0x320>
 80006da:	000a      	movs	r2, r1
 80006dc:	001d      	movs	r5, r3
 80006de:	003c      	movs	r4, r7
 80006e0:	e724      	b.n	800052c <__aeabi_fadd+0x3c>
 80006e2:	3f01      	subs	r7, #1
 80006e4:	2f00      	cmp	r7, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x1fa>
 80006e8:	e758      	b.n	800059c <__aeabi_fadd+0xac>
 80006ea:	2cff      	cmp	r4, #255	; 0xff
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x200>
 80006ee:	e74a      	b.n	8000586 <__aeabi_fadd+0x96>
 80006f0:	e7a7      	b.n	8000642 <__aeabi_fadd+0x152>
 80006f2:	1b5e      	subs	r6, r3, r5
 80006f4:	4689      	mov	r9, r1
 80006f6:	e776      	b.n	80005e6 <__aeabi_fadd+0xf6>
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d11c      	bne.n	8000736 <__aeabi_fadd+0x246>
 80006fc:	000a      	movs	r2, r1
 80006fe:	28ff      	cmp	r0, #255	; 0xff
 8000700:	d01f      	beq.n	8000742 <__aeabi_fadd+0x252>
 8000702:	0004      	movs	r4, r0
 8000704:	001d      	movs	r5, r3
 8000706:	e711      	b.n	800052c <__aeabi_fadd+0x3c>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d15d      	bne.n	80007c8 <__aeabi_fadd+0x2d8>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d117      	bne.n	8000740 <__aeabi_fadd+0x250>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	2200      	movs	r2, #0
 8000714:	03db      	lsls	r3, r3, #15
 8000716:	26ff      	movs	r6, #255	; 0xff
 8000718:	e70f      	b.n	800053a <__aeabi_fadd+0x4a>
 800071a:	000a      	movs	r2, r1
 800071c:	26ff      	movs	r6, #255	; 0xff
 800071e:	2300      	movs	r3, #0
 8000720:	e70b      	b.n	800053a <__aeabi_fadd+0x4a>
 8000722:	2c00      	cmp	r4, #0
 8000724:	d121      	bne.n	800076a <__aeabi_fadd+0x27a>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d166      	bne.n	80007f8 <__aeabi_fadd+0x308>
 800072a:	28ff      	cmp	r0, #255	; 0xff
 800072c:	d1e9      	bne.n	8000702 <__aeabi_fadd+0x212>
 800072e:	001d      	movs	r5, r3
 8000730:	e787      	b.n	8000642 <__aeabi_fadd+0x152>
 8000732:	2301      	movs	r3, #1
 8000734:	e752      	b.n	80005dc <__aeabi_fadd+0xec>
 8000736:	1c7a      	adds	r2, r7, #1
 8000738:	d0a7      	beq.n	800068a <__aeabi_fadd+0x19a>
 800073a:	43fa      	mvns	r2, r7
 800073c:	28ff      	cmp	r0, #255	; 0xff
 800073e:	d199      	bne.n	8000674 <__aeabi_fadd+0x184>
 8000740:	000a      	movs	r2, r1
 8000742:	001d      	movs	r5, r3
 8000744:	24ff      	movs	r4, #255	; 0xff
 8000746:	e6f1      	b.n	800052c <__aeabi_fadd+0x3c>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d121      	bne.n	8000790 <__aeabi_fadd+0x2a0>
 800074c:	2d00      	cmp	r5, #0
 800074e:	d04f      	beq.n	80007f0 <__aeabi_fadd+0x300>
 8000750:	2b00      	cmp	r3, #0
 8000752:	d04c      	beq.n	80007ee <__aeabi_fadd+0x2fe>
 8000754:	18ed      	adds	r5, r5, r3
 8000756:	016b      	lsls	r3, r5, #5
 8000758:	d59e      	bpl.n	8000698 <__aeabi_fadd+0x1a8>
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <__aeabi_fadd+0x330>)
 800075c:	3607      	adds	r6, #7
 800075e:	402e      	ands	r6, r5
 8000760:	2401      	movs	r4, #1
 8000762:	401d      	ands	r5, r3
 8000764:	e754      	b.n	8000610 <__aeabi_fadd+0x120>
 8000766:	2301      	movs	r3, #1
 8000768:	e718      	b.n	800059c <__aeabi_fadd+0xac>
 800076a:	28ff      	cmp	r0, #255	; 0xff
 800076c:	d0df      	beq.n	800072e <__aeabi_fadd+0x23e>
 800076e:	2480      	movs	r4, #128	; 0x80
 8000770:	04e4      	lsls	r4, r4, #19
 8000772:	427f      	negs	r7, r7
 8000774:	4325      	orrs	r5, r4
 8000776:	2f1b      	cmp	r7, #27
 8000778:	dc4d      	bgt.n	8000816 <__aeabi_fadd+0x326>
 800077a:	2620      	movs	r6, #32
 800077c:	1bf6      	subs	r6, r6, r7
 800077e:	002c      	movs	r4, r5
 8000780:	40b5      	lsls	r5, r6
 8000782:	40fc      	lsrs	r4, r7
 8000784:	1e6a      	subs	r2, r5, #1
 8000786:	4195      	sbcs	r5, r2
 8000788:	4325      	orrs	r5, r4
 800078a:	18ed      	adds	r5, r5, r3
 800078c:	0004      	movs	r4, r0
 800078e:	e706      	b.n	800059e <__aeabi_fadd+0xae>
 8000790:	2d00      	cmp	r5, #0
 8000792:	d0cc      	beq.n	800072e <__aeabi_fadd+0x23e>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x2aa>
 8000798:	e753      	b.n	8000642 <__aeabi_fadd+0x152>
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4660      	mov	r0, ip
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	4208      	tst	r0, r1
 80007a2:	d003      	beq.n	80007ac <__aeabi_fadd+0x2bc>
 80007a4:	4640      	mov	r0, r8
 80007a6:	4208      	tst	r0, r1
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x2bc>
 80007aa:	001d      	movs	r5, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	4011      	ands	r1, r2
 80007b0:	e747      	b.n	8000642 <__aeabi_fadd+0x152>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fadd+0x2c8>
 80007b6:	e6b9      	b.n	800052c <__aeabi_fadd+0x3c>
 80007b8:	1aea      	subs	r2, r5, r3
 80007ba:	0150      	lsls	r0, r2, #5
 80007bc:	d525      	bpl.n	800080a <__aeabi_fadd+0x31a>
 80007be:	2607      	movs	r6, #7
 80007c0:	1b5d      	subs	r5, r3, r5
 80007c2:	402e      	ands	r6, r5
 80007c4:	4689      	mov	r9, r1
 80007c6:	e723      	b.n	8000610 <__aeabi_fadd+0x120>
 80007c8:	24ff      	movs	r4, #255	; 0xff
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x2e0>
 80007ce:	e6ad      	b.n	800052c <__aeabi_fadd+0x3c>
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	4660      	mov	r0, ip
 80007d4:	03d2      	lsls	r2, r2, #15
 80007d6:	4210      	tst	r0, r2
 80007d8:	d004      	beq.n	80007e4 <__aeabi_fadd+0x2f4>
 80007da:	4640      	mov	r0, r8
 80007dc:	4210      	tst	r0, r2
 80007de:	d101      	bne.n	80007e4 <__aeabi_fadd+0x2f4>
 80007e0:	001d      	movs	r5, r3
 80007e2:	4689      	mov	r9, r1
 80007e4:	2201      	movs	r2, #1
 80007e6:	464b      	mov	r3, r9
 80007e8:	24ff      	movs	r4, #255	; 0xff
 80007ea:	401a      	ands	r2, r3
 80007ec:	e69e      	b.n	800052c <__aeabi_fadd+0x3c>
 80007ee:	002b      	movs	r3, r5
 80007f0:	08dd      	lsrs	r5, r3, #3
 80007f2:	000a      	movs	r2, r1
 80007f4:	2400      	movs	r4, #0
 80007f6:	e69d      	b.n	8000534 <__aeabi_fadd+0x44>
 80007f8:	1c7a      	adds	r2, r7, #1
 80007fa:	d0c6      	beq.n	800078a <__aeabi_fadd+0x29a>
 80007fc:	43ff      	mvns	r7, r7
 80007fe:	28ff      	cmp	r0, #255	; 0xff
 8000800:	d1b9      	bne.n	8000776 <__aeabi_fadd+0x286>
 8000802:	001d      	movs	r5, r3
 8000804:	e71d      	b.n	8000642 <__aeabi_fadd+0x152>
 8000806:	2501      	movs	r5, #1
 8000808:	e73f      	b.n	800068a <__aeabi_fadd+0x19a>
 800080a:	1e15      	subs	r5, r2, #0
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x320>
 800080e:	e744      	b.n	800069a <__aeabi_fadd+0x1aa>
 8000810:	2200      	movs	r2, #0
 8000812:	2300      	movs	r3, #0
 8000814:	e691      	b.n	800053a <__aeabi_fadd+0x4a>
 8000816:	2501      	movs	r5, #1
 8000818:	e7b7      	b.n	800078a <__aeabi_fadd+0x29a>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	fbffffff 	.word	0xfbffffff

08000824 <__eqsf2>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	0042      	lsls	r2, r0, #1
 8000828:	024e      	lsls	r6, r1, #9
 800082a:	004c      	lsls	r4, r1, #1
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	0a6d      	lsrs	r5, r5, #9
 8000830:	0e12      	lsrs	r2, r2, #24
 8000832:	0fc3      	lsrs	r3, r0, #31
 8000834:	0a76      	lsrs	r6, r6, #9
 8000836:	0e24      	lsrs	r4, r4, #24
 8000838:	0fc9      	lsrs	r1, r1, #31
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d00f      	beq.n	800085e <__eqsf2+0x3a>
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d011      	beq.n	8000866 <__eqsf2+0x42>
 8000842:	2001      	movs	r0, #1
 8000844:	42a2      	cmp	r2, r4
 8000846:	d000      	beq.n	800084a <__eqsf2+0x26>
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	42b5      	cmp	r5, r6
 800084c:	d1fc      	bne.n	8000848 <__eqsf2+0x24>
 800084e:	428b      	cmp	r3, r1
 8000850:	d00d      	beq.n	800086e <__eqsf2+0x4a>
 8000852:	2a00      	cmp	r2, #0
 8000854:	d1f8      	bne.n	8000848 <__eqsf2+0x24>
 8000856:	0028      	movs	r0, r5
 8000858:	1e45      	subs	r5, r0, #1
 800085a:	41a8      	sbcs	r0, r5
 800085c:	e7f4      	b.n	8000848 <__eqsf2+0x24>
 800085e:	2001      	movs	r0, #1
 8000860:	2d00      	cmp	r5, #0
 8000862:	d1f1      	bne.n	8000848 <__eqsf2+0x24>
 8000864:	e7eb      	b.n	800083e <__eqsf2+0x1a>
 8000866:	2001      	movs	r0, #1
 8000868:	2e00      	cmp	r6, #0
 800086a:	d1ed      	bne.n	8000848 <__eqsf2+0x24>
 800086c:	e7e9      	b.n	8000842 <__eqsf2+0x1e>
 800086e:	2000      	movs	r0, #0
 8000870:	e7ea      	b.n	8000848 <__eqsf2+0x24>
 8000872:	46c0      	nop			; (mov r8, r8)

08000874 <__gesf2>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	004a      	lsls	r2, r1, #1
 8000878:	024e      	lsls	r6, r1, #9
 800087a:	0245      	lsls	r5, r0, #9
 800087c:	0044      	lsls	r4, r0, #1
 800087e:	0a6d      	lsrs	r5, r5, #9
 8000880:	0e24      	lsrs	r4, r4, #24
 8000882:	0fc3      	lsrs	r3, r0, #31
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e12      	lsrs	r2, r2, #24
 8000888:	0fc9      	lsrs	r1, r1, #31
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d015      	beq.n	80008ba <__gesf2+0x46>
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d00e      	beq.n	80008b0 <__gesf2+0x3c>
 8000892:	2c00      	cmp	r4, #0
 8000894:	d115      	bne.n	80008c2 <__gesf2+0x4e>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d101      	bne.n	800089e <__gesf2+0x2a>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d01c      	beq.n	80008d8 <__gesf2+0x64>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d014      	beq.n	80008cc <__gesf2+0x58>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d027      	beq.n	80008f6 <__gesf2+0x82>
 80008a6:	2002      	movs	r0, #2
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4018      	ands	r0, r3
 80008ac:	3801      	subs	r0, #1
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0ee      	beq.n	8000892 <__gesf2+0x1e>
 80008b4:	2002      	movs	r0, #2
 80008b6:	4240      	negs	r0, r0
 80008b8:	e7f9      	b.n	80008ae <__gesf2+0x3a>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d1fa      	bne.n	80008b4 <__gesf2+0x40>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d00e      	beq.n	80008e0 <__gesf2+0x6c>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d10e      	bne.n	80008e4 <__gesf2+0x70>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d0ed      	beq.n	80008a6 <__gesf2+0x32>
 80008ca:	e00b      	b.n	80008e4 <__gesf2+0x70>
 80008cc:	2301      	movs	r3, #1
 80008ce:	3901      	subs	r1, #1
 80008d0:	4399      	bics	r1, r3
 80008d2:	0008      	movs	r0, r1
 80008d4:	3001      	adds	r0, #1
 80008d6:	e7ea      	b.n	80008ae <__gesf2+0x3a>
 80008d8:	2000      	movs	r0, #0
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d0e7      	beq.n	80008ae <__gesf2+0x3a>
 80008de:	e7e2      	b.n	80008a6 <__gesf2+0x32>
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d1e7      	bne.n	80008b4 <__gesf2+0x40>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d1de      	bne.n	80008a6 <__gesf2+0x32>
 80008e8:	4294      	cmp	r4, r2
 80008ea:	dd05      	ble.n	80008f8 <__gesf2+0x84>
 80008ec:	2102      	movs	r1, #2
 80008ee:	1e58      	subs	r0, r3, #1
 80008f0:	4008      	ands	r0, r1
 80008f2:	3801      	subs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__gesf2+0x3a>
 80008f6:	2400      	movs	r4, #0
 80008f8:	42a2      	cmp	r2, r4
 80008fa:	dc04      	bgt.n	8000906 <__gesf2+0x92>
 80008fc:	42b5      	cmp	r5, r6
 80008fe:	d8d2      	bhi.n	80008a6 <__gesf2+0x32>
 8000900:	2000      	movs	r0, #0
 8000902:	42b5      	cmp	r5, r6
 8000904:	d2d3      	bcs.n	80008ae <__gesf2+0x3a>
 8000906:	1e58      	subs	r0, r3, #1
 8000908:	2301      	movs	r3, #1
 800090a:	4398      	bics	r0, r3
 800090c:	3001      	adds	r0, #1
 800090e:	e7ce      	b.n	80008ae <__gesf2+0x3a>

08000910 <__lesf2>:
 8000910:	b530      	push	{r4, r5, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	0244      	lsls	r4, r0, #9
 8000916:	024d      	lsls	r5, r1, #9
 8000918:	0fc3      	lsrs	r3, r0, #31
 800091a:	0048      	lsls	r0, r1, #1
 800091c:	0a64      	lsrs	r4, r4, #9
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0e00      	lsrs	r0, r0, #24
 8000924:	0fc9      	lsrs	r1, r1, #31
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d012      	beq.n	8000950 <__lesf2+0x40>
 800092a:	28ff      	cmp	r0, #255	; 0xff
 800092c:	d00c      	beq.n	8000948 <__lesf2+0x38>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d112      	bne.n	8000958 <__lesf2+0x48>
 8000932:	2800      	cmp	r0, #0
 8000934:	d119      	bne.n	800096a <__lesf2+0x5a>
 8000936:	2d00      	cmp	r5, #0
 8000938:	d117      	bne.n	800096a <__lesf2+0x5a>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d02b      	beq.n	8000996 <__lesf2+0x86>
 800093e:	2002      	movs	r0, #2
 8000940:	3b01      	subs	r3, #1
 8000942:	4018      	ands	r0, r3
 8000944:	3801      	subs	r0, #1
 8000946:	e026      	b.n	8000996 <__lesf2+0x86>
 8000948:	2d00      	cmp	r5, #0
 800094a:	d0f0      	beq.n	800092e <__lesf2+0x1e>
 800094c:	2002      	movs	r0, #2
 800094e:	e022      	b.n	8000996 <__lesf2+0x86>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d1fb      	bne.n	800094c <__lesf2+0x3c>
 8000954:	28ff      	cmp	r0, #255	; 0xff
 8000956:	d01f      	beq.n	8000998 <__lesf2+0x88>
 8000958:	2800      	cmp	r0, #0
 800095a:	d11f      	bne.n	800099c <__lesf2+0x8c>
 800095c:	2d00      	cmp	r5, #0
 800095e:	d11d      	bne.n	800099c <__lesf2+0x8c>
 8000960:	2002      	movs	r0, #2
 8000962:	3b01      	subs	r3, #1
 8000964:	4018      	ands	r0, r3
 8000966:	3801      	subs	r0, #1
 8000968:	e015      	b.n	8000996 <__lesf2+0x86>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d00e      	beq.n	800098c <__lesf2+0x7c>
 800096e:	428b      	cmp	r3, r1
 8000970:	d1e5      	bne.n	800093e <__lesf2+0x2e>
 8000972:	2200      	movs	r2, #0
 8000974:	4290      	cmp	r0, r2
 8000976:	dc04      	bgt.n	8000982 <__lesf2+0x72>
 8000978:	42ac      	cmp	r4, r5
 800097a:	d8e0      	bhi.n	800093e <__lesf2+0x2e>
 800097c:	2000      	movs	r0, #0
 800097e:	42ac      	cmp	r4, r5
 8000980:	d209      	bcs.n	8000996 <__lesf2+0x86>
 8000982:	1e58      	subs	r0, r3, #1
 8000984:	2301      	movs	r3, #1
 8000986:	4398      	bics	r0, r3
 8000988:	3001      	adds	r0, #1
 800098a:	e004      	b.n	8000996 <__lesf2+0x86>
 800098c:	2301      	movs	r3, #1
 800098e:	3901      	subs	r1, #1
 8000990:	4399      	bics	r1, r3
 8000992:	0008      	movs	r0, r1
 8000994:	3001      	adds	r0, #1
 8000996:	bd30      	pop	{r4, r5, pc}
 8000998:	2d00      	cmp	r5, #0
 800099a:	d1d7      	bne.n	800094c <__lesf2+0x3c>
 800099c:	428b      	cmp	r3, r1
 800099e:	d1ce      	bne.n	800093e <__lesf2+0x2e>
 80009a0:	4282      	cmp	r2, r0
 80009a2:	dde7      	ble.n	8000974 <__lesf2+0x64>
 80009a4:	2102      	movs	r1, #2
 80009a6:	1e58      	subs	r0, r3, #1
 80009a8:	4008      	ands	r0, r1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7f3      	b.n	8000996 <__lesf2+0x86>
 80009ae:	46c0      	nop			; (mov r8, r8)

080009b0 <__aeabi_fmul>:
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	464e      	mov	r6, r9
 80009b4:	4657      	mov	r7, sl
 80009b6:	4645      	mov	r5, r8
 80009b8:	46de      	mov	lr, fp
 80009ba:	b5e0      	push	{r5, r6, r7, lr}
 80009bc:	0243      	lsls	r3, r0, #9
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	0045      	lsls	r5, r0, #1
 80009c2:	b083      	sub	sp, #12
 80009c4:	1c0f      	adds	r7, r1, #0
 80009c6:	4699      	mov	r9, r3
 80009c8:	0e2d      	lsrs	r5, r5, #24
 80009ca:	0fc6      	lsrs	r6, r0, #31
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d057      	beq.n	8000a80 <__aeabi_fmul+0xd0>
 80009d0:	2dff      	cmp	r5, #255	; 0xff
 80009d2:	d024      	beq.n	8000a1e <__aeabi_fmul+0x6e>
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	04c0      	lsls	r0, r0, #19
 80009da:	4318      	orrs	r0, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	4681      	mov	r9, r0
 80009e0:	469a      	mov	sl, r3
 80009e2:	469b      	mov	fp, r3
 80009e4:	3d7f      	subs	r5, #127	; 0x7f
 80009e6:	027c      	lsls	r4, r7, #9
 80009e8:	007a      	lsls	r2, r7, #1
 80009ea:	0ffb      	lsrs	r3, r7, #31
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	0e12      	lsrs	r2, r2, #24
 80009f0:	4698      	mov	r8, r3
 80009f2:	d023      	beq.n	8000a3c <__aeabi_fmul+0x8c>
 80009f4:	2aff      	cmp	r2, #255	; 0xff
 80009f6:	d04b      	beq.n	8000a90 <__aeabi_fmul+0xe0>
 80009f8:	00e3      	lsls	r3, r4, #3
 80009fa:	2480      	movs	r4, #128	; 0x80
 80009fc:	2000      	movs	r0, #0
 80009fe:	04e4      	lsls	r4, r4, #19
 8000a00:	3a7f      	subs	r2, #127	; 0x7f
 8000a02:	431c      	orrs	r4, r3
 8000a04:	18ad      	adds	r5, r5, r2
 8000a06:	1c6b      	adds	r3, r5, #1
 8000a08:	4647      	mov	r7, r8
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	4077      	eors	r7, r6
 8000a10:	003a      	movs	r2, r7
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d848      	bhi.n	8000aa8 <__aeabi_fmul+0xf8>
 8000a16:	497d      	ldr	r1, [pc, #500]	; (8000c0c <__aeabi_fmul+0x25c>)
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	58cb      	ldr	r3, [r1, r3]
 8000a1c:	469f      	mov	pc, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fmul+0x74>
 8000a22:	e085      	b.n	8000b30 <__aeabi_fmul+0x180>
 8000a24:	3308      	adds	r3, #8
 8000a26:	469a      	mov	sl, r3
 8000a28:	3b06      	subs	r3, #6
 8000a2a:	469b      	mov	fp, r3
 8000a2c:	027c      	lsls	r4, r7, #9
 8000a2e:	007a      	lsls	r2, r7, #1
 8000a30:	0ffb      	lsrs	r3, r7, #31
 8000a32:	25ff      	movs	r5, #255	; 0xff
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	4698      	mov	r8, r3
 8000a3a:	d1db      	bne.n	80009f4 <__aeabi_fmul+0x44>
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fmul+0x92>
 8000a40:	e090      	b.n	8000b64 <__aeabi_fmul+0x1b4>
 8000a42:	4652      	mov	r2, sl
 8000a44:	2301      	movs	r3, #1
 8000a46:	431a      	orrs	r2, r3
 8000a48:	4692      	mov	sl, r2
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	e7db      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000a4e:	464c      	mov	r4, r9
 8000a50:	4658      	mov	r0, fp
 8000a52:	0017      	movs	r7, r2
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d024      	beq.n	8000aa2 <__aeabi_fmul+0xf2>
 8000a58:	2803      	cmp	r0, #3
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fmul+0xae>
 8000a5c:	e0cf      	b.n	8000bfe <__aeabi_fmul+0x24e>
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2300      	movs	r3, #0
 8000a62:	2801      	cmp	r0, #1
 8000a64:	d14d      	bne.n	8000b02 <__aeabi_fmul+0x152>
 8000a66:	0258      	lsls	r0, r3, #9
 8000a68:	05d2      	lsls	r2, r2, #23
 8000a6a:	0a40      	lsrs	r0, r0, #9
 8000a6c:	07ff      	lsls	r7, r7, #31
 8000a6e:	4310      	orrs	r0, r2
 8000a70:	4338      	orrs	r0, r7
 8000a72:	b003      	add	sp, #12
 8000a74:	bc3c      	pop	{r2, r3, r4, r5}
 8000a76:	4690      	mov	r8, r2
 8000a78:	4699      	mov	r9, r3
 8000a7a:	46a2      	mov	sl, r4
 8000a7c:	46ab      	mov	fp, r5
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d15b      	bne.n	8000b3c <__aeabi_fmul+0x18c>
 8000a84:	2304      	movs	r3, #4
 8000a86:	469a      	mov	sl, r3
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	469b      	mov	fp, r3
 8000a8e:	e7aa      	b.n	80009e6 <__aeabi_fmul+0x36>
 8000a90:	35ff      	adds	r5, #255	; 0xff
 8000a92:	2c00      	cmp	r4, #0
 8000a94:	d160      	bne.n	8000b58 <__aeabi_fmul+0x1a8>
 8000a96:	4652      	mov	r2, sl
 8000a98:	2302      	movs	r3, #2
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	4692      	mov	sl, r2
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	e7b1      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e7de      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000aa8:	464b      	mov	r3, r9
 8000aaa:	0c1b      	lsrs	r3, r3, #16
 8000aac:	469c      	mov	ip, r3
 8000aae:	464b      	mov	r3, r9
 8000ab0:	0426      	lsls	r6, r4, #16
 8000ab2:	0c36      	lsrs	r6, r6, #16
 8000ab4:	0418      	lsls	r0, r3, #16
 8000ab6:	4661      	mov	r1, ip
 8000ab8:	0033      	movs	r3, r6
 8000aba:	0c22      	lsrs	r2, r4, #16
 8000abc:	4664      	mov	r4, ip
 8000abe:	0c00      	lsrs	r0, r0, #16
 8000ac0:	4343      	muls	r3, r0
 8000ac2:	434e      	muls	r6, r1
 8000ac4:	4350      	muls	r0, r2
 8000ac6:	4354      	muls	r4, r2
 8000ac8:	1980      	adds	r0, r0, r6
 8000aca:	0c1a      	lsrs	r2, r3, #16
 8000acc:	1812      	adds	r2, r2, r0
 8000ace:	4296      	cmp	r6, r2
 8000ad0:	d903      	bls.n	8000ada <__aeabi_fmul+0x12a>
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	0249      	lsls	r1, r1, #9
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4464      	add	r4, ip
 8000ada:	041b      	lsls	r3, r3, #16
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	0410      	lsls	r0, r2, #16
 8000ae0:	18c0      	adds	r0, r0, r3
 8000ae2:	0183      	lsls	r3, r0, #6
 8000ae4:	1e5e      	subs	r6, r3, #1
 8000ae6:	41b3      	sbcs	r3, r6
 8000ae8:	0e80      	lsrs	r0, r0, #26
 8000aea:	4318      	orrs	r0, r3
 8000aec:	0c13      	lsrs	r3, r2, #16
 8000aee:	191b      	adds	r3, r3, r4
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	4303      	orrs	r3, r0
 8000af4:	001c      	movs	r4, r3
 8000af6:	0123      	lsls	r3, r4, #4
 8000af8:	d579      	bpl.n	8000bee <__aeabi_fmul+0x23e>
 8000afa:	2301      	movs	r3, #1
 8000afc:	0862      	lsrs	r2, r4, #1
 8000afe:	401c      	ands	r4, r3
 8000b00:	4314      	orrs	r4, r2
 8000b02:	9a01      	ldr	r2, [sp, #4]
 8000b04:	327f      	adds	r2, #127	; 0x7f
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	dd4d      	ble.n	8000ba6 <__aeabi_fmul+0x1f6>
 8000b0a:	0763      	lsls	r3, r4, #29
 8000b0c:	d004      	beq.n	8000b18 <__aeabi_fmul+0x168>
 8000b0e:	230f      	movs	r3, #15
 8000b10:	4023      	ands	r3, r4
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_fmul+0x168>
 8000b16:	3404      	adds	r4, #4
 8000b18:	0123      	lsls	r3, r4, #4
 8000b1a:	d503      	bpl.n	8000b24 <__aeabi_fmul+0x174>
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <__aeabi_fmul+0x260>)
 8000b1e:	9a01      	ldr	r2, [sp, #4]
 8000b20:	401c      	ands	r4, r3
 8000b22:	3280      	adds	r2, #128	; 0x80
 8000b24:	2afe      	cmp	r2, #254	; 0xfe
 8000b26:	dcbc      	bgt.n	8000aa2 <__aeabi_fmul+0xf2>
 8000b28:	01a3      	lsls	r3, r4, #6
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	e79a      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000b30:	230c      	movs	r3, #12
 8000b32:	469a      	mov	sl, r3
 8000b34:	3b09      	subs	r3, #9
 8000b36:	25ff      	movs	r5, #255	; 0xff
 8000b38:	469b      	mov	fp, r3
 8000b3a:	e754      	b.n	80009e6 <__aeabi_fmul+0x36>
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fc8f 	bl	8000460 <__clzsi2>
 8000b42:	464a      	mov	r2, r9
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	2576      	movs	r5, #118	; 0x76
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	426d      	negs	r5, r5
 8000b4e:	4691      	mov	r9, r2
 8000b50:	1a2d      	subs	r5, r5, r0
 8000b52:	469a      	mov	sl, r3
 8000b54:	469b      	mov	fp, r3
 8000b56:	e746      	b.n	80009e6 <__aeabi_fmul+0x36>
 8000b58:	4652      	mov	r2, sl
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	4692      	mov	sl, r2
 8000b60:	2003      	movs	r0, #3
 8000b62:	e750      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000b64:	0020      	movs	r0, r4
 8000b66:	f7ff fc7b 	bl	8000460 <__clzsi2>
 8000b6a:	1f43      	subs	r3, r0, #5
 8000b6c:	1a2d      	subs	r5, r5, r0
 8000b6e:	409c      	lsls	r4, r3
 8000b70:	3d76      	subs	r5, #118	; 0x76
 8000b72:	2000      	movs	r0, #0
 8000b74:	e747      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	2700      	movs	r7, #0
 8000b7a:	03db      	lsls	r3, r3, #15
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	e772      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000b80:	4642      	mov	r2, r8
 8000b82:	e766      	b.n	8000a52 <__aeabi_fmul+0xa2>
 8000b84:	464c      	mov	r4, r9
 8000b86:	0032      	movs	r2, r6
 8000b88:	4658      	mov	r0, fp
 8000b8a:	e762      	b.n	8000a52 <__aeabi_fmul+0xa2>
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	464a      	mov	r2, r9
 8000b90:	03db      	lsls	r3, r3, #15
 8000b92:	421a      	tst	r2, r3
 8000b94:	d022      	beq.n	8000bdc <__aeabi_fmul+0x22c>
 8000b96:	421c      	tst	r4, r3
 8000b98:	d120      	bne.n	8000bdc <__aeabi_fmul+0x22c>
 8000b9a:	4323      	orrs	r3, r4
 8000b9c:	025b      	lsls	r3, r3, #9
 8000b9e:	0a5b      	lsrs	r3, r3, #9
 8000ba0:	4647      	mov	r7, r8
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	e75f      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	1a9a      	subs	r2, r3, r2
 8000baa:	2a1b      	cmp	r2, #27
 8000bac:	dc21      	bgt.n	8000bf2 <__aeabi_fmul+0x242>
 8000bae:	0023      	movs	r3, r4
 8000bb0:	9901      	ldr	r1, [sp, #4]
 8000bb2:	40d3      	lsrs	r3, r2
 8000bb4:	319e      	adds	r1, #158	; 0x9e
 8000bb6:	408c      	lsls	r4, r1
 8000bb8:	001a      	movs	r2, r3
 8000bba:	0023      	movs	r3, r4
 8000bbc:	1e5c      	subs	r4, r3, #1
 8000bbe:	41a3      	sbcs	r3, r4
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	075a      	lsls	r2, r3, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fmul+0x220>
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2a04      	cmp	r2, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fmul+0x220>
 8000bce:	3304      	adds	r3, #4
 8000bd0:	015a      	lsls	r2, r3, #5
 8000bd2:	d411      	bmi.n	8000bf8 <__aeabi_fmul+0x248>
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	0a5b      	lsrs	r3, r3, #9
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e744      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	464a      	mov	r2, r9
 8000be0:	03db      	lsls	r3, r3, #15
 8000be2:	4313      	orrs	r3, r2
 8000be4:	025b      	lsls	r3, r3, #9
 8000be6:	0a5b      	lsrs	r3, r3, #9
 8000be8:	0037      	movs	r7, r6
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	e73b      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bee:	9501      	str	r5, [sp, #4]
 8000bf0:	e787      	b.n	8000b02 <__aeabi_fmul+0x152>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e736      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e733      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	03db      	lsls	r3, r3, #15
 8000c02:	4323      	orrs	r3, r4
 8000c04:	025b      	lsls	r3, r3, #9
 8000c06:	0a5b      	lsrs	r3, r3, #9
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	e72c      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000c0c:	08007768 	.word	0x08007768
 8000c10:	f7ffffff 	.word	0xf7ffffff

08000c14 <__aeabi_f2iz>:
 8000c14:	0241      	lsls	r1, r0, #9
 8000c16:	0042      	lsls	r2, r0, #1
 8000c18:	0fc3      	lsrs	r3, r0, #31
 8000c1a:	0a49      	lsrs	r1, r1, #9
 8000c1c:	0e12      	lsrs	r2, r2, #24
 8000c1e:	2000      	movs	r0, #0
 8000c20:	2a7e      	cmp	r2, #126	; 0x7e
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c24:	2a9d      	cmp	r2, #157	; 0x9d
 8000c26:	d80c      	bhi.n	8000c42 <__aeabi_f2iz+0x2e>
 8000c28:	2080      	movs	r0, #128	; 0x80
 8000c2a:	0400      	lsls	r0, r0, #16
 8000c2c:	4301      	orrs	r1, r0
 8000c2e:	2a95      	cmp	r2, #149	; 0x95
 8000c30:	dc0a      	bgt.n	8000c48 <__aeabi_f2iz+0x34>
 8000c32:	2096      	movs	r0, #150	; 0x96
 8000c34:	1a82      	subs	r2, r0, r2
 8000c36:	40d1      	lsrs	r1, r2
 8000c38:	4248      	negs	r0, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c3e:	0008      	movs	r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <__aeabi_f2iz+0x3c>)
 8000c44:	1898      	adds	r0, r3, r2
 8000c46:	e7fb      	b.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c48:	3a96      	subs	r2, #150	; 0x96
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	e7f4      	b.n	8000c38 <__aeabi_f2iz+0x24>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	7fffffff 	.word	0x7fffffff

08000c54 <__aeabi_i2f>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d03d      	beq.n	8000cd6 <__aeabi_i2f+0x82>
 8000c5a:	17c3      	asrs	r3, r0, #31
 8000c5c:	18c5      	adds	r5, r0, r3
 8000c5e:	405d      	eors	r5, r3
 8000c60:	0fc4      	lsrs	r4, r0, #31
 8000c62:	0028      	movs	r0, r5
 8000c64:	f7ff fbfc 	bl	8000460 <__clzsi2>
 8000c68:	229e      	movs	r2, #158	; 0x9e
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	2a96      	cmp	r2, #150	; 0x96
 8000c6e:	dc07      	bgt.n	8000c80 <__aeabi_i2f+0x2c>
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	2808      	cmp	r0, #8
 8000c74:	dd33      	ble.n	8000cde <__aeabi_i2f+0x8a>
 8000c76:	3808      	subs	r0, #8
 8000c78:	4085      	lsls	r5, r0
 8000c7a:	0268      	lsls	r0, r5, #9
 8000c7c:	0a40      	lsrs	r0, r0, #9
 8000c7e:	e023      	b.n	8000cc8 <__aeabi_i2f+0x74>
 8000c80:	2a99      	cmp	r2, #153	; 0x99
 8000c82:	dd0b      	ble.n	8000c9c <__aeabi_i2f+0x48>
 8000c84:	2305      	movs	r3, #5
 8000c86:	0029      	movs	r1, r5
 8000c88:	1a1b      	subs	r3, r3, r0
 8000c8a:	40d9      	lsrs	r1, r3
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	331b      	adds	r3, #27
 8000c90:	409d      	lsls	r5, r3
 8000c92:	002b      	movs	r3, r5
 8000c94:	1e5d      	subs	r5, r3, #1
 8000c96:	41ab      	sbcs	r3, r5
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	000d      	movs	r5, r1
 8000c9c:	2805      	cmp	r0, #5
 8000c9e:	dd01      	ble.n	8000ca4 <__aeabi_i2f+0x50>
 8000ca0:	1f43      	subs	r3, r0, #5
 8000ca2:	409d      	lsls	r5, r3
 8000ca4:	002b      	movs	r3, r5
 8000ca6:	490f      	ldr	r1, [pc, #60]	; (8000ce4 <__aeabi_i2f+0x90>)
 8000ca8:	400b      	ands	r3, r1
 8000caa:	076e      	lsls	r6, r5, #29
 8000cac:	d009      	beq.n	8000cc2 <__aeabi_i2f+0x6e>
 8000cae:	260f      	movs	r6, #15
 8000cb0:	4035      	ands	r5, r6
 8000cb2:	2d04      	cmp	r5, #4
 8000cb4:	d005      	beq.n	8000cc2 <__aeabi_i2f+0x6e>
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	015d      	lsls	r5, r3, #5
 8000cba:	d502      	bpl.n	8000cc2 <__aeabi_i2f+0x6e>
 8000cbc:	229f      	movs	r2, #159	; 0x9f
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	019b      	lsls	r3, r3, #6
 8000cc4:	0a58      	lsrs	r0, r3, #9
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	0240      	lsls	r0, r0, #9
 8000cca:	05d2      	lsls	r2, r2, #23
 8000ccc:	0a40      	lsrs	r0, r0, #9
 8000cce:	07e4      	lsls	r4, r4, #31
 8000cd0:	4310      	orrs	r0, r2
 8000cd2:	4320      	orrs	r0, r4
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e7f4      	b.n	8000cc8 <__aeabi_i2f+0x74>
 8000cde:	0268      	lsls	r0, r5, #9
 8000ce0:	0a40      	lsrs	r0, r0, #9
 8000ce2:	e7f1      	b.n	8000cc8 <__aeabi_i2f+0x74>
 8000ce4:	fbffffff 	.word	0xfbffffff

08000ce8 <fix_abs>:
 * value is too large or there were garbage characters.
 */
extern fix16_t fix16_from_str(const char *buf);

static inline uint32_t fix_abs(fix16_t in)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    if(in == fix16_minimum)
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	061b      	lsls	r3, r3, #24
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d102      	bne.n	8000d00 <fix_abs+0x18>
    {
        // minimum negative number has same representation as
        // its absolute value in unsigned
        return 0x80000000;
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	061b      	lsls	r3, r3, #24
 8000cfe:	e003      	b.n	8000d08 <fix_abs+0x20>
    }
    else
    {
        return ((in >= 0)?(in):(-in));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	17da      	asrs	r2, r3, #31
 8000d04:	189b      	adds	r3, r3, r2
 8000d06:	4053      	eors	r3, r2
    }
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <fix16_add>:
/* Subtraction and addition with overflow detection.
 * The versions without overflow detection are inlined in the header.
 */
#ifndef FIXMATH_NO_OVERFLOW
fix16_t fix16_add(fix16_t a, fix16_t b)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	// Use unsigned integers because overflow with signed integers is
	// an undefined operation (http://www.airs.com/blog/archives/120).
    uint32_t _a = a;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	617b      	str	r3, [r7, #20]
    uint32_t _b = b;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	613b      	str	r3, [r7, #16]
	uint32_t sum = _a + _b;
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	60fb      	str	r3, [r7, #12]

	// Overflow can only happen if sign of a == sign of b, and then
	// it causes sign of sum != sign of a.
	if (!((_a ^ _b) & 0x80000000) && ((_a ^ sum) & 0x80000000))
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4053      	eors	r3, r2
 8000d30:	d406      	bmi.n	8000d40 <fix16_add+0x30>
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4053      	eors	r3, r2
 8000d38:	d502      	bpl.n	8000d40 <fix16_add+0x30>
		return fix16_overflow;
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	061b      	lsls	r3, r3, #24
 8000d3e:	e000      	b.n	8000d42 <fix16_add+0x32>
	
	return sum;
 8000d40:	68fb      	ldr	r3, [r7, #12]
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b006      	add	sp, #24
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <fix16_sub>:

fix16_t fix16_sub(fix16_t a, fix16_t b)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
    uint32_t _a = a;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	617b      	str	r3, [r7, #20]
    uint32_t _b = b;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	613b      	str	r3, [r7, #16]
	uint32_t diff = _a - _b;
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	60fb      	str	r3, [r7, #12]

	// Overflow can only happen if sign of a != sign of b, and then
	// it causes sign of diff != sign of a.
	if (((_a ^ _b) & 0x80000000) && ((_a ^ diff) & 0x80000000))
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4053      	eors	r3, r2
 8000d6a:	d506      	bpl.n	8000d7a <fix16_sub+0x30>
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4053      	eors	r3, r2
 8000d72:	d502      	bpl.n	8000d7a <fix16_sub+0x30>
		return fix16_overflow;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	061b      	lsls	r3, r3, #24
 8000d78:	e000      	b.n	8000d7c <fix16_sub+0x32>
	
	return diff;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <fix16_mul>:
 * detection.
 */
 
#if !defined(FIXMATH_NO_64BIT) && !defined(FIXMATH_OPTIMIZE_8BIT)
fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8000d8c:	6239      	str	r1, [r7, #32]
	int64_t product = (int64_t)inArg0 * inArg1;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	17db      	asrs	r3, r3, #31
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6938      	ldr	r0, [r7, #16]
 8000da4:	6979      	ldr	r1, [r7, #20]
 8000da6:	f7ff fb79 	bl	800049c <__aeabi_lmul>
 8000daa:	0002      	movs	r2, r0
 8000dac:	000b      	movs	r3, r1
 8000dae:	633a      	str	r2, [r7, #48]	; 0x30
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
	
	#ifndef FIXMATH_NO_OVERFLOW
	// The upper 17 bits should all be the same (the sign).
	uint32_t upper = (product >> 47);
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	13db      	asrs	r3, r3, #15
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	#endif
	
	if (product < 0)
 8000dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da0f      	bge.n	8000de8 <fix16_mul+0x64>
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (~upper)
 8000dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	d002      	beq.n	8000dd4 <fix16_mul+0x50>
				return fix16_overflow;
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	e02a      	b.n	8000e2a <fix16_mul+0xa6>
		#endif
		
		#ifndef FIXMATH_NO_ROUNDING
		// This adjustment is required in order to round -1/2 correctly
		product--;
 8000dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd8:	2001      	movs	r0, #1
 8000dda:	4240      	negs	r0, r0
 8000ddc:	17c1      	asrs	r1, r0, #31
 8000dde:	1812      	adds	r2, r2, r0
 8000de0:	414b      	adcs	r3, r1
 8000de2:	633a      	str	r2, [r7, #48]	; 0x30
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
 8000de6:	e005      	b.n	8000df4 <fix16_mul+0x70>
		#endif
	}
	else
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (upper)
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <fix16_mul+0x70>
				return fix16_overflow;
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	061b      	lsls	r3, r3, #24
 8000df2:	e01a      	b.n	8000e2a <fix16_mul+0xa6>
	}
	
	#ifdef FIXMATH_NO_ROUNDING
	return product >> 16;
	#else
	fix16_t result = product >> 16;
 8000df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dfa:	0c12      	lsrs	r2, r2, #16
 8000dfc:	61ba      	str	r2, [r7, #24]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	61ba      	str	r2, [r7, #24]
 8000e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e06:	141b      	asrs	r3, r3, #16
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	result += (product & 0x8000) >> 15;
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	045b      	lsls	r3, r3, #17
 8000e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e14:	0bd4      	lsrs	r4, r2, #15
 8000e16:	431c      	orrs	r4, r3
 8000e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1a:	13dd      	asrs	r5, r3, #15
 8000e1c:	0022      	movs	r2, r4
 8000e1e:	2301      	movs	r3, #1
 8000e20:	401a      	ands	r2, r3
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
	
	return result;
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
	#endif
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b00e      	add	sp, #56	; 0x38
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}

08000e32 <fix16_div>:
	return result;
}
#endif

fix16_t fix16_div(fix16_t a, fix16_t b)
{
 8000e32:	b5b0      	push	{r4, r5, r7, lr}
 8000e34:	b094      	sub	sp, #80	; 0x50
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	61f8      	str	r0, [r7, #28]
 8000e3a:	61b9      	str	r1, [r7, #24]
	// This uses a hardware 32/32 bit division multiple times, until we have
	// computed all the bits in (a<<17)/b. Usually this takes 1-3 iterations.
	
	if (b == 0)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <fix16_div+0x16>
			return fix16_minimum;
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	061b      	lsls	r3, r3, #24
 8000e46:	e0c6      	b.n	8000fd6 <fix16_div+0x1a4>
	
    uint32_t remainder = fix_abs(a);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff ff4c 	bl	8000ce8 <fix_abs>
 8000e50:	0003      	movs	r3, r0
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t divider = fix_abs(b);
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff ff46 	bl	8000ce8 <fix_abs>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    uint64_t quotient = 0;
 8000e60:	2200      	movs	r2, #0
 8000e62:	2300      	movs	r3, #0
 8000e64:	643a      	str	r2, [r7, #64]	; 0x40
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
    int bit_pos = 17;
 8000e68:	2311      	movs	r3, #17
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Kick-start the division a bit.
	// This improves speed in the worst-case scenarios where N and D are large
	// It gets a lower estimate for the result by N/(D >> 17 + 1).
	if (divider & 0xFFF00000)
 8000e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e6e:	0d1b      	lsrs	r3, r3, #20
 8000e70:	051b      	lsls	r3, r3, #20
 8000e72:	d028      	beq.n	8000ec6 <fix16_div+0x94>
	{
		uint32_t shifted_div = ((divider >> 17) + 1);
 8000e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e76:	0c5b      	lsrs	r3, r3, #17
 8000e78:	3301      	adds	r3, #1
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
        quotient = remainder / shifted_div;
 8000e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e80:	f7ff f93e 	bl	8000100 <__udivsi3>
 8000e84:	0003      	movs	r3, r0
 8000e86:	643b      	str	r3, [r7, #64]	; 0x40
 8000e88:	2300      	movs	r3, #0
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
        uint64_t tmp = ((uint64_t)quotient * (uint64_t)divider) >> 17;
 8000e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f7ff fafe 	bl	800049c <__aeabi_lmul>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	000b      	movs	r3, r1
 8000ea4:	03d9      	lsls	r1, r3, #15
 8000ea6:	0c50      	lsrs	r0, r2, #17
 8000ea8:	4301      	orrs	r1, r0
 8000eaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8000eac:	0c5b      	lsrs	r3, r3, #17
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        remainder -= (uint32_t)(tmp);
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
	
	// If the divider is divisible by 2^n, take advantage of it.
	while (!(divider & 0xF) && bit_pos >= 4)
 8000eb8:	e005      	b.n	8000ec6 <fix16_div+0x94>
	{
		divider >>= 4;
 8000eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
		bit_pos -= 4;
 8000ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (!(divider & 0xF) && bit_pos >= 4)
 8000ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec8:	220f      	movs	r2, #15
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d158      	bne.n	8000f80 <fix16_div+0x14e>
 8000ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	dcf2      	bgt.n	8000eba <fix16_div+0x88>
	}
	
	while (remainder && bit_pos >= 0)
 8000ed4:	e054      	b.n	8000f80 <fix16_div+0x14e>
	{
		// Shift remainder as much as we can without overflowing
		int shift = clz(remainder);
 8000ed6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ed8:	f7ff fac2 	bl	8000460 <__clzsi2>
 8000edc:	0003      	movs	r3, r0
 8000ede:	63bb      	str	r3, [r7, #56]	; 0x38
		if (shift > bit_pos) shift = bit_pos;
 8000ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dd01      	ble.n	8000eec <fix16_div+0xba>
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
		remainder <<= shift;
 8000eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
		bit_pos -= shift;
 8000ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
		
		uint32_t div = remainder / divider;
 8000efe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f02:	f7ff f8fd 	bl	8000100 <__udivsi3>
 8000f06:	0003      	movs	r3, r0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
        remainder = remainder % divider;
 8000f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff f97c 	bl	800020c <__aeabi_uidivmod>
 8000f14:	000b      	movs	r3, r1
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
        quotient += (uint64_t)div << bit_pos;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f22:	3b20      	subs	r3, #32
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db03      	blt.n	8000f30 <fix16_div+0xfe>
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0015      	movs	r5, r2
 8000f2e:	e00b      	b.n	8000f48 <fix16_div+0x116>
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	2220      	movs	r2, #32
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	6938      	ldr	r0, [r7, #16]
 8000f38:	6979      	ldr	r1, [r7, #20]
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	40da      	lsrs	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f42:	4091      	lsls	r1, r2
 8000f44:	000d      	movs	r5, r1
 8000f46:	431d      	orrs	r5, r3
 8000f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0014      	movs	r4, r2
 8000f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f54:	1912      	adds	r2, r2, r4
 8000f56:	416b      	adcs	r3, r5
 8000f58:	643a      	str	r2, [r7, #64]	; 0x40
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44

		#ifndef FIXMATH_NO_OVERFLOW
		if (div & ~(0xFFFFFFFF >> bit_pos))
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	425a      	negs	r2, r3
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	40da      	lsrs	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43db      	mvns	r3, r3
 8000f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d002      	beq.n	8000f74 <fix16_div+0x142>
				return fix16_overflow;
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	061b      	lsls	r3, r3, #24
 8000f72:	e030      	b.n	8000fd6 <fix16_div+0x1a4>
		#endif
		
		remainder <<= 1;
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
		bit_pos--;
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (remainder && bit_pos >= 0)
 8000f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <fix16_div+0x15a>
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	daa4      	bge.n	8000ed6 <fix16_div+0xa4>
	}
	
	#ifndef FIXMATH_NO_ROUNDING
	// Quotient is always positive so rounding is easy
	quotient++;
 8000f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f8e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000f90:	2101      	movs	r1, #1
 8000f92:	2200      	movs	r2, #0
 8000f94:	185b      	adds	r3, r3, r1
 8000f96:	4154      	adcs	r4, r2
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
 8000f9a:	647c      	str	r4, [r7, #68]	; 0x44
	#endif
	
	fix16_t result = quotient >> 1;
 8000f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9e:	07db      	lsls	r3, r3, #31
 8000fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fa2:	0852      	lsrs	r2, r2, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
	
	// Figure out the sign of the result
	if ((a ^ b) & 0x80000000)
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	4053      	eors	r3, r2
 8000fbc:	d50a      	bpl.n	8000fd4 <fix16_div+0x1a2>
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (result == fix16_minimum)
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d102      	bne.n	8000fce <fix16_div+0x19c>
				return fix16_overflow;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	e003      	b.n	8000fd6 <fix16_div+0x1a4>
		#endif
		
		result = -result;
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
	}
	
	return result;
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b014      	add	sp, #80	; 0x50
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}

08000fde <itoa_loop>:
    /* 5 decimals is enough for full fix16_t precision */
    1, 10, 100, 1000, 10000, 100000, 100000, 100000
};

static char *itoa_loop(char *buf, uint32_t scale, uint32_t value, bool skip)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	001a      	movs	r2, r3
 8000fec:	1cfb      	adds	r3, r7, #3
 8000fee:	701a      	strb	r2, [r3, #0]
    while (scale)
 8000ff0:	e02b      	b.n	800104a <itoa_loop+0x6c>
    {
        unsigned digit = (value / scale);
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff f883 	bl	8000100 <__udivsi3>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	617b      	str	r3, [r7, #20]
    
        if (!skip || digit || scale == 1)
 8000ffe:	1cfb      	adds	r3, r7, #3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2201      	movs	r2, #1
 8001004:	4053      	eors	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d105      	bne.n	8001018 <itoa_loop+0x3a>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <itoa_loop+0x3a>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d111      	bne.n	800103c <itoa_loop+0x5e>
        {
            skip = false;
 8001018:	1cfb      	adds	r3, r7, #3
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
            *buf++ = '0' + digit;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1c59      	adds	r1, r3, #1
 8001026:	60f9      	str	r1, [r7, #12]
 8001028:	3230      	adds	r2, #48	; 0x30
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	701a      	strb	r2, [r3, #0]
            value %= scale;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff f8ea 	bl	800020c <__aeabi_uidivmod>
 8001038:	000b      	movs	r3, r1
 800103a:	607b      	str	r3, [r7, #4]
        }
        
        scale /= 10;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	210a      	movs	r1, #10
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff f85d 	bl	8000100 <__udivsi3>
 8001046:	0003      	movs	r3, r0
 8001048:	60bb      	str	r3, [r7, #8]
    while (scale)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1d0      	bne.n	8000ff2 <itoa_loop+0x14>
    }
    return buf;
 8001050:	68fb      	ldr	r3, [r7, #12]
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b006      	add	sp, #24
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <fix16_to_str>:

void fix16_to_str(fix16_t value, char *buf, int decimals)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
    uint32_t uvalue = (value >= 0) ? value : -value;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	17da      	asrs	r2, r3, #31
 800106c:	189b      	adds	r3, r3, r2
 800106e:	4053      	eors	r3, r2
 8001070:	617b      	str	r3, [r7, #20]
    if (value < 0)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	da04      	bge.n	8001082 <fix16_to_str+0x26>
        *buf++ = '-';
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	222d      	movs	r2, #45	; 0x2d
 8001080:	701a      	strb	r2, [r3, #0]

    /* Separate the integer and decimal parts of the value */
    unsigned intpart = uvalue >> 16;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	61fb      	str	r3, [r7, #28]
    uint32_t fracpart = uvalue & 0xFFFF;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	61bb      	str	r3, [r7, #24]
    uint32_t scale = scales[decimals & 7];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2207      	movs	r2, #7
 8001094:	401a      	ands	r2, r3
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <fix16_to_str+0xb4>)
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	58d3      	ldr	r3, [r2, r3]
 800109c:	613b      	str	r3, [r7, #16]
    fracpart = fix16_mul(fracpart, scale);
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff fe6d 	bl	8000d84 <fix16_mul>
 80010aa:	0003      	movs	r3, r0
 80010ac:	61bb      	str	r3, [r7, #24]
    
    if (fracpart >= scale)
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d306      	bcc.n	80010c4 <fix16_to_str+0x68>
    {
        /* Handle carry from decimal part */
        intpart++;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
        fracpart -= scale;    
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Format integer part */
    buf = itoa_loop(buf, 10000, intpart, true);
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	4913      	ldr	r1, [pc, #76]	; (8001114 <fix16_to_str+0xb8>)
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	2301      	movs	r3, #1
 80010cc:	f7ff ff87 	bl	8000fde <itoa_loop>
 80010d0:	0003      	movs	r3, r0
 80010d2:	60bb      	str	r3, [r7, #8]
    
    /* Format decimal part (if any) */
    if (scale != 1)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d012      	beq.n	8001100 <fix16_to_str+0xa4>
    {
        *buf++ = '.';
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	222e      	movs	r2, #46	; 0x2e
 80010e2:	701a      	strb	r2, [r3, #0]
        buf = itoa_loop(buf, scale / 10, fracpart, false);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	210a      	movs	r1, #10
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff f809 	bl	8000100 <__udivsi3>
 80010ee:	0003      	movs	r3, r0
 80010f0:	0019      	movs	r1, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	2300      	movs	r3, #0
 80010f8:	f7ff ff71 	bl	8000fde <itoa_loop>
 80010fc:	0003      	movs	r3, r0
 80010fe:	60bb      	str	r3, [r7, #8]
    }
    
    *buf = '\0';
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b008      	add	sp, #32
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	080077a8 	.word	0x080077a8
 8001114:	00002710 	.word	0x00002710

08001118 <fix16_atan2>:
{
	return ((fix16_pi >> 1) - fix16_asin(x));
}

fix16_t fix16_atan2(fix16_t inY , fix16_t inX)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	if((_fix16_atan_cache_index[0][hash] == inX) && (_fix16_atan_cache_index[1][hash] == inY))
		return _fix16_atan_cache_value[hash];
	#endif

	/* Absolute inY */
	mask = (inY >> (sizeof(fix16_t)*CHAR_BIT-1));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	61bb      	str	r3, [r7, #24]
	abs_inY = (inY + mask) ^ mask;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4053      	eors	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

	if (inX >= 0)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db2c      	blt.n	8001194 <fix16_atan2+0x7c>
	{
		r = fix16_div( (inX - abs_inY), (inX + abs_inY));
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	1ad0      	subs	r0, r2, r3
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	0019      	movs	r1, r3
 8001148:	f7ff fe73 	bl	8000e32 <fix16_div>
 800114c:	0003      	movs	r3, r0
 800114e:	613b      	str	r3, [r7, #16]
		r_3 = fix16_mul(fix16_mul(r, r),r);
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	0011      	movs	r1, r2
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff fe14 	bl	8000d84 <fix16_mul>
 800115c:	0002      	movs	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	0019      	movs	r1, r3
 8001162:	0010      	movs	r0, r2
 8001164:	f7ff fe0e 	bl	8000d84 <fix16_mul>
 8001168:	0003      	movs	r3, r0
 800116a:	60fb      	str	r3, [r7, #12]
		angle = fix16_mul(0x00003240 , r_3) - fix16_mul(0x0000FB50,r) + PI_DIV_4;
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	23c9      	movs	r3, #201	; 0xc9
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fe05 	bl	8000d84 <fix16_mul>
 800117a:	0004      	movs	r4, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <fix16_atan2+0xec>)
 8001180:	0019      	movs	r1, r3
 8001182:	0010      	movs	r0, r2
 8001184:	f7ff fdfe 	bl	8000d84 <fix16_mul>
 8001188:	0003      	movs	r3, r0
 800118a:	1ae3      	subs	r3, r4, r3
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <fix16_atan2+0xf0>)
 800118e:	189b      	adds	r3, r3, r2
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	e02b      	b.n	80011ec <fix16_atan2+0xd4>
	} else {
		r = fix16_div( (inX + abs_inY), (abs_inY - inX));
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	18d0      	adds	r0, r2, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	0019      	movs	r1, r3
 80011a2:	f7ff fe46 	bl	8000e32 <fix16_div>
 80011a6:	0003      	movs	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]
		r_3 = fix16_mul(fix16_mul(r, r),r);
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fde7 	bl	8000d84 <fix16_mul>
 80011b6:	0002      	movs	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f7ff fde1 	bl	8000d84 <fix16_mul>
 80011c2:	0003      	movs	r3, r0
 80011c4:	60fb      	str	r3, [r7, #12]
		angle = fix16_mul(0x00003240 , r_3)
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	23c9      	movs	r3, #201	; 0xc9
 80011ca:	019b      	lsls	r3, r3, #6
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff fdd8 	bl	8000d84 <fix16_mul>
 80011d4:	0004      	movs	r4, r0
			- fix16_mul(0x0000FB50,r)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <fix16_atan2+0xec>)
 80011da:	0019      	movs	r1, r3
 80011dc:	0010      	movs	r0, r2
 80011de:	f7ff fdd1 	bl	8000d84 <fix16_mul>
 80011e2:	0003      	movs	r3, r0
 80011e4:	1ae3      	subs	r3, r4, r3
			+ THREE_PI_DIV_4;
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <fix16_atan2+0xf4>)
		angle = fix16_mul(0x00003240 , r_3)
 80011e8:	189b      	adds	r3, r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]
	}
	if (inY < 0)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da02      	bge.n	80011f8 <fix16_atan2+0xe0>
	{
		angle = -angle;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	425b      	negs	r3, r3
 80011f6:	61fb      	str	r3, [r7, #28]
	_fix16_atan_cache_index[0][hash] = inX;
	_fix16_atan_cache_index[1][hash] = inY;
	_fix16_atan_cache_value[hash] = angle;
	#endif

	return angle;
 80011f8:	69fb      	ldr	r3, [r7, #28]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b009      	add	sp, #36	; 0x24
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	0000fb50 	.word	0x0000fb50
 8001208:	0000c90f 	.word	0x0000c90f
 800120c:	00025b2f 	.word	0x00025b2f

08001210 <fix16_from_int>:
static inline fix16_t fix16_from_int(int a)     { return a * fix16_one; }
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4353      	muls	r3, r2
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}

08001228 <fix16_to_int>:
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if (a >= 0)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0c      	blt.n	8001250 <fix16_to_int+0x28>
		return (a + (fix16_one >> 1)) / fix16_one;
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	105a      	asrs	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f7fe ffe4 	bl	8000214 <__divsi3>
 800124c:	0003      	movs	r3, r0
 800124e:	e00b      	b.n	8001268 <fix16_to_int+0x40>
	return (a - (fix16_one >> 1)) / fix16_one;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	105b      	asrs	r3, r3, #1
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	1ad2      	subs	r2, r2, r3
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	0019      	movs	r1, r3
 8001260:	0010      	movs	r0, r2
 8001262:	f7fe ffd7 	bl	8000214 <__divsi3>
 8001266:	0003      	movs	r3, r0
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <fix16_from_float>:
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	float temp = a * fix16_one;
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff fce9 	bl	8000c54 <__aeabi_i2f>
 8001282:	1c03      	adds	r3, r0, #0
 8001284:	1c19      	adds	r1, r3, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fb92 	bl	80009b0 <__aeabi_fmul>
 800128c:	1c03      	adds	r3, r0, #0
 800128e:	60fb      	str	r3, [r7, #12]
	temp += (temp >= 0) ? 0.5f : -0.5f;
 8001290:	2100      	movs	r1, #0
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff f8da 	bl	800044c <__aeabi_fcmpge>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d002      	beq.n	80012a2 <fix16_from_float+0x32>
 800129c:	23fc      	movs	r3, #252	; 0xfc
 800129e:	059b      	lsls	r3, r3, #22
 80012a0:	e001      	b.n	80012a6 <fix16_from_float+0x36>
 80012a2:	23bf      	movs	r3, #191	; 0xbf
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	1c19      	adds	r1, r3, #0
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff f921 	bl	80004f0 <__aeabi_fadd>
 80012ae:	1c03      	adds	r3, r0, #0
 80012b0:	60fb      	str	r3, [r7, #12]
	return (fix16_t)temp;
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff fcae 	bl	8000c14 <__aeabi_f2iz>
 80012b8:	0003      	movs	r3, r0
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <fix16_abs>:
    { return (fix16_t)(x < 0 ? -(uint32_t)x : (uint32_t)x); }
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da02      	bge.n	80012d6 <fix16_abs+0x14>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	425b      	negs	r3, r3
 80012d4:	e000      	b.n	80012d8 <fix16_abs+0x16>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	425b      	negs	r3, r3
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <_write+0x28>)
 80012f8:	f004 fe8a 	bl	8006010 <HAL_UART_Transmit>
	return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	200001f8 	.word	0x200001f8

0800130c <resetICM>:

void resetICM()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	uint8_t tx[2] = {W | DEVICE_CONFIG, 0x01};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4a10      	ldr	r2, [pc, #64]	; (8001358 <resetICM+0x4c>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	0159      	lsls	r1, r3, #5
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	2200      	movs	r2, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f002 f9c7 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx, 2, 1000);
 800132a:	23fa      	movs	r3, #250	; 0xfa
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	1d39      	adds	r1, r7, #4
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <resetICM+0x50>)
 8001332:	2202      	movs	r2, #2
 8001334:	f003 f8c8 	bl	80044c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	0159      	lsls	r1, r3, #5
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	2201      	movs	r2, #1
 8001342:	0018      	movs	r0, r3
 8001344:	f002 f9b8 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f001 fad9 	bl	8002900 <HAL_Delay>
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	08007738 	.word	0x08007738
 800135c:	20000194 	.word	0x20000194

08001360 <spiSet>:

void spiSet(uint8_t addr, uint8_t val)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	0002      	movs	r2, r0
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	1c0a      	adds	r2, r1, #0
 8001370:	701a      	strb	r2, [r3, #0]
	uint8_t tx[2] = {0};
 8001372:	240c      	movs	r4, #12
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
	tx[0] = W | addr;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	1dfa      	adds	r2, r7, #7
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	701a      	strb	r2, [r3, #0]
	tx[1] = val;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	1dba      	adds	r2, r7, #6
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	0159      	lsls	r1, r3, #5
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	2200      	movs	r2, #0
 8001394:	0018      	movs	r0, r3
 8001396:	f002 f98f 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx, 2, SPI_WAIT);
 800139a:	1939      	adds	r1, r7, r4
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <spiSet+0x60>)
 800139e:	2301      	movs	r3, #1
 80013a0:	2202      	movs	r2, #2
 80013a2:	f003 f891 	bl	80044c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	0159      	lsls	r1, r3, #5
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	2201      	movs	r2, #1
 80013b0:	0018      	movs	r0, r3
 80013b2:	f002 f981 	bl	80036b8 <HAL_GPIO_WritePin>
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b005      	add	sp, #20
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	20000194 	.word	0x20000194

080013c4 <spiGet>:

void spiGet(uint8_t addr, uint8_t* rx, uint8_t num)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6039      	str	r1, [r7, #0]
 80013cc:	0011      	movs	r1, r2
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	1c02      	adds	r2, r0, #0
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	1c0a      	adds	r2, r1, #0
 80013d8:	701a      	strb	r2, [r3, #0]
	uint8_t tx = R | addr;
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	4252      	negs	r2, r2
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	240f      	movs	r4, #15
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	0159      	lsls	r1, r3, #5
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2200      	movs	r2, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f002 f95e 	bl	80036b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx, 1, SPI_WAIT);
 80013fc:	1939      	adds	r1, r7, r4
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <spiGet+0x6c>)
 8001400:	2301      	movs	r3, #1
 8001402:	2201      	movs	r2, #1
 8001404:	f003 f860 	bl	80044c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rx, num, SPI_WAIT);
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b29a      	uxth	r2, r3
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <spiGet+0x6c>)
 8001412:	2301      	movs	r3, #1
 8001414:	f003 f9b0 	bl	8004778 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	0159      	lsls	r1, r3, #5
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	2201      	movs	r2, #1
 8001422:	0018      	movs	r0, r3
 8001424:	f002 f948 	bl	80036b8 <HAL_GPIO_WritePin>
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b005      	add	sp, #20
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000194 	.word	0x20000194

08001434 <printf16>:

void printf16(fix16_t num, int decimals){
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	decimals = decimals > 5 ? 5 : decimals;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b05      	cmp	r3, #5
 8001442:	dd00      	ble.n	8001446 <printf16+0x12>
 8001444:	2305      	movs	r3, #5
 8001446:	603b      	str	r3, [r7, #0]
	char str[14] = {'0'};
 8001448:	2108      	movs	r1, #8
 800144a:	000c      	movs	r4, r1
 800144c:	187b      	adds	r3, r7, r1
 800144e:	0018      	movs	r0, r3
 8001450:	230e      	movs	r3, #14
 8001452:	001a      	movs	r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	f005 f9d9 	bl	800680c <memset>
 800145a:	0021      	movs	r1, r4
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2230      	movs	r2, #48	; 0x30
 8001460:	701a      	strb	r2, [r3, #0]
	fix16_to_str(num, str, decimals);
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	000c      	movs	r4, r1
 8001466:	1879      	adds	r1, r7, r1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fdf6 	bl	800105c <fix16_to_str>
	printf("%s", str);
 8001470:	0021      	movs	r1, r4
 8001472:	187a      	adds	r2, r7, r1
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <printf16+0x54>)
 8001476:	0011      	movs	r1, r2
 8001478:	0018      	movs	r0, r3
 800147a:	f005 f9cf 	bl	800681c <iprintf>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b007      	add	sp, #28
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	0800773c 	.word	0x0800773c

0800148c <pn>:

void pn(){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	printf("\r\n");
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <pn+0x14>)
 8001492:	0018      	movs	r0, r3
 8001494:	f005 fa3c 	bl	8006910 <puts>
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	08007740 	.word	0x08007740

080014a4 <pc>:

void ps(){
	printf(" ");
}

void pc(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	printf(", ");
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <pc+0x14>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f005 f9b6 	bl	800681c <iprintf>
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	08007744 	.word	0x08007744

080014bc <brakeOn>:

void brakeOn() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, GPIO_PIN_RESET);
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <brakeOn+0x18>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	0019      	movs	r1, r3
 80014ca:	f002 f8f5 	bl	80036b8 <HAL_GPIO_WritePin>
	return;
 80014ce:	46c0      	nop			; (mov r8, r8)
}
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	50000400 	.word	0x50000400

080014d8 <brakeOff>:

void brakeOff() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, GPIO_PIN_SET);
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <brakeOff+0x18>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	0019      	movs	r1, r3
 80014e6:	f002 f8e7 	bl	80036b8 <HAL_GPIO_WritePin>
	return;
 80014ea:	46c0      	nop			; (mov r8, r8)
}
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	50000400 	.word	0x50000400

080014f4 <waitUntilStop>:

void waitUntilStop(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 100;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <waitUntilStop+0x40>)
 80014fc:	2264      	movs	r2, #100	; 0x64
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
	brakeOn();
 8001500:	f7ff ffdc 	bl	80014bc <brakeOn>
	int val1 = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
	int val2 = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	603b      	str	r3, [r7, #0]
	while (val1 != val2){
 800150c:	e008      	b.n	8001520 <waitUntilStop+0x2c>
		val1 = TIM1->CNT;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <waitUntilStop+0x44>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	607b      	str	r3, [r7, #4]
		HAL_Delay (10);
 8001514:	200a      	movs	r0, #10
 8001516:	f001 f9f3 	bl	8002900 <HAL_Delay>
		val2 = TIM1->CNT;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <waitUntilStop+0x44>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	603b      	str	r3, [r7, #0]
	while (val1 != val2){
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d1f2      	bne.n	800150e <waitUntilStop+0x1a>
	}
	brakeOff();
 8001528:	f7ff ffd6 	bl	80014d8 <brakeOff>
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40000400 	.word	0x40000400
 8001538:	40012c00 	.word	0x40012c00

0800153c <rad2deg>:
	voltage = fix16_sub(voltage, fix16_from_float(0.1)); // more fudge factor
	HAL_ADC_Stop(&hadc1);
	return voltage;
}

fix16_t rad2deg(fix16_t num){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	num = fix16_mul(num, fix16_from_int(180));
 8001544:	20b4      	movs	r0, #180	; 0xb4
 8001546:	f7ff fe63 	bl	8001210 <fix16_from_int>
 800154a:	0002      	movs	r2, r0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff fc17 	bl	8000d84 <fix16_mul>
 8001556:	0003      	movs	r3, r0
 8001558:	607b      	str	r3, [r7, #4]
	num = fix16_div(num, fix16_pi);
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <rad2deg+0x38>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fc66 	bl	8000e32 <fix16_div>
 8001566:	0003      	movs	r3, r0
 8001568:	607b      	str	r3, [r7, #4]
	return num;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}
 8001574:	0003243f 	.word	0x0003243f

08001578 <sign>:

//returns 1 if the number is negative, 0 if positive or 0
int32_t sign(int32_t num){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	return (num < 0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	0fdb      	lsrs	r3, r3, #31
 8001584:	b2db      	uxtb	r3, r3
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b0af      	sub	sp, #188	; 0xbc
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001596:	f001 f92d 	bl	80027f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159a:	f000 fc21 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159e:	f000 fe0d 	bl	80021bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80015a2:	f000 fd0d 	bl	8001fc0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015a6:	f000 fd75 	bl	8002094 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015aa:	f000 fdd3 	bl	8002154 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015ae:	f000 fc5f 	bl	8001e70 <MX_ADC1_Init>
  MX_SPI1_Init();
 80015b2:	f000 fcc7 	bl	8001f44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //Start timers and ADC
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015b6:	4b98      	ldr	r3, [pc, #608]	; (8001818 <main+0x288>)
 80015b8:	2100      	movs	r1, #0
 80015ba:	0018      	movs	r0, r3
 80015bc:	f003 fe28 	bl	8005210 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80015c0:	4b96      	ldr	r3, [pc, #600]	; (800181c <main+0x28c>)
 80015c2:	213c      	movs	r1, #60	; 0x3c
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 ffa3 	bl	8005510 <HAL_TIM_Encoder_Start>

  uint8_t rx[6] = { 0 };
 80015ca:	2528      	movs	r5, #40	; 0x28
 80015cc:	197b      	adds	r3, r7, r5
 80015ce:	0018      	movs	r0, r3
 80015d0:	2306      	movs	r3, #6
 80015d2:	001a      	movs	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f005 f919 	bl	800680c <memset>
  resetICM();
 80015da:	f7ff fe97 	bl	800130c <resetICM>
  spiSet(ACCEL_CONFIG0, 0x06);
 80015de:	2106      	movs	r1, #6
 80015e0:	2050      	movs	r0, #80	; 0x50
 80015e2:	f7ff febd 	bl	8001360 <spiSet>
  spiSet(GYRO_CONFIG0, 0x06);
 80015e6:	2106      	movs	r1, #6
 80015e8:	204f      	movs	r0, #79	; 0x4f
 80015ea:	f7ff feb9 	bl	8001360 <spiSet>
  spiSet(PWR_MGMT0, 0x0F);
 80015ee:	210f      	movs	r1, #15
 80015f0:	204e      	movs	r0, #78	; 0x4e
 80015f2:	f7ff feb5 	bl	8001360 <spiSet>
  HAL_Delay(45);
 80015f6:	202d      	movs	r0, #45	; 0x2d
 80015f8:	f001 f982 	bl	8002900 <HAL_Delay>
//  fix16_t Q = fix16_atan2(140351, 65536);
//  P = fix16_div(P,Q);
//  Q = fix16_mul(Q, fix16_from_int(2));
//  P = fix16_sqrt(P);

  printf("start\r\n");
 80015fc:	4b88      	ldr	r3, [pc, #544]	; (8001820 <main+0x290>)
 80015fe:	0018      	movs	r0, r3
 8001600:	f005 f986 	bl	8006910 <puts>
  pn();
 8001604:	f7ff ff42 	bl	800148c <pn>


  //variable definitions
  int16_t pos1, pos2, diff = 0;
 8001608:	23b4      	movs	r3, #180	; 0xb4
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]
  fix16_t angle, prevAngle, gyrAngle, accAngle = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	2294      	movs	r2, #148	; 0x94
 8001614:	18ba      	adds	r2, r7, r2
 8001616:	6013      	str	r3, [r2, #0]
  uint32_t start, end = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	22ac      	movs	r2, #172	; 0xac
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	6013      	str	r3, [r2, #0]
  uint8_t dir = 1;
 8001620:	2393      	movs	r3, #147	; 0x93
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
  uint32_t pulse = TIM3->CCR1;
 8001628:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <main+0x294>)
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	22a8      	movs	r2, #168	; 0xa8
 800162e:	18ba      	adds	r2, r7, r2
 8001630:	6013      	str	r3, [r2, #0]
  int32_t control, controlSignal = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	228c      	movs	r2, #140	; 0x8c
 8001636:	18ba      	adds	r2, r7, r2
 8001638:	6013      	str	r3, [r2, #0]
  int16_t a_i[3] = {0};
 800163a:	2320      	movs	r3, #32
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	0018      	movs	r0, r3
 8001640:	2306      	movs	r3, #6
 8001642:	001a      	movs	r2, r3
 8001644:	2100      	movs	r1, #0
 8001646:	f005 f8e1 	bl	800680c <memset>
  fix16_t a_f[3] = {0};
 800164a:	2314      	movs	r3, #20
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	0018      	movs	r0, r3
 8001650:	230c      	movs	r3, #12
 8001652:	001a      	movs	r2, r3
 8001654:	2100      	movs	r1, #0
 8001656:	f005 f8d9 	bl	800680c <memset>
  int16_t g_i[3] = {0};
 800165a:	230c      	movs	r3, #12
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	0018      	movs	r0, r3
 8001660:	2306      	movs	r3, #6
 8001662:	001a      	movs	r2, r3
 8001664:	2100      	movs	r1, #0
 8001666:	f005 f8d1 	bl	800680c <memset>
  fix16_t g_f[3] = {0};
 800166a:	003b      	movs	r3, r7
 800166c:	0018      	movs	r0, r3
 800166e:	230c      	movs	r3, #12
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f005 f8ca 	bl	800680c <memset>
  fix16_t error, errorInt, errorDiff = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	2288      	movs	r2, #136	; 0x88
 800167c:	18ba      	adds	r2, r7, r2
 800167e:	6013      	str	r3, [r2, #0]
  fix16_t speed = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	2284      	movs	r2, #132	; 0x84
 8001684:	18ba      	adds	r2, r7, r2
 8001686:	6013      	str	r3, [r2, #0]
  fix16_t speed1, speed2 = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	18ba      	adds	r2, r7, r2
 800168e:	6013      	str	r3, [r2, #0]
  fix16_t controlSpeed = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	67fb      	str	r3, [r7, #124]	; 0x7c
  fix16_t speedError, speedErrorInt, speedErrorDiff = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	67bb      	str	r3, [r7, #120]	; 0x78
  fix16_t prevSpeedError = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t firstRun = 1;
 800169c:	239b      	movs	r3, #155	; 0x9b
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]

  const uint32_t dt = 100;
 80016a4:	2364      	movs	r3, #100	; 0x64
 80016a6:	673b      	str	r3, [r7, #112]	; 0x70
  const fix16_t tau = fix16_from_int(1);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff fdb1 	bl	8001210 <fix16_from_int>
 80016ae:	0003      	movs	r3, r0
 80016b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  const fix16_t alpha = fix16_div(tau, fix16_add(tau, fix16_div(fix16_from_int(dt), fix16_from_int(1000))));
 80016b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff fdab 	bl	8001210 <fix16_from_int>
 80016ba:	0004      	movs	r4, r0
 80016bc:	23fa      	movs	r3, #250	; 0xfa
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff fda5 	bl	8001210 <fix16_from_int>
 80016c6:	0003      	movs	r3, r0
 80016c8:	0019      	movs	r1, r3
 80016ca:	0020      	movs	r0, r4
 80016cc:	f7ff fbb1 	bl	8000e32 <fix16_div>
 80016d0:	0002      	movs	r2, r0
 80016d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016d4:	0011      	movs	r1, r2
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff fb1a 	bl	8000d10 <fix16_add>
 80016dc:	0002      	movs	r2, r0
 80016de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7ff fba5 	bl	8000e32 <fix16_div>
 80016e8:	0003      	movs	r3, r0
 80016ea:	66bb      	str	r3, [r7, #104]	; 0x68
  const fix16_t accFactor = fix16_div(fix16_from_int(16), fix16_from_int(32768));
 80016ec:	2010      	movs	r0, #16
 80016ee:	f7ff fd8f 	bl	8001210 <fix16_from_int>
 80016f2:	0004      	movs	r4, r0
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fd89 	bl	8001210 <fix16_from_int>
 80016fe:	0003      	movs	r3, r0
 8001700:	0019      	movs	r1, r3
 8001702:	0020      	movs	r0, r4
 8001704:	f7ff fb95 	bl	8000e32 <fix16_div>
 8001708:	0003      	movs	r3, r0
 800170a:	667b      	str	r3, [r7, #100]	; 0x64
  const fix16_t gyrFactor = fix16_div(fix16_from_int(2000), fix16_from_int(32768));
 800170c:	23fa      	movs	r3, #250	; 0xfa
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff fd7d 	bl	8001210 <fix16_from_int>
 8001716:	0004      	movs	r4, r0
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fd77 	bl	8001210 <fix16_from_int>
 8001722:	0003      	movs	r3, r0
 8001724:	0019      	movs	r1, r3
 8001726:	0020      	movs	r0, r4
 8001728:	f7ff fb83 	bl	8000e32 <fix16_div>
 800172c:	0003      	movs	r3, r0
 800172e:	663b      	str	r3, [r7, #96]	; 0x60
  const fix16_t Kp = fix16_from_float(10.00);
 8001730:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <main+0x298>)
 8001732:	1c18      	adds	r0, r3, #0
 8001734:	f7ff fd9c 	bl	8001270 <fix16_from_float>
 8001738:	0003      	movs	r3, r0
 800173a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const fix16_t Ki = fix16_from_float(0.001);
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <main+0x29c>)
 800173e:	1c18      	adds	r0, r3, #0
 8001740:	f7ff fd96 	bl	8001270 <fix16_from_float>
 8001744:	0003      	movs	r3, r0
 8001746:	65bb      	str	r3, [r7, #88]	; 0x58
  const fix16_t Kd = fix16_from_float(1.000);
 8001748:	23fe      	movs	r3, #254	; 0xfe
 800174a:	059b      	lsls	r3, r3, #22
 800174c:	1c18      	adds	r0, r3, #0
 800174e:	f7ff fd8f 	bl	8001270 <fix16_from_float>
 8001752:	0003      	movs	r3, r0
 8001754:	657b      	str	r3, [r7, #84]	; 0x54
  const fix16_t Kp_s = fix16_from_float(10.00);
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <main+0x298>)
 8001758:	1c18      	adds	r0, r3, #0
 800175a:	f7ff fd89 	bl	8001270 <fix16_from_float>
 800175e:	0003      	movs	r3, r0
 8001760:	653b      	str	r3, [r7, #80]	; 0x50
  const fix16_t Ki_s = fix16_from_float(0.00);
 8001762:	2300      	movs	r3, #0
 8001764:	1c18      	adds	r0, r3, #0
 8001766:	f7ff fd83 	bl	8001270 <fix16_from_float>
 800176a:	0003      	movs	r3, r0
 800176c:	64fb      	str	r3, [r7, #76]	; 0x4c
  const fix16_t Kd_s = fix16_from_float(0.10);
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <main+0x2a0>)
 8001770:	1c18      	adds	r0, r3, #0
 8001772:	f7ff fd7d 	bl	8001270 <fix16_from_float>
 8001776:	0003      	movs	r3, r0
 8001778:	64bb      	str	r3, [r7, #72]	; 0x48

  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	482d      	ldr	r0, [pc, #180]	; (8001834 <main+0x2a4>)
 8001780:	2200      	movs	r2, #0
 8001782:	0019      	movs	r1, r3
 8001784:	f001 ff98 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001788:	23a0      	movs	r3, #160	; 0xa0
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	2200      	movs	r2, #0
 800178e:	2110      	movs	r1, #16
 8001790:	0018      	movs	r0, r3
 8001792:	f001 ff91 	bl	80036b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4826      	ldr	r0, [pc, #152]	; (8001834 <main+0x2a4>)
 800179c:	2201      	movs	r2, #1
 800179e:	0019      	movs	r1, r3
 80017a0:	f001 ff8a 	bl	80036b8 <HAL_GPIO_WritePin>
  waitUntilStop();
 80017a4:	f7ff fea6 	bl	80014f4 <waitUntilStop>
  TIM3->CCR1 = 100;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <main+0x294>)
 80017aa:	2264      	movs	r2, #100	; 0x64
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34

  spiGet(WHO_AM_I, rx, 1);
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	2201      	movs	r2, #1
 80017b2:	0019      	movs	r1, r3
 80017b4:	2075      	movs	r0, #117	; 0x75
 80017b6:	f7ff fe05 	bl	80013c4 <spiGet>
  printf("WHO_AM_I: %d\r\n", rx[0]);
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	001a      	movs	r2, r3
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <main+0x2a8>)
 80017c2:	0011      	movs	r1, r2
 80017c4:	0018      	movs	r0, r3
 80017c6:	f005 f829 	bl	800681c <iprintf>
  HAL_Delay(1000);
 80017ca:	23fa      	movs	r3, #250	; 0xfa
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f001 f896 	bl	8002900 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  start = HAL_GetTick();
 80017d4:	f001 f88a 	bl	80028ec <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44

	  pos1 = pos2;
 80017dc:	2042      	movs	r0, #66	; 0x42
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	21b6      	movs	r1, #182	; 0xb6
 80017e2:	187a      	adds	r2, r7, r1
 80017e4:	8812      	ldrh	r2, [r2, #0]
 80017e6:	801a      	strh	r2, [r3, #0]
	  pos2 = TIM1 -> CNT;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <main+0x2ac>)
 80017ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ec:	187b      	adds	r3, r7, r1
 80017ee:	801a      	strh	r2, [r3, #0]
	  diff = pos2 - pos1;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	183b      	adds	r3, r7, r0
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	21b4      	movs	r1, #180	; 0xb4
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	801a      	strh	r2, [r3, #0]
	  if (diff < 0) diff += 65536;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	5e9b      	ldrsh	r3, [r3, r2]
 8001808:	2b00      	cmp	r3, #0
 800180a:	da19      	bge.n	8001840 <main+0x2b0>
 800180c:	22b4      	movs	r2, #180	; 0xb4
 800180e:	18bb      	adds	r3, r7, r2
 8001810:	18ba      	adds	r2, r7, r2
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	801a      	strh	r2, [r3, #0]
 8001816:	e013      	b.n	8001840 <main+0x2b0>
 8001818:	20000098 	.word	0x20000098
 800181c:	20000148 	.word	0x20000148
 8001820:	08007748 	.word	0x08007748
 8001824:	40000400 	.word	0x40000400
 8001828:	41200000 	.word	0x41200000
 800182c:	3a83126f 	.word	0x3a83126f
 8001830:	3dcccccd 	.word	0x3dcccccd
 8001834:	50000400 	.word	0x50000400
 8001838:	08007750 	.word	0x08007750
 800183c:	40012c00 	.word	0x40012c00

	  spiGet(ACCEL_DATA_X1, rx, 6);
 8001840:	2428      	movs	r4, #40	; 0x28
 8001842:	193b      	adds	r3, r7, r4
 8001844:	2206      	movs	r2, #6
 8001846:	0019      	movs	r1, r3
 8001848:	201f      	movs	r0, #31
 800184a:	f7ff fdbb 	bl	80013c4 <spiGet>

	  a_i[0] = (rx[0] << 8) | rx[1];
 800184e:	193b      	adds	r3, r7, r4
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21a      	sxth	r2, r3
 8001856:	193b      	adds	r3, r7, r4
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	2120      	movs	r1, #32
 8001862:	187b      	adds	r3, r7, r1
 8001864:	801a      	strh	r2, [r3, #0]
	  a_i[1] = (rx[2] << 8) | rx[3];
 8001866:	193b      	adds	r3, r7, r4
 8001868:	789b      	ldrb	r3, [r3, #2]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21a      	sxth	r2, r3
 800186e:	193b      	adds	r3, r7, r4
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	b21b      	sxth	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b21a      	sxth	r2, r3
 8001878:	187b      	adds	r3, r7, r1
 800187a:	805a      	strh	r2, [r3, #2]
	  a_i[2] = (rx[4] << 8) | rx[5];
 800187c:	193b      	adds	r3, r7, r4
 800187e:	791b      	ldrb	r3, [r3, #4]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	193b      	adds	r3, r7, r4
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	b21b      	sxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b21a      	sxth	r2, r3
 800188e:	000d      	movs	r5, r1
 8001890:	197b      	adds	r3, r7, r5
 8001892:	809a      	strh	r2, [r3, #4]

	  a_f[0] = fix16_mul(fix16_from_int(a_i[0]), accFactor);
 8001894:	197b      	adds	r3, r7, r5
 8001896:	2200      	movs	r2, #0
 8001898:	5e9b      	ldrsh	r3, [r3, r2]
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fcb8 	bl	8001210 <fix16_from_int>
 80018a0:	0002      	movs	r2, r0
 80018a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a4:	0019      	movs	r1, r3
 80018a6:	0010      	movs	r0, r2
 80018a8:	f7ff fa6c 	bl	8000d84 <fix16_mul>
 80018ac:	0002      	movs	r2, r0
 80018ae:	2614      	movs	r6, #20
 80018b0:	19bb      	adds	r3, r7, r6
 80018b2:	601a      	str	r2, [r3, #0]
	  a_f[1] = fix16_mul(fix16_from_int(a_i[1]), accFactor);
 80018b4:	197b      	adds	r3, r7, r5
 80018b6:	2202      	movs	r2, #2
 80018b8:	5e9b      	ldrsh	r3, [r3, r2]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fca8 	bl	8001210 <fix16_from_int>
 80018c0:	0002      	movs	r2, r0
 80018c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018c4:	0019      	movs	r1, r3
 80018c6:	0010      	movs	r0, r2
 80018c8:	f7ff fa5c 	bl	8000d84 <fix16_mul>
 80018cc:	0002      	movs	r2, r0
 80018ce:	19bb      	adds	r3, r7, r6
 80018d0:	605a      	str	r2, [r3, #4]
	  a_f[2] = fix16_mul(fix16_from_int(a_i[2]), accFactor);
 80018d2:	197b      	adds	r3, r7, r5
 80018d4:	2204      	movs	r2, #4
 80018d6:	5e9b      	ldrsh	r3, [r3, r2]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff fc99 	bl	8001210 <fix16_from_int>
 80018de:	0002      	movs	r2, r0
 80018e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018e2:	0019      	movs	r1, r3
 80018e4:	0010      	movs	r0, r2
 80018e6:	f7ff fa4d 	bl	8000d84 <fix16_mul>
 80018ea:	0002      	movs	r2, r0
 80018ec:	0035      	movs	r5, r6
 80018ee:	197b      	adds	r3, r7, r5
 80018f0:	609a      	str	r2, [r3, #8]

	  spiGet(GYRO_DATA_X1, rx, 6);
 80018f2:	0021      	movs	r1, r4
 80018f4:	000c      	movs	r4, r1
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2206      	movs	r2, #6
 80018fa:	0019      	movs	r1, r3
 80018fc:	2025      	movs	r0, #37	; 0x25
 80018fe:	f7ff fd61 	bl	80013c4 <spiGet>

	  g_i[0] = (rx[0] << 8) | rx[1];
 8001902:	0021      	movs	r1, r4
 8001904:	187b      	adds	r3, r7, r1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	187b      	adds	r3, r7, r1
 800190e:	785b      	ldrb	r3, [r3, #1]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21a      	sxth	r2, r3
 8001916:	200c      	movs	r0, #12
 8001918:	183b      	adds	r3, r7, r0
 800191a:	801a      	strh	r2, [r3, #0]
	  g_i[1] = (rx[2] << 8) | rx[3];
 800191c:	187b      	adds	r3, r7, r1
 800191e:	789b      	ldrb	r3, [r3, #2]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	187b      	adds	r3, r7, r1
 8001926:	78db      	ldrb	r3, [r3, #3]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21a      	sxth	r2, r3
 800192e:	183b      	adds	r3, r7, r0
 8001930:	805a      	strh	r2, [r3, #2]
	  g_i[2] = (rx[4] << 8) | rx[5];
 8001932:	187b      	adds	r3, r7, r1
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	187b      	adds	r3, r7, r1
 800193c:	795b      	ldrb	r3, [r3, #5]
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21a      	sxth	r2, r3
 8001944:	0004      	movs	r4, r0
 8001946:	193b      	adds	r3, r7, r4
 8001948:	809a      	strh	r2, [r3, #4]

	  g_f[0] = fix16_mul(fix16_from_int(g_i[0]), gyrFactor);
 800194a:	193b      	adds	r3, r7, r4
 800194c:	2200      	movs	r2, #0
 800194e:	5e9b      	ldrsh	r3, [r3, r2]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fc5d 	bl	8001210 <fix16_from_int>
 8001956:	0002      	movs	r2, r0
 8001958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800195a:	0019      	movs	r1, r3
 800195c:	0010      	movs	r0, r2
 800195e:	f7ff fa11 	bl	8000d84 <fix16_mul>
 8001962:	0002      	movs	r2, r0
 8001964:	003b      	movs	r3, r7
 8001966:	601a      	str	r2, [r3, #0]
	  g_f[1] = fix16_mul(fix16_from_int(g_i[1]), gyrFactor);
 8001968:	193b      	adds	r3, r7, r4
 800196a:	2202      	movs	r2, #2
 800196c:	5e9b      	ldrsh	r3, [r3, r2]
 800196e:	0018      	movs	r0, r3
 8001970:	f7ff fc4e 	bl	8001210 <fix16_from_int>
 8001974:	0002      	movs	r2, r0
 8001976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001978:	0019      	movs	r1, r3
 800197a:	0010      	movs	r0, r2
 800197c:	f7ff fa02 	bl	8000d84 <fix16_mul>
 8001980:	0002      	movs	r2, r0
 8001982:	003b      	movs	r3, r7
 8001984:	605a      	str	r2, [r3, #4]
	  g_f[2] = fix16_mul(fix16_from_int(g_i[2]), gyrFactor);
 8001986:	193b      	adds	r3, r7, r4
 8001988:	2204      	movs	r2, #4
 800198a:	5e9b      	ldrsh	r3, [r3, r2]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fc3f 	bl	8001210 <fix16_from_int>
 8001992:	0002      	movs	r2, r0
 8001994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001996:	0019      	movs	r1, r3
 8001998:	0010      	movs	r0, r2
 800199a:	f7ff f9f3 	bl	8000d84 <fix16_mul>
 800199e:	0002      	movs	r2, r0
 80019a0:	003b      	movs	r3, r7
 80019a2:	609a      	str	r2, [r3, #8]

	  prevAngle = angle;
 80019a4:	23b0      	movs	r3, #176	; 0xb0
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	  accAngle = fix16_atan2(-a_f[0], -a_f[1]);
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	425a      	negs	r2, r3
 80019b2:	197b      	adds	r3, r7, r5
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	425b      	negs	r3, r3
 80019b8:	0019      	movs	r1, r3
 80019ba:	0010      	movs	r0, r2
 80019bc:	f7ff fbac 	bl	8001118 <fix16_atan2>
 80019c0:	0003      	movs	r3, r0
 80019c2:	2494      	movs	r4, #148	; 0x94
 80019c4:	193a      	adds	r2, r7, r4
 80019c6:	6013      	str	r3, [r2, #0]
	  accAngle = rad2deg(accAngle);
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff fdb5 	bl	800153c <rad2deg>
 80019d2:	0003      	movs	r3, r0
 80019d4:	193a      	adds	r2, r7, r4
 80019d6:	6013      	str	r3, [r2, #0]

	  if (firstRun){
 80019d8:	239b      	movs	r3, #155	; 0x9b
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <main+0x464>
		  gyrAngle = accAngle;
 80019e2:	2294      	movs	r2, #148	; 0x94
 80019e4:	18bb      	adds	r3, r7, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
		  angle = accAngle;
 80019ea:	18bb      	adds	r3, r7, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	22b0      	movs	r2, #176	; 0xb0
 80019f0:	18ba      	adds	r2, r7, r2
 80019f2:	6013      	str	r3, [r2, #0]
	  }

	  gyrAngle = fix16_add(angle, fix16_mul(-g_f[2], fix16_div(fix16_from_int(dt), fix16_from_int(1000))));
 80019f4:	003b      	movs	r3, r7
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	425c      	negs	r4, r3
 80019fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fc07 	bl	8001210 <fix16_from_int>
 8001a02:	0005      	movs	r5, r0
 8001a04:	23fa      	movs	r3, #250	; 0xfa
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fc01 	bl	8001210 <fix16_from_int>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	0019      	movs	r1, r3
 8001a12:	0028      	movs	r0, r5
 8001a14:	f7ff fa0d 	bl	8000e32 <fix16_div>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	0020      	movs	r0, r4
 8001a1e:	f7ff f9b1 	bl	8000d84 <fix16_mul>
 8001a22:	0002      	movs	r2, r0
 8001a24:	25b0      	movs	r5, #176	; 0xb0
 8001a26:	197b      	adds	r3, r7, r5
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff f96f 	bl	8000d10 <fix16_add>
 8001a32:	0003      	movs	r3, r0
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38

	  angle = fix16_add(fix16_mul(alpha, gyrAngle), fix16_mul(fix16_sub(fix16_one, alpha), accAngle));
 8001a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff f9a1 	bl	8000d84 <fix16_mul>
 8001a42:	0004      	movs	r4, r0
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff f97c 	bl	8000d4a <fix16_sub>
 8001a52:	0002      	movs	r2, r0
 8001a54:	2394      	movs	r3, #148	; 0x94
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	0010      	movs	r0, r2
 8001a5e:	f7ff f991 	bl	8000d84 <fix16_mul>
 8001a62:	0003      	movs	r3, r0
 8001a64:	0019      	movs	r1, r3
 8001a66:	0020      	movs	r0, r4
 8001a68:	f7ff f952 	bl	8000d10 <fix16_add>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	197a      	adds	r2, r7, r5
 8001a70:	6013      	str	r3, [r2, #0]
	  //printf16(angle, 4);
	  //pn();

	  //HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);

	  speed = fix16_div(fix16_from_int(diff), fix16_from_int(200));
 8001a72:	23b4      	movs	r3, #180	; 0xb4
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2200      	movs	r2, #0
 8001a78:	5e9b      	ldrsh	r3, [r3, r2]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fbc8 	bl	8001210 <fix16_from_int>
 8001a80:	0004      	movs	r4, r0
 8001a82:	20c8      	movs	r0, #200	; 0xc8
 8001a84:	f7ff fbc4 	bl	8001210 <fix16_from_int>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	f7ff f9d0 	bl	8000e32 <fix16_div>
 8001a92:	0003      	movs	r3, r0
 8001a94:	2484      	movs	r4, #132	; 0x84
 8001a96:	193a      	adds	r2, r7, r4
 8001a98:	6013      	str	r3, [r2, #0]
	  speed = fix16_mul(speed, fix16_from_int(1000/dt));
 8001a9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001a9c:	23fa      	movs	r3, #250	; 0xfa
 8001a9e:	0098      	lsls	r0, r3, #2
 8001aa0:	f7fe fb2e 	bl	8000100 <__udivsi3>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff fbb2 	bl	8001210 <fix16_from_int>
 8001aac:	0002      	movs	r2, r0
 8001aae:	193b      	adds	r3, r7, r4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff f965 	bl	8000d84 <fix16_mul>
 8001aba:	0003      	movs	r3, r0
 8001abc:	193a      	adds	r2, r7, r4
 8001abe:	6013      	str	r3, [r2, #0]

	  error = angle;
 8001ac0:	197b      	adds	r3, r7, r5
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
	  errorDiff = fix16_sub(angle, prevAngle);
 8001ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ac8:	197b      	adds	r3, r7, r5
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0011      	movs	r1, r2
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7ff f93b 	bl	8000d4a <fix16_sub>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	2688      	movs	r6, #136	; 0x88
 8001ad8:	19ba      	adds	r2, r7, r6
 8001ada:	6013      	str	r3, [r2, #0]
	  errorInt += error;
 8001adc:	25a4      	movs	r5, #164	; 0xa4
 8001ade:	197b      	adds	r3, r7, r5
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	18d3      	adds	r3, r2, r3
 8001ae6:	197a      	adds	r2, r7, r5
 8001ae8:	6013      	str	r3, [r2, #0]
	  control = fix16_to_int(fix16_add(fix16_add(fix16_mul(Kp, error), fix16_mul(Ki, errorInt)), fix16_mul(Kd, errorDiff)));
 8001aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aee:	0011      	movs	r1, r2
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff f947 	bl	8000d84 <fix16_mul>
 8001af6:	0004      	movs	r4, r0
 8001af8:	197b      	adds	r3, r7, r5
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff f93f 	bl	8000d84 <fix16_mul>
 8001b06:	0003      	movs	r3, r0
 8001b08:	0019      	movs	r1, r3
 8001b0a:	0020      	movs	r0, r4
 8001b0c:	f7ff f900 	bl	8000d10 <fix16_add>
 8001b10:	0004      	movs	r4, r0
 8001b12:	19bb      	adds	r3, r7, r6
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	0011      	movs	r1, r2
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff f932 	bl	8000d84 <fix16_mul>
 8001b20:	0003      	movs	r3, r0
 8001b22:	0019      	movs	r1, r3
 8001b24:	0020      	movs	r0, r4
 8001b26:	f7ff f8f3 	bl	8000d10 <fix16_add>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fb7b 	bl	8001228 <fix16_to_int>
 8001b32:	0003      	movs	r3, r0
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30

	  control = MAX(MIN(control, 100), -100);
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	3363      	adds	r3, #99	; 0x63
 8001b3a:	db04      	blt.n	8001b46 <main+0x5b6>
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	dd03      	ble.n	8001b4a <main+0x5ba>
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	e001      	b.n	8001b4a <main+0x5ba>
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	425b      	negs	r3, r3
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
//		  waitUntilStop();
//		  dir = !sign(control);
//		  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, dir);
//	  }

	  controlSpeed = fix16_mul(fix16_from_int(control), fix16_from_float(36 / 100.0));
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff fb5e 	bl	8001210 <fix16_from_int>
 8001b54:	0004      	movs	r4, r0
 8001b56:	4b9d      	ldr	r3, [pc, #628]	; (8001dcc <main+0x83c>)
 8001b58:	1c18      	adds	r0, r3, #0
 8001b5a:	f7ff fb89 	bl	8001270 <fix16_from_float>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	0019      	movs	r1, r3
 8001b62:	0020      	movs	r0, r4
 8001b64:	f7ff f90e 	bl	8000d84 <fix16_mul>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
	  prevSpeedError = speedError;
 8001b6c:	24a0      	movs	r4, #160	; 0xa0
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	677b      	str	r3, [r7, #116]	; 0x74
	  speedError = fix16_sub(controlSpeed, speed);
 8001b74:	2384      	movs	r3, #132	; 0x84
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7ff f8e3 	bl	8000d4a <fix16_sub>
 8001b84:	0003      	movs	r3, r0
 8001b86:	193a      	adds	r2, r7, r4
 8001b88:	6013      	str	r3, [r2, #0]
	  speedErrorDiff = fix16_sub(speedError, prevSpeedError);
 8001b8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b8c:	193b      	adds	r3, r7, r4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0011      	movs	r1, r2
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff f8d9 	bl	8000d4a <fix16_sub>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	67bb      	str	r3, [r7, #120]	; 0x78
	  speedErrorInt += speedError;
 8001b9c:	219c      	movs	r1, #156	; 0x9c
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	18d3      	adds	r3, r2, r3
 8001ba8:	000d      	movs	r5, r1
 8001baa:	187a      	adds	r2, r7, r1
 8001bac:	6013      	str	r3, [r2, #0]
	  controlSignal = fix16_add(fix16_add(fix16_mul(Kp_s, speedError), fix16_mul(Ki_s, speedErrorInt)), fix16_mul(Kd_s, speedErrorDiff));
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb4:	0011      	movs	r1, r2
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff f8e4 	bl	8000d84 <fix16_mul>
 8001bbc:	0004      	movs	r4, r0
 8001bbe:	0029      	movs	r1, r5
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7ff f8db 	bl	8000d84 <fix16_mul>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f7ff f89c 	bl	8000d10 <fix16_add>
 8001bd8:	0004      	movs	r4, r0
 8001bda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff f8cf 	bl	8000d84 <fix16_mul>
 8001be6:	0003      	movs	r3, r0
 8001be8:	0019      	movs	r1, r3
 8001bea:	0020      	movs	r0, r4
 8001bec:	f7ff f890 	bl	8000d10 <fix16_add>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	248c      	movs	r4, #140	; 0x8c
 8001bf4:	193a      	adds	r2, r7, r4
 8001bf6:	6013      	str	r3, [r2, #0]

	  controlSignal = fix16_mul(controlSignal, fix16_from_float(100 / 36.0));
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <main+0x840>)
 8001bfa:	1c18      	adds	r0, r3, #0
 8001bfc:	f7ff fb38 	bl	8001270 <fix16_from_float>
 8001c00:	0002      	movs	r2, r0
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff f8bb 	bl	8000d84 <fix16_mul>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	193a      	adds	r2, r7, r4
 8001c12:	6013      	str	r3, [r2, #0]
	  controlSignal = MAX(MIN(controlSignal, fix16_from_int(100)), fix16_from_int(-100));
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f7ff fafb 	bl	8001210 <fix16_from_int>
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	db04      	blt.n	8001c2e <main+0x69e>
 8001c24:	2064      	movs	r0, #100	; 0x64
 8001c26:	f7ff faf3 	bl	8001210 <fix16_from_int>
 8001c2a:	0004      	movs	r4, r0
 8001c2c:	e002      	b.n	8001c34 <main+0x6a4>
 8001c2e:	238c      	movs	r3, #140	; 0x8c
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	681c      	ldr	r4, [r3, #0]
 8001c34:	2364      	movs	r3, #100	; 0x64
 8001c36:	425b      	negs	r3, r3
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fae9 	bl	8001210 <fix16_from_int>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	429c      	cmp	r4, r3
 8001c42:	dd11      	ble.n	8001c68 <main+0x6d8>
 8001c44:	2064      	movs	r0, #100	; 0x64
 8001c46:	f7ff fae3 	bl	8001210 <fix16_from_int>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	238c      	movs	r3, #140	; 0x8c
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	db04      	blt.n	8001c60 <main+0x6d0>
 8001c56:	2064      	movs	r0, #100	; 0x64
 8001c58:	f7ff fada 	bl	8001210 <fix16_from_int>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	e009      	b.n	8001c74 <main+0x6e4>
 8001c60:	238c      	movs	r3, #140	; 0x8c
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	e005      	b.n	8001c74 <main+0x6e4>
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff facf 	bl	8001210 <fix16_from_int>
 8001c72:	0003      	movs	r3, r0
 8001c74:	248c      	movs	r4, #140	; 0x8c
 8001c76:	193a      	adds	r2, r7, r4
 8001c78:	6013      	str	r3, [r2, #0]
	  controlSignal = fix16_to_int(controlSignal);
 8001c7a:	193b      	adds	r3, r7, r4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff fad2 	bl	8001228 <fix16_to_int>
 8001c84:	0003      	movs	r3, r0
 8001c86:	193a      	adds	r2, r7, r4
 8001c88:	6013      	str	r3, [r2, #0]

	  if (fix16_sub(fix16_abs(fix16_from_int(controlSignal)), fix16_abs(speed)) > 0 && ((sign(controlSignal) == sign(speed)) || speed == 0)) {
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff fabe 	bl	8001210 <fix16_from_int>
 8001c94:	0003      	movs	r3, r0
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff fb13 	bl	80012c2 <fix16_abs>
 8001c9c:	0004      	movs	r4, r0
 8001c9e:	2384      	movs	r3, #132	; 0x84
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff fb0c 	bl	80012c2 <fix16_abs>
 8001caa:	0003      	movs	r3, r0
 8001cac:	0019      	movs	r1, r3
 8001cae:	0020      	movs	r0, r4
 8001cb0:	f7ff f84b 	bl	8000d4a <fix16_sub>
 8001cb4:	1e03      	subs	r3, r0, #0
 8001cb6:	dd27      	ble.n	8001d08 <main+0x778>
 8001cb8:	238c      	movs	r3, #140	; 0x8c
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff fc5a 	bl	8001578 <sign>
 8001cc4:	0004      	movs	r4, r0
 8001cc6:	2384      	movs	r3, #132	; 0x84
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff fc53 	bl	8001578 <sign>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	429c      	cmp	r4, r3
 8001cd6:	d004      	beq.n	8001ce2 <main+0x752>
 8001cd8:	2384      	movs	r3, #132	; 0x84
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d112      	bne.n	8001d08 <main+0x778>
		  pulse = 100 - (controlSignal * (1-2*(controlSignal<0)));
 8001ce2:	218c      	movs	r1, #140	; 0x8c
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	179b      	asrs	r3, r3, #30
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	2201      	movs	r2, #1
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	187a      	adds	r2, r7, r1
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4353      	muls	r3, r2
 8001cf8:	2264      	movs	r2, #100	; 0x64
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	22a8      	movs	r2, #168	; 0xa8
 8001cfe:	18ba      	adds	r2, r7, r2
 8001d00:	6013      	str	r3, [r2, #0]
		  brakeOff();
 8001d02:	f7ff fbe9 	bl	80014d8 <brakeOff>
 8001d06:	e005      	b.n	8001d14 <main+0x784>
	  } else {
		  pulse = 100;
 8001d08:	2364      	movs	r3, #100	; 0x64
 8001d0a:	22a8      	movs	r2, #168	; 0xa8
 8001d0c:	18ba      	adds	r2, r7, r2
 8001d0e:	6013      	str	r3, [r2, #0]
		  brakeOn();
 8001d10:	f7ff fbd4 	bl	80014bc <brakeOn>
	  }

	  if (speed == 0) {
 8001d14:	2384      	movs	r3, #132	; 0x84
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d112      	bne.n	8001d44 <main+0x7b4>
		  dir = !sign(controlSpeed);
 8001d1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fc29 	bl	8001578 <sign>
 8001d26:	0003      	movs	r3, r0
 8001d28:	425a      	negs	r2, r3
 8001d2a:	4153      	adcs	r3, r2
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	2193      	movs	r1, #147	; 0x93
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, dir);
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4825      	ldr	r0, [pc, #148]	; (8001dd4 <main+0x844>)
 8001d3e:	0019      	movs	r1, r3
 8001d40:	f001 fcba 	bl	80036b8 <HAL_GPIO_WritePin>
	  }

	  TIM3->CCR1 = pulse;
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <main+0x848>)
 8001d46:	22a8      	movs	r2, #168	; 0xa8
 8001d48:	18ba      	adds	r2, r7, r2
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34
//	  printf16(controlSpeed, 2);
//	  pn();


	  //TIM3->CCR1 = 80;
	  printf("%d, ", HAL_GetTick());
 8001d4e:	f000 fdcd 	bl	80028ec <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <main+0x84c>)
 8001d56:	0011      	movs	r1, r2
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f004 fd5f 	bl	800681c <iprintf>
	  printf16(accAngle, 2);
 8001d5e:	2394      	movs	r3, #148	; 0x94
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2102      	movs	r1, #2
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff fb64 	bl	8001434 <printf16>
	  pc();
 8001d6c:	f7ff fb9a 	bl	80014a4 <pc>
	  printf16(gyrAngle, 2);
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	2102      	movs	r1, #2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fb5d 	bl	8001434 <printf16>
	  pc();
 8001d7a:	f7ff fb93 	bl	80014a4 <pc>
	  printf16(angle, 2);
 8001d7e:	23b0      	movs	r3, #176	; 0xb0
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2102      	movs	r1, #2
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fb54 	bl	8001434 <printf16>
	  pn();
 8001d8c:	f7ff fb7e 	bl	800148c <pn>

	  end = HAL_GetTick();
 8001d90:	f000 fdac 	bl	80028ec <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	22ac      	movs	r2, #172	; 0xac
 8001d98:	18ba      	adds	r2, r7, r2
 8001d9a:	6013      	str	r3, [r2, #0]
	  while (end-start < dt){
 8001d9c:	e008      	b.n	8001db0 <main+0x820>
		  HAL_Delay(0);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f000 fdae 	bl	8002900 <HAL_Delay>
		  end = HAL_GetTick();
 8001da4:	f000 fda2 	bl	80028ec <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	22ac      	movs	r2, #172	; 0xac
 8001dac:	18ba      	adds	r2, r7, r2
 8001dae:	6013      	str	r3, [r2, #0]
	  while (end-start < dt){
 8001db0:	23ac      	movs	r3, #172	; 0xac
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8ee      	bhi.n	8001d9e <main+0x80e>
	  }

	  firstRun = 0;
 8001dc0:	239b      	movs	r3, #155	; 0x9b
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
	  start = HAL_GetTick();
 8001dc8:	e504      	b.n	80017d4 <main+0x244>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	3eb851ec 	.word	0x3eb851ec
 8001dd0:	4031c71c 	.word	0x4031c71c
 8001dd4:	50000400 	.word	0x50000400
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	08007760 	.word	0x08007760

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b093      	sub	sp, #76	; 0x4c
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	2414      	movs	r4, #20
 8001de8:	193b      	adds	r3, r7, r4
 8001dea:	0018      	movs	r0, r3
 8001dec:	2334      	movs	r3, #52	; 0x34
 8001dee:	001a      	movs	r2, r3
 8001df0:	2100      	movs	r1, #0
 8001df2:	f004 fd0b 	bl	800680c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	0018      	movs	r0, r3
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	2100      	movs	r1, #0
 8001e00:	f004 fd04 	bl	800680c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f001 fc73 	bl	80036f4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e28:	193b      	adds	r3, r7, r4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2e:	193b      	adds	r3, r7, r4
 8001e30:	0018      	movs	r0, r3
 8001e32:	f001 fcab 	bl	800378c <HAL_RCC_OscConfig>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001e3a:	f000 fa31 	bl	80022a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2100      	movs	r1, #0
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f001 ffac 	bl	8003db8 <HAL_RCC_ClockConfig>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d001      	beq.n	8001e68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001e64:	f000 fa1c 	bl	80022a0 <Error_Handler>
  }
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b013      	add	sp, #76	; 0x4c
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	0018      	movs	r0, r3
 8001e7a:	230c      	movs	r3, #12
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f004 fcc4 	bl	800680c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <MX_ADC1_Init+0xd0>)
 8001e88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	05d2      	lsls	r2, r2, #23
 8001e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ed8:	222c      	movs	r2, #44	; 0x2c
 8001eda:	2100      	movs	r1, #0
 8001edc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001ef2:	223c      	movs	r2, #60	; 0x3c
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 fe07 	bl	8002b14 <HAL_ADC_Init>
 8001f06:	1e03      	subs	r3, r0, #0
 8001f08:	d001      	beq.n	8001f0e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001f0a:	f000 f9c9 	bl	80022a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f20:	1d3a      	adds	r2, r7, #4
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_ADC1_Init+0xcc>)
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 ffd6 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001f2c:	1e03      	subs	r3, r0, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001f30:	f000 f9b6 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200000e4 	.word	0x200000e4
 8001f40:	40012400 	.word	0x40012400

08001f44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <MX_SPI1_Init+0x78>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f50:	2282      	movs	r2, #130	; 0x82
 8001f52:	0052      	lsls	r2, r2, #1
 8001f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f5e:	22e0      	movs	r2, #224	; 0xe0
 8001f60:	00d2      	lsls	r2, r2, #3
 8001f62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f92:	2207      	movs	r2, #7
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <MX_SPI1_Init+0x74>)
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f002 f9d7 	bl	8004358 <HAL_SPI_Init>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001fae:	f000 f977 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000194 	.word	0x20000194
 8001fbc:	40013000 	.word	0x40013000

08001fc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b08d      	sub	sp, #52	; 0x34
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc6:	240c      	movs	r4, #12
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	0018      	movs	r0, r3
 8001fcc:	2324      	movs	r3, #36	; 0x24
 8001fce:	001a      	movs	r2, r3
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	f004 fc1b 	bl	800680c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd6:	003b      	movs	r3, r7
 8001fd8:	0018      	movs	r0, r3
 8001fda:	230c      	movs	r3, #12
 8001fdc:	001a      	movs	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f004 fc14 	bl	800680c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <MX_TIM1_Init+0xc8>)
 8001fe6:	4a29      	ldr	r2, [pc, #164]	; (800208c <MX_TIM1_Init+0xcc>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <MX_TIM1_Init+0xc8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <MX_TIM1_Init+0xc8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <MX_TIM1_Init+0xc8>)
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <MX_TIM1_Init+0xd0>)
 8001ffa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <MX_TIM1_Init+0xc8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MX_TIM1_Init+0xc8>)
 8002004:	2200      	movs	r2, #0
 8002006:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <MX_TIM1_Init+0xc8>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800200e:	0021      	movs	r1, r4
 8002010:	187b      	adds	r3, r7, r1
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002016:	187b      	adds	r3, r7, r1
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	2201      	movs	r2, #1
 8002020:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2200      	movs	r2, #0
 8002026:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202e:	187b      	adds	r3, r7, r1
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2201      	movs	r2, #1
 8002038:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203a:	187b      	adds	r3, r7, r1
 800203c:	2200      	movs	r2, #0
 800203e:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002046:	187a      	adds	r2, r7, r1
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_TIM1_Init+0xc8>)
 800204a:	0011      	movs	r1, r2
 800204c:	0018      	movs	r0, r3
 800204e:	f003 f9b7 	bl	80053c0 <HAL_TIM_Encoder_Init>
 8002052:	1e03      	subs	r3, r0, #0
 8002054:	d001      	beq.n	800205a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002056:	f000 f923 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	003b      	movs	r3, r7
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002060:	003b      	movs	r3, r7
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	003b      	movs	r3, r7
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800206c:	003a      	movs	r2, r7
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_TIM1_Init+0xc8>)
 8002070:	0011      	movs	r1, r2
 8002072:	0018      	movs	r0, r3
 8002074:	f003 ff14 	bl	8005ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002078:	1e03      	subs	r3, r0, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800207c:	f000 f910 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b00d      	add	sp, #52	; 0x34
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	20000148 	.word	0x20000148
 800208c:	40012c00 	.word	0x40012c00
 8002090:	0000ffff 	.word	0x0000ffff

08002094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209a:	231c      	movs	r3, #28
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	0018      	movs	r0, r3
 80020a0:	230c      	movs	r3, #12
 80020a2:	001a      	movs	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	f004 fbb1 	bl	800680c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	003b      	movs	r3, r7
 80020ac:	0018      	movs	r0, r3
 80020ae:	231c      	movs	r3, #28
 80020b0:	001a      	movs	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f004 fbaa 	bl	800680c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <MX_TIM3_Init+0xb8>)
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <MX_TIM3_Init+0xbc>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <MX_TIM3_Init+0xb8>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <MX_TIM3_Init+0xb8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_TIM3_Init+0xb8>)
 80020cc:	2263      	movs	r2, #99	; 0x63
 80020ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <MX_TIM3_Init+0xb8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_TIM3_Init+0xb8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <MX_TIM3_Init+0xb8>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f003 f83e 	bl	8005160 <HAL_TIM_PWM_Init>
 80020e4:	1e03      	subs	r3, r0, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80020e8:	f000 f8da 	bl	80022a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	211c      	movs	r1, #28
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020fa:	187a      	adds	r2, r7, r1
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <MX_TIM3_Init+0xb8>)
 80020fe:	0011      	movs	r1, r2
 8002100:	0018      	movs	r0, r3
 8002102:	f003 fecd 	bl	8005ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d001      	beq.n	800210e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800210a:	f000 f8c9 	bl	80022a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210e:	003b      	movs	r3, r7
 8002110:	2260      	movs	r2, #96	; 0x60
 8002112:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002114:	003b      	movs	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211a:	003b      	movs	r3, r7
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002120:	003b      	movs	r3, r7
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002126:	0039      	movs	r1, r7
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_TIM3_Init+0xb8>)
 800212a:	2200      	movs	r2, #0
 800212c:	0018      	movs	r0, r3
 800212e:	f003 fa95 	bl	800565c <HAL_TIM_PWM_ConfigChannel>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d001      	beq.n	800213a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8002136:	f000 f8b3 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <MX_TIM3_Init+0xb8>)
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fa0d 	bl	800255c <HAL_TIM_MspPostInit>

}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	b00a      	add	sp, #40	; 0x28
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	20000098 	.word	0x20000098
 8002150:	40000400 	.word	0x40000400

08002154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 800215a:	4a17      	ldr	r2, [pc, #92]	; (80021b8 <MX_USART2_UART_Init+0x64>)
 800215c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002160:	22e1      	movs	r2, #225	; 0xe1
 8002162:	0252      	lsls	r2, r2, #9
 8002164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 800217a:	220c      	movs	r2, #12
 800217c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <MX_USART2_UART_Init+0x60>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f003 fee0 	bl	8005f64 <HAL_UART_Init>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80021a8:	f000 f87a 	bl	80022a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	200001f8 	.word	0x200001f8
 80021b8:	40004400 	.word	0x40004400

080021bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	240c      	movs	r4, #12
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	0018      	movs	r0, r3
 80021c8:	2314      	movs	r3, #20
 80021ca:	001a      	movs	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f004 fb1d 	bl	800680c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <MX_GPIO_Init+0xd8>)
 80021d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <MX_GPIO_Init+0xd8>)
 80021d8:	2102      	movs	r1, #2
 80021da:	430a      	orrs	r2, r1
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <MX_GPIO_Init+0xd8>)
 80021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <MX_GPIO_Init+0xd8>)
 80021ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <MX_GPIO_Init+0xd8>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	430a      	orrs	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
 80021f6:	4b27      	ldr	r3, [pc, #156]	; (8002294 <MX_GPIO_Init+0xd8>)
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	2201      	movs	r2, #1
 80021fc:	4013      	ands	r3, r2
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002202:	23c0      	movs	r3, #192	; 0xc0
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4824      	ldr	r0, [pc, #144]	; (8002298 <MX_GPIO_Init+0xdc>)
 8002208:	2200      	movs	r2, #0
 800220a:	0019      	movs	r1, r3
 800220c:	f001 fa54 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CS_Pin, GPIO_PIN_RESET);
 8002210:	4922      	ldr	r1, [pc, #136]	; (800229c <MX_GPIO_Init+0xe0>)
 8002212:	23a0      	movs	r3, #160	; 0xa0
 8002214:	05db      	lsls	r3, r3, #23
 8002216:	2200      	movs	r2, #0
 8002218:	0018      	movs	r0, r3
 800221a:	f001 fa4d 	bl	80036b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BRAKE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin|DIR_Pin;
 800221e:	193b      	adds	r3, r7, r4
 8002220:	22c0      	movs	r2, #192	; 0xc0
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	193b      	adds	r3, r7, r4
 8002228:	2201      	movs	r2, #1
 800222a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	193b      	adds	r3, r7, r4
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	193b      	adds	r3, r7, r4
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <MX_GPIO_Init+0xdc>)
 800223c:	0019      	movs	r1, r3
 800223e:	0010      	movs	r0, r2
 8002240:	f001 f8d6 	bl	80033f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CS_Pin;
 8002244:	193b      	adds	r3, r7, r4
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <MX_GPIO_Init+0xe0>)
 8002248:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	193b      	adds	r3, r7, r4
 800224c:	2201      	movs	r2, #1
 800224e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	193b      	adds	r3, r7, r4
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	193b      	adds	r3, r7, r4
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	193a      	adds	r2, r7, r4
 800225e:	23a0      	movs	r3, #160	; 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f001 f8c3 	bl	80033f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800226a:	193b      	adds	r3, r7, r4
 800226c:	2220      	movs	r2, #32
 800226e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	193b      	adds	r3, r7, r4
 8002272:	2200      	movs	r2, #0
 8002274:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	193b      	adds	r3, r7, r4
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800227c:	193a      	adds	r2, r7, r4
 800227e:	23a0      	movs	r3, #160	; 0xa0
 8002280:	05db      	lsls	r3, r3, #23
 8002282:	0011      	movs	r1, r2
 8002284:	0018      	movs	r0, r3
 8002286:	f001 f8b3 	bl	80033f0 <HAL_GPIO_Init>

}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	46bd      	mov	sp, r7
 800228e:	b009      	add	sp, #36	; 0x24
 8002290:	bd90      	pop	{r4, r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	40021000 	.word	0x40021000
 8002298:	50000400 	.word	0x50000400
 800229c:	00001010 	.word	0x00001010

080022a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <Error_Handler+0x6>

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_MspInit+0x44>)
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_MspInit+0x44>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_MspInit+0x44>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2201      	movs	r2, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_MspInit+0x44>)
 80022c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_MspInit+0x44>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_MspInit+0x44>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	232c      	movs	r3, #44	; 0x2c
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	0018      	movs	r0, r3
 80022fe:	2314      	movs	r3, #20
 8002300:	001a      	movs	r2, r3
 8002302:	2100      	movs	r1, #0
 8002304:	f004 fa82 	bl	800680c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002308:	2314      	movs	r3, #20
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	0018      	movs	r0, r3
 800230e:	2318      	movs	r3, #24
 8002310:	001a      	movs	r2, r3
 8002312:	2100      	movs	r1, #0
 8002314:	f004 fa7a 	bl	800680c <memset>
  if(hadc->Instance==ADC1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_ADC_MspInit+0xb0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d13a      	bne.n	8002398 <HAL_ADC_MspInit+0xa8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002322:	2114      	movs	r1, #20
 8002324:	187b      	adds	r3, r7, r1
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	01d2      	lsls	r2, r2, #7
 800232a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002332:	187b      	adds	r3, r7, r1
 8002334:	0018      	movs	r0, r3
 8002336:	f001 fee9 	bl	800410c <HAL_RCCEx_PeriphCLKConfig>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d001      	beq.n	8002342 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800233e:	f7ff ffaf 	bl	80022a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_ADC_MspInit+0xb4>)
 8002344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_ADC_MspInit+0xb4>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0349      	lsls	r1, r1, #13
 800234c:	430a      	orrs	r2, r1
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <HAL_ADC_MspInit+0xb4>)
 8002352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	035b      	lsls	r3, r3, #13
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_ADC_MspInit+0xb4>)
 8002360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_ADC_MspInit+0xb4>)
 8002364:	2101      	movs	r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_ADC_MspInit+0xb4>)
 800236c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236e:	2201      	movs	r2, #1
 8002370:	4013      	ands	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BAT_MEAS_Pin;
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2203      	movs	r2, #3
 8002382:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	187b      	adds	r3, r7, r1
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 800238a:	187a      	adds	r2, r7, r1
 800238c:	23a0      	movs	r3, #160	; 0xa0
 800238e:	05db      	lsls	r3, r3, #23
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f001 f82c 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b010      	add	sp, #64	; 0x40
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40012400 	.word	0x40012400
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	2314      	movs	r3, #20
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	0018      	movs	r0, r3
 80023b6:	2314      	movs	r3, #20
 80023b8:	001a      	movs	r2, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	f004 fa26 	bl	800680c <memset>
  if(hspi->Instance==SPI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_SPI_MspInit+0x8c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d130      	bne.n	800242c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_SPI_MspInit+0x90>)
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_SPI_MspInit+0x90>)
 80023d0:	2180      	movs	r1, #128	; 0x80
 80023d2:	0149      	lsls	r1, r1, #5
 80023d4:	430a      	orrs	r2, r1
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_SPI_MspInit+0x90>)
 80023da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_SPI_MspInit+0x90>)
 80023e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_SPI_MspInit+0x90>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_SPI_MspInit+0x90>)
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 80023fe:	2114      	movs	r1, #20
 8002400:	187b      	adds	r3, r7, r1
 8002402:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_SPI_MspInit+0x94>)
 8002404:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2202      	movs	r2, #2
 800240a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	187b      	adds	r3, r7, r1
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	187a      	adds	r2, r7, r1
 8002420:	23a0      	movs	r3, #160	; 0xa0
 8002422:	05db      	lsls	r3, r3, #23
 8002424:	0011      	movs	r1, r2
 8002426:	0018      	movs	r0, r3
 8002428:	f000 ffe2 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b00a      	add	sp, #40	; 0x28
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40013000 	.word	0x40013000
 8002438:	40021000 	.word	0x40021000
 800243c:	00000882 	.word	0x00000882

08002440 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b08b      	sub	sp, #44	; 0x2c
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	2314      	movs	r3, #20
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	0018      	movs	r0, r3
 800244e:	2314      	movs	r3, #20
 8002450:	001a      	movs	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	f004 f9da 	bl	800680c <memset>
  if(htim_encoder->Instance==TIM1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <HAL_TIM_Encoder_MspInit+0xd4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d154      	bne.n	800250c <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0109      	lsls	r1, r1, #4
 800246c:	430a      	orrs	r2, r1
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
 8002470:	4b29      	ldr	r3, [pc, #164]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002482:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	2201      	movs	r2, #1
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 800249c:	2102      	movs	r1, #2
 800249e:	430a      	orrs	r2, r1
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024ae:	2114      	movs	r1, #20
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2280      	movs	r2, #128	; 0x80
 80024b4:	0052      	lsls	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	000c      	movs	r4, r1
 80024ba:	193b      	adds	r3, r7, r4
 80024bc:	2202      	movs	r2, #2
 80024be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	2202      	movs	r2, #2
 80024d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	193a      	adds	r2, r7, r4
 80024d4:	23a0      	movs	r3, #160	; 0xa0
 80024d6:	05db      	lsls	r3, r3, #23
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 ff88 	bl	80033f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024e0:	0021      	movs	r1, r4
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	2208      	movs	r2, #8
 80024e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2202      	movs	r2, #2
 80024ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2201      	movs	r2, #1
 80024fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	187b      	adds	r3, r7, r1
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002504:	0019      	movs	r1, r3
 8002506:	0010      	movs	r0, r2
 8002508:	f000 ff72 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b00b      	add	sp, #44	; 0x2c
 8002512:	bd90      	pop	{r4, r7, pc}
 8002514:	40012c00 	.word	0x40012c00
 8002518:	40021000 	.word	0x40021000
 800251c:	50000400 	.word	0x50000400

08002520 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_TIM_PWM_MspInit+0x34>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10b      	bne.n	800254a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x38>)
 8002534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002536:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_TIM_PWM_MspInit+0x38>)
 8002538:	2102      	movs	r1, #2
 800253a:	430a      	orrs	r2, r1
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_TIM_PWM_MspInit+0x38>)
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40000400 	.word	0x40000400
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	230c      	movs	r3, #12
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	0018      	movs	r0, r3
 800256a:	2314      	movs	r3, #20
 800256c:	001a      	movs	r2, r3
 800256e:	2100      	movs	r1, #0
 8002570:	f004 f94c 	bl	800680c <memset>
  if(htim->Instance==TIM3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_TIM_MspPostInit+0x70>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d122      	bne.n	80025c4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_TIM_MspPostInit+0x74>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_TIM_MspPostInit+0x74>)
 8002584:	2101      	movs	r1, #1
 8002586:	430a      	orrs	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_TIM_MspPostInit+0x74>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	2201      	movs	r2, #1
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002596:	210c      	movs	r1, #12
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2202      	movs	r2, #2
 80025a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	187b      	adds	r3, r7, r1
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2201      	movs	r2, #1
 80025b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	187a      	adds	r2, r7, r1
 80025b8:	23a0      	movs	r3, #160	; 0xa0
 80025ba:	05db      	lsls	r3, r3, #23
 80025bc:	0011      	movs	r1, r2
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 ff16 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b008      	add	sp, #32
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	2314      	movs	r3, #20
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	0018      	movs	r0, r3
 80025e2:	2314      	movs	r3, #20
 80025e4:	001a      	movs	r2, r3
 80025e6:	2100      	movs	r1, #0
 80025e8:	f004 f910 	bl	800680c <memset>
  if(huart->Instance==USART2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <HAL_UART_MspInit+0x8c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d130      	bne.n	8002658 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_UART_MspInit+0x90>)
 80025f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_UART_MspInit+0x90>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	0289      	lsls	r1, r1, #10
 8002600:	430a      	orrs	r2, r1
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_UART_MspInit+0x90>)
 8002606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	029b      	lsls	r3, r3, #10
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_UART_MspInit+0x90>)
 8002614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_UART_MspInit+0x90>)
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_UART_MspInit+0x90>)
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800262a:	2114      	movs	r1, #20
 800262c:	187b      	adds	r3, r7, r1
 800262e:	220c      	movs	r2, #12
 8002630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2202      	movs	r2, #2
 8002636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	187b      	adds	r3, r7, r1
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2201      	movs	r2, #1
 8002648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	187a      	adds	r2, r7, r1
 800264c:	23a0      	movs	r3, #160	; 0xa0
 800264e:	05db      	lsls	r3, r3, #23
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f000 fecc 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b00a      	add	sp, #40	; 0x28
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40004400 	.word	0x40004400
 8002664:	40021000 	.word	0x40021000

08002668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800266c:	e7fe      	b.n	800266c <NMI_Handler+0x4>

0800266e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <HardFault_Handler+0x4>

08002674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268c:	f000 f91c 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	e00a      	b.n	80026be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026a8:	e000      	b.n	80026ac <_read+0x16>
 80026aa:	bf00      	nop
 80026ac:	0001      	movs	r1, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	60ba      	str	r2, [r7, #8]
 80026b4:	b2ca      	uxtb	r2, r1
 80026b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dbf0      	blt.n	80026a8 <_read+0x12>
	}

return len;
 80026c6:	687b      	ldr	r3, [r7, #4]
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b006      	add	sp, #24
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	return -1;
 80026d8:	2301      	movs	r3, #1
 80026da:	425b      	negs	r3, r3
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	0192      	lsls	r2, r2, #6
 80026f4:	605a      	str	r2, [r3, #4]
	return 0;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}

08002700 <_isatty>:

int _isatty(int file)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}

08002712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
	return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b004      	add	sp, #16
 8002726:	bd80      	pop	{r7, pc}

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	; (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	18d3      	adds	r3, r2, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f004 f82e 	bl	80067b8 <__errno>
 800275c:	0003      	movs	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	2301      	movs	r3, #1
 8002764:	425b      	negs	r3, r3
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	18d2      	adds	r2, r2, r3
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <_sbrk+0x64>)
 8002778:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20002000 	.word	0x20002000
 8002788:	00000400 	.word	0x00000400
 800278c:	2000008c 	.word	0x2000008c
 8002790:	20000290 	.word	0x20000290

08002794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a0:	480d      	ldr	r0, [pc, #52]	; (80027d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027a4:	f7ff fff6 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a8:	480c      	ldr	r0, [pc, #48]	; (80027dc <LoopForever+0x6>)
  ldr r1, =_edata
 80027aa:	490d      	ldr	r1, [pc, #52]	; (80027e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <LoopForever+0xe>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c0:	4c0a      	ldr	r4, [pc, #40]	; (80027ec <LoopForever+0x16>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027ce:	f003 fff9 	bl	80067c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027d2:	f7fe fedd 	bl	8001590 <main>

080027d6 <LoopForever>:

LoopForever:
  b LoopForever
 80027d6:	e7fe      	b.n	80027d6 <LoopForever>
  ldr   r0, =_estack
 80027d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027e4:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 80027e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027ec:	20000290 	.word	0x20000290

080027f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC1_IRQHandler>
	...

080027f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_Init+0x3c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_Init+0x3c>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0049      	lsls	r1, r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800280e:	2003      	movs	r0, #3
 8002810:	f000 f810 	bl	8002834 <HAL_InitTick>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d003      	beq.n	8002820 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e001      	b.n	8002824 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002820:	f7ff fd42 	bl	80022a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	781b      	ldrb	r3, [r3, #0]
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_InitTick+0x88>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02b      	beq.n	80028a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800284c:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_InitTick+0x8c>)
 800284e:	681c      	ldr	r4, [r3, #0]
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_InitTick+0x88>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	0019      	movs	r1, r3
 8002856:	23fa      	movs	r3, #250	; 0xfa
 8002858:	0098      	lsls	r0, r3, #2
 800285a:	f7fd fc51 	bl	8000100 <__udivsi3>
 800285e:	0003      	movs	r3, r0
 8002860:	0019      	movs	r1, r3
 8002862:	0020      	movs	r0, r4
 8002864:	f7fd fc4c 	bl	8000100 <__udivsi3>
 8002868:	0003      	movs	r3, r0
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fdb3 	bl	80033d6 <HAL_SYSTICK_Config>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d112      	bne.n	800289a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d80a      	bhi.n	8002890 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	2301      	movs	r3, #1
 800287e:	425b      	negs	r3, r3
 8002880:	2200      	movs	r2, #0
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fd92 	bl	80033ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_InitTick+0x90>)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e00d      	b.n	80028ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002890:	230f      	movs	r3, #15
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e008      	b.n	80028ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800289a:	230f      	movs	r3, #15
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e003      	b.n	80028ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a4:	230f      	movs	r3, #15
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80028ac:	230f      	movs	r3, #15
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b005      	add	sp, #20
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	20000008 	.word	0x20000008
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_IncTick+0x1c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	001a      	movs	r2, r3
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_IncTick+0x20>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	18d2      	adds	r2, r2, r3
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_IncTick+0x20>)
 80028da:	601a      	str	r2, [r3, #0]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	20000008 	.word	0x20000008
 80028e8:	20000288 	.word	0x20000288

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b02      	ldr	r3, [pc, #8]	; (80028fc <HAL_GetTick+0x10>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	20000288 	.word	0x20000288

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff fff0 	bl	80028ec <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_Delay+0x40>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	001a      	movs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	189b      	adds	r3, r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	f7ff ffe0 	bl	80028ec <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000008 	.word	0x20000008

08002944 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002954:	401a      	ands	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	fe3fffff 	.word	0xfe3fffff

0800296c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	23e0      	movs	r3, #224	; 0xe0
 800297a:	045b      	lsls	r3, r3, #17
 800297c:	4013      	ands	r3, r2
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}

08002986 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	2104      	movs	r1, #4
 800299a:	400a      	ands	r2, r1
 800299c:	2107      	movs	r1, #7
 800299e:	4091      	lsls	r1, r2
 80029a0:	000a      	movs	r2, r1
 80029a2:	43d2      	mvns	r2, r2
 80029a4:	401a      	ands	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2104      	movs	r1, #4
 80029aa:	400b      	ands	r3, r1
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4099      	lsls	r1, r3
 80029b0:	000b      	movs	r3, r1
 80029b2:	431a      	orrs	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}

080029c0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	211f      	movs	r1, #31
 80029d4:	400a      	ands	r2, r1
 80029d6:	210f      	movs	r1, #15
 80029d8:	4091      	lsls	r1, r2
 80029da:	000a      	movs	r2, r1
 80029dc:	43d2      	mvns	r2, r2
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	210f      	movs	r1, #15
 80029e6:	4019      	ands	r1, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	201f      	movs	r0, #31
 80029ec:	4003      	ands	r3, r0
 80029ee:	4099      	lsls	r1, r3
 80029f0:	000b      	movs	r3, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	035b      	lsls	r3, r3, #13
 8002a12:	0b5b      	lsrs	r3, r3, #13
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b002      	add	sp, #8
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	0352      	lsls	r2, r2, #13
 8002a34:	0b52      	lsrs	r2, r2, #13
 8002a36:	43d2      	mvns	r2, r2
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	0212      	lsls	r2, r2, #8
 8002a5c:	43d2      	mvns	r2, r2
 8002a5e:	401a      	ands	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	400b      	ands	r3, r1
 8002a68:	4904      	ldr	r1, [pc, #16]	; (8002a7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	07ffff00 	.word	0x07ffff00

08002a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0552      	lsls	r2, r2, #21
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	6fffffe8 	.word	0x6fffffe8

08002aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	055b      	lsls	r3, r3, #21
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d101      	bne.n	8002ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2201      	movs	r2, #1
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <LL_ADC_IsEnabled+0x18>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <LL_ADC_IsEnabled+0x1a>
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2204      	movs	r2, #4
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d101      	bne.n	8002b0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1c:	231f      	movs	r3, #31
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1b3      	b.n	8002ea2 <HAL_ADC_Init+0x38e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10a      	bne.n	8002b58 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff fbd3 	bl	80022f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2254      	movs	r2, #84	; 0x54
 8002b54:	2100      	movs	r1, #0
 8002b56:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7ff ffa3 	bl	8002aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d115      	bne.n	8002b92 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7ff ff88 	bl	8002a80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b70:	4bce      	ldr	r3, [pc, #824]	; (8002eac <HAL_ADC_Init+0x398>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	49ce      	ldr	r1, [pc, #824]	; (8002eb0 <HAL_ADC_Init+0x39c>)
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7fd fac2 	bl	8000100 <__udivsi3>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f9      	bne.n	8002b86 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7ff ff86 	bl	8002aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bb8:	231f      	movs	r3, #31
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7ff ff94 	bl	8002af2 <LL_ADC_REG_IsConversionOngoing>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d000      	beq.n	8002bda <HAL_ADC_Init+0xc6>
 8002bd8:	e156      	b.n	8002e88 <HAL_ADC_Init+0x374>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d000      	beq.n	8002be2 <HAL_ADC_Init+0xce>
 8002be0:	e152      	b.n	8002e88 <HAL_ADC_Init+0x374>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	4ab3      	ldr	r2, [pc, #716]	; (8002eb4 <HAL_ADC_Init+0x3a0>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	2202      	movs	r2, #2
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff ff6a 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d156      	bne.n	8002cae <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2218      	movs	r2, #24
 8002c08:	4393      	bics	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0f9b      	lsrs	r3, r3, #30
 8002c1e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c24:	4313      	orrs	r3, r2
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	223c      	movs	r2, #60	; 0x3c
 8002c30:	5c9b      	ldrb	r3, [r3, r2]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d111      	bne.n	8002c5a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	0f9b      	lsrs	r3, r3, #30
 8002c3c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c42:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002c48:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002c4e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	2201      	movs	r2, #1
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	4a95      	ldr	r2, [pc, #596]	; (8002eb8 <HAL_ADC_Init+0x3a4>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	23c0      	movs	r3, #192	; 0xc0
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d018      	beq.n	8002cae <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	05db      	lsls	r3, r3, #23
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d012      	beq.n	8002cae <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	061b      	lsls	r3, r3, #24
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d00c      	beq.n	8002cae <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002c94:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_ADC_Init+0x3a8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a89      	ldr	r2, [pc, #548]	; (8002ec0 <HAL_ADC_Init+0x3ac>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	23f0      	movs	r3, #240	; 0xf0
 8002ca4:	039b      	lsls	r3, r3, #14
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	4b84      	ldr	r3, [pc, #528]	; (8002ebc <HAL_ADC_Init+0x3a8>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7e1b      	ldrb	r3, [r3, #24]
 8002cb2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7e5b      	ldrb	r3, [r3, #25]
 8002cb8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7e9b      	ldrb	r3, [r3, #26]
 8002cc0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002cc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <HAL_ADC_Init+0x1be>
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	015b      	lsls	r3, r3, #5
 8002cd0:	e000      	b.n	8002cd4 <HAL_ADC_Init+0x1c0>
 8002cd2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002cd4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002cda:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da04      	bge.n	8002cee <HAL_ADC_Init+0x1da>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	e001      	b.n	8002cf2 <HAL_ADC_Init+0x1de>
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002cf2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	5c5b      	ldrb	r3, [r3, r1]
 8002cfa:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002cfc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d115      	bne.n	8002d3a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7e9b      	ldrb	r3, [r3, #26]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	0252      	lsls	r2, r2, #9
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e00b      	b.n	8002d3a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	2220      	movs	r2, #32
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2201      	movs	r2, #1
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d46:	23e0      	movs	r3, #224	; 0xe0
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d50:	4313      	orrs	r3, r2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	4a59      	ldr	r2, [pc, #356]	; (8002ec4 <HAL_ADC_Init+0x3b0>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4a54      	ldr	r2, [pc, #336]	; (8002ec8 <HAL_ADC_Init+0x3b4>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f7ff fdf9 	bl	8002986 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	494b      	ldr	r1, [pc, #300]	; (8002ecc <HAL_ADC_Init+0x3b8>)
 8002d9e:	001a      	movs	r2, r3
 8002da0:	f7ff fdf1 	bl	8002986 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2110      	movs	r1, #16
 8002db8:	4249      	negs	r1, r1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
 8002dbe:	e03c      	b.n	8002e3a <HAL_ADC_Init+0x326>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	039b      	lsls	r3, r3, #14
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d136      	bne.n	8002e3a <HAL_ADC_Init+0x326>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e00c      	b.n	8002dec <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	40da      	lsrs	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	220f      	movs	r2, #15
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d006      	beq.n	8002df4 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3301      	adds	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b07      	cmp	r3, #7
 8002df0:	d9ef      	bls.n	8002dd2 <HAL_ADC_Init+0x2be>
 8002df2:	e000      	b.n	8002df6 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002df4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d109      	bne.n	8002e10 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2110      	movs	r1, #16
 8002e08:	4249      	negs	r1, r1
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e0e:	e014      	b.n	8002e3a <HAL_ADC_Init+0x326>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ed0 <HAL_ADC_Init+0x3bc>)
 8002e1c:	4694      	mov	ip, r2
 8002e1e:	4463      	add	r3, ip
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	221c      	movs	r2, #28
 8002e24:	4013      	ands	r3, r2
 8002e26:	2210      	movs	r2, #16
 8002e28:	4252      	negs	r2, r2
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0011      	movs	r1, r2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <HAL_ADC_Init+0x3c0>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d10b      	bne.n	8002e62 <HAL_ADC_Init+0x34e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	2203      	movs	r2, #3
 8002e56:	4393      	bics	r3, r2
 8002e58:	2201      	movs	r2, #1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e60:	e01c      	b.n	8002e9c <HAL_ADC_Init+0x388>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	2212      	movs	r2, #18
 8002e68:	4393      	bics	r3, r2
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	2201      	movs	r2, #1
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002e7e:	231f      	movs	r3, #31
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e86:	e009      	b.n	8002e9c <HAL_ADC_Init+0x388>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e94:	231f      	movs	r3, #31
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002e9c:	231f      	movs	r3, #31
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b008      	add	sp, #32
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000000 	.word	0x20000000
 8002eb0:	00030d40 	.word	0x00030d40
 8002eb4:	fffffefd 	.word	0xfffffefd
 8002eb8:	1ffffc02 	.word	0x1ffffc02
 8002ebc:	40012708 	.word	0x40012708
 8002ec0:	ffc3ffff 	.word	0xffc3ffff
 8002ec4:	fffe0219 	.word	0xfffe0219
 8002ec8:	dffffc02 	.word	0xdffffc02
 8002ecc:	07ffff04 	.word	0x07ffff04
 8002ed0:	3fffffff 	.word	0x3fffffff
 8002ed4:	833fffe7 	.word	0x833fffe7

08002ed8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee2:	2317      	movs	r3, #23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2254      	movs	r2, #84	; 0x54
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x24>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e1c0      	b.n	800327e <HAL_ADC_ConfigChannel+0x3a6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2254      	movs	r2, #84	; 0x54
 8002f00:	2101      	movs	r1, #1
 8002f02:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff fdf2 	bl	8002af2 <LL_ADC_REG_IsConversionOngoing>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d000      	beq.n	8002f14 <HAL_ADC_ConfigChannel+0x3c>
 8002f12:	e1a3      	b.n	800325c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d100      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x46>
 8002f1c:	e143      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d004      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f2e:	4ac1      	ldr	r2, [pc, #772]	; (8003234 <HAL_ADC_ConfigChannel+0x35c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0010      	movs	r0, r2
 8002f40:	f7ff fd5e 	bl	8002a00 <LL_ADC_REG_SetSequencerChAdd>
 8002f44:	e0c9      	b.n	80030da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	211f      	movs	r1, #31
 8002f50:	400b      	ands	r3, r1
 8002f52:	210f      	movs	r1, #15
 8002f54:	4099      	lsls	r1, r3
 8002f56:	000b      	movs	r3, r1
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	035b      	lsls	r3, r3, #13
 8002f64:	0b5b      	lsrs	r3, r3, #13
 8002f66:	d105      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x9c>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	221f      	movs	r2, #31
 8002f70:	4013      	ands	r3, r2
 8002f72:	e098      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d000      	beq.n	8002f80 <HAL_ADC_ConfigChannel+0xa8>
 8002f7e:	e091      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d000      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0xb4>
 8002f8a:	e089      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x1c8>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2204      	movs	r2, #4
 8002f92:	4013      	ands	r3, r2
 8002f94:	d000      	beq.n	8002f98 <HAL_ADC_ConfigChannel+0xc0>
 8002f96:	e081      	b.n	800309c <HAL_ADC_ConfigChannel+0x1c4>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d000      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0xcc>
 8002fa2:	e079      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1c0>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	4013      	ands	r3, r2
 8002fac:	d000      	beq.n	8002fb0 <HAL_ADC_ConfigChannel+0xd8>
 8002fae:	e071      	b.n	8003094 <HAL_ADC_ConfigChannel+0x1bc>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d000      	beq.n	8002fbc <HAL_ADC_ConfigChannel+0xe4>
 8002fba:	e069      	b.n	8003090 <HAL_ADC_ConfigChannel+0x1b8>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2240      	movs	r2, #64	; 0x40
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d000      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0xf0>
 8002fc6:	e061      	b.n	800308c <HAL_ADC_ConfigChannel+0x1b4>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d000      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0xfc>
 8002fd2:	e059      	b.n	8003088 <HAL_ADC_ConfigChannel+0x1b0>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d151      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1ac>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d149      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1a8>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d141      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1a4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4013      	ands	r3, r2
 8003002:	d139      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x1a0>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	4013      	ands	r3, r2
 800300e:	d131      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x19c>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	4013      	ands	r3, r2
 800301a:	d129      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x198>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	01db      	lsls	r3, r3, #7
 8003024:	4013      	ands	r3, r2
 8003026:	d121      	bne.n	800306c <HAL_ADC_ConfigChannel+0x194>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	4013      	ands	r3, r2
 8003032:	d119      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x190>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	025b      	lsls	r3, r3, #9
 800303c:	4013      	ands	r3, r2
 800303e:	d111      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x18c>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	029b      	lsls	r3, r3, #10
 8003048:	4013      	ands	r3, r2
 800304a:	d109      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x188>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	02db      	lsls	r3, r3, #11
 8003054:	4013      	ands	r3, r2
 8003056:	d001      	beq.n	800305c <HAL_ADC_ConfigChannel+0x184>
 8003058:	2312      	movs	r3, #18
 800305a:	e024      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 800305c:	2300      	movs	r3, #0
 800305e:	e022      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003060:	2311      	movs	r3, #17
 8003062:	e020      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003064:	2310      	movs	r3, #16
 8003066:	e01e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003068:	230f      	movs	r3, #15
 800306a:	e01c      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 800306c:	230e      	movs	r3, #14
 800306e:	e01a      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003070:	230d      	movs	r3, #13
 8003072:	e018      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003074:	230c      	movs	r3, #12
 8003076:	e016      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003078:	230b      	movs	r3, #11
 800307a:	e014      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 800307c:	230a      	movs	r3, #10
 800307e:	e012      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003080:	2309      	movs	r3, #9
 8003082:	e010      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003084:	2308      	movs	r3, #8
 8003086:	e00e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003088:	2307      	movs	r3, #7
 800308a:	e00c      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 800308c:	2306      	movs	r3, #6
 800308e:	e00a      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003090:	2305      	movs	r3, #5
 8003092:	e008      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003094:	2304      	movs	r3, #4
 8003096:	e006      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 8003098:	2303      	movs	r3, #3
 800309a:	e004      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 800309c:	2302      	movs	r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ce>
 80030a4:	2300      	movs	r3, #0
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	6852      	ldr	r2, [r2, #4]
 80030aa:	201f      	movs	r0, #31
 80030ac:	4002      	ands	r2, r0
 80030ae:	4093      	lsls	r3, r2
 80030b0:	000a      	movs	r2, r1
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d808      	bhi.n	80030da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	001a      	movs	r2, r3
 80030d6:	f7ff fc73 	bl	80029c0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	001a      	movs	r2, r3
 80030e8:	f7ff fcae 	bl	8002a48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db00      	blt.n	80030f6 <HAL_ADC_ConfigChannel+0x21e>
 80030f4:	e0bc      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff fc37 	bl	800296c <LL_ADC_GetCommonPathInternalCh>
 80030fe:	0003      	movs	r3, r0
 8003100:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a4d      	ldr	r2, [pc, #308]	; (800323c <HAL_ADC_ConfigChannel+0x364>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d122      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003114:	d11d      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	0412      	lsls	r2, r2, #16
 800311c:	4313      	orrs	r3, r2
 800311e:	4a46      	ldr	r2, [pc, #280]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 8003120:	0019      	movs	r1, r3
 8003122:	0010      	movs	r0, r2
 8003124:	f7ff fc0e 	bl	8002944 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003128:	4b45      	ldr	r3, [pc, #276]	; (8003240 <HAL_ADC_ConfigChannel+0x368>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4945      	ldr	r1, [pc, #276]	; (8003244 <HAL_ADC_ConfigChannel+0x36c>)
 800312e:	0018      	movs	r0, r3
 8003130:	f7fc ffe6 	bl	8000100 <__udivsi3>
 8003134:	0003      	movs	r3, r0
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	0013      	movs	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	189b      	adds	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003142:	e002      	b.n	800314a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3b01      	subs	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f9      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003150:	e08e      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_ADC_ConfigChannel+0x370>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10e      	bne.n	800317a <HAL_ADC_ConfigChannel+0x2a2>
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	045b      	lsls	r3, r3, #17
 8003162:	4013      	ands	r3, r2
 8003164:	d109      	bne.n	800317a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	0452      	lsls	r2, r2, #17
 800316c:	4313      	orrs	r3, r2
 800316e:	4a32      	ldr	r2, [pc, #200]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 8003170:	0019      	movs	r1, r3
 8003172:	0010      	movs	r0, r2
 8003174:	f7ff fbe6 	bl	8002944 <LL_ADC_SetCommonPathInternalCh>
 8003178:	e07a      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a33      	ldr	r2, [pc, #204]	; (800324c <HAL_ADC_ConfigChannel+0x374>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d000      	beq.n	8003186 <HAL_ADC_ConfigChannel+0x2ae>
 8003184:	e074      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	03db      	lsls	r3, r3, #15
 800318c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800318e:	d000      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x2ba>
 8003190:	e06e      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	03d2      	lsls	r2, r2, #15
 8003198:	4313      	orrs	r3, r2
 800319a:	4a27      	ldr	r2, [pc, #156]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 800319c:	0019      	movs	r1, r3
 800319e:	0010      	movs	r0, r2
 80031a0:	f7ff fbd0 	bl	8002944 <LL_ADC_SetCommonPathInternalCh>
 80031a4:	e064      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d004      	beq.n	80031bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <HAL_ADC_ConfigChannel+0x35c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d107      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0019      	movs	r1, r3
 80031c6:	0010      	movs	r0, r2
 80031c8:	f7ff fc2b 	bl	8002a22 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da4d      	bge.n	8003270 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff fbc8 	bl	800296c <LL_ADC_GetCommonPathInternalCh>
 80031dc:	0003      	movs	r3, r0
 80031de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_ADC_ConfigChannel+0x364>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d108      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_ADC_ConfigChannel+0x378>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f7ff fba5 	bl	8002944 <LL_ADC_SetCommonPathInternalCh>
 80031fa:	e039      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a11      	ldr	r2, [pc, #68]	; (8003248 <HAL_ADC_ConfigChannel+0x370>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <HAL_ADC_ConfigChannel+0x37c>)
 800320a:	4013      	ands	r3, r2
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 800320e:	0019      	movs	r1, r3
 8003210:	0010      	movs	r0, r2
 8003212:	f7ff fb97 	bl	8002944 <LL_ADC_SetCommonPathInternalCh>
 8003216:	e02b      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0b      	ldr	r2, [pc, #44]	; (800324c <HAL_ADC_ConfigChannel+0x374>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d126      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_ADC_ConfigChannel+0x380>)
 8003226:	4013      	ands	r3, r2
 8003228:	4a03      	ldr	r2, [pc, #12]	; (8003238 <HAL_ADC_ConfigChannel+0x360>)
 800322a:	0019      	movs	r1, r3
 800322c:	0010      	movs	r0, r2
 800322e:	f7ff fb89 	bl	8002944 <LL_ADC_SetCommonPathInternalCh>
 8003232:	e01d      	b.n	8003270 <HAL_ADC_ConfigChannel+0x398>
 8003234:	80000004 	.word	0x80000004
 8003238:	40012708 	.word	0x40012708
 800323c:	b0001000 	.word	0xb0001000
 8003240:	20000000 	.word	0x20000000
 8003244:	00030d40 	.word	0x00030d40
 8003248:	b8004000 	.word	0xb8004000
 800324c:	b4002000 	.word	0xb4002000
 8003250:	ff7fffff 	.word	0xff7fffff
 8003254:	feffffff 	.word	0xfeffffff
 8003258:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	2220      	movs	r2, #32
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003268:	2317      	movs	r3, #23
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2254      	movs	r2, #84	; 0x54
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003278:	2317      	movs	r3, #23
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b006      	add	sp, #24
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	0002      	movs	r2, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	1dfb      	adds	r3, r7, #7
 8003294:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003296:	1dfb      	adds	r3, r7, #7
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b7f      	cmp	r3, #127	; 0x7f
 800329c:	d828      	bhi.n	80032f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800329e:	4a2f      	ldr	r2, [pc, #188]	; (800335c <__NVIC_SetPriority+0xd4>)
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	089b      	lsrs	r3, r3, #2
 80032a8:	33c0      	adds	r3, #192	; 0xc0
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	589b      	ldr	r3, [r3, r2]
 80032ae:	1dfa      	adds	r2, r7, #7
 80032b0:	7812      	ldrb	r2, [r2, #0]
 80032b2:	0011      	movs	r1, r2
 80032b4:	2203      	movs	r2, #3
 80032b6:	400a      	ands	r2, r1
 80032b8:	00d2      	lsls	r2, r2, #3
 80032ba:	21ff      	movs	r1, #255	; 0xff
 80032bc:	4091      	lsls	r1, r2
 80032be:	000a      	movs	r2, r1
 80032c0:	43d2      	mvns	r2, r2
 80032c2:	401a      	ands	r2, r3
 80032c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	22ff      	movs	r2, #255	; 0xff
 80032cc:	401a      	ands	r2, r3
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	0018      	movs	r0, r3
 80032d4:	2303      	movs	r3, #3
 80032d6:	4003      	ands	r3, r0
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032dc:	481f      	ldr	r0, [pc, #124]	; (800335c <__NVIC_SetPriority+0xd4>)
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	430a      	orrs	r2, r1
 80032e8:	33c0      	adds	r3, #192	; 0xc0
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032ee:	e031      	b.n	8003354 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <__NVIC_SetPriority+0xd8>)
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	0019      	movs	r1, r3
 80032f8:	230f      	movs	r3, #15
 80032fa:	400b      	ands	r3, r1
 80032fc:	3b08      	subs	r3, #8
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3306      	adds	r3, #6
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	18d3      	adds	r3, r2, r3
 8003306:	3304      	adds	r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1dfa      	adds	r2, r7, #7
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	0011      	movs	r1, r2
 8003310:	2203      	movs	r2, #3
 8003312:	400a      	ands	r2, r1
 8003314:	00d2      	lsls	r2, r2, #3
 8003316:	21ff      	movs	r1, #255	; 0xff
 8003318:	4091      	lsls	r1, r2
 800331a:	000a      	movs	r2, r1
 800331c:	43d2      	mvns	r2, r2
 800331e:	401a      	ands	r2, r3
 8003320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	401a      	ands	r2, r3
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	2303      	movs	r3, #3
 8003332:	4003      	ands	r3, r0
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <__NVIC_SetPriority+0xd8>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	001c      	movs	r4, r3
 8003340:	230f      	movs	r3, #15
 8003342:	4023      	ands	r3, r4
 8003344:	3b08      	subs	r3, #8
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	430a      	orrs	r2, r1
 800334a:	3306      	adds	r3, #6
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	18c3      	adds	r3, r0, r3
 8003350:	3304      	adds	r3, #4
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b003      	add	sp, #12
 800335a:	bd90      	pop	{r4, r7, pc}
 800335c:	e000e100 	.word	0xe000e100
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <SysTick_Config+0x40>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003376:	2301      	movs	r3, #1
 8003378:	e010      	b.n	800339c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <SysTick_Config+0x44>)
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	3a01      	subs	r2, #1
 8003380:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003382:	2301      	movs	r3, #1
 8003384:	425b      	negs	r3, r3
 8003386:	2103      	movs	r1, #3
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff ff7d 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <SysTick_Config+0x44>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x44>)
 8003396:	2207      	movs	r2, #7
 8003398:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800339a:	2300      	movs	r3, #0
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	00ffffff 	.word	0x00ffffff
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	210f      	movs	r1, #15
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	1c02      	adds	r2, r0, #0
 80033bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff ff5d 	bl	8003288 <__NVIC_SetPriority>
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7ff ffbf 	bl	8003364 <SysTick_Config>
 80033e6:	0003      	movs	r3, r0
}
 80033e8:	0018      	movs	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fe:	e147      	b.n	8003690 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2101      	movs	r1, #1
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4091      	lsls	r1, r2
 800340a:	000a      	movs	r2, r1
 800340c:	4013      	ands	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d100      	bne.n	8003418 <HAL_GPIO_Init+0x28>
 8003416:	e138      	b.n	800368a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	4013      	ands	r3, r2
 8003420:	2b01      	cmp	r3, #1
 8003422:	d005      	beq.n	8003430 <HAL_GPIO_Init+0x40>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	4013      	ands	r3, r2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d130      	bne.n	8003492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	409a      	lsls	r2, r3
 800343e:	0013      	movs	r3, r2
 8003440:	43da      	mvns	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	0013      	movs	r3, r2
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003466:	2201      	movs	r2, #1
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	409a      	lsls	r2, r3
 800346c:	0013      	movs	r3, r2
 800346e:	43da      	mvns	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	2201      	movs	r2, #1
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
 8003484:	0013      	movs	r3, r2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2203      	movs	r2, #3
 8003498:	4013      	ands	r3, r2
 800349a:	2b03      	cmp	r3, #3
 800349c:	d017      	beq.n	80034ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	2203      	movs	r2, #3
 80034aa:	409a      	lsls	r2, r3
 80034ac:	0013      	movs	r3, r2
 80034ae:	43da      	mvns	r2, r3
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	0013      	movs	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d123      	bne.n	8003522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	58d3      	ldr	r3, [r2, r3]
 80034e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2207      	movs	r2, #7
 80034ec:	4013      	ands	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	409a      	lsls	r2, r3
 80034f4:	0013      	movs	r3, r2
 80034f6:	43da      	mvns	r2, r3
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2107      	movs	r1, #7
 8003506:	400b      	ands	r3, r1
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	409a      	lsls	r2, r3
 800350c:	0013      	movs	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	08da      	lsrs	r2, r3, #3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3208      	adds	r2, #8
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	6939      	ldr	r1, [r7, #16]
 8003520:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2203      	movs	r2, #3
 8003540:	401a      	ands	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	409a      	lsls	r2, r3
 8003548:	0013      	movs	r3, r2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	23c0      	movs	r3, #192	; 0xc0
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	4013      	ands	r3, r2
 8003560:	d100      	bne.n	8003564 <HAL_GPIO_Init+0x174>
 8003562:	e092      	b.n	800368a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003564:	4a50      	ldr	r2, [pc, #320]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3318      	adds	r3, #24
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	589b      	ldr	r3, [r3, r2]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2203      	movs	r2, #3
 8003576:	4013      	ands	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	220f      	movs	r2, #15
 800357c:	409a      	lsls	r2, r3
 800357e:	0013      	movs	r3, r2
 8003580:	43da      	mvns	r2, r3
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	23a0      	movs	r3, #160	; 0xa0
 800358c:	05db      	lsls	r3, r3, #23
 800358e:	429a      	cmp	r2, r3
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0x1ca>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a45      	ldr	r2, [pc, #276]	; (80036ac <HAL_GPIO_Init+0x2bc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00d      	beq.n	80035b6 <HAL_GPIO_Init+0x1c6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <HAL_GPIO_Init+0x2c0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <HAL_GPIO_Init+0x1c2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_GPIO_Init+0x2c4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_GPIO_Init+0x1be>
 80035aa:	2303      	movs	r3, #3
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x1cc>
 80035ae:	2305      	movs	r3, #5
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x1cc>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x1cc>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x1cc>
 80035ba:	2300      	movs	r3, #0
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	2103      	movs	r1, #3
 80035c0:	400a      	ands	r2, r1
 80035c2:	00d2      	lsls	r2, r2, #3
 80035c4:	4093      	lsls	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80035cc:	4936      	ldr	r1, [pc, #216]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3318      	adds	r3, #24
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	58d3      	ldr	r3, [r2, r3]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	4013      	ands	r3, r2
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003600:	4929      	ldr	r1, [pc, #164]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 800360a:	2384      	movs	r3, #132	; 0x84
 800360c:	58d3      	ldr	r3, [r2, r3]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43da      	mvns	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	4013      	ands	r3, r2
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800362e:	491e      	ldr	r1, [pc, #120]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 8003630:	2284      	movs	r2, #132	; 0x84
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43da      	mvns	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	035b      	lsls	r3, r3, #13
 800364e:	4013      	ands	r3, r2
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43da      	mvns	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	039b      	lsls	r3, r3, #14
 8003678:	4013      	ands	r3, r2
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_GPIO_Init+0x2b8>)
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3301      	adds	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	40da      	lsrs	r2, r3
 8003698:	1e13      	subs	r3, r2, #0
 800369a:	d000      	beq.n	800369e <HAL_GPIO_Init+0x2ae>
 800369c:	e6b0      	b.n	8003400 <HAL_GPIO_Init+0x10>
  }
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	40021800 	.word	0x40021800
 80036ac:	50000400 	.word	0x50000400
 80036b0:	50000800 	.word	0x50000800
 80036b4:	50000c00 	.word	0x50000c00

080036b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	0008      	movs	r0, r1
 80036c2:	0011      	movs	r1, r2
 80036c4:	1cbb      	adds	r3, r7, #2
 80036c6:	1c02      	adds	r2, r0, #0
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	1c7b      	adds	r3, r7, #1
 80036cc:	1c0a      	adds	r2, r1, #0
 80036ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d0:	1c7b      	adds	r3, r7, #1
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d8:	1cbb      	adds	r3, r7, #2
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e2:	1cbb      	adds	r3, r7, #2
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d11f      	bne.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	0013      	movs	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	189b      	adds	r3, r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4912      	ldr	r1, [pc, #72]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003726:	0018      	movs	r0, r3
 8003728:	f7fc fcea 	bl	8000100 <__udivsi3>
 800372c:	0003      	movs	r3, r0
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003732:	e008      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b01      	subs	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e001      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e009      	b.n	800375a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	401a      	ands	r2, r3
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	429a      	cmp	r2, r3
 8003756:	d0ed      	beq.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b004      	add	sp, #16
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	40007000 	.word	0x40007000
 8003768:	fffff9ff 	.word	0xfffff9ff
 800376c:	20000000 	.word	0x20000000
 8003770:	000f4240 	.word	0x000f4240

08003774 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <LL_RCC_GetAPB1Prescaler+0x14>)
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	23e0      	movs	r3, #224	; 0xe0
 800377e:	01db      	lsls	r3, r3, #7
 8003780:	4013      	ands	r3, r2
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e2f9      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2201      	movs	r2, #1
 80037a4:	4013      	ands	r3, r2
 80037a6:	d100      	bne.n	80037aa <HAL_RCC_OscConfig+0x1e>
 80037a8:	e07c      	b.n	80038a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037aa:	4bc3      	ldr	r3, [pc, #780]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2238      	movs	r2, #56	; 0x38
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b4:	4bc0      	ldr	r3, [pc, #768]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2203      	movs	r2, #3
 80037ba:	4013      	ands	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_OscConfig+0x3e>
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	4bb9      	ldr	r3, [pc, #740]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	4013      	ands	r3, r2
 80037da:	d062      	beq.n	80038a2 <HAL_RCC_OscConfig+0x116>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d15e      	bne.n	80038a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e2d4      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	025b      	lsls	r3, r3, #9
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x78>
 80037f4:	4bb0      	ldr	r3, [pc, #704]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4baf      	ldr	r3, [pc, #700]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	0249      	lsls	r1, r1, #9
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e020      	b.n	8003846 <HAL_RCC_OscConfig+0xba>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	23a0      	movs	r3, #160	; 0xa0
 800380a:	02db      	lsls	r3, r3, #11
 800380c:	429a      	cmp	r2, r3
 800380e:	d10e      	bne.n	800382e <HAL_RCC_OscConfig+0xa2>
 8003810:	4ba9      	ldr	r3, [pc, #676]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4ba8      	ldr	r3, [pc, #672]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003816:	2180      	movs	r1, #128	; 0x80
 8003818:	02c9      	lsls	r1, r1, #11
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	4ba6      	ldr	r3, [pc, #664]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4ba5      	ldr	r3, [pc, #660]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	0249      	lsls	r1, r1, #9
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e00b      	b.n	8003846 <HAL_RCC_OscConfig+0xba>
 800382e:	4ba2      	ldr	r3, [pc, #648]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4ba1      	ldr	r3, [pc, #644]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003834:	49a1      	ldr	r1, [pc, #644]	; (8003abc <HAL_RCC_OscConfig+0x330>)
 8003836:	400a      	ands	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	4b9f      	ldr	r3, [pc, #636]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b9e      	ldr	r3, [pc, #632]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003840:	499f      	ldr	r1, [pc, #636]	; (8003ac0 <HAL_RCC_OscConfig+0x334>)
 8003842:	400a      	ands	r2, r1
 8003844:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d014      	beq.n	8003878 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7ff f84d 	bl	80028ec <HAL_GetTick>
 8003852:	0003      	movs	r3, r0
 8003854:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7ff f848 	bl	80028ec <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e293      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386a:	4b93      	ldr	r3, [pc, #588]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	4013      	ands	r3, r2
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0xcc>
 8003876:	e015      	b.n	80038a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7ff f838 	bl	80028ec <HAL_GetTick>
 800387c:	0003      	movs	r3, r0
 800387e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003882:	f7ff f833 	bl	80028ec <HAL_GetTick>
 8003886:	0002      	movs	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e27e      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003894:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	4013      	ands	r3, r2
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0xf6>
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2202      	movs	r2, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	d100      	bne.n	80038b0 <HAL_RCC_OscConfig+0x124>
 80038ae:	e099      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b0:	4b81      	ldr	r3, [pc, #516]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2238      	movs	r2, #56	; 0x38
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ba:	4b7f      	ldr	r3, [pc, #508]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2203      	movs	r2, #3
 80038c0:	4013      	ands	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x144>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d002      	beq.n	80038d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d135      	bne.n	8003942 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d6:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4013      	ands	r3, r2
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x162>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e251      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	4b72      	ldr	r3, [pc, #456]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a74      	ldr	r2, [pc, #464]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	021a      	lsls	r2, r3, #8
 80038fe:	4b6e      	ldr	r3, [pc, #440]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d112      	bne.n	8003930 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800390a:	4b6b      	ldr	r3, [pc, #428]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a6e      	ldr	r2, [pc, #440]	; (8003ac8 <HAL_RCC_OscConfig+0x33c>)
 8003910:	4013      	ands	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	4b67      	ldr	r3, [pc, #412]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800391e:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	0adb      	lsrs	r3, r3, #11
 8003924:	2207      	movs	r2, #7
 8003926:	4013      	ands	r3, r2
 8003928:	4a68      	ldr	r2, [pc, #416]	; (8003acc <HAL_RCC_OscConfig+0x340>)
 800392a:	40da      	lsrs	r2, r3
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <HAL_RCC_OscConfig+0x344>)
 800392e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003930:	4b68      	ldr	r3, [pc, #416]	; (8003ad4 <HAL_RCC_OscConfig+0x348>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	0018      	movs	r0, r3
 8003936:	f7fe ff7d 	bl	8002834 <HAL_InitTick>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d051      	beq.n	80039e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e227      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d030      	beq.n	80039ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800394a:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5e      	ldr	r2, [pc, #376]	; (8003ac8 <HAL_RCC_OscConfig+0x33c>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b55      	ldr	r3, [pc, #340]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003964:	2180      	movs	r1, #128	; 0x80
 8003966:	0049      	lsls	r1, r1, #1
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe ffbe 	bl	80028ec <HAL_GetTick>
 8003970:	0003      	movs	r3, r0
 8003972:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe ffb9 	bl	80028ec <HAL_GetTick>
 800397a:	0002      	movs	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e204      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003988:	4b4b      	ldr	r3, [pc, #300]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4013      	ands	r3, r2
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b48      	ldr	r3, [pc, #288]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <HAL_RCC_OscConfig+0x338>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	4b44      	ldr	r3, [pc, #272]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	e01b      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80039b2:	4949      	ldr	r1, [pc, #292]	; (8003ad8 <HAL_RCC_OscConfig+0x34c>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe ff98 	bl	80028ec <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe ff93 	bl	80028ec <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1de      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039d4:	4b38      	ldr	r3, [pc, #224]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4013      	ands	r3, r2
 80039de:	d1f0      	bne.n	80039c2 <HAL_RCC_OscConfig+0x236>
 80039e0:	e000      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	4013      	ands	r3, r2
 80039ec:	d047      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039ee:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2238      	movs	r2, #56	; 0x38
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b18      	cmp	r3, #24
 80039f8:	d10a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039fa:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	2202      	movs	r2, #2
 8003a00:	4013      	ands	r3, r2
 8003a02:	d03c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d138      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e1c0      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a1c:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	430a      	orrs	r2, r1
 8003a22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe ff62 	bl	80028ec <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe ff5d 	bl	80028ec <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1a8      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	2202      	movs	r2, #2
 8003a46:	4013      	ands	r3, r2
 8003a48:	d0f1      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2a2>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fe ff48 	bl	80028ec <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fe ff43 	bl	80028ec <HAL_GetTick>
 8003a66:	0002      	movs	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e18e      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	2202      	movs	r2, #2
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d1f1      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2204      	movs	r2, #4
 8003a84:	4013      	ands	r3, r2
 8003a86:	d100      	bne.n	8003a8a <HAL_RCC_OscConfig+0x2fe>
 8003a88:	e0c6      	b.n	8003c18 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	231f      	movs	r3, #31
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2238      	movs	r2, #56	; 0x38
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d11e      	bne.n	8003adc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d100      	bne.n	8003aaa <HAL_RCC_OscConfig+0x31e>
 8003aa8:	e0b6      	b.n	8003c18 <HAL_RCC_OscConfig+0x48c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d000      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x328>
 8003ab2:	e0b1      	b.n	8003c18 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e16c      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	fffeffff 	.word	0xfffeffff
 8003ac0:	fffbffff 	.word	0xfffbffff
 8003ac4:	ffff80ff 	.word	0xffff80ff
 8003ac8:	ffffc7ff 	.word	0xffffc7ff
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004
 8003ad8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003adc:	4baf      	ldr	r3, [pc, #700]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	055b      	lsls	r3, r3, #21
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_OscConfig+0x360>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x362>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d011      	beq.n	8003b16 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	4baa      	ldr	r3, [pc, #680]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af6:	4ba9      	ldr	r3, [pc, #676]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0549      	lsls	r1, r1, #21
 8003afc:	430a      	orrs	r2, r1
 8003afe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b00:	4ba6      	ldr	r3, [pc, #664]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	055b      	lsls	r3, r3, #21
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b0e:	231f      	movs	r3, #31
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b16:	4ba2      	ldr	r3, [pc, #648]	; (8003da0 <HAL_RCC_OscConfig+0x614>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b22:	4b9f      	ldr	r3, [pc, #636]	; (8003da0 <HAL_RCC_OscConfig+0x614>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b9e      	ldr	r3, [pc, #632]	; (8003da0 <HAL_RCC_OscConfig+0x614>)
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	0049      	lsls	r1, r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b30:	f7fe fedc 	bl	80028ec <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7fe fed7 	bl	80028ec <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e122      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4c:	4b94      	ldr	r3, [pc, #592]	; (8003da0 <HAL_RCC_OscConfig+0x614>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4013      	ands	r3, r2
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3e2>
 8003b60:	4b8e      	ldr	r3, [pc, #568]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b64:	4b8d      	ldr	r3, [pc, #564]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b66:	2101      	movs	r1, #1
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b6c:	e01c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x41c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x404>
 8003b76:	4b89      	ldr	r3, [pc, #548]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b7a:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b7c:	2104      	movs	r1, #4
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b82:	4b86      	ldr	r3, [pc, #536]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x41c>
 8003b90:	4b82      	ldr	r3, [pc, #520]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b94:	4b81      	ldr	r3, [pc, #516]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b9c:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ba0:	4b7e      	ldr	r3, [pc, #504]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d014      	beq.n	8003bda <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fe9c 	bl	80028ec <HAL_GetTick>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb8:	e009      	b.n	8003bce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe fe97 	bl	80028ec <HAL_GetTick>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	4a77      	ldr	r2, [pc, #476]	; (8003da4 <HAL_RCC_OscConfig+0x618>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0e1      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x42e>
 8003bd8:	e013      	b.n	8003c02 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fe fe87 	bl	80028ec <HAL_GetTick>
 8003bde:	0003      	movs	r3, r0
 8003be0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003be2:	e009      	b.n	8003bf8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fe fe82 	bl	80028ec <HAL_GetTick>
 8003be8:	0002      	movs	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	4a6d      	ldr	r2, [pc, #436]	; (8003da4 <HAL_RCC_OscConfig+0x618>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0cc      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bf8:	4b68      	ldr	r3, [pc, #416]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c02:	231f      	movs	r3, #31
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c0c:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c10:	4b62      	ldr	r3, [pc, #392]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c12:	4965      	ldr	r1, [pc, #404]	; (8003da8 <HAL_RCC_OscConfig+0x61c>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d100      	bne.n	8003c22 <HAL_RCC_OscConfig+0x496>
 8003c20:	e0b6      	b.n	8003d90 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c22:	4b5e      	ldr	r3, [pc, #376]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2238      	movs	r2, #56	; 0x38
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d100      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4a4>
 8003c2e:	e07e      	b.n	8003d2e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d153      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b57      	ldr	r3, [pc, #348]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c3e:	495b      	ldr	r1, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x620>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fe52 	bl	80028ec <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe fe4d 	bl	80028ec <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e098      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	4b4e      	ldr	r3, [pc, #312]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	049b      	lsls	r3, r3, #18
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c6c:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a4f      	ldr	r2, [pc, #316]	; (8003db0 <HAL_RCC_OscConfig+0x624>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	0019      	movs	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	431a      	orrs	r2, r3
 8003c94:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c96:	430a      	orrs	r2, r1
 8003c98:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9a:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b3f      	ldr	r3, [pc, #252]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0449      	lsls	r1, r1, #17
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ca8:	4b3c      	ldr	r3, [pc, #240]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	0549      	lsls	r1, r1, #21
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fe19 	bl	80028ec <HAL_GetTick>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe fe14 	bl	80028ec <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e05f      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd2:	4b32      	ldr	r3, [pc, #200]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	049b      	lsls	r3, r3, #18
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x534>
 8003cde:	e057      	b.n	8003d90 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce0:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003ce6:	4931      	ldr	r1, [pc, #196]	; (8003dac <HAL_RCC_OscConfig+0x620>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	4b2a      	ldr	r3, [pc, #168]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003cf2:	2103      	movs	r1, #3
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003cfe:	492d      	ldr	r1, [pc, #180]	; (8003db4 <HAL_RCC_OscConfig+0x628>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fdf2 	bl	80028ec <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fe fded 	bl	80028ec <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e038      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d20:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	049b      	lsls	r3, r3, #18
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x582>
 8003d2c:	e030      	b.n	8003d90 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e02b      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d3a:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_RCC_OscConfig+0x610>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2203      	movs	r2, #3
 8003d44:	401a      	ands	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d11e      	bne.n	8003d8c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2270      	movs	r2, #112	; 0x70
 8003d52:	401a      	ands	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d117      	bne.n	8003d8c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	23fe      	movs	r3, #254	; 0xfe
 8003d60:	01db      	lsls	r3, r3, #7
 8003d62:	401a      	ands	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	23f8      	movs	r3, #248	; 0xf8
 8003d72:	039b      	lsls	r3, r3, #14
 8003d74:	401a      	ands	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	0f5b      	lsrs	r3, r3, #29
 8003d82:	075a      	lsls	r2, r3, #29
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b008      	add	sp, #32
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40007000 	.word	0x40007000
 8003da4:	00001388 	.word	0x00001388
 8003da8:	efffffff 	.word	0xefffffff
 8003dac:	feffffff 	.word	0xfeffffff
 8003db0:	1fc1808c 	.word	0x1fc1808c
 8003db4:	effeffff 	.word	0xeffeffff

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0e9      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d91e      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2207      	movs	r2, #7
 8003de0:	4393      	bics	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	4b70      	ldr	r3, [pc, #448]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fd7e 	bl	80028ec <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003df4:	e009      	b.n	8003e0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df6:	f7fe fd79 	bl	80028ec <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	4a6a      	ldr	r2, [pc, #424]	; (8003fac <HAL_RCC_ClockConfig+0x1f4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0ca      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2207      	movs	r2, #7
 8003e10:	4013      	ands	r3, r2
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1ee      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d015      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2204      	movs	r2, #4
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d006      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e2c:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	4b5f      	ldr	r3, [pc, #380]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e32:	21e0      	movs	r1, #224	; 0xe0
 8003e34:	01c9      	lsls	r1, r1, #7
 8003e36:	430a      	orrs	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e3a:	4b5d      	ldr	r3, [pc, #372]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4a5d      	ldr	r2, [pc, #372]	; (8003fb4 <HAL_RCC_ClockConfig+0x1fc>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4013      	ands	r3, r2
 8003e56:	d057      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d107      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	029b      	lsls	r3, r3, #10
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d12b      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e097      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e78:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	049b      	lsls	r3, r3, #18
 8003e80:	4013      	ands	r3, r2
 8003e82:	d11f      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e08b      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d113      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e07f      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ea8:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eac:	2202      	movs	r2, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d108      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e074      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e06d      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec4:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2207      	movs	r2, #7
 8003eca:	4393      	bics	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4b37      	ldr	r3, [pc, #220]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fe fd08 	bl	80028ec <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee2:	f7fe fd03 	bl	80028ec <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <HAL_RCC_ClockConfig+0x1f4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e054      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2238      	movs	r2, #56	; 0x38
 8003efc:	401a      	ands	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1ec      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	4013      	ands	r3, r2
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d21e      	bcs.n	8003f54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2207      	movs	r2, #7
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f28:	f7fe fce0 	bl	80028ec <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f30:	e009      	b.n	8003f46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f32:	f7fe fcdb 	bl	80028ec <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_RCC_ClockConfig+0x1f4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e02c      	b.n	8003fa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1ee      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <HAL_RCC_ClockConfig+0x200>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003f72:	f000 f829 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f76:	0001      	movs	r1, r0
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	220f      	movs	r2, #15
 8003f80:	401a      	ands	r2, r3
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_RCC_ClockConfig+0x204>)
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	58d3      	ldr	r3, [r2, r3]
 8003f88:	221f      	movs	r2, #31
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	000a      	movs	r2, r1
 8003f8e:	40da      	lsrs	r2, r3
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x208>)
 8003f92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_ClockConfig+0x20c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fe fc4b 	bl	8002834 <HAL_InitTick>
 8003f9e:	0003      	movs	r3, r0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	00001388 	.word	0x00001388
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	fffff0ff 	.word	0xfffff0ff
 8003fb8:	ffff8fff 	.word	0xffff8fff
 8003fbc:	080077c8 	.word	0x080077c8
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	20000004 	.word	0x20000004

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fce:	4b3c      	ldr	r3, [pc, #240]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2238      	movs	r2, #56	; 0x38
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fd8:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0adb      	lsrs	r3, r3, #11
 8003fde:	2207      	movs	r2, #7
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	0013      	movs	r3, r2
 8003fe8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fea:	6839      	ldr	r1, [r7, #0]
 8003fec:	4835      	ldr	r0, [pc, #212]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fee:	f7fc f887 	bl	8000100 <__udivsi3>
 8003ff2:	0003      	movs	r3, r0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e05d      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2238      	movs	r2, #56	; 0x38
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b08      	cmp	r3, #8
 8004002:	d102      	bne.n	800400a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004004:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	e054      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2238      	movs	r2, #56	; 0x38
 8004010:	4013      	ands	r3, r2
 8004012:	2b10      	cmp	r3, #16
 8004014:	d138      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2203      	movs	r2, #3
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004020:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	2207      	movs	r2, #7
 8004028:	4013      	ands	r3, r2
 800402a:	3301      	adds	r3, #1
 800402c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d10d      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	4824      	ldr	r0, [pc, #144]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004038:	f7fc f862 	bl	8000100 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	0019      	movs	r1, r3
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	227f      	movs	r2, #127	; 0x7f
 8004048:	4013      	ands	r3, r2
 800404a:	434b      	muls	r3, r1
 800404c:	617b      	str	r3, [r7, #20]
        break;
 800404e:	e00d      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	481c      	ldr	r0, [pc, #112]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004054:	f7fc f854 	bl	8000100 <__udivsi3>
 8004058:	0003      	movs	r3, r0
 800405a:	0019      	movs	r1, r3
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	227f      	movs	r2, #127	; 0x7f
 8004064:	4013      	ands	r3, r2
 8004066:	434b      	muls	r3, r1
 8004068:	617b      	str	r3, [r7, #20]
        break;
 800406a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800406c:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0f5b      	lsrs	r3, r3, #29
 8004072:	2207      	movs	r2, #7
 8004074:	4013      	ands	r3, r2
 8004076:	3301      	adds	r3, #1
 8004078:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6978      	ldr	r0, [r7, #20]
 800407e:	f7fc f83f 	bl	8000100 <__udivsi3>
 8004082:	0003      	movs	r3, r0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e015      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2238      	movs	r2, #56	; 0x38
 800408e:	4013      	ands	r3, r2
 8004090:	2b20      	cmp	r3, #32
 8004092:	d103      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	e00b      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2238      	movs	r2, #56	; 0x38
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b18      	cmp	r3, #24
 80040a6:	d103      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040a8:	23fa      	movs	r3, #250	; 0xfa
 80040aa:	01db      	lsls	r3, r3, #7
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e001      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040b4:	693b      	ldr	r3, [r7, #16]
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b006      	add	sp, #24
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	40021000 	.word	0x40021000
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <HAL_RCC_GetHCLKFreq+0x10>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	20000000 	.word	0x20000000

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80040e4:	f7ff fff2 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040e8:	0004      	movs	r4, r0
 80040ea:	f7ff fb43 	bl	8003774 <LL_RCC_GetAPB1Prescaler>
 80040ee:	0003      	movs	r3, r0
 80040f0:	0b1a      	lsrs	r2, r3, #12
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040f4:	0092      	lsls	r2, r2, #2
 80040f6:	58d3      	ldr	r3, [r2, r3]
 80040f8:	221f      	movs	r2, #31
 80040fa:	4013      	ands	r3, r2
 80040fc:	40dc      	lsrs	r4, r3
 80040fe:	0023      	movs	r3, r4
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	bdb0      	pop	{r4, r5, r7, pc}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	08007808 	.word	0x08007808

0800410c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004114:	2313      	movs	r3, #19
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800411c:	2312      	movs	r3, #18
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	4013      	ands	r3, r2
 800412e:	d100      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004130:	e0a4      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004132:	2311      	movs	r3, #17
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b7f      	ldr	r3, [pc, #508]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800413c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	055b      	lsls	r3, r3, #21
 8004142:	4013      	ands	r3, r2
 8004144:	d111      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800414a:	4b7b      	ldr	r3, [pc, #492]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800414c:	2180      	movs	r1, #128	; 0x80
 800414e:	0549      	lsls	r1, r1, #21
 8004150:	430a      	orrs	r2, r1
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
 8004154:	4b78      	ldr	r3, [pc, #480]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	055b      	lsls	r3, r3, #21
 800415c:	4013      	ands	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2311      	movs	r3, #17
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416a:	4b74      	ldr	r3, [pc, #464]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b73      	ldr	r3, [pc, #460]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	0049      	lsls	r1, r1, #1
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004178:	f7fe fbb8 	bl	80028ec <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004180:	e00b      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004182:	f7fe fbb3 	bl	80028ec <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d904      	bls.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004190:	2313      	movs	r3, #19
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2203      	movs	r2, #3
 8004196:	701a      	strb	r2, [r3, #0]
        break;
 8004198:	e005      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800419a:	4b68      	ldr	r3, [pc, #416]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4013      	ands	r3, r2
 80041a4:	d0ed      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80041a6:	2313      	movs	r3, #19
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d154      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041b0:	4b61      	ldr	r3, [pc, #388]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041b4:	23c0      	movs	r3, #192	; 0xc0
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d019      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d014      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041cc:	4b5a      	ldr	r3, [pc, #360]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	4a5b      	ldr	r2, [pc, #364]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041d6:	4b58      	ldr	r3, [pc, #352]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041da:	4b57      	ldr	r3, [pc, #348]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	0249      	lsls	r1, r1, #9
 80041e0:	430a      	orrs	r2, r1
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041e4:	4b54      	ldr	r3, [pc, #336]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041e8:	4b53      	ldr	r3, [pc, #332]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041ea:	4956      	ldr	r1, [pc, #344]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80041ec:	400a      	ands	r2, r1
 80041ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041f0:	4b51      	ldr	r3, [pc, #324]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	d016      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fe fb75 	bl	80028ec <HAL_GetTick>
 8004202:	0003      	movs	r3, r0
 8004204:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004206:	e00c      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004208:	f7fe fb70 	bl	80028ec <HAL_GetTick>
 800420c:	0002      	movs	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	4a4d      	ldr	r2, [pc, #308]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d904      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004218:	2313      	movs	r3, #19
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2203      	movs	r2, #3
 800421e:	701a      	strb	r2, [r3, #0]
            break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004222:	4b45      	ldr	r3, [pc, #276]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	2202      	movs	r2, #2
 8004228:	4013      	ands	r3, r2
 800422a:	d0ed      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800422c:	2313      	movs	r3, #19
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10a      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004236:	4b40      	ldr	r3, [pc, #256]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	4a41      	ldr	r2, [pc, #260]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	4b3c      	ldr	r3, [pc, #240]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004246:	430a      	orrs	r2, r1
 8004248:	65da      	str	r2, [r3, #92]	; 0x5c
 800424a:	e00c      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800424c:	2312      	movs	r3, #18
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	2213      	movs	r2, #19
 8004252:	18ba      	adds	r2, r7, r2
 8004254:	7812      	ldrb	r2, [r2, #0]
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e005      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	2312      	movs	r3, #18
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	2213      	movs	r2, #19
 8004260:	18ba      	adds	r2, r7, r2
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004266:	2311      	movs	r3, #17
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d105      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004274:	4b30      	ldr	r3, [pc, #192]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004276:	4935      	ldr	r1, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004278:	400a      	ands	r2, r1
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2201      	movs	r2, #1
 8004282:	4013      	ands	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004286:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	2203      	movs	r2, #3
 800428c:	4393      	bics	r3, r2
 800428e:	0019      	movs	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4b28      	ldr	r3, [pc, #160]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004296:	430a      	orrs	r2, r1
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2220      	movs	r2, #32
 80042a0:	4013      	ands	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a4:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	4a29      	ldr	r2, [pc, #164]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042b4:	430a      	orrs	r2, r1
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	01db      	lsls	r3, r3, #7
 80042c0:	4013      	ands	r3, r2
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	0899      	lsrs	r1, r3, #2
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042d2:	430a      	orrs	r2, r1
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	05db      	lsls	r3, r3, #23
 80042de:	429a      	cmp	r2, r3
 80042e0:	d106      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	0249      	lsls	r1, r1, #9
 80042ec:	430a      	orrs	r2, r1
 80042ee:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	4013      	ands	r3, r2
 80042fa:	d016      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	4a14      	ldr	r2, [pc, #80]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800430c:	430a      	orrs	r2, r1
 800430e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	01db      	lsls	r3, r3, #7
 8004318:	429a      	cmp	r2, r3
 800431a:	d106      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004322:	2180      	movs	r1, #128	; 0x80
 8004324:	0249      	lsls	r1, r1, #9
 8004326:	430a      	orrs	r2, r1
 8004328:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800432a:	2312      	movs	r3, #18
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	781b      	ldrb	r3, [r3, #0]
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b006      	add	sp, #24
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
 8004340:	fffffcff 	.word	0xfffffcff
 8004344:	fffeffff 	.word	0xfffeffff
 8004348:	00001388 	.word	0x00001388
 800434c:	efffffff 	.word	0xefffffff
 8004350:	ffffcfff 	.word	0xffffcfff
 8004354:	ffff3fff 	.word	0xffff3fff

08004358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e0a8      	b.n	80044bc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	2382      	movs	r3, #130	; 0x82
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	d009      	beq.n	8004392 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	61da      	str	r2, [r3, #28]
 8004384:	e005      	b.n	8004392 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	225d      	movs	r2, #93	; 0x5d
 800439c:	5c9b      	ldrb	r3, [r3, r2]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	225c      	movs	r2, #92	; 0x5c
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f7fd fffa 	bl	80023a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	225d      	movs	r2, #93	; 0x5d
 80043b8:	2102      	movs	r1, #2
 80043ba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	438a      	bics	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	23e0      	movs	r3, #224	; 0xe0
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e002      	b.n	80043e4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	015b      	lsls	r3, r3, #5
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	23f0      	movs	r3, #240	; 0xf0
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d008      	beq.n	8004402 <HAL_SPI_Init+0xaa>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	23e0      	movs	r3, #224	; 0xe0
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	2382      	movs	r3, #130	; 0x82
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	401a      	ands	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6899      	ldr	r1, [r3, #8]
 8004410:	2384      	movs	r3, #132	; 0x84
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	400b      	ands	r3, r1
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2102      	movs	r1, #2
 800441e:	400b      	ands	r3, r1
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2101      	movs	r1, #1
 8004428:	400b      	ands	r3, r1
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6999      	ldr	r1, [r3, #24]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	400b      	ands	r3, r1
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2138      	movs	r1, #56	; 0x38
 800443e:	400b      	ands	r3, r1
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	400b      	ands	r3, r1
 800444a:	431a      	orrs	r2, r3
 800444c:	0011      	movs	r1, r2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	019b      	lsls	r3, r3, #6
 8004456:	401a      	ands	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	2204      	movs	r2, #4
 8004468:	401a      	ands	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2110      	movs	r1, #16
 8004470:	400b      	ands	r3, r1
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	2108      	movs	r1, #8
 800447a:	400b      	ands	r3, r1
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68d9      	ldr	r1, [r3, #12]
 8004482:	23f0      	movs	r3, #240	; 0xf0
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	400b      	ands	r3, r1
 8004488:	431a      	orrs	r2, r3
 800448a:	0011      	movs	r1, r2
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	015b      	lsls	r3, r3, #5
 8004492:	401a      	ands	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4907      	ldr	r1, [pc, #28]	; (80044c4 <HAL_SPI_Init+0x16c>)
 80044a8:	400a      	ands	r2, r1
 80044aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	225d      	movs	r2, #93	; 0x5d
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b004      	add	sp, #16
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	fffff7ff 	.word	0xfffff7ff

080044c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	1dbb      	adds	r3, r7, #6
 80044d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044d8:	231f      	movs	r3, #31
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	225c      	movs	r2, #92	; 0x5c
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Transmit+0x26>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e140      	b.n	8004770 <HAL_SPI_Transmit+0x2a8>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	225c      	movs	r2, #92	; 0x5c
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f6:	f7fe f9f9 	bl	80028ec <HAL_GetTick>
 80044fa:	0003      	movs	r3, r0
 80044fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044fe:	2316      	movs	r3, #22
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	1dba      	adds	r2, r7, #6
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	225d      	movs	r2, #93	; 0x5d
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d004      	beq.n	800451e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004514:	231f      	movs	r3, #31
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	2202      	movs	r2, #2
 800451a:	701a      	strb	r2, [r3, #0]
    goto error;
 800451c:	e11d      	b.n	800475a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_SPI_Transmit+0x64>
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800452c:	231f      	movs	r3, #31
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
    goto error;
 8004534:	e111      	b.n	800475a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	225d      	movs	r2, #93	; 0x5d
 800453a:	2103      	movs	r1, #3
 800453c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1dba      	adds	r2, r7, #6
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1dba      	adds	r2, r7, #6
 8004556:	8812      	ldrh	r2, [r2, #0]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2244      	movs	r2, #68	; 0x44
 8004564:	2100      	movs	r1, #0
 8004566:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2246      	movs	r2, #70	; 0x46
 800456c:	2100      	movs	r1, #0
 800456e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	429a      	cmp	r2, r3
 8004586:	d110      	bne.n	80045aa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2140      	movs	r1, #64	; 0x40
 8004594:	438a      	bics	r2, r1
 8004596:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2180      	movs	r1, #128	; 0x80
 80045a4:	01c9      	lsls	r1, r1, #7
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d007      	beq.n	80045c8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2140      	movs	r1, #64	; 0x40
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	23e0      	movs	r3, #224	; 0xe0
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d94e      	bls.n	8004672 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_SPI_Transmit+0x11e>
 80045dc:	2316      	movs	r3, #22
 80045de:	18fb      	adds	r3, r7, r3
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d13f      	bne.n	8004666 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800460a:	e02c      	b.n	8004666 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2202      	movs	r2, #2
 8004614:	4013      	ands	r3, r2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d112      	bne.n	8004640 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	881a      	ldrh	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	1c9a      	adds	r2, r3, #2
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800463e:	e012      	b.n	8004666 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004640:	f7fe f954 	bl	80028ec <HAL_GetTick>
 8004644:	0002      	movs	r2, r0
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d802      	bhi.n	8004656 <HAL_SPI_Transmit+0x18e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	d102      	bne.n	800465c <HAL_SPI_Transmit+0x194>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800465c:	231f      	movs	r3, #31
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2203      	movs	r2, #3
 8004662:	701a      	strb	r2, [r3, #0]
          goto error;
 8004664:	e079      	b.n	800475a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1cd      	bne.n	800460c <HAL_SPI_Transmit+0x144>
 8004670:	e04f      	b.n	8004712 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_SPI_Transmit+0x1bc>
 800467a:	2316      	movs	r3, #22
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d141      	bne.n	8004708 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80046aa:	e02d      	b.n	8004708 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d113      	bne.n	80046e2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	7812      	ldrb	r2, [r2, #0]
 80046c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046e0:	e012      	b.n	8004708 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e2:	f7fe f903 	bl	80028ec <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d802      	bhi.n	80046f8 <HAL_SPI_Transmit+0x230>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Transmit+0x236>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80046fe:	231f      	movs	r3, #31
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2203      	movs	r2, #3
 8004704:	701a      	strb	r2, [r3, #0]
          goto error;
 8004706:	e028      	b.n	800475a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1cc      	bne.n	80046ac <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	6839      	ldr	r1, [r7, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 fcdb 	bl	80050d4 <SPI_EndRxTxTransaction>
 800471e:	1e03      	subs	r3, r0, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800474e:	231f      	movs	r3, #31
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e000      	b.n	800475a <HAL_SPI_Transmit+0x292>
  }

error:
 8004758:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	225d      	movs	r2, #93	; 0x5d
 800475e:	2101      	movs	r1, #1
 8004760:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	225c      	movs	r2, #92	; 0x5c
 8004766:	2100      	movs	r1, #0
 8004768:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800476a:	231f      	movs	r3, #31
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	781b      	ldrb	r3, [r3, #0]
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b008      	add	sp, #32
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	1dbb      	adds	r3, r7, #6
 8004786:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004788:	2317      	movs	r3, #23
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	2382      	movs	r3, #130	; 0x82
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	429a      	cmp	r2, r3
 800479a:	d113      	bne.n	80047c4 <HAL_SPI_Receive+0x4c>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10f      	bne.n	80047c4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	225d      	movs	r2, #93	; 0x5d
 80047a8:	2104      	movs	r1, #4
 80047aa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047ac:	1dbb      	adds	r3, r7, #6
 80047ae:	881c      	ldrh	r4, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	0023      	movs	r3, r4
 80047bc:	f000 f928 	bl	8004a10 <HAL_SPI_TransmitReceive>
 80047c0:	0003      	movs	r3, r0
 80047c2:	e11c      	b.n	80049fe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	225c      	movs	r2, #92	; 0x5c
 80047c8:	5c9b      	ldrb	r3, [r3, r2]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_SPI_Receive+0x5a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e115      	b.n	80049fe <HAL_SPI_Receive+0x286>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	225c      	movs	r2, #92	; 0x5c
 80047d6:	2101      	movs	r1, #1
 80047d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047da:	f7fe f887 	bl	80028ec <HAL_GetTick>
 80047de:	0003      	movs	r3, r0
 80047e0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	225d      	movs	r2, #93	; 0x5d
 80047e6:	5c9b      	ldrb	r3, [r3, r2]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d004      	beq.n	80047f8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80047ee:	2317      	movs	r3, #23
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	2202      	movs	r2, #2
 80047f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80047f6:	e0f7      	b.n	80049e8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_SPI_Receive+0x8e>
 80047fe:	1dbb      	adds	r3, r7, #6
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004806:	2317      	movs	r3, #23
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
    goto error;
 800480e:	e0eb      	b.n	80049e8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	225d      	movs	r2, #93	; 0x5d
 8004814:	2104      	movs	r1, #4
 8004816:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1dba      	adds	r2, r7, #6
 8004828:	2144      	movs	r1, #68	; 0x44
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1dba      	adds	r2, r7, #6
 8004832:	2146      	movs	r1, #70	; 0x46
 8004834:	8812      	ldrh	r2, [r2, #0]
 8004836:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	23e0      	movs	r3, #224	; 0xe0
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	429a      	cmp	r2, r3
 8004860:	d908      	bls.n	8004874 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4966      	ldr	r1, [pc, #408]	; (8004a08 <HAL_SPI_Receive+0x290>)
 800486e:	400a      	ands	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	e008      	b.n	8004886 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2180      	movs	r1, #128	; 0x80
 8004880:	0149      	lsls	r1, r1, #5
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	429a      	cmp	r2, r3
 8004890:	d10f      	bne.n	80048b2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2140      	movs	r1, #64	; 0x40
 800489e:	438a      	bics	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4957      	ldr	r1, [pc, #348]	; (8004a0c <HAL_SPI_Receive+0x294>)
 80048ae:	400a      	ands	r2, r1
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2240      	movs	r2, #64	; 0x40
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d007      	beq.n	80048d0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2140      	movs	r1, #64	; 0x40
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	23e0      	movs	r3, #224	; 0xe0
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	429a      	cmp	r2, r3
 80048da:	d900      	bls.n	80048de <HAL_SPI_Receive+0x166>
 80048dc:	e069      	b.n	80049b2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048de:	e031      	b.n	8004944 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2201      	movs	r2, #1
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d117      	bne.n	800491e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	001a      	movs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2246      	movs	r2, #70	; 0x46
 800490e:	5a9b      	ldrh	r3, [r3, r2]
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b299      	uxth	r1, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2246      	movs	r2, #70	; 0x46
 800491a:	5299      	strh	r1, [r3, r2]
 800491c:	e012      	b.n	8004944 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800491e:	f7fd ffe5 	bl	80028ec <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d802      	bhi.n	8004934 <HAL_SPI_Receive+0x1bc>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	d102      	bne.n	800493a <HAL_SPI_Receive+0x1c2>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800493a:	2317      	movs	r3, #23
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	2203      	movs	r2, #3
 8004940:	701a      	strb	r2, [r3, #0]
          goto error;
 8004942:	e051      	b.n	80049e8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2246      	movs	r2, #70	; 0x46
 8004948:	5a9b      	ldrh	r3, [r3, r2]
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1c7      	bne.n	80048e0 <HAL_SPI_Receive+0x168>
 8004950:	e035      	b.n	80049be <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2201      	movs	r2, #1
 800495a:	4013      	ands	r3, r2
 800495c:	2b01      	cmp	r3, #1
 800495e:	d115      	bne.n	800498c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	b292      	uxth	r2, r2
 800496c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2246      	movs	r2, #70	; 0x46
 800497c:	5a9b      	ldrh	r3, [r3, r2]
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b299      	uxth	r1, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2246      	movs	r2, #70	; 0x46
 8004988:	5299      	strh	r1, [r3, r2]
 800498a:	e012      	b.n	80049b2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498c:	f7fd ffae 	bl	80028ec <HAL_GetTick>
 8004990:	0002      	movs	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d802      	bhi.n	80049a2 <HAL_SPI_Receive+0x22a>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	d102      	bne.n	80049a8 <HAL_SPI_Receive+0x230>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80049a8:	2317      	movs	r3, #23
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2203      	movs	r2, #3
 80049ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80049b0:	e01a      	b.n	80049e8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2246      	movs	r2, #70	; 0x46
 80049b6:	5a9b      	ldrh	r3, [r3, r2]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c9      	bne.n	8004952 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 fb27 	bl	8005018 <SPI_EndRxTransaction>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80049dc:	2317      	movs	r3, #23
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e000      	b.n	80049e8 <HAL_SPI_Receive+0x270>
  }

error :
 80049e6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	225d      	movs	r2, #93	; 0x5d
 80049ec:	2101      	movs	r1, #1
 80049ee:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	225c      	movs	r2, #92	; 0x5c
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80049f8:	2317      	movs	r3, #23
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	781b      	ldrb	r3, [r3, #0]
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b007      	add	sp, #28
 8004a04:	bd90      	pop	{r4, r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	ffffefff 	.word	0xffffefff
 8004a0c:	ffffbfff 	.word	0xffffbfff

08004a10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	1cbb      	adds	r3, r7, #2
 8004a20:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a22:	2301      	movs	r3, #1
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a26:	2323      	movs	r3, #35	; 0x23
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	225c      	movs	r2, #92	; 0x5c
 8004a32:	5c9b      	ldrb	r3, [r3, r2]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_SPI_TransmitReceive+0x2c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e1b6      	b.n	8004daa <HAL_SPI_TransmitReceive+0x39a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	225c      	movs	r2, #92	; 0x5c
 8004a40:	2101      	movs	r1, #1
 8004a42:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a44:	f7fd ff52 	bl	80028ec <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a4c:	201b      	movs	r0, #27
 8004a4e:	183b      	adds	r3, r7, r0
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	215d      	movs	r1, #93	; 0x5d
 8004a54:	5c52      	ldrb	r2, [r2, r1]
 8004a56:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a5e:	2312      	movs	r3, #18
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	1cba      	adds	r2, r7, #2
 8004a64:	8812      	ldrh	r2, [r2, #0]
 8004a66:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a68:	183b      	adds	r3, r7, r0
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d012      	beq.n	8004a96 <HAL_SPI_TransmitReceive+0x86>
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	2382      	movs	r3, #130	; 0x82
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d108      	bne.n	8004a8c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_SPI_TransmitReceive+0x7c>
 8004a82:	231b      	movs	r3, #27
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d004      	beq.n	8004a96 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004a8c:	2323      	movs	r3, #35	; 0x23
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2202      	movs	r2, #2
 8004a92:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a94:	e17e      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d006      	beq.n	8004aaa <HAL_SPI_TransmitReceive+0x9a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_SPI_TransmitReceive+0x9a>
 8004aa2:	1cbb      	adds	r3, r7, #2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004aaa:	2323      	movs	r3, #35	; 0x23
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ab2:	e16f      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	225d      	movs	r2, #93	; 0x5d
 8004ab8:	5c9b      	ldrb	r3, [r3, r2]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d003      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	225d      	movs	r2, #93	; 0x5d
 8004ac4:	2105      	movs	r1, #5
 8004ac6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1cba      	adds	r2, r7, #2
 8004ad8:	2146      	movs	r1, #70	; 0x46
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1cba      	adds	r2, r7, #2
 8004ae2:	2144      	movs	r1, #68	; 0x44
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1cba      	adds	r2, r7, #2
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1cba      	adds	r2, r7, #2
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	23e0      	movs	r3, #224	; 0xe0
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d908      	bls.n	8004b28 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	49a4      	ldr	r1, [pc, #656]	; (8004db4 <HAL_SPI_TransmitReceive+0x3a4>)
 8004b22:	400a      	ands	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	e008      	b.n	8004b3a <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	0149      	lsls	r1, r1, #5
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d007      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2140      	movs	r1, #64	; 0x40
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	23e0      	movs	r3, #224	; 0xe0
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d800      	bhi.n	8004b66 <HAL_SPI_TransmitReceive+0x156>
 8004b64:	e07f      	b.n	8004c66 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x16a>
 8004b6e:	2312      	movs	r3, #18
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d000      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x16a>
 8004b78:	e069      	b.n	8004c4e <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b9e:	e056      	b.n	8004c4e <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d11b      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x1d6>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d016      	beq.n	8004be6 <HAL_SPI_TransmitReceive+0x1d6>
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d113      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	881a      	ldrh	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	1c9a      	adds	r2, r3, #2
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2201      	movs	r2, #1
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d11c      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x21e>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2246      	movs	r2, #70	; 0x46
 8004bf8:	5a9b      	ldrh	r3, [r3, r2]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d016      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	b292      	uxth	r2, r2
 8004c0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	1c9a      	adds	r2, r3, #2
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2246      	movs	r2, #70	; 0x46
 8004c1c:	5a9b      	ldrh	r3, [r3, r2]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b299      	uxth	r1, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2246      	movs	r2, #70	; 0x46
 8004c28:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c2e:	f7fd fe5d 	bl	80028ec <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d807      	bhi.n	8004c4e <HAL_SPI_TransmitReceive+0x23e>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	3301      	adds	r3, #1
 8004c42:	d004      	beq.n	8004c4e <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8004c44:	2323      	movs	r3, #35	; 0x23
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2203      	movs	r2, #3
 8004c4a:	701a      	strb	r2, [r3, #0]
        goto error;
 8004c4c:	e0a2      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1a3      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x190>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2246      	movs	r2, #70	; 0x46
 8004c5c:	5a9b      	ldrh	r3, [r3, r2]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d19d      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x190>
 8004c64:	e085      	b.n	8004d72 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x26a>
 8004c6e:	2312      	movs	r3, #18
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d000      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x26a>
 8004c78:	e070      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca0:	e05c      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d11c      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x2da>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <HAL_SPI_TransmitReceive+0x2da>
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d114      	bne.n	8004cea <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d11e      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0x326>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2246      	movs	r2, #70	; 0x46
 8004cfc:	5a9b      	ldrh	r3, [r3, r2]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d018      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	7812      	ldrb	r2, [r2, #0]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2246      	movs	r2, #70	; 0x46
 8004d24:	5a9b      	ldrh	r3, [r3, r2]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b299      	uxth	r1, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2246      	movs	r2, #70	; 0x46
 8004d30:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d32:	2301      	movs	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d36:	f7fd fdd9 	bl	80028ec <HAL_GetTick>
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d802      	bhi.n	8004d4c <HAL_SPI_TransmitReceive+0x33c>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	3301      	adds	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x342>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8004d52:	2323      	movs	r3, #35	; 0x23
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	2203      	movs	r2, #3
 8004d58:	701a      	strb	r2, [r3, #0]
        goto error;
 8004d5a:	e01b      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d19d      	bne.n	8004ca2 <HAL_SPI_TransmitReceive+0x292>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2246      	movs	r2, #70	; 0x46
 8004d6a:	5a9b      	ldrh	r3, [r3, r2]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d197      	bne.n	8004ca2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f000 f9ab 	bl	80050d4 <SPI_EndRxTxTransaction>
 8004d7e:	1e03      	subs	r3, r0, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8004d82:	2323      	movs	r3, #35	; 0x23
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	661a      	str	r2, [r3, #96]	; 0x60
 8004d90:	e000      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8004d92:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	225d      	movs	r2, #93	; 0x5d
 8004d98:	2101      	movs	r1, #1
 8004d9a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	225c      	movs	r2, #92	; 0x5c
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004da4:	2323      	movs	r3, #35	; 0x23
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	781b      	ldrb	r3, [r3, #0]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b00a      	add	sp, #40	; 0x28
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	ffffefff 	.word	0xffffefff

08004db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	1dfb      	adds	r3, r7, #7
 8004dc6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dc8:	f7fd fd90 	bl	80028ec <HAL_GetTick>
 8004dcc:	0002      	movs	r2, r0
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	18d3      	adds	r3, r2, r3
 8004dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dd8:	f7fd fd88 	bl	80028ec <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004de0:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	015b      	lsls	r3, r3, #5
 8004de6:	0d1b      	lsrs	r3, r3, #20
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	4353      	muls	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dee:	e058      	b.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	d055      	beq.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004df6:	f7fd fd79 	bl	80028ec <HAL_GetTick>
 8004dfa:	0002      	movs	r2, r0
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d902      	bls.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d142      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	21e0      	movs	r1, #224	; 0xe0
 8004e18:	438a      	bics	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	2382      	movs	r3, #130	; 0x82
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d113      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	2380      	movs	r3, #128	; 0x80
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d005      	beq.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d107      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2140      	movs	r1, #64	; 0x40
 8004e4c:	438a      	bics	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	019b      	lsls	r3, r3, #6
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d110      	bne.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	491a      	ldr	r1, [pc, #104]	; (8004ed0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004e68:	400a      	ands	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2180      	movs	r1, #128	; 0x80
 8004e78:	0189      	lsls	r1, r1, #6
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	225d      	movs	r2, #93	; 0x5d
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	225c      	movs	r2, #92	; 0x5c
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e017      	b.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	425a      	negs	r2, r3
 8004eb2:	4153      	adcs	r3, r2
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	1dfb      	adds	r3, r7, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d197      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b008      	add	sp, #32
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	ffffdfff 	.word	0xffffdfff

08004ed4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ee2:	2317      	movs	r3, #23
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eea:	f7fd fcff 	bl	80028ec <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	18d3      	adds	r3, r2, r3
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004efa:	f7fd fcf7 	bl	80028ec <HAL_GetTick>
 8004efe:	0003      	movs	r3, r0
 8004f00:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f0a:	4b41      	ldr	r3, [pc, #260]	; (8005010 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	0013      	movs	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	00da      	lsls	r2, r3, #3
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	0d1b      	lsrs	r3, r3, #20
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	4353      	muls	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f20:	e068      	b.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	23c0      	movs	r3, #192	; 0xc0
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d10a      	bne.n	8004f42 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	2117      	movs	r1, #23
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f3e:	187b      	adds	r3, r7, r1
 8004f40:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	d055      	beq.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f48:	f7fd fcd0 	bl	80028ec <HAL_GetTick>
 8004f4c:	0002      	movs	r2, r0
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d902      	bls.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d142      	bne.n	8004fe4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	21e0      	movs	r1, #224	; 0xe0
 8004f6a:	438a      	bics	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	2382      	movs	r3, #130	; 0x82
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d113      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d005      	beq.n	8004f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d107      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	438a      	bics	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d110      	bne.n	8004fd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4916      	ldr	r1, [pc, #88]	; (8005014 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004fba:	400a      	ands	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2180      	movs	r1, #128	; 0x80
 8004fca:	0189      	lsls	r1, r1, #6
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	225d      	movs	r2, #93	; 0x5d
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	225c      	movs	r2, #92	; 0x5c
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e010      	b.n	8005006 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	429a      	cmp	r2, r3
 8005002:	d18e      	bne.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b00a      	add	sp, #40	; 0x28
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	20000000 	.word	0x20000000
 8005014:	ffffdfff 	.word	0xffffdfff

08005018 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	2382      	movs	r3, #130	; 0x82
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	429a      	cmp	r2, r3
 800502e:	d113      	bne.n	8005058 <SPI_EndRxTransaction+0x40>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	429a      	cmp	r2, r3
 800503a:	d005      	beq.n	8005048 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	429a      	cmp	r2, r3
 8005046:	d107      	bne.n	8005058 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2140      	movs	r1, #64	; 0x40
 8005054:	438a      	bics	r2, r1
 8005056:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	0013      	movs	r3, r2
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	f7ff fea7 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d007      	beq.n	800507e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	2220      	movs	r2, #32
 8005074:	431a      	orrs	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e026      	b.n	80050cc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	2382      	movs	r3, #130	; 0x82
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	429a      	cmp	r2, r3
 8005088:	d11f      	bne.n	80050ca <SPI_EndRxTransaction+0xb2>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	429a      	cmp	r2, r3
 8005094:	d005      	beq.n	80050a2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	2380      	movs	r3, #128	; 0x80
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	429a      	cmp	r2, r3
 80050a0:	d113      	bne.n	80050ca <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	23c0      	movs	r3, #192	; 0xc0
 80050a6:	00d9      	lsls	r1, r3, #3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	0013      	movs	r3, r2
 80050b0:	2200      	movs	r2, #0
 80050b2:	f7ff ff0f 	bl	8004ed4 <SPI_WaitFifoStateUntilTimeout>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d007      	beq.n	80050ca <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050be:	2220      	movs	r2, #32
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e000      	b.n	80050cc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b004      	add	sp, #16
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	23c0      	movs	r3, #192	; 0xc0
 80050e4:	0159      	lsls	r1, r3, #5
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	0013      	movs	r3, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	f7ff fef0 	bl	8004ed4 <SPI_WaitFifoStateUntilTimeout>
 80050f4:	1e03      	subs	r3, r0, #0
 80050f6:	d007      	beq.n	8005108 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	2220      	movs	r2, #32
 80050fe:	431a      	orrs	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e027      	b.n	8005158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	0013      	movs	r3, r2
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	f7ff fe4f 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 800511a:	1e03      	subs	r3, r0, #0
 800511c:	d007      	beq.n	800512e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005122:	2220      	movs	r2, #32
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e014      	b.n	8005158 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	23c0      	movs	r3, #192	; 0xc0
 8005132:	00d9      	lsls	r1, r3, #3
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	0013      	movs	r3, r2
 800513c:	2200      	movs	r2, #0
 800513e:	f7ff fec9 	bl	8004ed4 <SPI_WaitFifoStateUntilTimeout>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d007      	beq.n	8005156 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	2220      	movs	r2, #32
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e000      	b.n	8005158 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b004      	add	sp, #16
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e04a      	b.n	8005208 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	223d      	movs	r2, #61	; 0x3d
 8005176:	5c9b      	ldrb	r3, [r3, r2]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d107      	bne.n	800518e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	223c      	movs	r2, #60	; 0x3c
 8005182:	2100      	movs	r1, #0
 8005184:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0018      	movs	r0, r3
 800518a:	f7fd f9c9 	bl	8002520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	223d      	movs	r2, #61	; 0x3d
 8005192:	2102      	movs	r1, #2
 8005194:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	0019      	movs	r1, r3
 80051a0:	0010      	movs	r0, r2
 80051a2:	f000 fb51 	bl	8005848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2248      	movs	r2, #72	; 0x48
 80051aa:	2101      	movs	r1, #1
 80051ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	223e      	movs	r2, #62	; 0x3e
 80051b2:	2101      	movs	r1, #1
 80051b4:	5499      	strb	r1, [r3, r2]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	223f      	movs	r2, #63	; 0x3f
 80051ba:	2101      	movs	r1, #1
 80051bc:	5499      	strb	r1, [r3, r2]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2240      	movs	r2, #64	; 0x40
 80051c2:	2101      	movs	r1, #1
 80051c4:	5499      	strb	r1, [r3, r2]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2241      	movs	r2, #65	; 0x41
 80051ca:	2101      	movs	r1, #1
 80051cc:	5499      	strb	r1, [r3, r2]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2242      	movs	r2, #66	; 0x42
 80051d2:	2101      	movs	r1, #1
 80051d4:	5499      	strb	r1, [r3, r2]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2243      	movs	r2, #67	; 0x43
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2244      	movs	r2, #68	; 0x44
 80051e2:	2101      	movs	r1, #1
 80051e4:	5499      	strb	r1, [r3, r2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2245      	movs	r2, #69	; 0x45
 80051ea:	2101      	movs	r1, #1
 80051ec:	5499      	strb	r1, [r3, r2]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2246      	movs	r2, #70	; 0x46
 80051f2:	2101      	movs	r1, #1
 80051f4:	5499      	strb	r1, [r3, r2]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2247      	movs	r2, #71	; 0x47
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	223d      	movs	r2, #61	; 0x3d
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	0018      	movs	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d108      	bne.n	8005232 <HAL_TIM_PWM_Start+0x22>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	223e      	movs	r2, #62	; 0x3e
 8005224:	5c9b      	ldrb	r3, [r3, r2]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	1e5a      	subs	r2, r3, #1
 800522c:	4193      	sbcs	r3, r2
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e037      	b.n	80052a2 <HAL_TIM_PWM_Start+0x92>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d108      	bne.n	800524a <HAL_TIM_PWM_Start+0x3a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	223f      	movs	r2, #63	; 0x3f
 800523c:	5c9b      	ldrb	r3, [r3, r2]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	4193      	sbcs	r3, r2
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e02b      	b.n	80052a2 <HAL_TIM_PWM_Start+0x92>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d108      	bne.n	8005262 <HAL_TIM_PWM_Start+0x52>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	5c9b      	ldrb	r3, [r3, r2]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	4193      	sbcs	r3, r2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e01f      	b.n	80052a2 <HAL_TIM_PWM_Start+0x92>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d108      	bne.n	800527a <HAL_TIM_PWM_Start+0x6a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2241      	movs	r2, #65	; 0x41
 800526c:	5c9b      	ldrb	r3, [r3, r2]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	1e5a      	subs	r2, r3, #1
 8005274:	4193      	sbcs	r3, r2
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e013      	b.n	80052a2 <HAL_TIM_PWM_Start+0x92>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b10      	cmp	r3, #16
 800527e:	d108      	bne.n	8005292 <HAL_TIM_PWM_Start+0x82>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2242      	movs	r2, #66	; 0x42
 8005284:	5c9b      	ldrb	r3, [r3, r2]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	1e5a      	subs	r2, r3, #1
 800528c:	4193      	sbcs	r3, r2
 800528e:	b2db      	uxtb	r3, r3
 8005290:	e007      	b.n	80052a2 <HAL_TIM_PWM_Start+0x92>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2243      	movs	r2, #67	; 0x43
 8005296:	5c9b      	ldrb	r3, [r3, r2]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	4193      	sbcs	r3, r2
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07b      	b.n	80053a2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0xaa>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	223e      	movs	r2, #62	; 0x3e
 80052b4:	2102      	movs	r1, #2
 80052b6:	5499      	strb	r1, [r3, r2]
 80052b8:	e023      	b.n	8005302 <HAL_TIM_PWM_Start+0xf2>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0xba>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	223f      	movs	r2, #63	; 0x3f
 80052c4:	2102      	movs	r1, #2
 80052c6:	5499      	strb	r1, [r3, r2]
 80052c8:	e01b      	b.n	8005302 <HAL_TIM_PWM_Start+0xf2>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0xca>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2240      	movs	r2, #64	; 0x40
 80052d4:	2102      	movs	r1, #2
 80052d6:	5499      	strb	r1, [r3, r2]
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Start+0xf2>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xda>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2241      	movs	r2, #65	; 0x41
 80052e4:	2102      	movs	r1, #2
 80052e6:	5499      	strb	r1, [r3, r2]
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Start+0xf2>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xea>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2242      	movs	r2, #66	; 0x42
 80052f4:	2102      	movs	r1, #2
 80052f6:	5499      	strb	r1, [r3, r2]
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Start+0xf2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2243      	movs	r2, #67	; 0x43
 80052fe:	2102      	movs	r1, #2
 8005300:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	2201      	movs	r2, #1
 800530a:	0018      	movs	r0, r3
 800530c:	f000 fda4 	bl	8005e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <HAL_TIM_PWM_Start+0x19c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_TIM_PWM_Start+0x11e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <HAL_TIM_PWM_Start+0x1a0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_TIM_PWM_Start+0x11e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <HAL_TIM_PWM_Start+0x1a4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_TIM_PWM_Start+0x122>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_TIM_PWM_Start+0x124>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	0209      	lsls	r1, r1, #8
 8005346:	430a      	orrs	r2, r1
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <HAL_TIM_PWM_Start+0x19c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIM_PWM_Start+0x14e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a17      	ldr	r2, [pc, #92]	; (80053b8 <HAL_TIM_PWM_Start+0x1a8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d116      	bne.n	800538c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <HAL_TIM_PWM_Start+0x1ac>)
 8005366:	4013      	ands	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b06      	cmp	r3, #6
 800536e:	d016      	beq.n	800539e <HAL_TIM_PWM_Start+0x18e>
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	025b      	lsls	r3, r3, #9
 8005376:	429a      	cmp	r2, r3
 8005378:	d011      	beq.n	800539e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2101      	movs	r1, #1
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538a:	e008      	b.n	800539e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2101      	movs	r1, #1
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e000      	b.n	80053a0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b004      	add	sp, #16
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	40012c00 	.word	0x40012c00
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800
 80053b8:	40000400 	.word	0x40000400
 80053bc:	00010007 	.word	0x00010007

080053c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e090      	b.n	80054f6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	223d      	movs	r2, #61	; 0x3d
 80053d8:	5c9b      	ldrb	r3, [r3, r2]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	223c      	movs	r2, #60	; 0x3c
 80053e4:	2100      	movs	r1, #0
 80053e6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	0018      	movs	r0, r3
 80053ec:	f7fd f828 	bl	8002440 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	223d      	movs	r2, #61	; 0x3d
 80053f4:	2102      	movs	r1, #2
 80053f6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	493f      	ldr	r1, [pc, #252]	; (8005500 <HAL_TIM_Encoder_Init+0x140>)
 8005404:	400a      	ands	r2, r1
 8005406:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	0019      	movs	r1, r3
 8005412:	0010      	movs	r0, r2
 8005414:	f000 fa18 	bl	8005848 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4a31      	ldr	r2, [pc, #196]	; (8005504 <HAL_TIM_Encoder_Init+0x144>)
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	4313      	orrs	r3, r2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <HAL_TIM_Encoder_Init+0x148>)
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4a2b      	ldr	r2, [pc, #172]	; (800550c <HAL_TIM_Encoder_Init+0x14c>)
 8005460:	4013      	ands	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	4313      	orrs	r3, r2
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	011a      	lsls	r2, r3, #4
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	4313      	orrs	r3, r2
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2222      	movs	r2, #34	; 0x22
 800548e:	4393      	bics	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2288      	movs	r2, #136	; 0x88
 8005496:	4393      	bics	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4313      	orrs	r3, r2
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2248      	movs	r2, #72	; 0x48
 80054c8:	2101      	movs	r1, #1
 80054ca:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	223e      	movs	r2, #62	; 0x3e
 80054d0:	2101      	movs	r1, #1
 80054d2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	223f      	movs	r2, #63	; 0x3f
 80054d8:	2101      	movs	r1, #1
 80054da:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2244      	movs	r2, #68	; 0x44
 80054e0:	2101      	movs	r1, #1
 80054e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2245      	movs	r2, #69	; 0x45
 80054e8:	2101      	movs	r1, #1
 80054ea:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	223d      	movs	r2, #61	; 0x3d
 80054f0:	2101      	movs	r1, #1
 80054f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b006      	add	sp, #24
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	fffebff8 	.word	0xfffebff8
 8005504:	fffffcfc 	.word	0xfffffcfc
 8005508:	fffff3f3 	.word	0xfffff3f3
 800550c:	ffff0f0f 	.word	0xffff0f0f

08005510 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800551a:	230f      	movs	r3, #15
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	213e      	movs	r1, #62	; 0x3e
 8005522:	5c52      	ldrb	r2, [r2, r1]
 8005524:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005526:	230e      	movs	r3, #14
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	213f      	movs	r1, #63	; 0x3f
 800552e:	5c52      	ldrb	r2, [r2, r1]
 8005530:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005532:	230d      	movs	r3, #13
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	2144      	movs	r1, #68	; 0x44
 800553a:	5c52      	ldrb	r2, [r2, r1]
 800553c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800553e:	230c      	movs	r3, #12
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	2145      	movs	r1, #69	; 0x45
 8005546:	5c52      	ldrb	r2, [r2, r1]
 8005548:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d114      	bne.n	800557a <HAL_TIM_Encoder_Start+0x6a>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005550:	230f      	movs	r3, #15
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d104      	bne.n	8005564 <HAL_TIM_Encoder_Start+0x54>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800555a:	230d      	movs	r3, #13
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d001      	beq.n	8005568 <HAL_TIM_Encoder_Start+0x58>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e074      	b.n	8005652 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223e      	movs	r2, #62	; 0x3e
 800556c:	2102      	movs	r1, #2
 800556e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2244      	movs	r2, #68	; 0x44
 8005574:	2102      	movs	r1, #2
 8005576:	5499      	strb	r1, [r3, r2]
 8005578:	e03d      	b.n	80055f6 <HAL_TIM_Encoder_Start+0xe6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d114      	bne.n	80055aa <HAL_TIM_Encoder_Start+0x9a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005580:	230e      	movs	r3, #14
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d104      	bne.n	8005594 <HAL_TIM_Encoder_Start+0x84>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800558a:	230c      	movs	r3, #12
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <HAL_TIM_Encoder_Start+0x88>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e05c      	b.n	8005652 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	223f      	movs	r2, #63	; 0x3f
 800559c:	2102      	movs	r1, #2
 800559e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2245      	movs	r2, #69	; 0x45
 80055a4:	2102      	movs	r1, #2
 80055a6:	5499      	strb	r1, [r3, r2]
 80055a8:	e025      	b.n	80055f6 <HAL_TIM_Encoder_Start+0xe6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055aa:	230f      	movs	r3, #15
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10e      	bne.n	80055d2 <HAL_TIM_Encoder_Start+0xc2>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055b4:	230e      	movs	r3, #14
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d109      	bne.n	80055d2 <HAL_TIM_Encoder_Start+0xc2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055be:	230d      	movs	r3, #13
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_Encoder_Start+0xc2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055c8:	230c      	movs	r3, #12
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <HAL_TIM_Encoder_Start+0xc6>
    {
      return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e03d      	b.n	8005652 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	223e      	movs	r2, #62	; 0x3e
 80055da:	2102      	movs	r1, #2
 80055dc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	223f      	movs	r2, #63	; 0x3f
 80055e2:	2102      	movs	r1, #2
 80055e4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2244      	movs	r2, #68	; 0x44
 80055ea:	2102      	movs	r1, #2
 80055ec:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2245      	movs	r2, #69	; 0x45
 80055f2:	2102      	movs	r1, #2
 80055f4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_TIM_Encoder_Start+0xf2>
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d008      	beq.n	8005612 <HAL_TIM_Encoder_Start+0x102>
 8005600:	e00f      	b.n	8005622 <HAL_TIM_Encoder_Start+0x112>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	2100      	movs	r1, #0
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fc24 	bl	8005e58 <TIM_CCxChannelCmd>
      break;
 8005610:	e016      	b.n	8005640 <HAL_TIM_Encoder_Start+0x130>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2201      	movs	r2, #1
 8005618:	2104      	movs	r1, #4
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fc1c 	bl	8005e58 <TIM_CCxChannelCmd>
      break;
 8005620:	e00e      	b.n	8005640 <HAL_TIM_Encoder_Start+0x130>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2201      	movs	r2, #1
 8005628:	2100      	movs	r1, #0
 800562a:	0018      	movs	r0, r3
 800562c:	f000 fc14 	bl	8005e58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2201      	movs	r2, #1
 8005636:	2104      	movs	r1, #4
 8005638:	0018      	movs	r0, r3
 800563a:	f000 fc0d 	bl	8005e58 <TIM_CCxChannelCmd>
      break;
 800563e:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2101      	movs	r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	0018      	movs	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	b004      	add	sp, #16
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	223c      	movs	r2, #60	; 0x3c
 800566c:	5c9b      	ldrb	r3, [r3, r2]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005672:	2302      	movs	r3, #2
 8005674:	e0df      	b.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	223c      	movs	r2, #60	; 0x3c
 800567a:	2101      	movs	r1, #1
 800567c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b14      	cmp	r3, #20
 8005682:	d900      	bls.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005684:	e0d1      	b.n	800582a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	009a      	lsls	r2, r3, #2
 800568a:	4b6d      	ldr	r3, [pc, #436]	; (8005840 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800568c:	18d3      	adds	r3, r2, r3
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0011      	movs	r1, r2
 800569a:	0018      	movs	r0, r3
 800569c:	f000 f940 	bl	8005920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2108      	movs	r1, #8
 80056ac:	430a      	orrs	r2, r1
 80056ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2104      	movs	r1, #4
 80056bc:	438a      	bics	r2, r1
 80056be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6999      	ldr	r1, [r3, #24]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	619a      	str	r2, [r3, #24]
      break;
 80056d2:	e0ab      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	0011      	movs	r1, r2
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f99f 	bl	8005a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	0109      	lsls	r1, r1, #4
 80056f0:	430a      	orrs	r2, r1
 80056f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4951      	ldr	r1, [pc, #324]	; (8005844 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005700:	400a      	ands	r2, r1
 8005702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6999      	ldr	r1, [r3, #24]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	619a      	str	r2, [r3, #24]
      break;
 8005718:	e088      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0011      	movs	r1, r2
 8005722:	0018      	movs	r0, r3
 8005724:	f000 f9fa 	bl	8005b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2108      	movs	r1, #8
 8005734:	430a      	orrs	r2, r1
 8005736:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2104      	movs	r1, #4
 8005744:	438a      	bics	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	69d9      	ldr	r1, [r3, #28]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	61da      	str	r2, [r3, #28]
      break;
 800575a:	e067      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	0011      	movs	r1, r2
 8005764:	0018      	movs	r0, r3
 8005766:	f000 fa5b 	bl	8005c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	0109      	lsls	r1, r1, #4
 8005778:	430a      	orrs	r2, r1
 800577a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69da      	ldr	r2, [r3, #28]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	492f      	ldr	r1, [pc, #188]	; (8005844 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005788:	400a      	ands	r2, r1
 800578a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69d9      	ldr	r1, [r3, #28]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	61da      	str	r2, [r3, #28]
      break;
 80057a0:	e044      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0011      	movs	r1, r2
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 fa9c 	bl	8005ce8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2108      	movs	r1, #8
 80057bc:	430a      	orrs	r2, r1
 80057be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2104      	movs	r1, #4
 80057cc:	438a      	bics	r2, r1
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e2:	e023      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	0011      	movs	r1, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 fad5 	bl	8005d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	0109      	lsls	r1, r1, #4
 8005800:	430a      	orrs	r2, r1
 8005802:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	490d      	ldr	r1, [pc, #52]	; (8005844 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005810:	400a      	ands	r2, r1
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	021a      	lsls	r2, r3, #8
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005828:	e000      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800582a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	223c      	movs	r2, #60	; 0x3c
 8005830:	2100      	movs	r1, #0
 8005832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b004      	add	sp, #16
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	08007828 	.word	0x08007828
 8005844:	fffffbff 	.word	0xfffffbff

08005848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <TIM_Base_SetConfig+0xc0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x20>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2a      	ldr	r2, [pc, #168]	; (800590c <TIM_Base_SetConfig+0xc4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2270      	movs	r2, #112	; 0x70
 800586c:	4393      	bics	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a22      	ldr	r2, [pc, #136]	; (8005908 <TIM_Base_SetConfig+0xc0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00f      	beq.n	80058a2 <TIM_Base_SetConfig+0x5a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <TIM_Base_SetConfig+0xc4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_Base_SetConfig+0x5a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <TIM_Base_SetConfig+0xc8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d007      	beq.n	80058a2 <TIM_Base_SetConfig+0x5a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <TIM_Base_SetConfig+0xcc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_Base_SetConfig+0x5a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <TIM_Base_SetConfig+0xd0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <TIM_Base_SetConfig+0xd4>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	4393      	bics	r3, r2
 80058ba:	001a      	movs	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <TIM_Base_SetConfig+0xc0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <TIM_Base_SetConfig+0xcc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <TIM_Base_SetConfig+0xd0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d103      	bne.n	80058fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	615a      	str	r2, [r3, #20]
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	b004      	add	sp, #16
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40000400 	.word	0x40000400
 8005910:	40002000 	.word	0x40002000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	fffffcff 	.word	0xfffffcff

08005920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	2201      	movs	r2, #1
 8005930:	4393      	bics	r3, r2
 8005932:	001a      	movs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <TIM_OC1_SetConfig+0xe8>)
 800594e:	4013      	ands	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2203      	movs	r2, #3
 8005956:	4393      	bics	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2202      	movs	r2, #2
 8005968:	4393      	bics	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <TIM_OC1_SetConfig+0xec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <TIM_OC1_SetConfig+0x6e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a23      	ldr	r2, [pc, #140]	; (8005a10 <TIM_OC1_SetConfig+0xf0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_OC1_SetConfig+0x6e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <TIM_OC1_SetConfig+0xf4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10c      	bne.n	80059a8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2208      	movs	r2, #8
 8005992:	4393      	bics	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2204      	movs	r2, #4
 80059a4:	4393      	bics	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <TIM_OC1_SetConfig+0xec>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC1_SetConfig+0xa0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <TIM_OC1_SetConfig+0xf0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC1_SetConfig+0xa0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <TIM_OC1_SetConfig+0xf4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d111      	bne.n	80059e4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <TIM_OC1_SetConfig+0xf8>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <TIM_OC1_SetConfig+0xfc>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	46bd      	mov	sp, r7
 8005a02:	b006      	add	sp, #24
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	fffeff8f 	.word	0xfffeff8f
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800
 8005a18:	fffffeff 	.word	0xfffffeff
 8005a1c:	fffffdff 	.word	0xfffffdff

08005a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	2210      	movs	r2, #16
 8005a30:	4393      	bics	r3, r2
 8005a32:	001a      	movs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a2c      	ldr	r2, [pc, #176]	; (8005b00 <TIM_OC2_SetConfig+0xe0>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a2b      	ldr	r2, [pc, #172]	; (8005b04 <TIM_OC2_SetConfig+0xe4>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10d      	bne.n	8005a9e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	4393      	bics	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	4393      	bics	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <TIM_OC2_SetConfig+0xe8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_OC2_SetConfig+0x96>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <TIM_OC2_SetConfig+0xec>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC2_SetConfig+0x96>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <TIM_OC2_SetConfig+0xf0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d113      	bne.n	8005ade <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4a16      	ldr	r2, [pc, #88]	; (8005b14 <TIM_OC2_SetConfig+0xf4>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <TIM_OC2_SetConfig+0xf8>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	46c0      	nop			; (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b006      	add	sp, #24
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	feff8fff 	.word	0xfeff8fff
 8005b04:	fffffcff 	.word	0xfffffcff
 8005b08:	40012c00 	.word	0x40012c00
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800
 8005b14:	fffffbff 	.word	0xfffffbff
 8005b18:	fffff7ff 	.word	0xfffff7ff

08005b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <TIM_OC3_SetConfig+0xdc>)
 8005b2c:	401a      	ands	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <TIM_OC3_SetConfig+0xe0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2203      	movs	r2, #3
 8005b50:	4393      	bics	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <TIM_OC3_SetConfig+0xe4>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a23      	ldr	r2, [pc, #140]	; (8005c04 <TIM_OC3_SetConfig+0xe8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10d      	bne.n	8005b96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <TIM_OC3_SetConfig+0xec>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <TIM_OC3_SetConfig+0xf0>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <TIM_OC3_SetConfig+0xe8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_OC3_SetConfig+0x92>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <TIM_OC3_SetConfig+0xf4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_OC3_SetConfig+0x92>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <TIM_OC3_SetConfig+0xf8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d113      	bne.n	8005bd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4a19      	ldr	r2, [pc, #100]	; (8005c18 <TIM_OC3_SetConfig+0xfc>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <TIM_OC3_SetConfig+0x100>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	621a      	str	r2, [r3, #32]
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b006      	add	sp, #24
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	fffffeff 	.word	0xfffffeff
 8005bfc:	fffeff8f 	.word	0xfffeff8f
 8005c00:	fffffdff 	.word	0xfffffdff
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	fffff7ff 	.word	0xfffff7ff
 8005c0c:	fffffbff 	.word	0xfffffbff
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800
 8005c18:	ffffefff 	.word	0xffffefff
 8005c1c:	ffffdfff 	.word	0xffffdfff

08005c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	4a26      	ldr	r2, [pc, #152]	; (8005cc8 <TIM_OC4_SetConfig+0xa8>)
 8005c30:	401a      	ands	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <TIM_OC4_SetConfig+0xac>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <TIM_OC4_SetConfig+0xb0>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <TIM_OC4_SetConfig+0xb4>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <TIM_OC4_SetConfig+0xb8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_OC4_SetConfig+0x70>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <TIM_OC4_SetConfig+0xbc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x70>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <TIM_OC4_SetConfig+0xc0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <TIM_OC4_SetConfig+0xc4>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b006      	add	sp, #24
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	ffffefff 	.word	0xffffefff
 8005ccc:	feff8fff 	.word	0xfeff8fff
 8005cd0:	fffffcff 	.word	0xfffffcff
 8005cd4:	ffffdfff 	.word	0xffffdfff
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800
 8005ce4:	ffffbfff 	.word	0xffffbfff

08005ce8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	4a23      	ldr	r2, [pc, #140]	; (8005d84 <TIM_OC5_SetConfig+0x9c>)
 8005cf8:	401a      	ands	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <TIM_OC5_SetConfig+0xa0>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <TIM_OC5_SetConfig+0xa4>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <TIM_OC5_SetConfig+0xa8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_OC5_SetConfig+0x66>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <TIM_OC5_SetConfig+0xac>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC5_SetConfig+0x66>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <TIM_OC5_SetConfig+0xb0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d109      	bne.n	8005d62 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <TIM_OC5_SetConfig+0x9c>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	46c0      	nop			; (mov r8, r8)
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b006      	add	sp, #24
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	fffeffff 	.word	0xfffeffff
 8005d88:	fffeff8f 	.word	0xfffeff8f
 8005d8c:	fffdffff 	.word	0xfffdffff
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	4a24      	ldr	r2, [pc, #144]	; (8005e3c <TIM_OC6_SetConfig+0xa0>)
 8005dac:	401a      	ands	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <TIM_OC6_SetConfig+0xa4>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <TIM_OC6_SetConfig+0xa8>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a16      	ldr	r2, [pc, #88]	; (8005e48 <TIM_OC6_SetConfig+0xac>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_OC6_SetConfig+0x68>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <TIM_OC6_SetConfig+0xb0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_OC6_SetConfig+0x68>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a14      	ldr	r2, [pc, #80]	; (8005e50 <TIM_OC6_SetConfig+0xb4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d109      	bne.n	8005e18 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <TIM_OC6_SetConfig+0xb8>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b006      	add	sp, #24
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	ffefffff 	.word	0xffefffff
 8005e40:	feff8fff 	.word	0xfeff8fff
 8005e44:	ffdfffff 	.word	0xffdfffff
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800
 8005e54:	fffbffff 	.word	0xfffbffff

08005e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	221f      	movs	r2, #31
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	409a      	lsls	r2, r3
 8005e6e:	0013      	movs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	43d2      	mvns	r2, r2
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	211f      	movs	r1, #31
 8005e88:	400b      	ands	r3, r1
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4099      	lsls	r1, r3
 8005e8e:	000b      	movs	r3, r1
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b006      	add	sp, #24
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	223c      	movs	r2, #60	; 0x3c
 8005eae:	5c9b      	ldrb	r3, [r3, r2]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e04a      	b.n	8005f4e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	223c      	movs	r2, #60	; 0x3c
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	223d      	movs	r2, #61	; 0x3d
 8005ec4:	2102      	movs	r1, #2
 8005ec6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1e      	ldr	r2, [pc, #120]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2270      	movs	r2, #112	; 0x70
 8005ef8:	4393      	bics	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a10      	ldr	r2, [pc, #64]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10c      	bne.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2280      	movs	r2, #128	; 0x80
 8005f26:	4393      	bics	r3, r2
 8005f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	223d      	movs	r2, #61	; 0x3d
 8005f40:	2101      	movs	r1, #1
 8005f42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	223c      	movs	r2, #60	; 0x3c
 8005f48:	2100      	movs	r1, #0
 8005f4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	0018      	movs	r0, r3
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b004      	add	sp, #16
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	ff0fffff 	.word	0xff0fffff
 8005f60:	40000400 	.word	0x40000400

08005f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e046      	b.n	8006004 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2284      	movs	r2, #132	; 0x84
 8005f7a:	589b      	ldr	r3, [r3, r2]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d107      	bne.n	8005f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	2100      	movs	r1, #0
 8005f86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7fc fb22 	bl	80025d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2284      	movs	r2, #132	; 0x84
 8005f94:	2124      	movs	r1, #36	; 0x24
 8005f96:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	438a      	bics	r2, r1
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 f8dc 	bl	8006168 <UART_SetConfig>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e024      	b.n	8006004 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f000 fa37 	bl	8006438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	490d      	ldr	r1, [pc, #52]	; (800600c <HAL_UART_Init+0xa8>)
 8005fd6:	400a      	ands	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	212a      	movs	r1, #42	; 0x2a
 8005fe6:	438a      	bics	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 facf 	bl	80065a0 <UART_CheckIdleState>
 8006002:	0003      	movs	r3, r0
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	b002      	add	sp, #8
 800600a:	bd80      	pop	{r7, pc}
 800600c:	ffffb7ff 	.word	0xffffb7ff

08006010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	1dbb      	adds	r3, r7, #6
 800601e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2284      	movs	r2, #132	; 0x84
 8006024:	589b      	ldr	r3, [r3, r2]
 8006026:	2b20      	cmp	r3, #32
 8006028:	d000      	beq.n	800602c <HAL_UART_Transmit+0x1c>
 800602a:	e097      	b.n	800615c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_UART_Transmit+0x2a>
 8006032:	1dbb      	adds	r3, r7, #6
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e08f      	b.n	800615e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	015b      	lsls	r3, r3, #5
 8006046:	429a      	cmp	r2, r3
 8006048:	d109      	bne.n	800605e <HAL_UART_Transmit+0x4e>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2201      	movs	r2, #1
 8006056:	4013      	ands	r3, r2
 8006058:	d001      	beq.n	800605e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e07f      	b.n	800615e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2280      	movs	r2, #128	; 0x80
 8006062:	5c9b      	ldrb	r3, [r3, r2]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UART_Transmit+0x5c>
 8006068:	2302      	movs	r3, #2
 800606a:	e078      	b.n	800615e <HAL_UART_Transmit+0x14e>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2280      	movs	r2, #128	; 0x80
 8006070:	2101      	movs	r1, #1
 8006072:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	228c      	movs	r2, #140	; 0x8c
 8006078:	2100      	movs	r1, #0
 800607a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2284      	movs	r2, #132	; 0x84
 8006080:	2121      	movs	r1, #33	; 0x21
 8006082:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006084:	f7fc fc32 	bl	80028ec <HAL_GetTick>
 8006088:	0003      	movs	r3, r0
 800608a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1dba      	adds	r2, r7, #6
 8006090:	2154      	movs	r1, #84	; 0x54
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1dba      	adds	r2, r7, #6
 800609a:	2156      	movs	r1, #86	; 0x56
 800609c:	8812      	ldrh	r2, [r2, #0]
 800609e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	015b      	lsls	r3, r3, #5
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d108      	bne.n	80060be <HAL_UART_Transmit+0xae>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e003      	b.n	80060c6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	2100      	movs	r1, #0
 80060cc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80060ce:	e02c      	b.n	800612a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	0013      	movs	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	2180      	movs	r1, #128	; 0x80
 80060de:	f000 faab 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 80060e2:	1e03      	subs	r3, r0, #0
 80060e4:	d001      	beq.n	80060ea <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e039      	b.n	800615e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	001a      	movs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	05d2      	lsls	r2, r2, #23
 80060fc:	0dd2      	lsrs	r2, r2, #23
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	3302      	adds	r3, #2
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	e007      	b.n	8006118 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	781a      	ldrb	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	3301      	adds	r3, #1
 8006116:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2256      	movs	r2, #86	; 0x56
 800611c:	5a9b      	ldrh	r3, [r3, r2]
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b299      	uxth	r1, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2256      	movs	r2, #86	; 0x56
 8006128:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2256      	movs	r2, #86	; 0x56
 800612e:	5a9b      	ldrh	r3, [r3, r2]
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1cc      	bne.n	80060d0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	0013      	movs	r3, r2
 8006140:	2200      	movs	r2, #0
 8006142:	2140      	movs	r1, #64	; 0x40
 8006144:	f000 fa78 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8006148:	1e03      	subs	r3, r0, #0
 800614a:	d001      	beq.n	8006150 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e006      	b.n	800615e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2284      	movs	r2, #132	; 0x84
 8006154:	2120      	movs	r1, #32
 8006156:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b008      	add	sp, #32
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006170:	231e      	movs	r3, #30
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a9f      	ldr	r2, [pc, #636]	; (8006414 <UART_SetConfig+0x2ac>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4a9a      	ldr	r2, [pc, #616]	; (8006418 <UART_SetConfig+0x2b0>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	0019      	movs	r1, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4a91      	ldr	r2, [pc, #580]	; (800641c <UART_SetConfig+0x2b4>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	0019      	movs	r1, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	220f      	movs	r2, #15
 80061ec:	4393      	bics	r3, r2
 80061ee:	0019      	movs	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a87      	ldr	r2, [pc, #540]	; (8006420 <UART_SetConfig+0x2b8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d125      	bne.n	8006252 <UART_SetConfig+0xea>
 8006206:	4b87      	ldr	r3, [pc, #540]	; (8006424 <UART_SetConfig+0x2bc>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	2203      	movs	r2, #3
 800620c:	4013      	ands	r3, r2
 800620e:	2b01      	cmp	r3, #1
 8006210:	d00f      	beq.n	8006232 <UART_SetConfig+0xca>
 8006212:	d304      	bcc.n	800621e <UART_SetConfig+0xb6>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d007      	beq.n	8006228 <UART_SetConfig+0xc0>
 8006218:	2b03      	cmp	r3, #3
 800621a:	d00f      	beq.n	800623c <UART_SetConfig+0xd4>
 800621c:	e013      	b.n	8006246 <UART_SetConfig+0xde>
 800621e:	231f      	movs	r3, #31
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e022      	b.n	800626e <UART_SetConfig+0x106>
 8006228:	231f      	movs	r3, #31
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	2202      	movs	r2, #2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e01d      	b.n	800626e <UART_SetConfig+0x106>
 8006232:	231f      	movs	r3, #31
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	2204      	movs	r2, #4
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e018      	b.n	800626e <UART_SetConfig+0x106>
 800623c:	231f      	movs	r3, #31
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2208      	movs	r2, #8
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e013      	b.n	800626e <UART_SetConfig+0x106>
 8006246:	231f      	movs	r3, #31
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	2210      	movs	r2, #16
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	e00d      	b.n	800626e <UART_SetConfig+0x106>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a74      	ldr	r2, [pc, #464]	; (8006428 <UART_SetConfig+0x2c0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d104      	bne.n	8006266 <UART_SetConfig+0xfe>
 800625c:	231f      	movs	r3, #31
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e003      	b.n	800626e <UART_SetConfig+0x106>
 8006266:	231f      	movs	r3, #31
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	2210      	movs	r2, #16
 800626c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69da      	ldr	r2, [r3, #28]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	429a      	cmp	r2, r3
 8006278:	d000      	beq.n	800627c <UART_SetConfig+0x114>
 800627a:	e065      	b.n	8006348 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 800627c:	231f      	movs	r3, #31
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d00d      	beq.n	80062a2 <UART_SetConfig+0x13a>
 8006286:	dc02      	bgt.n	800628e <UART_SetConfig+0x126>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <UART_SetConfig+0x130>
 800628c:	e015      	b.n	80062ba <UART_SetConfig+0x152>
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00a      	beq.n	80062a8 <UART_SetConfig+0x140>
 8006292:	2b08      	cmp	r3, #8
 8006294:	d00d      	beq.n	80062b2 <UART_SetConfig+0x14a>
 8006296:	e010      	b.n	80062ba <UART_SetConfig+0x152>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fd ff22 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 800629c:	0003      	movs	r3, r0
 800629e:	61bb      	str	r3, [r7, #24]
        break;
 80062a0:	e012      	b.n	80062c8 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a2:	4b62      	ldr	r3, [pc, #392]	; (800642c <UART_SetConfig+0x2c4>)
 80062a4:	61bb      	str	r3, [r7, #24]
        break;
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062a8:	f7fd fe8e 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 80062ac:	0003      	movs	r3, r0
 80062ae:	61bb      	str	r3, [r7, #24]
        break;
 80062b0:	e00a      	b.n	80062c8 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	61bb      	str	r3, [r7, #24]
        break;
 80062b8:	e006      	b.n	80062c8 <UART_SetConfig+0x160>
      default:
        pclk = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062be:	231e      	movs	r3, #30
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
        break;
 80062c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d100      	bne.n	80062d0 <UART_SetConfig+0x168>
 80062ce:	e08c      	b.n	80063ea <UART_SetConfig+0x282>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062d4:	4b56      	ldr	r3, [pc, #344]	; (8006430 <UART_SetConfig+0x2c8>)
 80062d6:	0052      	lsls	r2, r2, #1
 80062d8:	5ad3      	ldrh	r3, [r2, r3]
 80062da:	0019      	movs	r1, r3
 80062dc:	69b8      	ldr	r0, [r7, #24]
 80062de:	f7f9 ff0f 	bl	8000100 <__udivsi3>
 80062e2:	0003      	movs	r3, r0
 80062e4:	005a      	lsls	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	18d2      	adds	r2, r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	0019      	movs	r1, r3
 80062f4:	0010      	movs	r0, r2
 80062f6:	f7f9 ff03 	bl	8000100 <__udivsi3>
 80062fa:	0003      	movs	r3, r0
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d91b      	bls.n	800633e <UART_SetConfig+0x1d6>
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4a4a      	ldr	r2, [pc, #296]	; (8006434 <UART_SetConfig+0x2cc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d817      	bhi.n	800633e <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	b29a      	uxth	r2, r3
 8006312:	200e      	movs	r0, #14
 8006314:	183b      	adds	r3, r7, r0
 8006316:	210f      	movs	r1, #15
 8006318:	438a      	bics	r2, r1
 800631a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	b29b      	uxth	r3, r3
 8006322:	2207      	movs	r2, #7
 8006324:	4013      	ands	r3, r2
 8006326:	b299      	uxth	r1, r3
 8006328:	183b      	adds	r3, r7, r0
 800632a:	183a      	adds	r2, r7, r0
 800632c:	8812      	ldrh	r2, [r2, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	183a      	adds	r2, r7, r0
 8006338:	8812      	ldrh	r2, [r2, #0]
 800633a:	60da      	str	r2, [r3, #12]
 800633c:	e055      	b.n	80063ea <UART_SetConfig+0x282>
      }
      else
      {
        ret = HAL_ERROR;
 800633e:	231e      	movs	r3, #30
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e050      	b.n	80063ea <UART_SetConfig+0x282>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006348:	231f      	movs	r3, #31
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d00d      	beq.n	800636e <UART_SetConfig+0x206>
 8006352:	dc02      	bgt.n	800635a <UART_SetConfig+0x1f2>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <UART_SetConfig+0x1fc>
 8006358:	e015      	b.n	8006386 <UART_SetConfig+0x21e>
 800635a:	2b04      	cmp	r3, #4
 800635c:	d00a      	beq.n	8006374 <UART_SetConfig+0x20c>
 800635e:	2b08      	cmp	r3, #8
 8006360:	d00d      	beq.n	800637e <UART_SetConfig+0x216>
 8006362:	e010      	b.n	8006386 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fd febc 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8006368:	0003      	movs	r3, r0
 800636a:	61bb      	str	r3, [r7, #24]
        break;
 800636c:	e012      	b.n	8006394 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800636e:	4b2f      	ldr	r3, [pc, #188]	; (800642c <UART_SetConfig+0x2c4>)
 8006370:	61bb      	str	r3, [r7, #24]
        break;
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006374:	f7fd fe28 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8006378:	0003      	movs	r3, r0
 800637a:	61bb      	str	r3, [r7, #24]
        break;
 800637c:	e00a      	b.n	8006394 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	61bb      	str	r3, [r7, #24]
        break;
 8006384:	e006      	b.n	8006394 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800638a:	231e      	movs	r3, #30
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	2201      	movs	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
        break;
 8006392:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d027      	beq.n	80063ea <UART_SetConfig+0x282>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <UART_SetConfig+0x2c8>)
 80063a0:	0052      	lsls	r2, r2, #1
 80063a2:	5ad3      	ldrh	r3, [r2, r3]
 80063a4:	0019      	movs	r1, r3
 80063a6:	69b8      	ldr	r0, [r7, #24]
 80063a8:	f7f9 feaa 	bl	8000100 <__udivsi3>
 80063ac:	0003      	movs	r3, r0
 80063ae:	001a      	movs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	18d2      	adds	r2, r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	0019      	movs	r1, r3
 80063be:	0010      	movs	r0, r2
 80063c0:	f7f9 fe9e 	bl	8000100 <__udivsi3>
 80063c4:	0003      	movs	r3, r0
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b0f      	cmp	r3, #15
 80063ce:	d908      	bls.n	80063e2 <UART_SetConfig+0x27a>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4a18      	ldr	r2, [pc, #96]	; (8006434 <UART_SetConfig+0x2cc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d804      	bhi.n	80063e2 <UART_SetConfig+0x27a>
      {
        huart->Instance->BRR = usartdiv;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	e003      	b.n	80063ea <UART_SetConfig+0x282>
      }
      else
      {
        ret = HAL_ERROR;
 80063e2:	231e      	movs	r3, #30
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	2201      	movs	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	226a      	movs	r2, #106	; 0x6a
 80063ee:	2101      	movs	r1, #1
 80063f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2268      	movs	r2, #104	; 0x68
 80063f6:	2101      	movs	r1, #1
 80063f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006406:	231e      	movs	r3, #30
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	781b      	ldrb	r3, [r3, #0]
}
 800640c:	0018      	movs	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	b008      	add	sp, #32
 8006412:	bd80      	pop	{r7, pc}
 8006414:	cfff69f3 	.word	0xcfff69f3
 8006418:	ffffcfff 	.word	0xffffcfff
 800641c:	11fff4ff 	.word	0x11fff4ff
 8006420:	40013800 	.word	0x40013800
 8006424:	40021000 	.word	0x40021000
 8006428:	40004400 	.word	0x40004400
 800642c:	00f42400 	.word	0x00f42400
 8006430:	0800787c 	.word	0x0800787c
 8006434:	0000ffff 	.word	0x0000ffff

08006438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	2201      	movs	r2, #1
 8006446:	4013      	ands	r3, r2
 8006448:	d00b      	beq.n	8006462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a4a      	ldr	r2, [pc, #296]	; (800657c <UART_AdvFeatureConfig+0x144>)
 8006452:	4013      	ands	r3, r2
 8006454:	0019      	movs	r1, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	2202      	movs	r2, #2
 8006468:	4013      	ands	r3, r2
 800646a:	d00b      	beq.n	8006484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	4a43      	ldr	r2, [pc, #268]	; (8006580 <UART_AdvFeatureConfig+0x148>)
 8006474:	4013      	ands	r3, r2
 8006476:	0019      	movs	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006488:	2204      	movs	r2, #4
 800648a:	4013      	ands	r3, r2
 800648c:	d00b      	beq.n	80064a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4a3b      	ldr	r2, [pc, #236]	; (8006584 <UART_AdvFeatureConfig+0x14c>)
 8006496:	4013      	ands	r3, r2
 8006498:	0019      	movs	r1, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	2208      	movs	r2, #8
 80064ac:	4013      	ands	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	4a34      	ldr	r2, [pc, #208]	; (8006588 <UART_AdvFeatureConfig+0x150>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	0019      	movs	r1, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	2210      	movs	r2, #16
 80064ce:	4013      	ands	r3, r2
 80064d0:	d00b      	beq.n	80064ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	; (800658c <UART_AdvFeatureConfig+0x154>)
 80064da:	4013      	ands	r3, r2
 80064dc:	0019      	movs	r1, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	2220      	movs	r2, #32
 80064f0:	4013      	ands	r3, r2
 80064f2:	d00b      	beq.n	800650c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	4a25      	ldr	r2, [pc, #148]	; (8006590 <UART_AdvFeatureConfig+0x158>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	0019      	movs	r1, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	2240      	movs	r2, #64	; 0x40
 8006512:	4013      	ands	r3, r2
 8006514:	d01d      	beq.n	8006552 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <UART_AdvFeatureConfig+0x15c>)
 800651e:	4013      	ands	r3, r2
 8006520:	0019      	movs	r1, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	035b      	lsls	r3, r3, #13
 8006536:	429a      	cmp	r2, r3
 8006538:	d10b      	bne.n	8006552 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <UART_AdvFeatureConfig+0x160>)
 8006542:	4013      	ands	r3, r2
 8006544:	0019      	movs	r1, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	4013      	ands	r3, r2
 800655a:	d00b      	beq.n	8006574 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4a0e      	ldr	r2, [pc, #56]	; (800659c <UART_AdvFeatureConfig+0x164>)
 8006564:	4013      	ands	r3, r2
 8006566:	0019      	movs	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }
}
 8006574:	46c0      	nop			; (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b002      	add	sp, #8
 800657a:	bd80      	pop	{r7, pc}
 800657c:	fffdffff 	.word	0xfffdffff
 8006580:	fffeffff 	.word	0xfffeffff
 8006584:	fffbffff 	.word	0xfffbffff
 8006588:	ffff7fff 	.word	0xffff7fff
 800658c:	ffffefff 	.word	0xffffefff
 8006590:	ffffdfff 	.word	0xffffdfff
 8006594:	ffefffff 	.word	0xffefffff
 8006598:	ff9fffff 	.word	0xff9fffff
 800659c:	fff7ffff 	.word	0xfff7ffff

080065a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	228c      	movs	r2, #140	; 0x8c
 80065ac:	2100      	movs	r1, #0
 80065ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b0:	f7fc f99c 	bl	80028ec <HAL_GetTick>
 80065b4:	0003      	movs	r3, r0
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2208      	movs	r2, #8
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d10d      	bne.n	80065e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	0399      	lsls	r1, r3, #14
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4b19      	ldr	r3, [pc, #100]	; (8006634 <UART_CheckIdleState+0x94>)
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	0013      	movs	r3, r2
 80065d4:	2200      	movs	r2, #0
 80065d6:	f000 f82f 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 80065da:	1e03      	subs	r3, r0, #0
 80065dc:	d001      	beq.n	80065e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e024      	b.n	800662c <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2204      	movs	r2, #4
 80065ea:	4013      	ands	r3, r2
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d10d      	bne.n	800660c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	2380      	movs	r3, #128	; 0x80
 80065f4:	03d9      	lsls	r1, r3, #15
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <UART_CheckIdleState+0x94>)
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	0013      	movs	r3, r2
 80065fe:	2200      	movs	r2, #0
 8006600:	f000 f81a 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8006604:	1e03      	subs	r3, r0, #0
 8006606:	d001      	beq.n	800660c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e00f      	b.n	800662c <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2284      	movs	r2, #132	; 0x84
 8006610:	2120      	movs	r1, #32
 8006612:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2288      	movs	r2, #136	; 0x88
 8006618:	2120      	movs	r1, #32
 800661a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	2100      	movs	r1, #0
 8006628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	0018      	movs	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	b004      	add	sp, #16
 8006632:	bd80      	pop	{r7, pc}
 8006634:	01ffffff 	.word	0x01ffffff

08006638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b094      	sub	sp, #80	; 0x50
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	1dfb      	adds	r3, r7, #7
 8006646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	e09f      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0x152>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664c:	3301      	adds	r3, #1
 800664e:	d100      	bne.n	8006652 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006650:	e09b      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0x152>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fc f94b 	bl	80028ec <HAL_GetTick>
 8006656:	0002      	movs	r2, r0
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <UART_WaitOnFlagUntilTimeout+0x30>
 8006662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006664:	2b00      	cmp	r3, #0
 8006666:	d13b      	bne.n	80066e0 <UART_WaitOnFlagUntilTimeout+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006668:	f3ef 8310 	mrs	r3, PRIMASK
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006670:	647b      	str	r3, [r7, #68]	; 0x44
 8006672:	2301      	movs	r3, #1
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	f383 8810 	msr	PRIMASK, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	494b      	ldr	r1, [pc, #300]	; (80067b4 <UART_WaitOnFlagUntilTimeout+0x17c>)
 8006688:	400a      	ands	r2, r1
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006696:	f3ef 8310 	mrs	r3, PRIMASK
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	643b      	str	r3, [r7, #64]	; 0x40
 80066a0:	2301      	movs	r3, #1
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f383 8810 	msr	PRIMASK, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2101      	movs	r1, #1
 80066b6:	438a      	bics	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]
 80066ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c0:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2284      	movs	r2, #132	; 0x84
 80066c8:	2120      	movs	r1, #32
 80066ca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2288      	movs	r2, #136	; 0x88
 80066d0:	2120      	movs	r1, #32
 80066d2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2280      	movs	r2, #128	; 0x80
 80066d8:	2100      	movs	r1, #0
 80066da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e065      	b.n	80067ac <UART_WaitOnFlagUntilTimeout+0x174>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2204      	movs	r2, #4
 80066e8:	4013      	ands	r3, r2
 80066ea:	d04e      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0x152>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69da      	ldr	r2, [r3, #28]
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	401a      	ands	r2, r3
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d144      	bne.n	800678a <UART_WaitOnFlagUntilTimeout+0x152>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2280      	movs	r2, #128	; 0x80
 8006706:	0112      	lsls	r2, r2, #4
 8006708:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800670a:	f3ef 8310 	mrs	r3, PRIMASK
 800670e:	613b      	str	r3, [r7, #16]
  return(result);
 8006710:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006714:	2301      	movs	r3, #1
 8006716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f383 8810 	msr	PRIMASK, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4922      	ldr	r1, [pc, #136]	; (80067b4 <UART_WaitOnFlagUntilTimeout+0x17c>)
 800672a:	400a      	ands	r2, r1
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006738:	f3ef 8310 	mrs	r3, PRIMASK
 800673c:	61fb      	str	r3, [r7, #28]
  return(result);
 800673e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006740:	64bb      	str	r3, [r7, #72]	; 0x48
 8006742:	2301      	movs	r3, #1
 8006744:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f383 8810 	msr	PRIMASK, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2101      	movs	r1, #1
 8006758:	438a      	bics	r2, r1
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2284      	movs	r2, #132	; 0x84
 800676a:	2120      	movs	r1, #32
 800676c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2288      	movs	r2, #136	; 0x88
 8006772:	2120      	movs	r1, #32
 8006774:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	228c      	movs	r2, #140	; 0x8c
 800677a:	2120      	movs	r1, #32
 800677c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2280      	movs	r2, #128	; 0x80
 8006782:	2100      	movs	r1, #0
 8006784:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e010      	b.n	80067ac <UART_WaitOnFlagUntilTimeout+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	4013      	ands	r3, r2
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	425a      	negs	r2, r3
 800679a:	4153      	adcs	r3, r2
 800679c:	b2db      	uxtb	r3, r3
 800679e:	001a      	movs	r2, r3
 80067a0:	1dfb      	adds	r3, r7, #7
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d100      	bne.n	80067aa <UART_WaitOnFlagUntilTimeout+0x172>
 80067a8:	e74f      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	0018      	movs	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b014      	add	sp, #80	; 0x50
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	fffffe5f 	.word	0xfffffe5f

080067b8 <__errno>:
 80067b8:	4b01      	ldr	r3, [pc, #4]	; (80067c0 <__errno+0x8>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	4770      	bx	lr
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	2000000c 	.word	0x2000000c

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	2600      	movs	r6, #0
 80067c8:	4d0c      	ldr	r5, [pc, #48]	; (80067fc <__libc_init_array+0x38>)
 80067ca:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	2600      	movs	r6, #0
 80067d6:	f000 ffa3 	bl	8007720 <_init>
 80067da:	4d0a      	ldr	r5, [pc, #40]	; (8006804 <__libc_init_array+0x40>)
 80067dc:	4c0a      	ldr	r4, [pc, #40]	; (8006808 <__libc_init_array+0x44>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	00b3      	lsls	r3, r6, #2
 80067ea:	58eb      	ldr	r3, [r5, r3]
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	00b3      	lsls	r3, r6, #2
 80067f4:	58eb      	ldr	r3, [r5, r3]
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	0800792c 	.word	0x0800792c
 8006800:	0800792c 	.word	0x0800792c
 8006804:	0800792c 	.word	0x0800792c
 8006808:	08007930 	.word	0x08007930

0800680c <memset>:
 800680c:	0003      	movs	r3, r0
 800680e:	1812      	adds	r2, r2, r0
 8006810:	4293      	cmp	r3, r2
 8006812:	d100      	bne.n	8006816 <memset+0xa>
 8006814:	4770      	bx	lr
 8006816:	7019      	strb	r1, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	e7f9      	b.n	8006810 <memset+0x4>

0800681c <iprintf>:
 800681c:	b40f      	push	{r0, r1, r2, r3}
 800681e:	4b0b      	ldr	r3, [pc, #44]	; (800684c <iprintf+0x30>)
 8006820:	b513      	push	{r0, r1, r4, lr}
 8006822:	681c      	ldr	r4, [r3, #0]
 8006824:	2c00      	cmp	r4, #0
 8006826:	d005      	beq.n	8006834 <iprintf+0x18>
 8006828:	69a3      	ldr	r3, [r4, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <iprintf+0x18>
 800682e:	0020      	movs	r0, r4
 8006830:	f000 fa3c 	bl	8006cac <__sinit>
 8006834:	ab05      	add	r3, sp, #20
 8006836:	9a04      	ldr	r2, [sp, #16]
 8006838:	68a1      	ldr	r1, [r4, #8]
 800683a:	0020      	movs	r0, r4
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	f000 fc05 	bl	800704c <_vfiprintf_r>
 8006842:	bc16      	pop	{r1, r2, r4}
 8006844:	bc08      	pop	{r3}
 8006846:	b004      	add	sp, #16
 8006848:	4718      	bx	r3
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	2000000c 	.word	0x2000000c

08006850 <_puts_r>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	0005      	movs	r5, r0
 8006854:	000e      	movs	r6, r1
 8006856:	2800      	cmp	r0, #0
 8006858:	d004      	beq.n	8006864 <_puts_r+0x14>
 800685a:	6983      	ldr	r3, [r0, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <_puts_r+0x14>
 8006860:	f000 fa24 	bl	8006cac <__sinit>
 8006864:	69ab      	ldr	r3, [r5, #24]
 8006866:	68ac      	ldr	r4, [r5, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <_puts_r+0x22>
 800686c:	0028      	movs	r0, r5
 800686e:	f000 fa1d 	bl	8006cac <__sinit>
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <_puts_r+0xb4>)
 8006874:	429c      	cmp	r4, r3
 8006876:	d10f      	bne.n	8006898 <_puts_r+0x48>
 8006878:	686c      	ldr	r4, [r5, #4]
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	071b      	lsls	r3, r3, #28
 800687e:	d502      	bpl.n	8006886 <_puts_r+0x36>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d11f      	bne.n	80068c6 <_puts_r+0x76>
 8006886:	0021      	movs	r1, r4
 8006888:	0028      	movs	r0, r5
 800688a:	f000 f8a1 	bl	80069d0 <__swsetup_r>
 800688e:	2800      	cmp	r0, #0
 8006890:	d019      	beq.n	80068c6 <_puts_r+0x76>
 8006892:	2001      	movs	r0, #1
 8006894:	4240      	negs	r0, r0
 8006896:	bd70      	pop	{r4, r5, r6, pc}
 8006898:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <_puts_r+0xb8>)
 800689a:	429c      	cmp	r4, r3
 800689c:	d101      	bne.n	80068a2 <_puts_r+0x52>
 800689e:	68ac      	ldr	r4, [r5, #8]
 80068a0:	e7eb      	b.n	800687a <_puts_r+0x2a>
 80068a2:	4b1a      	ldr	r3, [pc, #104]	; (800690c <_puts_r+0xbc>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	d1e8      	bne.n	800687a <_puts_r+0x2a>
 80068a8:	68ec      	ldr	r4, [r5, #12]
 80068aa:	e7e6      	b.n	800687a <_puts_r+0x2a>
 80068ac:	3601      	adds	r6, #1
 80068ae:	60a3      	str	r3, [r4, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da04      	bge.n	80068be <_puts_r+0x6e>
 80068b4:	69a2      	ldr	r2, [r4, #24]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	dc16      	bgt.n	80068e8 <_puts_r+0x98>
 80068ba:	290a      	cmp	r1, #10
 80068bc:	d014      	beq.n	80068e8 <_puts_r+0x98>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	6022      	str	r2, [r4, #0]
 80068c4:	7019      	strb	r1, [r3, #0]
 80068c6:	68a3      	ldr	r3, [r4, #8]
 80068c8:	7831      	ldrb	r1, [r6, #0]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d1ed      	bne.n	80068ac <_puts_r+0x5c>
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da0f      	bge.n	80068f6 <_puts_r+0xa6>
 80068d6:	0022      	movs	r2, r4
 80068d8:	310a      	adds	r1, #10
 80068da:	0028      	movs	r0, r5
 80068dc:	f000 f822 	bl	8006924 <__swbuf_r>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d0d6      	beq.n	8006892 <_puts_r+0x42>
 80068e4:	200a      	movs	r0, #10
 80068e6:	e7d6      	b.n	8006896 <_puts_r+0x46>
 80068e8:	0022      	movs	r2, r4
 80068ea:	0028      	movs	r0, r5
 80068ec:	f000 f81a 	bl	8006924 <__swbuf_r>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d1e8      	bne.n	80068c6 <_puts_r+0x76>
 80068f4:	e7cd      	b.n	8006892 <_puts_r+0x42>
 80068f6:	200a      	movs	r0, #10
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	6022      	str	r2, [r4, #0]
 80068fe:	7018      	strb	r0, [r3, #0]
 8006900:	e7c9      	b.n	8006896 <_puts_r+0x46>
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	080078b8 	.word	0x080078b8
 8006908:	080078d8 	.word	0x080078d8
 800690c:	08007898 	.word	0x08007898

08006910 <puts>:
 8006910:	b510      	push	{r4, lr}
 8006912:	4b03      	ldr	r3, [pc, #12]	; (8006920 <puts+0x10>)
 8006914:	0001      	movs	r1, r0
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	f7ff ff9a 	bl	8006850 <_puts_r>
 800691c:	bd10      	pop	{r4, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	2000000c 	.word	0x2000000c

08006924 <__swbuf_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	0005      	movs	r5, r0
 8006928:	000e      	movs	r6, r1
 800692a:	0014      	movs	r4, r2
 800692c:	2800      	cmp	r0, #0
 800692e:	d004      	beq.n	800693a <__swbuf_r+0x16>
 8006930:	6983      	ldr	r3, [r0, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <__swbuf_r+0x16>
 8006936:	f000 f9b9 	bl	8006cac <__sinit>
 800693a:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <__swbuf_r+0xa0>)
 800693c:	429c      	cmp	r4, r3
 800693e:	d12d      	bne.n	800699c <__swbuf_r+0x78>
 8006940:	686c      	ldr	r4, [r5, #4]
 8006942:	69a3      	ldr	r3, [r4, #24]
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	071b      	lsls	r3, r3, #28
 800694a:	d531      	bpl.n	80069b0 <__swbuf_r+0x8c>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02e      	beq.n	80069b0 <__swbuf_r+0x8c>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	b2f7      	uxtb	r7, r6
 8006958:	1a98      	subs	r0, r3, r2
 800695a:	6963      	ldr	r3, [r4, #20]
 800695c:	b2f6      	uxtb	r6, r6
 800695e:	4283      	cmp	r3, r0
 8006960:	dc05      	bgt.n	800696e <__swbuf_r+0x4a>
 8006962:	0021      	movs	r1, r4
 8006964:	0028      	movs	r0, r5
 8006966:	f000 f933 	bl	8006bd0 <_fflush_r>
 800696a:	2800      	cmp	r0, #0
 800696c:	d126      	bne.n	80069bc <__swbuf_r+0x98>
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	3001      	adds	r0, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	60a3      	str	r3, [r4, #8]
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	6022      	str	r2, [r4, #0]
 800697c:	701f      	strb	r7, [r3, #0]
 800697e:	6963      	ldr	r3, [r4, #20]
 8006980:	4283      	cmp	r3, r0
 8006982:	d004      	beq.n	800698e <__swbuf_r+0x6a>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d51a      	bpl.n	80069c0 <__swbuf_r+0x9c>
 800698a:	2e0a      	cmp	r6, #10
 800698c:	d118      	bne.n	80069c0 <__swbuf_r+0x9c>
 800698e:	0021      	movs	r1, r4
 8006990:	0028      	movs	r0, r5
 8006992:	f000 f91d 	bl	8006bd0 <_fflush_r>
 8006996:	2800      	cmp	r0, #0
 8006998:	d012      	beq.n	80069c0 <__swbuf_r+0x9c>
 800699a:	e00f      	b.n	80069bc <__swbuf_r+0x98>
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <__swbuf_r+0xa4>)
 800699e:	429c      	cmp	r4, r3
 80069a0:	d101      	bne.n	80069a6 <__swbuf_r+0x82>
 80069a2:	68ac      	ldr	r4, [r5, #8]
 80069a4:	e7cd      	b.n	8006942 <__swbuf_r+0x1e>
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <__swbuf_r+0xa8>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d1ca      	bne.n	8006942 <__swbuf_r+0x1e>
 80069ac:	68ec      	ldr	r4, [r5, #12]
 80069ae:	e7c8      	b.n	8006942 <__swbuf_r+0x1e>
 80069b0:	0021      	movs	r1, r4
 80069b2:	0028      	movs	r0, r5
 80069b4:	f000 f80c 	bl	80069d0 <__swsetup_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d0ca      	beq.n	8006952 <__swbuf_r+0x2e>
 80069bc:	2601      	movs	r6, #1
 80069be:	4276      	negs	r6, r6
 80069c0:	0030      	movs	r0, r6
 80069c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c4:	080078b8 	.word	0x080078b8
 80069c8:	080078d8 	.word	0x080078d8
 80069cc:	08007898 	.word	0x08007898

080069d0 <__swsetup_r>:
 80069d0:	4b36      	ldr	r3, [pc, #216]	; (8006aac <__swsetup_r+0xdc>)
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	681d      	ldr	r5, [r3, #0]
 80069d6:	0006      	movs	r6, r0
 80069d8:	000c      	movs	r4, r1
 80069da:	2d00      	cmp	r5, #0
 80069dc:	d005      	beq.n	80069ea <__swsetup_r+0x1a>
 80069de:	69ab      	ldr	r3, [r5, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <__swsetup_r+0x1a>
 80069e4:	0028      	movs	r0, r5
 80069e6:	f000 f961 	bl	8006cac <__sinit>
 80069ea:	4b31      	ldr	r3, [pc, #196]	; (8006ab0 <__swsetup_r+0xe0>)
 80069ec:	429c      	cmp	r4, r3
 80069ee:	d10f      	bne.n	8006a10 <__swsetup_r+0x40>
 80069f0:	686c      	ldr	r4, [r5, #4]
 80069f2:	230c      	movs	r3, #12
 80069f4:	5ee2      	ldrsh	r2, [r4, r3]
 80069f6:	b293      	uxth	r3, r2
 80069f8:	0719      	lsls	r1, r3, #28
 80069fa:	d42d      	bmi.n	8006a58 <__swsetup_r+0x88>
 80069fc:	06d9      	lsls	r1, r3, #27
 80069fe:	d411      	bmi.n	8006a24 <__swsetup_r+0x54>
 8006a00:	2309      	movs	r3, #9
 8006a02:	2001      	movs	r0, #1
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	3337      	adds	r3, #55	; 0x37
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	4240      	negs	r0, r0
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	4b28      	ldr	r3, [pc, #160]	; (8006ab4 <__swsetup_r+0xe4>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d101      	bne.n	8006a1a <__swsetup_r+0x4a>
 8006a16:	68ac      	ldr	r4, [r5, #8]
 8006a18:	e7eb      	b.n	80069f2 <__swsetup_r+0x22>
 8006a1a:	4b27      	ldr	r3, [pc, #156]	; (8006ab8 <__swsetup_r+0xe8>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	d1e8      	bne.n	80069f2 <__swsetup_r+0x22>
 8006a20:	68ec      	ldr	r4, [r5, #12]
 8006a22:	e7e6      	b.n	80069f2 <__swsetup_r+0x22>
 8006a24:	075b      	lsls	r3, r3, #29
 8006a26:	d513      	bpl.n	8006a50 <__swsetup_r+0x80>
 8006a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d008      	beq.n	8006a40 <__swsetup_r+0x70>
 8006a2e:	0023      	movs	r3, r4
 8006a30:	3344      	adds	r3, #68	; 0x44
 8006a32:	4299      	cmp	r1, r3
 8006a34:	d002      	beq.n	8006a3c <__swsetup_r+0x6c>
 8006a36:	0030      	movs	r0, r6
 8006a38:	f000 fa38 	bl	8006eac <_free_r>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8006a40:	2224      	movs	r2, #36	; 0x24
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	4393      	bics	r3, r2
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6063      	str	r3, [r4, #4]
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	2308      	movs	r3, #8
 8006a52:	89a2      	ldrh	r2, [r4, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <__swsetup_r+0xa6>
 8006a5e:	21a0      	movs	r1, #160	; 0xa0
 8006a60:	2280      	movs	r2, #128	; 0x80
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	0089      	lsls	r1, r1, #2
 8006a66:	0092      	lsls	r2, r2, #2
 8006a68:	400b      	ands	r3, r1
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0xa6>
 8006a6e:	0021      	movs	r1, r4
 8006a70:	0030      	movs	r0, r6
 8006a72:	f000 f9d7 	bl	8006e24 <__smakebuf_r>
 8006a76:	2301      	movs	r3, #1
 8006a78:	89a2      	ldrh	r2, [r4, #12]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	d011      	beq.n	8006aa2 <__swsetup_r+0xd2>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60a3      	str	r3, [r4, #8]
 8006a82:	6963      	ldr	r3, [r4, #20]
 8006a84:	425b      	negs	r3, r3
 8006a86:	61a3      	str	r3, [r4, #24]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	4283      	cmp	r3, r0
 8006a8e:	d1be      	bne.n	8006a0e <__swsetup_r+0x3e>
 8006a90:	230c      	movs	r3, #12
 8006a92:	5ee2      	ldrsh	r2, [r4, r3]
 8006a94:	0613      	lsls	r3, r2, #24
 8006a96:	d5ba      	bpl.n	8006a0e <__swsetup_r+0x3e>
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	81a3      	strh	r3, [r4, #12]
 8006a9e:	3801      	subs	r0, #1
 8006aa0:	e7b5      	b.n	8006a0e <__swsetup_r+0x3e>
 8006aa2:	0792      	lsls	r2, r2, #30
 8006aa4:	d400      	bmi.n	8006aa8 <__swsetup_r+0xd8>
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	60a3      	str	r3, [r4, #8]
 8006aaa:	e7ed      	b.n	8006a88 <__swsetup_r+0xb8>
 8006aac:	2000000c 	.word	0x2000000c
 8006ab0:	080078b8 	.word	0x080078b8
 8006ab4:	080078d8 	.word	0x080078d8
 8006ab8:	08007898 	.word	0x08007898

08006abc <__sflush_r>:
 8006abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006abe:	898a      	ldrh	r2, [r1, #12]
 8006ac0:	0005      	movs	r5, r0
 8006ac2:	000c      	movs	r4, r1
 8006ac4:	0713      	lsls	r3, r2, #28
 8006ac6:	d460      	bmi.n	8006b8a <__sflush_r+0xce>
 8006ac8:	684b      	ldr	r3, [r1, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dc04      	bgt.n	8006ad8 <__sflush_r+0x1c>
 8006ace:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dc01      	bgt.n	8006ad8 <__sflush_r+0x1c>
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ad8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	d0fa      	beq.n	8006ad4 <__sflush_r+0x18>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	682e      	ldr	r6, [r5, #0]
 8006ae2:	602b      	str	r3, [r5, #0]
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	015b      	lsls	r3, r3, #5
 8006ae8:	6a21      	ldr	r1, [r4, #32]
 8006aea:	401a      	ands	r2, r3
 8006aec:	d034      	beq.n	8006b58 <__sflush_r+0x9c>
 8006aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	075b      	lsls	r3, r3, #29
 8006af4:	d506      	bpl.n	8006b04 <__sflush_r+0x48>
 8006af6:	6863      	ldr	r3, [r4, #4]
 8006af8:	1ac0      	subs	r0, r0, r3
 8006afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <__sflush_r+0x48>
 8006b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b02:	1ac0      	subs	r0, r0, r3
 8006b04:	0002      	movs	r2, r0
 8006b06:	6a21      	ldr	r1, [r4, #32]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	0028      	movs	r0, r5
 8006b0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b0e:	47b8      	blx	r7
 8006b10:	89a1      	ldrh	r1, [r4, #12]
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d106      	bne.n	8006b24 <__sflush_r+0x68>
 8006b16:	682b      	ldr	r3, [r5, #0]
 8006b18:	2b1d      	cmp	r3, #29
 8006b1a:	d830      	bhi.n	8006b7e <__sflush_r+0xc2>
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <__sflush_r+0x110>)
 8006b1e:	40da      	lsrs	r2, r3
 8006b20:	07d3      	lsls	r3, r2, #31
 8006b22:	d52c      	bpl.n	8006b7e <__sflush_r+0xc2>
 8006b24:	2300      	movs	r3, #0
 8006b26:	6063      	str	r3, [r4, #4]
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	04cb      	lsls	r3, r1, #19
 8006b2e:	d505      	bpl.n	8006b3c <__sflush_r+0x80>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <__sflush_r+0x7e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d100      	bne.n	8006b3c <__sflush_r+0x80>
 8006b3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b3e:	602e      	str	r6, [r5, #0]
 8006b40:	2900      	cmp	r1, #0
 8006b42:	d0c7      	beq.n	8006ad4 <__sflush_r+0x18>
 8006b44:	0023      	movs	r3, r4
 8006b46:	3344      	adds	r3, #68	; 0x44
 8006b48:	4299      	cmp	r1, r3
 8006b4a:	d002      	beq.n	8006b52 <__sflush_r+0x96>
 8006b4c:	0028      	movs	r0, r5
 8006b4e:	f000 f9ad 	bl	8006eac <_free_r>
 8006b52:	2000      	movs	r0, #0
 8006b54:	6360      	str	r0, [r4, #52]	; 0x34
 8006b56:	e7be      	b.n	8006ad6 <__sflush_r+0x1a>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	0028      	movs	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d1c6      	bne.n	8006af0 <__sflush_r+0x34>
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0c3      	beq.n	8006af0 <__sflush_r+0x34>
 8006b68:	2b1d      	cmp	r3, #29
 8006b6a:	d001      	beq.n	8006b70 <__sflush_r+0xb4>
 8006b6c:	2b16      	cmp	r3, #22
 8006b6e:	d101      	bne.n	8006b74 <__sflush_r+0xb8>
 8006b70:	602e      	str	r6, [r5, #0]
 8006b72:	e7af      	b.n	8006ad4 <__sflush_r+0x18>
 8006b74:	2340      	movs	r3, #64	; 0x40
 8006b76:	89a2      	ldrh	r2, [r4, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	e7ab      	b.n	8006ad6 <__sflush_r+0x1a>
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	430b      	orrs	r3, r1
 8006b82:	2001      	movs	r0, #1
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	4240      	negs	r0, r0
 8006b88:	e7a5      	b.n	8006ad6 <__sflush_r+0x1a>
 8006b8a:	690f      	ldr	r7, [r1, #16]
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	d0a1      	beq.n	8006ad4 <__sflush_r+0x18>
 8006b90:	680b      	ldr	r3, [r1, #0]
 8006b92:	600f      	str	r7, [r1, #0]
 8006b94:	1bdb      	subs	r3, r3, r7
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	0792      	lsls	r2, r2, #30
 8006b9c:	d100      	bne.n	8006ba0 <__sflush_r+0xe4>
 8006b9e:	694b      	ldr	r3, [r1, #20]
 8006ba0:	60a3      	str	r3, [r4, #8]
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc00      	bgt.n	8006baa <__sflush_r+0xee>
 8006ba8:	e794      	b.n	8006ad4 <__sflush_r+0x18>
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	003a      	movs	r2, r7
 8006bae:	6a21      	ldr	r1, [r4, #32]
 8006bb0:	0028      	movs	r0, r5
 8006bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bb4:	47b0      	blx	r6
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	dc03      	bgt.n	8006bc2 <__sflush_r+0x106>
 8006bba:	2340      	movs	r3, #64	; 0x40
 8006bbc:	89a2      	ldrh	r2, [r4, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	e7df      	b.n	8006b82 <__sflush_r+0xc6>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	183f      	adds	r7, r7, r0
 8006bc6:	1a1b      	subs	r3, r3, r0
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	e7ea      	b.n	8006ba2 <__sflush_r+0xe6>
 8006bcc:	20400001 	.word	0x20400001

08006bd0 <_fflush_r>:
 8006bd0:	690b      	ldr	r3, [r1, #16]
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	0005      	movs	r5, r0
 8006bd6:	000c      	movs	r4, r1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <_fflush_r+0x10>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d004      	beq.n	8006bee <_fflush_r+0x1e>
 8006be4:	6983      	ldr	r3, [r0, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <_fflush_r+0x1e>
 8006bea:	f000 f85f 	bl	8006cac <__sinit>
 8006bee:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <_fflush_r+0x4c>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d109      	bne.n	8006c08 <_fflush_r+0x38>
 8006bf4:	686c      	ldr	r4, [r5, #4]
 8006bf6:	220c      	movs	r2, #12
 8006bf8:	5ea3      	ldrsh	r3, [r4, r2]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ee      	beq.n	8006bdc <_fflush_r+0xc>
 8006bfe:	0021      	movs	r1, r4
 8006c00:	0028      	movs	r0, r5
 8006c02:	f7ff ff5b 	bl	8006abc <__sflush_r>
 8006c06:	e7ea      	b.n	8006bde <_fflush_r+0xe>
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <_fflush_r+0x50>)
 8006c0a:	429c      	cmp	r4, r3
 8006c0c:	d101      	bne.n	8006c12 <_fflush_r+0x42>
 8006c0e:	68ac      	ldr	r4, [r5, #8]
 8006c10:	e7f1      	b.n	8006bf6 <_fflush_r+0x26>
 8006c12:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <_fflush_r+0x54>)
 8006c14:	429c      	cmp	r4, r3
 8006c16:	d1ee      	bne.n	8006bf6 <_fflush_r+0x26>
 8006c18:	68ec      	ldr	r4, [r5, #12]
 8006c1a:	e7ec      	b.n	8006bf6 <_fflush_r+0x26>
 8006c1c:	080078b8 	.word	0x080078b8
 8006c20:	080078d8 	.word	0x080078d8
 8006c24:	08007898 	.word	0x08007898

08006c28 <std>:
 8006c28:	2300      	movs	r3, #0
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	0004      	movs	r4, r0
 8006c2e:	6003      	str	r3, [r0, #0]
 8006c30:	6043      	str	r3, [r0, #4]
 8006c32:	6083      	str	r3, [r0, #8]
 8006c34:	8181      	strh	r1, [r0, #12]
 8006c36:	6643      	str	r3, [r0, #100]	; 0x64
 8006c38:	81c2      	strh	r2, [r0, #14]
 8006c3a:	6103      	str	r3, [r0, #16]
 8006c3c:	6143      	str	r3, [r0, #20]
 8006c3e:	6183      	str	r3, [r0, #24]
 8006c40:	0019      	movs	r1, r3
 8006c42:	2208      	movs	r2, #8
 8006c44:	305c      	adds	r0, #92	; 0x5c
 8006c46:	f7ff fde1 	bl	800680c <memset>
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <std+0x38>)
 8006c4c:	6224      	str	r4, [r4, #32]
 8006c4e:	6263      	str	r3, [r4, #36]	; 0x24
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <std+0x3c>)
 8006c52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <std+0x40>)
 8006c56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <std+0x44>)
 8006c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	08007589 	.word	0x08007589
 8006c64:	080075b1 	.word	0x080075b1
 8006c68:	080075e9 	.word	0x080075e9
 8006c6c:	08007615 	.word	0x08007615

08006c70 <_cleanup_r>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4902      	ldr	r1, [pc, #8]	; (8006c7c <_cleanup_r+0xc>)
 8006c74:	f000 f88c 	bl	8006d90 <_fwalk_reent>
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	08006bd1 	.word	0x08006bd1

08006c80 <__sfmoreglue>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	2568      	movs	r5, #104	; 0x68
 8006c84:	1e4a      	subs	r2, r1, #1
 8006c86:	4355      	muls	r5, r2
 8006c88:	000e      	movs	r6, r1
 8006c8a:	0029      	movs	r1, r5
 8006c8c:	3174      	adds	r1, #116	; 0x74
 8006c8e:	f000 f957 	bl	8006f40 <_malloc_r>
 8006c92:	1e04      	subs	r4, r0, #0
 8006c94:	d008      	beq.n	8006ca8 <__sfmoreglue+0x28>
 8006c96:	2100      	movs	r1, #0
 8006c98:	002a      	movs	r2, r5
 8006c9a:	6001      	str	r1, [r0, #0]
 8006c9c:	6046      	str	r6, [r0, #4]
 8006c9e:	300c      	adds	r0, #12
 8006ca0:	60a0      	str	r0, [r4, #8]
 8006ca2:	3268      	adds	r2, #104	; 0x68
 8006ca4:	f7ff fdb2 	bl	800680c <memset>
 8006ca8:	0020      	movs	r0, r4
 8006caa:	bd70      	pop	{r4, r5, r6, pc}

08006cac <__sinit>:
 8006cac:	6983      	ldr	r3, [r0, #24]
 8006cae:	b513      	push	{r0, r1, r4, lr}
 8006cb0:	0004      	movs	r4, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d128      	bne.n	8006d08 <__sinit+0x5c>
 8006cb6:	6483      	str	r3, [r0, #72]	; 0x48
 8006cb8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006cba:	6503      	str	r3, [r0, #80]	; 0x50
 8006cbc:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <__sinit+0x60>)
 8006cbe:	4a14      	ldr	r2, [pc, #80]	; (8006d10 <__sinit+0x64>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6282      	str	r2, [r0, #40]	; 0x28
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	4298      	cmp	r0, r3
 8006cc8:	d101      	bne.n	8006cce <__sinit+0x22>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	6183      	str	r3, [r0, #24]
 8006cce:	0020      	movs	r0, r4
 8006cd0:	f000 f820 	bl	8006d14 <__sfp>
 8006cd4:	6060      	str	r0, [r4, #4]
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	f000 f81c 	bl	8006d14 <__sfp>
 8006cdc:	60a0      	str	r0, [r4, #8]
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f000 f818 	bl	8006d14 <__sfp>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	60e0      	str	r0, [r4, #12]
 8006ce8:	2104      	movs	r1, #4
 8006cea:	6860      	ldr	r0, [r4, #4]
 8006cec:	f7ff ff9c 	bl	8006c28 <std>
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	2109      	movs	r1, #9
 8006cf4:	68a0      	ldr	r0, [r4, #8]
 8006cf6:	f7ff ff97 	bl	8006c28 <std>
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	2112      	movs	r1, #18
 8006cfe:	68e0      	ldr	r0, [r4, #12]
 8006d00:	f7ff ff92 	bl	8006c28 <std>
 8006d04:	2301      	movs	r3, #1
 8006d06:	61a3      	str	r3, [r4, #24]
 8006d08:	bd13      	pop	{r0, r1, r4, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	08007894 	.word	0x08007894
 8006d10:	08006c71 	.word	0x08006c71

08006d14 <__sfp>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	4b1c      	ldr	r3, [pc, #112]	; (8006d88 <__sfp+0x74>)
 8006d18:	0007      	movs	r7, r0
 8006d1a:	681e      	ldr	r6, [r3, #0]
 8006d1c:	69b3      	ldr	r3, [r6, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d102      	bne.n	8006d28 <__sfp+0x14>
 8006d22:	0030      	movs	r0, r6
 8006d24:	f7ff ffc2 	bl	8006cac <__sinit>
 8006d28:	3648      	adds	r6, #72	; 0x48
 8006d2a:	68b4      	ldr	r4, [r6, #8]
 8006d2c:	6873      	ldr	r3, [r6, #4]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	d504      	bpl.n	8006d3c <__sfp+0x28>
 8006d32:	6833      	ldr	r3, [r6, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <__sfp+0x34>
 8006d38:	6836      	ldr	r6, [r6, #0]
 8006d3a:	e7f6      	b.n	8006d2a <__sfp+0x16>
 8006d3c:	220c      	movs	r2, #12
 8006d3e:	5ea5      	ldrsh	r5, [r4, r2]
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	d00d      	beq.n	8006d60 <__sfp+0x4c>
 8006d44:	3468      	adds	r4, #104	; 0x68
 8006d46:	e7f2      	b.n	8006d2e <__sfp+0x1a>
 8006d48:	2104      	movs	r1, #4
 8006d4a:	0038      	movs	r0, r7
 8006d4c:	f7ff ff98 	bl	8006c80 <__sfmoreglue>
 8006d50:	6030      	str	r0, [r6, #0]
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d1f0      	bne.n	8006d38 <__sfp+0x24>
 8006d56:	230c      	movs	r3, #12
 8006d58:	0004      	movs	r4, r0
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	0020      	movs	r0, r4
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d60:	0020      	movs	r0, r4
 8006d62:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <__sfp+0x78>)
 8006d64:	6665      	str	r5, [r4, #100]	; 0x64
 8006d66:	6025      	str	r5, [r4, #0]
 8006d68:	6065      	str	r5, [r4, #4]
 8006d6a:	60a5      	str	r5, [r4, #8]
 8006d6c:	60e3      	str	r3, [r4, #12]
 8006d6e:	6125      	str	r5, [r4, #16]
 8006d70:	6165      	str	r5, [r4, #20]
 8006d72:	61a5      	str	r5, [r4, #24]
 8006d74:	2208      	movs	r2, #8
 8006d76:	0029      	movs	r1, r5
 8006d78:	305c      	adds	r0, #92	; 0x5c
 8006d7a:	f7ff fd47 	bl	800680c <memset>
 8006d7e:	6365      	str	r5, [r4, #52]	; 0x34
 8006d80:	63a5      	str	r5, [r4, #56]	; 0x38
 8006d82:	64a5      	str	r5, [r4, #72]	; 0x48
 8006d84:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006d86:	e7e9      	b.n	8006d5c <__sfp+0x48>
 8006d88:	08007894 	.word	0x08007894
 8006d8c:	ffff0001 	.word	0xffff0001

08006d90 <_fwalk_reent>:
 8006d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d92:	0004      	movs	r4, r0
 8006d94:	0007      	movs	r7, r0
 8006d96:	2600      	movs	r6, #0
 8006d98:	9101      	str	r1, [sp, #4]
 8006d9a:	3448      	adds	r4, #72	; 0x48
 8006d9c:	2c00      	cmp	r4, #0
 8006d9e:	d101      	bne.n	8006da4 <_fwalk_reent+0x14>
 8006da0:	0030      	movs	r0, r6
 8006da2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	68a5      	ldr	r5, [r4, #8]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	9b00      	ldr	r3, [sp, #0]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	d501      	bpl.n	8006db6 <_fwalk_reent+0x26>
 8006db2:	6824      	ldr	r4, [r4, #0]
 8006db4:	e7f2      	b.n	8006d9c <_fwalk_reent+0xc>
 8006db6:	89ab      	ldrh	r3, [r5, #12]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d908      	bls.n	8006dce <_fwalk_reent+0x3e>
 8006dbc:	220e      	movs	r2, #14
 8006dbe:	5eab      	ldrsh	r3, [r5, r2]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	d004      	beq.n	8006dce <_fwalk_reent+0x3e>
 8006dc4:	0029      	movs	r1, r5
 8006dc6:	0038      	movs	r0, r7
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	4798      	blx	r3
 8006dcc:	4306      	orrs	r6, r0
 8006dce:	3568      	adds	r5, #104	; 0x68
 8006dd0:	e7eb      	b.n	8006daa <_fwalk_reent+0x1a>
	...

08006dd4 <__swhatbuf_r>:
 8006dd4:	b570      	push	{r4, r5, r6, lr}
 8006dd6:	000e      	movs	r6, r1
 8006dd8:	001d      	movs	r5, r3
 8006dda:	230e      	movs	r3, #14
 8006ddc:	5ec9      	ldrsh	r1, [r1, r3]
 8006dde:	b096      	sub	sp, #88	; 0x58
 8006de0:	0014      	movs	r4, r2
 8006de2:	2900      	cmp	r1, #0
 8006de4:	da07      	bge.n	8006df6 <__swhatbuf_r+0x22>
 8006de6:	2300      	movs	r3, #0
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	89b3      	ldrh	r3, [r6, #12]
 8006dec:	061b      	lsls	r3, r3, #24
 8006dee:	d411      	bmi.n	8006e14 <__swhatbuf_r+0x40>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	e00f      	b.n	8006e16 <__swhatbuf_r+0x42>
 8006df6:	466a      	mov	r2, sp
 8006df8:	f000 fc38 	bl	800766c <_fstat_r>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	dbf2      	blt.n	8006de6 <__swhatbuf_r+0x12>
 8006e00:	22f0      	movs	r2, #240	; 0xf0
 8006e02:	9b01      	ldr	r3, [sp, #4]
 8006e04:	0212      	lsls	r2, r2, #8
 8006e06:	4013      	ands	r3, r2
 8006e08:	4a05      	ldr	r2, [pc, #20]	; (8006e20 <__swhatbuf_r+0x4c>)
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	425a      	negs	r2, r3
 8006e0e:	4153      	adcs	r3, r2
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	e7ed      	b.n	8006df0 <__swhatbuf_r+0x1c>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	2000      	movs	r0, #0
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	b016      	add	sp, #88	; 0x58
 8006e1c:	bd70      	pop	{r4, r5, r6, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	ffffe000 	.word	0xffffe000

08006e24 <__smakebuf_r>:
 8006e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e26:	2602      	movs	r6, #2
 8006e28:	898b      	ldrh	r3, [r1, #12]
 8006e2a:	0005      	movs	r5, r0
 8006e2c:	000c      	movs	r4, r1
 8006e2e:	4233      	tst	r3, r6
 8006e30:	d006      	beq.n	8006e40 <__smakebuf_r+0x1c>
 8006e32:	0023      	movs	r3, r4
 8006e34:	3347      	adds	r3, #71	; 0x47
 8006e36:	6023      	str	r3, [r4, #0]
 8006e38:	6123      	str	r3, [r4, #16]
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	6163      	str	r3, [r4, #20]
 8006e3e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006e40:	ab01      	add	r3, sp, #4
 8006e42:	466a      	mov	r2, sp
 8006e44:	f7ff ffc6 	bl	8006dd4 <__swhatbuf_r>
 8006e48:	9900      	ldr	r1, [sp, #0]
 8006e4a:	0007      	movs	r7, r0
 8006e4c:	0028      	movs	r0, r5
 8006e4e:	f000 f877 	bl	8006f40 <_malloc_r>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d108      	bne.n	8006e68 <__smakebuf_r+0x44>
 8006e56:	220c      	movs	r2, #12
 8006e58:	5ea3      	ldrsh	r3, [r4, r2]
 8006e5a:	059a      	lsls	r2, r3, #22
 8006e5c:	d4ef      	bmi.n	8006e3e <__smakebuf_r+0x1a>
 8006e5e:	2203      	movs	r2, #3
 8006e60:	4393      	bics	r3, r2
 8006e62:	431e      	orrs	r6, r3
 8006e64:	81a6      	strh	r6, [r4, #12]
 8006e66:	e7e4      	b.n	8006e32 <__smakebuf_r+0xe>
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <__smakebuf_r+0x84>)
 8006e6a:	62ab      	str	r3, [r5, #40]	; 0x28
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	89a2      	ldrh	r2, [r4, #12]
 8006e70:	6020      	str	r0, [r4, #0]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	6120      	str	r0, [r4, #16]
 8006e7a:	6163      	str	r3, [r4, #20]
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00d      	beq.n	8006e9e <__smakebuf_r+0x7a>
 8006e82:	230e      	movs	r3, #14
 8006e84:	5ee1      	ldrsh	r1, [r4, r3]
 8006e86:	0028      	movs	r0, r5
 8006e88:	f000 fc02 	bl	8007690 <_isatty_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d006      	beq.n	8006e9e <__smakebuf_r+0x7a>
 8006e90:	2203      	movs	r2, #3
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	4393      	bics	r3, r2
 8006e96:	001a      	movs	r2, r3
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	89a0      	ldrh	r0, [r4, #12]
 8006ea0:	4338      	orrs	r0, r7
 8006ea2:	81a0      	strh	r0, [r4, #12]
 8006ea4:	e7cb      	b.n	8006e3e <__smakebuf_r+0x1a>
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	08006c71 	.word	0x08006c71

08006eac <_free_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	0005      	movs	r5, r0
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	d010      	beq.n	8006ed6 <_free_r+0x2a>
 8006eb4:	1f0c      	subs	r4, r1, #4
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da00      	bge.n	8006ebe <_free_r+0x12>
 8006ebc:	18e4      	adds	r4, r4, r3
 8006ebe:	0028      	movs	r0, r5
 8006ec0:	f000 fc17 	bl	80076f2 <__malloc_lock>
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	; (8006f3c <_free_r+0x90>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d105      	bne.n	8006ed8 <_free_r+0x2c>
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	6014      	str	r4, [r2, #0]
 8006ed0:	0028      	movs	r0, r5
 8006ed2:	f000 fc0f 	bl	80076f4 <__malloc_unlock>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d909      	bls.n	8006ef0 <_free_r+0x44>
 8006edc:	6821      	ldr	r1, [r4, #0]
 8006ede:	1860      	adds	r0, r4, r1
 8006ee0:	4283      	cmp	r3, r0
 8006ee2:	d1f3      	bne.n	8006ecc <_free_r+0x20>
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	1841      	adds	r1, r0, r1
 8006eea:	6021      	str	r1, [r4, #0]
 8006eec:	e7ee      	b.n	8006ecc <_free_r+0x20>
 8006eee:	0013      	movs	r3, r2
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	d001      	beq.n	8006efa <_free_r+0x4e>
 8006ef6:	42a2      	cmp	r2, r4
 8006ef8:	d9f9      	bls.n	8006eee <_free_r+0x42>
 8006efa:	6819      	ldr	r1, [r3, #0]
 8006efc:	1858      	adds	r0, r3, r1
 8006efe:	42a0      	cmp	r0, r4
 8006f00:	d10b      	bne.n	8006f1a <_free_r+0x6e>
 8006f02:	6820      	ldr	r0, [r4, #0]
 8006f04:	1809      	adds	r1, r1, r0
 8006f06:	1858      	adds	r0, r3, r1
 8006f08:	6019      	str	r1, [r3, #0]
 8006f0a:	4282      	cmp	r2, r0
 8006f0c:	d1e0      	bne.n	8006ed0 <_free_r+0x24>
 8006f0e:	6810      	ldr	r0, [r2, #0]
 8006f10:	6852      	ldr	r2, [r2, #4]
 8006f12:	1841      	adds	r1, r0, r1
 8006f14:	6019      	str	r1, [r3, #0]
 8006f16:	605a      	str	r2, [r3, #4]
 8006f18:	e7da      	b.n	8006ed0 <_free_r+0x24>
 8006f1a:	42a0      	cmp	r0, r4
 8006f1c:	d902      	bls.n	8006f24 <_free_r+0x78>
 8006f1e:	230c      	movs	r3, #12
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	e7d5      	b.n	8006ed0 <_free_r+0x24>
 8006f24:	6821      	ldr	r1, [r4, #0]
 8006f26:	1860      	adds	r0, r4, r1
 8006f28:	4282      	cmp	r2, r0
 8006f2a:	d103      	bne.n	8006f34 <_free_r+0x88>
 8006f2c:	6810      	ldr	r0, [r2, #0]
 8006f2e:	6852      	ldr	r2, [r2, #4]
 8006f30:	1841      	adds	r1, r0, r1
 8006f32:	6021      	str	r1, [r4, #0]
 8006f34:	6062      	str	r2, [r4, #4]
 8006f36:	605c      	str	r4, [r3, #4]
 8006f38:	e7ca      	b.n	8006ed0 <_free_r+0x24>
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	20000090 	.word	0x20000090

08006f40 <_malloc_r>:
 8006f40:	2303      	movs	r3, #3
 8006f42:	b570      	push	{r4, r5, r6, lr}
 8006f44:	1ccd      	adds	r5, r1, #3
 8006f46:	439d      	bics	r5, r3
 8006f48:	3508      	adds	r5, #8
 8006f4a:	0006      	movs	r6, r0
 8006f4c:	2d0c      	cmp	r5, #12
 8006f4e:	d21e      	bcs.n	8006f8e <_malloc_r+0x4e>
 8006f50:	250c      	movs	r5, #12
 8006f52:	42a9      	cmp	r1, r5
 8006f54:	d81d      	bhi.n	8006f92 <_malloc_r+0x52>
 8006f56:	0030      	movs	r0, r6
 8006f58:	f000 fbcb 	bl	80076f2 <__malloc_lock>
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <_malloc_r+0xb4>)
 8006f5e:	6814      	ldr	r4, [r2, #0]
 8006f60:	0021      	movs	r1, r4
 8006f62:	2900      	cmp	r1, #0
 8006f64:	d119      	bne.n	8006f9a <_malloc_r+0x5a>
 8006f66:	4c24      	ldr	r4, [pc, #144]	; (8006ff8 <_malloc_r+0xb8>)
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <_malloc_r+0x36>
 8006f6e:	0030      	movs	r0, r6
 8006f70:	f000 faf8 	bl	8007564 <_sbrk_r>
 8006f74:	6020      	str	r0, [r4, #0]
 8006f76:	0029      	movs	r1, r5
 8006f78:	0030      	movs	r0, r6
 8006f7a:	f000 faf3 	bl	8007564 <_sbrk_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d12b      	bne.n	8006fda <_malloc_r+0x9a>
 8006f82:	230c      	movs	r3, #12
 8006f84:	0030      	movs	r0, r6
 8006f86:	6033      	str	r3, [r6, #0]
 8006f88:	f000 fbb4 	bl	80076f4 <__malloc_unlock>
 8006f8c:	e003      	b.n	8006f96 <_malloc_r+0x56>
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	dadf      	bge.n	8006f52 <_malloc_r+0x12>
 8006f92:	230c      	movs	r3, #12
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	2000      	movs	r0, #0
 8006f98:	bd70      	pop	{r4, r5, r6, pc}
 8006f9a:	680b      	ldr	r3, [r1, #0]
 8006f9c:	1b5b      	subs	r3, r3, r5
 8006f9e:	d419      	bmi.n	8006fd4 <_malloc_r+0x94>
 8006fa0:	2b0b      	cmp	r3, #11
 8006fa2:	d903      	bls.n	8006fac <_malloc_r+0x6c>
 8006fa4:	600b      	str	r3, [r1, #0]
 8006fa6:	18cc      	adds	r4, r1, r3
 8006fa8:	6025      	str	r5, [r4, #0]
 8006faa:	e003      	b.n	8006fb4 <_malloc_r+0x74>
 8006fac:	684b      	ldr	r3, [r1, #4]
 8006fae:	428c      	cmp	r4, r1
 8006fb0:	d10d      	bne.n	8006fce <_malloc_r+0x8e>
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	0030      	movs	r0, r6
 8006fb6:	f000 fb9d 	bl	80076f4 <__malloc_unlock>
 8006fba:	0020      	movs	r0, r4
 8006fbc:	2207      	movs	r2, #7
 8006fbe:	300b      	adds	r0, #11
 8006fc0:	1d23      	adds	r3, r4, #4
 8006fc2:	4390      	bics	r0, r2
 8006fc4:	1ac3      	subs	r3, r0, r3
 8006fc6:	d0e7      	beq.n	8006f98 <_malloc_r+0x58>
 8006fc8:	425a      	negs	r2, r3
 8006fca:	50e2      	str	r2, [r4, r3]
 8006fcc:	e7e4      	b.n	8006f98 <_malloc_r+0x58>
 8006fce:	6063      	str	r3, [r4, #4]
 8006fd0:	000c      	movs	r4, r1
 8006fd2:	e7ef      	b.n	8006fb4 <_malloc_r+0x74>
 8006fd4:	000c      	movs	r4, r1
 8006fd6:	6849      	ldr	r1, [r1, #4]
 8006fd8:	e7c3      	b.n	8006f62 <_malloc_r+0x22>
 8006fda:	2303      	movs	r3, #3
 8006fdc:	1cc4      	adds	r4, r0, #3
 8006fde:	439c      	bics	r4, r3
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d0e1      	beq.n	8006fa8 <_malloc_r+0x68>
 8006fe4:	1a21      	subs	r1, r4, r0
 8006fe6:	0030      	movs	r0, r6
 8006fe8:	f000 fabc 	bl	8007564 <_sbrk_r>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d1db      	bne.n	8006fa8 <_malloc_r+0x68>
 8006ff0:	e7c7      	b.n	8006f82 <_malloc_r+0x42>
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	20000090 	.word	0x20000090
 8006ff8:	20000094 	.word	0x20000094

08006ffc <__sfputc_r>:
 8006ffc:	6893      	ldr	r3, [r2, #8]
 8006ffe:	b510      	push	{r4, lr}
 8007000:	3b01      	subs	r3, #1
 8007002:	6093      	str	r3, [r2, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	da04      	bge.n	8007012 <__sfputc_r+0x16>
 8007008:	6994      	ldr	r4, [r2, #24]
 800700a:	42a3      	cmp	r3, r4
 800700c:	db07      	blt.n	800701e <__sfputc_r+0x22>
 800700e:	290a      	cmp	r1, #10
 8007010:	d005      	beq.n	800701e <__sfputc_r+0x22>
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	1c58      	adds	r0, r3, #1
 8007016:	6010      	str	r0, [r2, #0]
 8007018:	7019      	strb	r1, [r3, #0]
 800701a:	0008      	movs	r0, r1
 800701c:	bd10      	pop	{r4, pc}
 800701e:	f7ff fc81 	bl	8006924 <__swbuf_r>
 8007022:	0001      	movs	r1, r0
 8007024:	e7f9      	b.n	800701a <__sfputc_r+0x1e>

08007026 <__sfputs_r>:
 8007026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007028:	0006      	movs	r6, r0
 800702a:	000f      	movs	r7, r1
 800702c:	0014      	movs	r4, r2
 800702e:	18d5      	adds	r5, r2, r3
 8007030:	42ac      	cmp	r4, r5
 8007032:	d101      	bne.n	8007038 <__sfputs_r+0x12>
 8007034:	2000      	movs	r0, #0
 8007036:	e007      	b.n	8007048 <__sfputs_r+0x22>
 8007038:	7821      	ldrb	r1, [r4, #0]
 800703a:	003a      	movs	r2, r7
 800703c:	0030      	movs	r0, r6
 800703e:	f7ff ffdd 	bl	8006ffc <__sfputc_r>
 8007042:	3401      	adds	r4, #1
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d1f3      	bne.n	8007030 <__sfputs_r+0xa>
 8007048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800704c <_vfiprintf_r>:
 800704c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704e:	b0a1      	sub	sp, #132	; 0x84
 8007050:	9003      	str	r0, [sp, #12]
 8007052:	000f      	movs	r7, r1
 8007054:	0016      	movs	r6, r2
 8007056:	001d      	movs	r5, r3
 8007058:	2800      	cmp	r0, #0
 800705a:	d005      	beq.n	8007068 <_vfiprintf_r+0x1c>
 800705c:	6983      	ldr	r3, [r0, #24]
 800705e:	9305      	str	r3, [sp, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <_vfiprintf_r+0x1c>
 8007064:	f7ff fe22 	bl	8006cac <__sinit>
 8007068:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <_vfiprintf_r+0x20c>)
 800706a:	429f      	cmp	r7, r3
 800706c:	d15c      	bne.n	8007128 <_vfiprintf_r+0xdc>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	685f      	ldr	r7, [r3, #4]
 8007072:	89bb      	ldrh	r3, [r7, #12]
 8007074:	071b      	lsls	r3, r3, #28
 8007076:	d563      	bpl.n	8007140 <_vfiprintf_r+0xf4>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d060      	beq.n	8007140 <_vfiprintf_r+0xf4>
 800707e:	2300      	movs	r3, #0
 8007080:	ac08      	add	r4, sp, #32
 8007082:	6163      	str	r3, [r4, #20]
 8007084:	3320      	adds	r3, #32
 8007086:	7663      	strb	r3, [r4, #25]
 8007088:	3310      	adds	r3, #16
 800708a:	76a3      	strb	r3, [r4, #26]
 800708c:	9507      	str	r5, [sp, #28]
 800708e:	0035      	movs	r5, r6
 8007090:	782b      	ldrb	r3, [r5, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <_vfiprintf_r+0x4e>
 8007096:	2b25      	cmp	r3, #37	; 0x25
 8007098:	d15c      	bne.n	8007154 <_vfiprintf_r+0x108>
 800709a:	1bab      	subs	r3, r5, r6
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	d00c      	beq.n	80070ba <_vfiprintf_r+0x6e>
 80070a0:	0032      	movs	r2, r6
 80070a2:	0039      	movs	r1, r7
 80070a4:	9803      	ldr	r0, [sp, #12]
 80070a6:	f7ff ffbe 	bl	8007026 <__sfputs_r>
 80070aa:	1c43      	adds	r3, r0, #1
 80070ac:	d100      	bne.n	80070b0 <_vfiprintf_r+0x64>
 80070ae:	e0c4      	b.n	800723a <_vfiprintf_r+0x1ee>
 80070b0:	6962      	ldr	r2, [r4, #20]
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	4694      	mov	ip, r2
 80070b6:	4463      	add	r3, ip
 80070b8:	6163      	str	r3, [r4, #20]
 80070ba:	782b      	ldrb	r3, [r5, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d100      	bne.n	80070c2 <_vfiprintf_r+0x76>
 80070c0:	e0bb      	b.n	800723a <_vfiprintf_r+0x1ee>
 80070c2:	2201      	movs	r2, #1
 80070c4:	2300      	movs	r3, #0
 80070c6:	4252      	negs	r2, r2
 80070c8:	6062      	str	r2, [r4, #4]
 80070ca:	a904      	add	r1, sp, #16
 80070cc:	3254      	adds	r2, #84	; 0x54
 80070ce:	1852      	adds	r2, r2, r1
 80070d0:	1c6e      	adds	r6, r5, #1
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	60e3      	str	r3, [r4, #12]
 80070d6:	60a3      	str	r3, [r4, #8]
 80070d8:	7013      	strb	r3, [r2, #0]
 80070da:	65a3      	str	r3, [r4, #88]	; 0x58
 80070dc:	7831      	ldrb	r1, [r6, #0]
 80070de:	2205      	movs	r2, #5
 80070e0:	485e      	ldr	r0, [pc, #376]	; (800725c <_vfiprintf_r+0x210>)
 80070e2:	f000 fafb 	bl	80076dc <memchr>
 80070e6:	1c75      	adds	r5, r6, #1
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d135      	bne.n	8007158 <_vfiprintf_r+0x10c>
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	06d3      	lsls	r3, r2, #27
 80070f0:	d504      	bpl.n	80070fc <_vfiprintf_r+0xb0>
 80070f2:	2353      	movs	r3, #83	; 0x53
 80070f4:	a904      	add	r1, sp, #16
 80070f6:	185b      	adds	r3, r3, r1
 80070f8:	2120      	movs	r1, #32
 80070fa:	7019      	strb	r1, [r3, #0]
 80070fc:	0713      	lsls	r3, r2, #28
 80070fe:	d504      	bpl.n	800710a <_vfiprintf_r+0xbe>
 8007100:	2353      	movs	r3, #83	; 0x53
 8007102:	a904      	add	r1, sp, #16
 8007104:	185b      	adds	r3, r3, r1
 8007106:	212b      	movs	r1, #43	; 0x2b
 8007108:	7019      	strb	r1, [r3, #0]
 800710a:	7833      	ldrb	r3, [r6, #0]
 800710c:	2b2a      	cmp	r3, #42	; 0x2a
 800710e:	d02c      	beq.n	800716a <_vfiprintf_r+0x11e>
 8007110:	0035      	movs	r5, r6
 8007112:	2100      	movs	r1, #0
 8007114:	200a      	movs	r0, #10
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	782a      	ldrb	r2, [r5, #0]
 800711a:	1c6e      	adds	r6, r5, #1
 800711c:	3a30      	subs	r2, #48	; 0x30
 800711e:	2a09      	cmp	r2, #9
 8007120:	d964      	bls.n	80071ec <_vfiprintf_r+0x1a0>
 8007122:	2900      	cmp	r1, #0
 8007124:	d02e      	beq.n	8007184 <_vfiprintf_r+0x138>
 8007126:	e026      	b.n	8007176 <_vfiprintf_r+0x12a>
 8007128:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <_vfiprintf_r+0x214>)
 800712a:	429f      	cmp	r7, r3
 800712c:	d102      	bne.n	8007134 <_vfiprintf_r+0xe8>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	689f      	ldr	r7, [r3, #8]
 8007132:	e79e      	b.n	8007072 <_vfiprintf_r+0x26>
 8007134:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <_vfiprintf_r+0x218>)
 8007136:	429f      	cmp	r7, r3
 8007138:	d19b      	bne.n	8007072 <_vfiprintf_r+0x26>
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	68df      	ldr	r7, [r3, #12]
 800713e:	e798      	b.n	8007072 <_vfiprintf_r+0x26>
 8007140:	0039      	movs	r1, r7
 8007142:	9803      	ldr	r0, [sp, #12]
 8007144:	f7ff fc44 	bl	80069d0 <__swsetup_r>
 8007148:	2800      	cmp	r0, #0
 800714a:	d098      	beq.n	800707e <_vfiprintf_r+0x32>
 800714c:	2001      	movs	r0, #1
 800714e:	4240      	negs	r0, r0
 8007150:	b021      	add	sp, #132	; 0x84
 8007152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007154:	3501      	adds	r5, #1
 8007156:	e79b      	b.n	8007090 <_vfiprintf_r+0x44>
 8007158:	4b40      	ldr	r3, [pc, #256]	; (800725c <_vfiprintf_r+0x210>)
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	1ac0      	subs	r0, r0, r3
 800715e:	2301      	movs	r3, #1
 8007160:	4083      	lsls	r3, r0
 8007162:	4313      	orrs	r3, r2
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	002e      	movs	r6, r5
 8007168:	e7b8      	b.n	80070dc <_vfiprintf_r+0x90>
 800716a:	9b07      	ldr	r3, [sp, #28]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	9107      	str	r1, [sp, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db01      	blt.n	800717a <_vfiprintf_r+0x12e>
 8007176:	930b      	str	r3, [sp, #44]	; 0x2c
 8007178:	e004      	b.n	8007184 <_vfiprintf_r+0x138>
 800717a:	425b      	negs	r3, r3
 800717c:	60e3      	str	r3, [r4, #12]
 800717e:	2302      	movs	r3, #2
 8007180:	4313      	orrs	r3, r2
 8007182:	6023      	str	r3, [r4, #0]
 8007184:	782b      	ldrb	r3, [r5, #0]
 8007186:	2b2e      	cmp	r3, #46	; 0x2e
 8007188:	d10a      	bne.n	80071a0 <_vfiprintf_r+0x154>
 800718a:	786b      	ldrb	r3, [r5, #1]
 800718c:	2b2a      	cmp	r3, #42	; 0x2a
 800718e:	d135      	bne.n	80071fc <_vfiprintf_r+0x1b0>
 8007190:	9b07      	ldr	r3, [sp, #28]
 8007192:	3502      	adds	r5, #2
 8007194:	1d1a      	adds	r2, r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	9207      	str	r2, [sp, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	db2b      	blt.n	80071f6 <_vfiprintf_r+0x1aa>
 800719e:	9309      	str	r3, [sp, #36]	; 0x24
 80071a0:	4e31      	ldr	r6, [pc, #196]	; (8007268 <_vfiprintf_r+0x21c>)
 80071a2:	7829      	ldrb	r1, [r5, #0]
 80071a4:	2203      	movs	r2, #3
 80071a6:	0030      	movs	r0, r6
 80071a8:	f000 fa98 	bl	80076dc <memchr>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d006      	beq.n	80071be <_vfiprintf_r+0x172>
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	1b80      	subs	r0, r0, r6
 80071b4:	4083      	lsls	r3, r0
 80071b6:	6822      	ldr	r2, [r4, #0]
 80071b8:	3501      	adds	r5, #1
 80071ba:	4313      	orrs	r3, r2
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	7829      	ldrb	r1, [r5, #0]
 80071c0:	2206      	movs	r2, #6
 80071c2:	482a      	ldr	r0, [pc, #168]	; (800726c <_vfiprintf_r+0x220>)
 80071c4:	1c6e      	adds	r6, r5, #1
 80071c6:	7621      	strb	r1, [r4, #24]
 80071c8:	f000 fa88 	bl	80076dc <memchr>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d03a      	beq.n	8007246 <_vfiprintf_r+0x1fa>
 80071d0:	4b27      	ldr	r3, [pc, #156]	; (8007270 <_vfiprintf_r+0x224>)
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d125      	bne.n	8007222 <_vfiprintf_r+0x1d6>
 80071d6:	2207      	movs	r2, #7
 80071d8:	9b07      	ldr	r3, [sp, #28]
 80071da:	3307      	adds	r3, #7
 80071dc:	4393      	bics	r3, r2
 80071de:	3308      	adds	r3, #8
 80071e0:	9307      	str	r3, [sp, #28]
 80071e2:	6963      	ldr	r3, [r4, #20]
 80071e4:	9a04      	ldr	r2, [sp, #16]
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	6163      	str	r3, [r4, #20]
 80071ea:	e750      	b.n	800708e <_vfiprintf_r+0x42>
 80071ec:	4343      	muls	r3, r0
 80071ee:	2101      	movs	r1, #1
 80071f0:	189b      	adds	r3, r3, r2
 80071f2:	0035      	movs	r5, r6
 80071f4:	e790      	b.n	8007118 <_vfiprintf_r+0xcc>
 80071f6:	2301      	movs	r3, #1
 80071f8:	425b      	negs	r3, r3
 80071fa:	e7d0      	b.n	800719e <_vfiprintf_r+0x152>
 80071fc:	2300      	movs	r3, #0
 80071fe:	200a      	movs	r0, #10
 8007200:	001a      	movs	r2, r3
 8007202:	3501      	adds	r5, #1
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	7829      	ldrb	r1, [r5, #0]
 8007208:	1c6e      	adds	r6, r5, #1
 800720a:	3930      	subs	r1, #48	; 0x30
 800720c:	2909      	cmp	r1, #9
 800720e:	d903      	bls.n	8007218 <_vfiprintf_r+0x1cc>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0c5      	beq.n	80071a0 <_vfiprintf_r+0x154>
 8007214:	9209      	str	r2, [sp, #36]	; 0x24
 8007216:	e7c3      	b.n	80071a0 <_vfiprintf_r+0x154>
 8007218:	4342      	muls	r2, r0
 800721a:	2301      	movs	r3, #1
 800721c:	1852      	adds	r2, r2, r1
 800721e:	0035      	movs	r5, r6
 8007220:	e7f1      	b.n	8007206 <_vfiprintf_r+0x1ba>
 8007222:	ab07      	add	r3, sp, #28
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	003a      	movs	r2, r7
 8007228:	4b12      	ldr	r3, [pc, #72]	; (8007274 <_vfiprintf_r+0x228>)
 800722a:	0021      	movs	r1, r4
 800722c:	9803      	ldr	r0, [sp, #12]
 800722e:	e000      	b.n	8007232 <_vfiprintf_r+0x1e6>
 8007230:	bf00      	nop
 8007232:	9004      	str	r0, [sp, #16]
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	3301      	adds	r3, #1
 8007238:	d1d3      	bne.n	80071e2 <_vfiprintf_r+0x196>
 800723a:	89bb      	ldrh	r3, [r7, #12]
 800723c:	065b      	lsls	r3, r3, #25
 800723e:	d500      	bpl.n	8007242 <_vfiprintf_r+0x1f6>
 8007240:	e784      	b.n	800714c <_vfiprintf_r+0x100>
 8007242:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007244:	e784      	b.n	8007150 <_vfiprintf_r+0x104>
 8007246:	ab07      	add	r3, sp, #28
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	003a      	movs	r2, r7
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <_vfiprintf_r+0x228>)
 800724e:	0021      	movs	r1, r4
 8007250:	9803      	ldr	r0, [sp, #12]
 8007252:	f000 f87f 	bl	8007354 <_printf_i>
 8007256:	e7ec      	b.n	8007232 <_vfiprintf_r+0x1e6>
 8007258:	080078b8 	.word	0x080078b8
 800725c:	080078f8 	.word	0x080078f8
 8007260:	080078d8 	.word	0x080078d8
 8007264:	08007898 	.word	0x08007898
 8007268:	080078fe 	.word	0x080078fe
 800726c:	08007902 	.word	0x08007902
 8007270:	00000000 	.word	0x00000000
 8007274:	08007027 	.word	0x08007027

08007278 <_printf_common>:
 8007278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727a:	0015      	movs	r5, r2
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	688a      	ldr	r2, [r1, #8]
 8007280:	690b      	ldr	r3, [r1, #16]
 8007282:	9000      	str	r0, [sp, #0]
 8007284:	000c      	movs	r4, r1
 8007286:	4293      	cmp	r3, r2
 8007288:	da00      	bge.n	800728c <_printf_common+0x14>
 800728a:	0013      	movs	r3, r2
 800728c:	0022      	movs	r2, r4
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	3243      	adds	r2, #67	; 0x43
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	2a00      	cmp	r2, #0
 8007296:	d001      	beq.n	800729c <_printf_common+0x24>
 8007298:	3301      	adds	r3, #1
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	069b      	lsls	r3, r3, #26
 80072a0:	d502      	bpl.n	80072a8 <_printf_common+0x30>
 80072a2:	682b      	ldr	r3, [r5, #0]
 80072a4:	3302      	adds	r3, #2
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	2706      	movs	r7, #6
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	401f      	ands	r7, r3
 80072ae:	d027      	beq.n	8007300 <_printf_common+0x88>
 80072b0:	0023      	movs	r3, r4
 80072b2:	3343      	adds	r3, #67	; 0x43
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	1e5a      	subs	r2, r3, #1
 80072b8:	4193      	sbcs	r3, r2
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	0692      	lsls	r2, r2, #26
 80072be:	d430      	bmi.n	8007322 <_printf_common+0xaa>
 80072c0:	0022      	movs	r2, r4
 80072c2:	9901      	ldr	r1, [sp, #4]
 80072c4:	3243      	adds	r2, #67	; 0x43
 80072c6:	9800      	ldr	r0, [sp, #0]
 80072c8:	9e08      	ldr	r6, [sp, #32]
 80072ca:	47b0      	blx	r6
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d025      	beq.n	800731c <_printf_common+0xa4>
 80072d0:	2306      	movs	r3, #6
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	682a      	ldr	r2, [r5, #0]
 80072d6:	68e1      	ldr	r1, [r4, #12]
 80072d8:	4003      	ands	r3, r0
 80072da:	2500      	movs	r5, #0
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d103      	bne.n	80072e8 <_printf_common+0x70>
 80072e0:	1a8d      	subs	r5, r1, r2
 80072e2:	43eb      	mvns	r3, r5
 80072e4:	17db      	asrs	r3, r3, #31
 80072e6:	401d      	ands	r5, r3
 80072e8:	68a3      	ldr	r3, [r4, #8]
 80072ea:	6922      	ldr	r2, [r4, #16]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	dd01      	ble.n	80072f4 <_printf_common+0x7c>
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	18ed      	adds	r5, r5, r3
 80072f4:	2700      	movs	r7, #0
 80072f6:	42bd      	cmp	r5, r7
 80072f8:	d120      	bne.n	800733c <_printf_common+0xc4>
 80072fa:	2000      	movs	r0, #0
 80072fc:	e010      	b.n	8007320 <_printf_common+0xa8>
 80072fe:	3701      	adds	r7, #1
 8007300:	68e3      	ldr	r3, [r4, #12]
 8007302:	682a      	ldr	r2, [r5, #0]
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	42bb      	cmp	r3, r7
 8007308:	ddd2      	ble.n	80072b0 <_printf_common+0x38>
 800730a:	0022      	movs	r2, r4
 800730c:	2301      	movs	r3, #1
 800730e:	3219      	adds	r2, #25
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	9800      	ldr	r0, [sp, #0]
 8007314:	9e08      	ldr	r6, [sp, #32]
 8007316:	47b0      	blx	r6
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d1f0      	bne.n	80072fe <_printf_common+0x86>
 800731c:	2001      	movs	r0, #1
 800731e:	4240      	negs	r0, r0
 8007320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007322:	2030      	movs	r0, #48	; 0x30
 8007324:	18e1      	adds	r1, r4, r3
 8007326:	3143      	adds	r1, #67	; 0x43
 8007328:	7008      	strb	r0, [r1, #0]
 800732a:	0021      	movs	r1, r4
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	3145      	adds	r1, #69	; 0x45
 8007330:	7809      	ldrb	r1, [r1, #0]
 8007332:	18a2      	adds	r2, r4, r2
 8007334:	3243      	adds	r2, #67	; 0x43
 8007336:	3302      	adds	r3, #2
 8007338:	7011      	strb	r1, [r2, #0]
 800733a:	e7c1      	b.n	80072c0 <_printf_common+0x48>
 800733c:	0022      	movs	r2, r4
 800733e:	2301      	movs	r3, #1
 8007340:	321a      	adds	r2, #26
 8007342:	9901      	ldr	r1, [sp, #4]
 8007344:	9800      	ldr	r0, [sp, #0]
 8007346:	9e08      	ldr	r6, [sp, #32]
 8007348:	47b0      	blx	r6
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d0e6      	beq.n	800731c <_printf_common+0xa4>
 800734e:	3701      	adds	r7, #1
 8007350:	e7d1      	b.n	80072f6 <_printf_common+0x7e>
	...

08007354 <_printf_i>:
 8007354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	9204      	str	r2, [sp, #16]
 800735a:	000a      	movs	r2, r1
 800735c:	3243      	adds	r2, #67	; 0x43
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	9003      	str	r0, [sp, #12]
 8007362:	9202      	str	r2, [sp, #8]
 8007364:	7e0a      	ldrb	r2, [r1, #24]
 8007366:	000c      	movs	r4, r1
 8007368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800736a:	2a6e      	cmp	r2, #110	; 0x6e
 800736c:	d100      	bne.n	8007370 <_printf_i+0x1c>
 800736e:	e086      	b.n	800747e <_printf_i+0x12a>
 8007370:	d81f      	bhi.n	80073b2 <_printf_i+0x5e>
 8007372:	2a63      	cmp	r2, #99	; 0x63
 8007374:	d033      	beq.n	80073de <_printf_i+0x8a>
 8007376:	d808      	bhi.n	800738a <_printf_i+0x36>
 8007378:	2a00      	cmp	r2, #0
 800737a:	d100      	bne.n	800737e <_printf_i+0x2a>
 800737c:	e08c      	b.n	8007498 <_printf_i+0x144>
 800737e:	2a58      	cmp	r2, #88	; 0x58
 8007380:	d04d      	beq.n	800741e <_printf_i+0xca>
 8007382:	0025      	movs	r5, r4
 8007384:	3542      	adds	r5, #66	; 0x42
 8007386:	702a      	strb	r2, [r5, #0]
 8007388:	e030      	b.n	80073ec <_printf_i+0x98>
 800738a:	2a64      	cmp	r2, #100	; 0x64
 800738c:	d001      	beq.n	8007392 <_printf_i+0x3e>
 800738e:	2a69      	cmp	r2, #105	; 0x69
 8007390:	d1f7      	bne.n	8007382 <_printf_i+0x2e>
 8007392:	6819      	ldr	r1, [r3, #0]
 8007394:	6825      	ldr	r5, [r4, #0]
 8007396:	1d0a      	adds	r2, r1, #4
 8007398:	0628      	lsls	r0, r5, #24
 800739a:	d529      	bpl.n	80073f0 <_printf_i+0x9c>
 800739c:	6808      	ldr	r0, [r1, #0]
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	2800      	cmp	r0, #0
 80073a2:	da03      	bge.n	80073ac <_printf_i+0x58>
 80073a4:	232d      	movs	r3, #45	; 0x2d
 80073a6:	9a02      	ldr	r2, [sp, #8]
 80073a8:	4240      	negs	r0, r0
 80073aa:	7013      	strb	r3, [r2, #0]
 80073ac:	4e6b      	ldr	r6, [pc, #428]	; (800755c <_printf_i+0x208>)
 80073ae:	270a      	movs	r7, #10
 80073b0:	e04f      	b.n	8007452 <_printf_i+0xfe>
 80073b2:	2a73      	cmp	r2, #115	; 0x73
 80073b4:	d074      	beq.n	80074a0 <_printf_i+0x14c>
 80073b6:	d808      	bhi.n	80073ca <_printf_i+0x76>
 80073b8:	2a6f      	cmp	r2, #111	; 0x6f
 80073ba:	d01f      	beq.n	80073fc <_printf_i+0xa8>
 80073bc:	2a70      	cmp	r2, #112	; 0x70
 80073be:	d1e0      	bne.n	8007382 <_printf_i+0x2e>
 80073c0:	2220      	movs	r2, #32
 80073c2:	6809      	ldr	r1, [r1, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	6022      	str	r2, [r4, #0]
 80073c8:	e003      	b.n	80073d2 <_printf_i+0x7e>
 80073ca:	2a75      	cmp	r2, #117	; 0x75
 80073cc:	d016      	beq.n	80073fc <_printf_i+0xa8>
 80073ce:	2a78      	cmp	r2, #120	; 0x78
 80073d0:	d1d7      	bne.n	8007382 <_printf_i+0x2e>
 80073d2:	0022      	movs	r2, r4
 80073d4:	2178      	movs	r1, #120	; 0x78
 80073d6:	3245      	adds	r2, #69	; 0x45
 80073d8:	7011      	strb	r1, [r2, #0]
 80073da:	4e61      	ldr	r6, [pc, #388]	; (8007560 <_printf_i+0x20c>)
 80073dc:	e022      	b.n	8007424 <_printf_i+0xd0>
 80073de:	0025      	movs	r5, r4
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	3542      	adds	r5, #66	; 0x42
 80073e4:	1d11      	adds	r1, r2, #4
 80073e6:	6019      	str	r1, [r3, #0]
 80073e8:	6813      	ldr	r3, [r2, #0]
 80073ea:	702b      	strb	r3, [r5, #0]
 80073ec:	2301      	movs	r3, #1
 80073ee:	e065      	b.n	80074bc <_printf_i+0x168>
 80073f0:	6808      	ldr	r0, [r1, #0]
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	0669      	lsls	r1, r5, #25
 80073f6:	d5d3      	bpl.n	80073a0 <_printf_i+0x4c>
 80073f8:	b200      	sxth	r0, r0
 80073fa:	e7d1      	b.n	80073a0 <_printf_i+0x4c>
 80073fc:	6819      	ldr	r1, [r3, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	1d08      	adds	r0, r1, #4
 8007402:	6018      	str	r0, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	062e      	lsls	r6, r5, #24
 8007408:	d505      	bpl.n	8007416 <_printf_i+0xc2>
 800740a:	4e54      	ldr	r6, [pc, #336]	; (800755c <_printf_i+0x208>)
 800740c:	2708      	movs	r7, #8
 800740e:	2a6f      	cmp	r2, #111	; 0x6f
 8007410:	d01b      	beq.n	800744a <_printf_i+0xf6>
 8007412:	270a      	movs	r7, #10
 8007414:	e019      	b.n	800744a <_printf_i+0xf6>
 8007416:	066d      	lsls	r5, r5, #25
 8007418:	d5f7      	bpl.n	800740a <_printf_i+0xb6>
 800741a:	b280      	uxth	r0, r0
 800741c:	e7f5      	b.n	800740a <_printf_i+0xb6>
 800741e:	3145      	adds	r1, #69	; 0x45
 8007420:	4e4e      	ldr	r6, [pc, #312]	; (800755c <_printf_i+0x208>)
 8007422:	700a      	strb	r2, [r1, #0]
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	1d01      	adds	r1, r0, #4
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6019      	str	r1, [r3, #0]
 800742e:	0615      	lsls	r5, r2, #24
 8007430:	d521      	bpl.n	8007476 <_printf_i+0x122>
 8007432:	07d3      	lsls	r3, r2, #31
 8007434:	d502      	bpl.n	800743c <_printf_i+0xe8>
 8007436:	2320      	movs	r3, #32
 8007438:	431a      	orrs	r2, r3
 800743a:	6022      	str	r2, [r4, #0]
 800743c:	2710      	movs	r7, #16
 800743e:	2800      	cmp	r0, #0
 8007440:	d103      	bne.n	800744a <_printf_i+0xf6>
 8007442:	2320      	movs	r3, #32
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	439a      	bics	r2, r3
 8007448:	6022      	str	r2, [r4, #0]
 800744a:	0023      	movs	r3, r4
 800744c:	2200      	movs	r2, #0
 800744e:	3343      	adds	r3, #67	; 0x43
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	db58      	blt.n	800750c <_printf_i+0x1b8>
 800745a:	2204      	movs	r2, #4
 800745c:	6821      	ldr	r1, [r4, #0]
 800745e:	4391      	bics	r1, r2
 8007460:	6021      	str	r1, [r4, #0]
 8007462:	2800      	cmp	r0, #0
 8007464:	d154      	bne.n	8007510 <_printf_i+0x1bc>
 8007466:	9d02      	ldr	r5, [sp, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05a      	beq.n	8007522 <_printf_i+0x1ce>
 800746c:	0025      	movs	r5, r4
 800746e:	7833      	ldrb	r3, [r6, #0]
 8007470:	3542      	adds	r5, #66	; 0x42
 8007472:	702b      	strb	r3, [r5, #0]
 8007474:	e055      	b.n	8007522 <_printf_i+0x1ce>
 8007476:	0655      	lsls	r5, r2, #25
 8007478:	d5db      	bpl.n	8007432 <_printf_i+0xde>
 800747a:	b280      	uxth	r0, r0
 800747c:	e7d9      	b.n	8007432 <_printf_i+0xde>
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	680d      	ldr	r5, [r1, #0]
 8007482:	1d10      	adds	r0, r2, #4
 8007484:	6949      	ldr	r1, [r1, #20]
 8007486:	6018      	str	r0, [r3, #0]
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	062e      	lsls	r6, r5, #24
 800748c:	d501      	bpl.n	8007492 <_printf_i+0x13e>
 800748e:	6019      	str	r1, [r3, #0]
 8007490:	e002      	b.n	8007498 <_printf_i+0x144>
 8007492:	066d      	lsls	r5, r5, #25
 8007494:	d5fb      	bpl.n	800748e <_printf_i+0x13a>
 8007496:	8019      	strh	r1, [r3, #0]
 8007498:	2300      	movs	r3, #0
 800749a:	9d02      	ldr	r5, [sp, #8]
 800749c:	6123      	str	r3, [r4, #16]
 800749e:	e04f      	b.n	8007540 <_printf_i+0x1ec>
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	1d11      	adds	r1, r2, #4
 80074a4:	6019      	str	r1, [r3, #0]
 80074a6:	6815      	ldr	r5, [r2, #0]
 80074a8:	2100      	movs	r1, #0
 80074aa:	6862      	ldr	r2, [r4, #4]
 80074ac:	0028      	movs	r0, r5
 80074ae:	f000 f915 	bl	80076dc <memchr>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d001      	beq.n	80074ba <_printf_i+0x166>
 80074b6:	1b40      	subs	r0, r0, r5
 80074b8:	6060      	str	r0, [r4, #4]
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	2300      	movs	r3, #0
 80074c0:	9a02      	ldr	r2, [sp, #8]
 80074c2:	7013      	strb	r3, [r2, #0]
 80074c4:	e03c      	b.n	8007540 <_printf_i+0x1ec>
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	002a      	movs	r2, r5
 80074ca:	9904      	ldr	r1, [sp, #16]
 80074cc:	9803      	ldr	r0, [sp, #12]
 80074ce:	9d05      	ldr	r5, [sp, #20]
 80074d0:	47a8      	blx	r5
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d03e      	beq.n	8007554 <_printf_i+0x200>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	079b      	lsls	r3, r3, #30
 80074da:	d415      	bmi.n	8007508 <_printf_i+0x1b4>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	68e0      	ldr	r0, [r4, #12]
 80074e0:	4298      	cmp	r0, r3
 80074e2:	da39      	bge.n	8007558 <_printf_i+0x204>
 80074e4:	0018      	movs	r0, r3
 80074e6:	e037      	b.n	8007558 <_printf_i+0x204>
 80074e8:	0022      	movs	r2, r4
 80074ea:	2301      	movs	r3, #1
 80074ec:	3219      	adds	r2, #25
 80074ee:	9904      	ldr	r1, [sp, #16]
 80074f0:	9803      	ldr	r0, [sp, #12]
 80074f2:	9e05      	ldr	r6, [sp, #20]
 80074f4:	47b0      	blx	r6
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d02c      	beq.n	8007554 <_printf_i+0x200>
 80074fa:	3501      	adds	r5, #1
 80074fc:	68e3      	ldr	r3, [r4, #12]
 80074fe:	9a07      	ldr	r2, [sp, #28]
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	42ab      	cmp	r3, r5
 8007504:	dcf0      	bgt.n	80074e8 <_printf_i+0x194>
 8007506:	e7e9      	b.n	80074dc <_printf_i+0x188>
 8007508:	2500      	movs	r5, #0
 800750a:	e7f7      	b.n	80074fc <_printf_i+0x1a8>
 800750c:	2800      	cmp	r0, #0
 800750e:	d0ad      	beq.n	800746c <_printf_i+0x118>
 8007510:	9d02      	ldr	r5, [sp, #8]
 8007512:	0039      	movs	r1, r7
 8007514:	f7f8 fe7a 	bl	800020c <__aeabi_uidivmod>
 8007518:	5c73      	ldrb	r3, [r6, r1]
 800751a:	3d01      	subs	r5, #1
 800751c:	702b      	strb	r3, [r5, #0]
 800751e:	2800      	cmp	r0, #0
 8007520:	d1f7      	bne.n	8007512 <_printf_i+0x1be>
 8007522:	2f08      	cmp	r7, #8
 8007524:	d109      	bne.n	800753a <_printf_i+0x1e6>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	07db      	lsls	r3, r3, #31
 800752a:	d506      	bpl.n	800753a <_printf_i+0x1e6>
 800752c:	6863      	ldr	r3, [r4, #4]
 800752e:	6922      	ldr	r2, [r4, #16]
 8007530:	4293      	cmp	r3, r2
 8007532:	dc02      	bgt.n	800753a <_printf_i+0x1e6>
 8007534:	2330      	movs	r3, #48	; 0x30
 8007536:	3d01      	subs	r5, #1
 8007538:	702b      	strb	r3, [r5, #0]
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	1b5b      	subs	r3, r3, r5
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	aa07      	add	r2, sp, #28
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	0021      	movs	r1, r4
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	9803      	ldr	r0, [sp, #12]
 800754c:	f7ff fe94 	bl	8007278 <_printf_common>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d1b8      	bne.n	80074c6 <_printf_i+0x172>
 8007554:	2001      	movs	r0, #1
 8007556:	4240      	negs	r0, r0
 8007558:	b009      	add	sp, #36	; 0x24
 800755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755c:	08007909 	.word	0x08007909
 8007560:	0800791a 	.word	0x0800791a

08007564 <_sbrk_r>:
 8007564:	2300      	movs	r3, #0
 8007566:	b570      	push	{r4, r5, r6, lr}
 8007568:	4c06      	ldr	r4, [pc, #24]	; (8007584 <_sbrk_r+0x20>)
 800756a:	0005      	movs	r5, r0
 800756c:	0008      	movs	r0, r1
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	f7fb f8da 	bl	8002728 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d103      	bne.n	8007580 <_sbrk_r+0x1c>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d000      	beq.n	8007580 <_sbrk_r+0x1c>
 800757e:	602b      	str	r3, [r5, #0]
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	2000028c 	.word	0x2000028c

08007588 <__sread>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	000c      	movs	r4, r1
 800758c:	250e      	movs	r5, #14
 800758e:	5f49      	ldrsh	r1, [r1, r5]
 8007590:	f000 f8b2 	bl	80076f8 <_read_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	db03      	blt.n	80075a0 <__sread+0x18>
 8007598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800759a:	181b      	adds	r3, r3, r0
 800759c:	6563      	str	r3, [r4, #84]	; 0x54
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	4a02      	ldr	r2, [pc, #8]	; (80075ac <__sread+0x24>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	e7f9      	b.n	800759e <__sread+0x16>
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	ffffefff 	.word	0xffffefff

080075b0 <__swrite>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	001f      	movs	r7, r3
 80075b4:	898b      	ldrh	r3, [r1, #12]
 80075b6:	0005      	movs	r5, r0
 80075b8:	000c      	movs	r4, r1
 80075ba:	0016      	movs	r6, r2
 80075bc:	05db      	lsls	r3, r3, #23
 80075be:	d505      	bpl.n	80075cc <__swrite+0x1c>
 80075c0:	230e      	movs	r3, #14
 80075c2:	5ec9      	ldrsh	r1, [r1, r3]
 80075c4:	2200      	movs	r2, #0
 80075c6:	2302      	movs	r3, #2
 80075c8:	f000 f874 	bl	80076b4 <_lseek_r>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	4a05      	ldr	r2, [pc, #20]	; (80075e4 <__swrite+0x34>)
 80075d0:	0028      	movs	r0, r5
 80075d2:	4013      	ands	r3, r2
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	0032      	movs	r2, r6
 80075d8:	230e      	movs	r3, #14
 80075da:	5ee1      	ldrsh	r1, [r4, r3]
 80075dc:	003b      	movs	r3, r7
 80075de:	f000 f81f 	bl	8007620 <_write_r>
 80075e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e4:	ffffefff 	.word	0xffffefff

080075e8 <__sseek>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	000c      	movs	r4, r1
 80075ec:	250e      	movs	r5, #14
 80075ee:	5f49      	ldrsh	r1, [r1, r5]
 80075f0:	f000 f860 	bl	80076b4 <_lseek_r>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	1c42      	adds	r2, r0, #1
 80075f8:	d103      	bne.n	8007602 <__sseek+0x1a>
 80075fa:	4a05      	ldr	r2, [pc, #20]	; (8007610 <__sseek+0x28>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	2280      	movs	r2, #128	; 0x80
 8007604:	0152      	lsls	r2, r2, #5
 8007606:	4313      	orrs	r3, r2
 8007608:	81a3      	strh	r3, [r4, #12]
 800760a:	6560      	str	r0, [r4, #84]	; 0x54
 800760c:	e7f8      	b.n	8007600 <__sseek+0x18>
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	ffffefff 	.word	0xffffefff

08007614 <__sclose>:
 8007614:	b510      	push	{r4, lr}
 8007616:	230e      	movs	r3, #14
 8007618:	5ec9      	ldrsh	r1, [r1, r3]
 800761a:	f000 f815 	bl	8007648 <_close_r>
 800761e:	bd10      	pop	{r4, pc}

08007620 <_write_r>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	0005      	movs	r5, r0
 8007624:	0008      	movs	r0, r1
 8007626:	0011      	movs	r1, r2
 8007628:	2200      	movs	r2, #0
 800762a:	4c06      	ldr	r4, [pc, #24]	; (8007644 <_write_r+0x24>)
 800762c:	6022      	str	r2, [r4, #0]
 800762e:	001a      	movs	r2, r3
 8007630:	f7f9 fe56 	bl	80012e0 <_write>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d103      	bne.n	8007640 <_write_r+0x20>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d000      	beq.n	8007640 <_write_r+0x20>
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	2000028c 	.word	0x2000028c

08007648 <_close_r>:
 8007648:	2300      	movs	r3, #0
 800764a:	b570      	push	{r4, r5, r6, lr}
 800764c:	4c06      	ldr	r4, [pc, #24]	; (8007668 <_close_r+0x20>)
 800764e:	0005      	movs	r5, r0
 8007650:	0008      	movs	r0, r1
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	f7fb f83c 	bl	80026d0 <_close>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d103      	bne.n	8007664 <_close_r+0x1c>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d000      	beq.n	8007664 <_close_r+0x1c>
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	bd70      	pop	{r4, r5, r6, pc}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	2000028c 	.word	0x2000028c

0800766c <_fstat_r>:
 800766c:	2300      	movs	r3, #0
 800766e:	b570      	push	{r4, r5, r6, lr}
 8007670:	4c06      	ldr	r4, [pc, #24]	; (800768c <_fstat_r+0x20>)
 8007672:	0005      	movs	r5, r0
 8007674:	0008      	movs	r0, r1
 8007676:	0011      	movs	r1, r2
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	f7fb f833 	bl	80026e4 <_fstat>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d103      	bne.n	800768a <_fstat_r+0x1e>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d000      	beq.n	800768a <_fstat_r+0x1e>
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	2000028c 	.word	0x2000028c

08007690 <_isatty_r>:
 8007690:	2300      	movs	r3, #0
 8007692:	b570      	push	{r4, r5, r6, lr}
 8007694:	4c06      	ldr	r4, [pc, #24]	; (80076b0 <_isatty_r+0x20>)
 8007696:	0005      	movs	r5, r0
 8007698:	0008      	movs	r0, r1
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	f7fb f830 	bl	8002700 <_isatty>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d103      	bne.n	80076ac <_isatty_r+0x1c>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d000      	beq.n	80076ac <_isatty_r+0x1c>
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	bd70      	pop	{r4, r5, r6, pc}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	2000028c 	.word	0x2000028c

080076b4 <_lseek_r>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	0005      	movs	r5, r0
 80076b8:	0008      	movs	r0, r1
 80076ba:	0011      	movs	r1, r2
 80076bc:	2200      	movs	r2, #0
 80076be:	4c06      	ldr	r4, [pc, #24]	; (80076d8 <_lseek_r+0x24>)
 80076c0:	6022      	str	r2, [r4, #0]
 80076c2:	001a      	movs	r2, r3
 80076c4:	f7fb f825 	bl	8002712 <_lseek>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d103      	bne.n	80076d4 <_lseek_r+0x20>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d000      	beq.n	80076d4 <_lseek_r+0x20>
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	2000028c 	.word	0x2000028c

080076dc <memchr>:
 80076dc:	b2c9      	uxtb	r1, r1
 80076de:	1882      	adds	r2, r0, r2
 80076e0:	4290      	cmp	r0, r2
 80076e2:	d101      	bne.n	80076e8 <memchr+0xc>
 80076e4:	2000      	movs	r0, #0
 80076e6:	4770      	bx	lr
 80076e8:	7803      	ldrb	r3, [r0, #0]
 80076ea:	428b      	cmp	r3, r1
 80076ec:	d0fb      	beq.n	80076e6 <memchr+0xa>
 80076ee:	3001      	adds	r0, #1
 80076f0:	e7f6      	b.n	80076e0 <memchr+0x4>

080076f2 <__malloc_lock>:
 80076f2:	4770      	bx	lr

080076f4 <__malloc_unlock>:
 80076f4:	4770      	bx	lr
	...

080076f8 <_read_r>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	0005      	movs	r5, r0
 80076fc:	0008      	movs	r0, r1
 80076fe:	0011      	movs	r1, r2
 8007700:	2200      	movs	r2, #0
 8007702:	4c06      	ldr	r4, [pc, #24]	; (800771c <_read_r+0x24>)
 8007704:	6022      	str	r2, [r4, #0]
 8007706:	001a      	movs	r2, r3
 8007708:	f7fa ffc5 	bl	8002696 <_read>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d103      	bne.n	8007718 <_read_r+0x20>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d000      	beq.n	8007718 <_read_r+0x20>
 8007716:	602b      	str	r3, [r5, #0]
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	2000028c 	.word	0x2000028c

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
