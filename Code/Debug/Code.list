
Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800799c  0800799c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800799c  0800799c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800799c  0800799c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08007a14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08007a14  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a70  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002697  00000000  00000000  00035b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  000381a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180b8  00000000  00000000  0003a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb2e  00000000  00000000  000527b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009758f  00000000  00000000  000622de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f986d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e78  00000000  00000000  000f98e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007790 	.word	0x08007790

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08007790 	.word	0x08007790

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cfrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	1c08      	adds	r0, r1, #0
 80003f0:	4661      	mov	r1, ip
 80003f2:	e7ff      	b.n	80003f4 <__aeabi_cfcmpeq>

080003f4 <__aeabi_cfcmpeq>:
 80003f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003f6:	f000 fa8b 	bl	8000910 <__lesf2>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d401      	bmi.n	8000402 <__aeabi_cfcmpeq+0xe>
 80003fe:	2100      	movs	r1, #0
 8000400:	42c8      	cmn	r0, r1
 8000402:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000404 <__aeabi_fcmpeq>:
 8000404:	b510      	push	{r4, lr}
 8000406:	f000 fa0d 	bl	8000824 <__eqsf2>
 800040a:	4240      	negs	r0, r0
 800040c:	3001      	adds	r0, #1
 800040e:	bd10      	pop	{r4, pc}

08000410 <__aeabi_fcmplt>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fa7d 	bl	8000910 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	db01      	blt.n	800041e <__aeabi_fcmplt+0xe>
 800041a:	2000      	movs	r0, #0
 800041c:	bd10      	pop	{r4, pc}
 800041e:	2001      	movs	r0, #1
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_fcmple>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fa73 	bl	8000910 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	dd01      	ble.n	8000432 <__aeabi_fcmple+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_fcmpgt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fa1b 	bl	8000874 <__gesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dc01      	bgt.n	8000446 <__aeabi_fcmpgt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmpge>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fa11 	bl	8000874 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	da01      	bge.n	800045a <__aeabi_fcmpge+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <__aeabi_lmul>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	46ce      	mov	lr, r9
 80004a0:	4647      	mov	r7, r8
 80004a2:	0415      	lsls	r5, r2, #16
 80004a4:	0c2d      	lsrs	r5, r5, #16
 80004a6:	002e      	movs	r6, r5
 80004a8:	b580      	push	{r7, lr}
 80004aa:	0407      	lsls	r7, r0, #16
 80004ac:	0c14      	lsrs	r4, r2, #16
 80004ae:	0c3f      	lsrs	r7, r7, #16
 80004b0:	4699      	mov	r9, r3
 80004b2:	0c03      	lsrs	r3, r0, #16
 80004b4:	437e      	muls	r6, r7
 80004b6:	435d      	muls	r5, r3
 80004b8:	4367      	muls	r7, r4
 80004ba:	4363      	muls	r3, r4
 80004bc:	197f      	adds	r7, r7, r5
 80004be:	0c34      	lsrs	r4, r6, #16
 80004c0:	19e4      	adds	r4, r4, r7
 80004c2:	469c      	mov	ip, r3
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	d903      	bls.n	80004d0 <__aeabi_lmul+0x34>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	025b      	lsls	r3, r3, #9
 80004cc:	4698      	mov	r8, r3
 80004ce:	44c4      	add	ip, r8
 80004d0:	464b      	mov	r3, r9
 80004d2:	4343      	muls	r3, r0
 80004d4:	4351      	muls	r1, r2
 80004d6:	0c25      	lsrs	r5, r4, #16
 80004d8:	0436      	lsls	r6, r6, #16
 80004da:	4465      	add	r5, ip
 80004dc:	0c36      	lsrs	r6, r6, #16
 80004de:	0424      	lsls	r4, r4, #16
 80004e0:	19a4      	adds	r4, r4, r6
 80004e2:	195b      	adds	r3, r3, r5
 80004e4:	1859      	adds	r1, r3, r1
 80004e6:	0020      	movs	r0, r4
 80004e8:	bc0c      	pop	{r2, r3}
 80004ea:	4690      	mov	r8, r2
 80004ec:	4699      	mov	r9, r3
 80004ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004f0 <__aeabi_fadd>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	4647      	mov	r7, r8
 80004f4:	46ce      	mov	lr, r9
 80004f6:	0243      	lsls	r3, r0, #9
 80004f8:	0a5b      	lsrs	r3, r3, #9
 80004fa:	0044      	lsls	r4, r0, #1
 80004fc:	0fc2      	lsrs	r2, r0, #31
 80004fe:	469c      	mov	ip, r3
 8000500:	0048      	lsls	r0, r1, #1
 8000502:	00dd      	lsls	r5, r3, #3
 8000504:	024b      	lsls	r3, r1, #9
 8000506:	0e24      	lsrs	r4, r4, #24
 8000508:	0a5b      	lsrs	r3, r3, #9
 800050a:	0e00      	lsrs	r0, r0, #24
 800050c:	b580      	push	{r7, lr}
 800050e:	4698      	mov	r8, r3
 8000510:	0026      	movs	r6, r4
 8000512:	4691      	mov	r9, r2
 8000514:	0fc9      	lsrs	r1, r1, #31
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	1a27      	subs	r7, r4, r0
 800051a:	428a      	cmp	r2, r1
 800051c:	d029      	beq.n	8000572 <__aeabi_fadd+0x82>
 800051e:	2f00      	cmp	r7, #0
 8000520:	dd15      	ble.n	800054e <__aeabi_fadd+0x5e>
 8000522:	2800      	cmp	r0, #0
 8000524:	d14a      	bne.n	80005bc <__aeabi_fadd+0xcc>
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <__aeabi_fadd+0x3c>
 800052a:	e095      	b.n	8000658 <__aeabi_fadd+0x168>
 800052c:	08ed      	lsrs	r5, r5, #3
 800052e:	2cff      	cmp	r4, #255	; 0xff
 8000530:	d100      	bne.n	8000534 <__aeabi_fadd+0x44>
 8000532:	e088      	b.n	8000646 <__aeabi_fadd+0x156>
 8000534:	026b      	lsls	r3, r5, #9
 8000536:	0a5b      	lsrs	r3, r3, #9
 8000538:	b2e6      	uxtb	r6, r4
 800053a:	025b      	lsls	r3, r3, #9
 800053c:	05f6      	lsls	r6, r6, #23
 800053e:	0a58      	lsrs	r0, r3, #9
 8000540:	4330      	orrs	r0, r6
 8000542:	07d2      	lsls	r2, r2, #31
 8000544:	4310      	orrs	r0, r2
 8000546:	bc0c      	pop	{r2, r3}
 8000548:	4690      	mov	r8, r2
 800054a:	4699      	mov	r9, r3
 800054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800054e:	2f00      	cmp	r7, #0
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x64>
 8000552:	e087      	b.n	8000664 <__aeabi_fadd+0x174>
 8000554:	1c60      	adds	r0, r4, #1
 8000556:	b2c0      	uxtb	r0, r0
 8000558:	2801      	cmp	r0, #1
 800055a:	dc00      	bgt.n	800055e <__aeabi_fadd+0x6e>
 800055c:	e0b6      	b.n	80006cc <__aeabi_fadd+0x1dc>
 800055e:	1aee      	subs	r6, r5, r3
 8000560:	0172      	lsls	r2, r6, #5
 8000562:	d500      	bpl.n	8000566 <__aeabi_fadd+0x76>
 8000564:	e0c5      	b.n	80006f2 <__aeabi_fadd+0x202>
 8000566:	2e00      	cmp	r6, #0
 8000568:	d13d      	bne.n	80005e6 <__aeabi_fadd+0xf6>
 800056a:	2200      	movs	r2, #0
 800056c:	2600      	movs	r6, #0
 800056e:	2300      	movs	r3, #0
 8000570:	e7e3      	b.n	800053a <__aeabi_fadd+0x4a>
 8000572:	2f00      	cmp	r7, #0
 8000574:	dc00      	bgt.n	8000578 <__aeabi_fadd+0x88>
 8000576:	e096      	b.n	80006a6 <__aeabi_fadd+0x1b6>
 8000578:	2800      	cmp	r0, #0
 800057a:	d05d      	beq.n	8000638 <__aeabi_fadd+0x148>
 800057c:	2cff      	cmp	r4, #255	; 0xff
 800057e:	d060      	beq.n	8000642 <__aeabi_fadd+0x152>
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	04d2      	lsls	r2, r2, #19
 8000584:	4313      	orrs	r3, r2
 8000586:	2f1b      	cmp	r7, #27
 8000588:	dd00      	ble.n	800058c <__aeabi_fadd+0x9c>
 800058a:	e0ec      	b.n	8000766 <__aeabi_fadd+0x276>
 800058c:	2220      	movs	r2, #32
 800058e:	1bd2      	subs	r2, r2, r7
 8000590:	0018      	movs	r0, r3
 8000592:	4093      	lsls	r3, r2
 8000594:	40f8      	lsrs	r0, r7
 8000596:	1e5a      	subs	r2, r3, #1
 8000598:	4193      	sbcs	r3, r2
 800059a:	4303      	orrs	r3, r0
 800059c:	18ed      	adds	r5, r5, r3
 800059e:	016b      	lsls	r3, r5, #5
 80005a0:	d57b      	bpl.n	800069a <__aeabi_fadd+0x1aa>
 80005a2:	3401      	adds	r4, #1
 80005a4:	2cff      	cmp	r4, #255	; 0xff
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0xba>
 80005a8:	e0b7      	b.n	800071a <__aeabi_fadd+0x22a>
 80005aa:	2201      	movs	r2, #1
 80005ac:	2607      	movs	r6, #7
 80005ae:	402a      	ands	r2, r5
 80005b0:	086b      	lsrs	r3, r5, #1
 80005b2:	4d9a      	ldr	r5, [pc, #616]	; (800081c <__aeabi_fadd+0x32c>)
 80005b4:	401d      	ands	r5, r3
 80005b6:	4315      	orrs	r5, r2
 80005b8:	402e      	ands	r6, r5
 80005ba:	e029      	b.n	8000610 <__aeabi_fadd+0x120>
 80005bc:	2cff      	cmp	r4, #255	; 0xff
 80005be:	d0b5      	beq.n	800052c <__aeabi_fadd+0x3c>
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	04d2      	lsls	r2, r2, #19
 80005c4:	4313      	orrs	r3, r2
 80005c6:	2f1b      	cmp	r7, #27
 80005c8:	dd00      	ble.n	80005cc <__aeabi_fadd+0xdc>
 80005ca:	e0b2      	b.n	8000732 <__aeabi_fadd+0x242>
 80005cc:	2220      	movs	r2, #32
 80005ce:	1bd2      	subs	r2, r2, r7
 80005d0:	0019      	movs	r1, r3
 80005d2:	4093      	lsls	r3, r2
 80005d4:	40f9      	lsrs	r1, r7
 80005d6:	1e5a      	subs	r2, r3, #1
 80005d8:	4193      	sbcs	r3, r2
 80005da:	430b      	orrs	r3, r1
 80005dc:	1aed      	subs	r5, r5, r3
 80005de:	016b      	lsls	r3, r5, #5
 80005e0:	d55b      	bpl.n	800069a <__aeabi_fadd+0x1aa>
 80005e2:	01ad      	lsls	r5, r5, #6
 80005e4:	09ae      	lsrs	r6, r5, #6
 80005e6:	0030      	movs	r0, r6
 80005e8:	f7ff ff3a 	bl	8000460 <__clzsi2>
 80005ec:	3805      	subs	r0, #5
 80005ee:	4086      	lsls	r6, r0
 80005f0:	4284      	cmp	r4, r0
 80005f2:	dc65      	bgt.n	80006c0 <__aeabi_fadd+0x1d0>
 80005f4:	1b04      	subs	r4, r0, r4
 80005f6:	0033      	movs	r3, r6
 80005f8:	2020      	movs	r0, #32
 80005fa:	3401      	adds	r4, #1
 80005fc:	40e3      	lsrs	r3, r4
 80005fe:	1b04      	subs	r4, r0, r4
 8000600:	40a6      	lsls	r6, r4
 8000602:	1e75      	subs	r5, r6, #1
 8000604:	41ae      	sbcs	r6, r5
 8000606:	4333      	orrs	r3, r6
 8000608:	2607      	movs	r6, #7
 800060a:	001d      	movs	r5, r3
 800060c:	2400      	movs	r4, #0
 800060e:	401e      	ands	r6, r3
 8000610:	2201      	movs	r2, #1
 8000612:	464b      	mov	r3, r9
 8000614:	401a      	ands	r2, r3
 8000616:	2e00      	cmp	r6, #0
 8000618:	d004      	beq.n	8000624 <__aeabi_fadd+0x134>
 800061a:	230f      	movs	r3, #15
 800061c:	402b      	ands	r3, r5
 800061e:	2b04      	cmp	r3, #4
 8000620:	d000      	beq.n	8000624 <__aeabi_fadd+0x134>
 8000622:	3504      	adds	r5, #4
 8000624:	016b      	lsls	r3, r5, #5
 8000626:	d400      	bmi.n	800062a <__aeabi_fadd+0x13a>
 8000628:	e780      	b.n	800052c <__aeabi_fadd+0x3c>
 800062a:	3401      	adds	r4, #1
 800062c:	b2e6      	uxtb	r6, r4
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d12f      	bne.n	8000692 <__aeabi_fadd+0x1a2>
 8000632:	26ff      	movs	r6, #255	; 0xff
 8000634:	2300      	movs	r3, #0
 8000636:	e780      	b.n	800053a <__aeabi_fadd+0x4a>
 8000638:	2b00      	cmp	r3, #0
 800063a:	d152      	bne.n	80006e2 <__aeabi_fadd+0x1f2>
 800063c:	2cff      	cmp	r4, #255	; 0xff
 800063e:	d000      	beq.n	8000642 <__aeabi_fadd+0x152>
 8000640:	e774      	b.n	800052c <__aeabi_fadd+0x3c>
 8000642:	000a      	movs	r2, r1
 8000644:	08ed      	lsrs	r5, r5, #3
 8000646:	2d00      	cmp	r5, #0
 8000648:	d0f3      	beq.n	8000632 <__aeabi_fadd+0x142>
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	03db      	lsls	r3, r3, #15
 800064e:	432b      	orrs	r3, r5
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	26ff      	movs	r6, #255	; 0xff
 8000656:	e770      	b.n	800053a <__aeabi_fadd+0x4a>
 8000658:	3f01      	subs	r7, #1
 800065a:	2f00      	cmp	r7, #0
 800065c:	d0be      	beq.n	80005dc <__aeabi_fadd+0xec>
 800065e:	2cff      	cmp	r4, #255	; 0xff
 8000660:	d1b1      	bne.n	80005c6 <__aeabi_fadd+0xd6>
 8000662:	e763      	b.n	800052c <__aeabi_fadd+0x3c>
 8000664:	2c00      	cmp	r4, #0
 8000666:	d047      	beq.n	80006f8 <__aeabi_fadd+0x208>
 8000668:	28ff      	cmp	r0, #255	; 0xff
 800066a:	d069      	beq.n	8000740 <__aeabi_fadd+0x250>
 800066c:	2480      	movs	r4, #128	; 0x80
 800066e:	04e4      	lsls	r4, r4, #19
 8000670:	427a      	negs	r2, r7
 8000672:	4325      	orrs	r5, r4
 8000674:	2a1b      	cmp	r2, #27
 8000676:	dd00      	ble.n	800067a <__aeabi_fadd+0x18a>
 8000678:	e0c5      	b.n	8000806 <__aeabi_fadd+0x316>
 800067a:	002c      	movs	r4, r5
 800067c:	2620      	movs	r6, #32
 800067e:	40d4      	lsrs	r4, r2
 8000680:	1ab2      	subs	r2, r6, r2
 8000682:	4095      	lsls	r5, r2
 8000684:	1e6a      	subs	r2, r5, #1
 8000686:	4195      	sbcs	r5, r2
 8000688:	4325      	orrs	r5, r4
 800068a:	1b5d      	subs	r5, r3, r5
 800068c:	0004      	movs	r4, r0
 800068e:	4689      	mov	r9, r1
 8000690:	e7a5      	b.n	80005de <__aeabi_fadd+0xee>
 8000692:	01ab      	lsls	r3, r5, #6
 8000694:	0a5b      	lsrs	r3, r3, #9
 8000696:	e750      	b.n	800053a <__aeabi_fadd+0x4a>
 8000698:	2400      	movs	r4, #0
 800069a:	2201      	movs	r2, #1
 800069c:	464b      	mov	r3, r9
 800069e:	401a      	ands	r2, r3
 80006a0:	076b      	lsls	r3, r5, #29
 80006a2:	d1ba      	bne.n	800061a <__aeabi_fadd+0x12a>
 80006a4:	e742      	b.n	800052c <__aeabi_fadd+0x3c>
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	d13b      	bne.n	8000722 <__aeabi_fadd+0x232>
 80006aa:	3401      	adds	r4, #1
 80006ac:	b2e0      	uxtb	r0, r4
 80006ae:	2801      	cmp	r0, #1
 80006b0:	dd4a      	ble.n	8000748 <__aeabi_fadd+0x258>
 80006b2:	2cff      	cmp	r4, #255	; 0xff
 80006b4:	d0bd      	beq.n	8000632 <__aeabi_fadd+0x142>
 80006b6:	2607      	movs	r6, #7
 80006b8:	18ed      	adds	r5, r5, r3
 80006ba:	086d      	lsrs	r5, r5, #1
 80006bc:	402e      	ands	r6, r5
 80006be:	e7a7      	b.n	8000610 <__aeabi_fadd+0x120>
 80006c0:	2307      	movs	r3, #7
 80006c2:	4d57      	ldr	r5, [pc, #348]	; (8000820 <__aeabi_fadd+0x330>)
 80006c4:	1a24      	subs	r4, r4, r0
 80006c6:	4035      	ands	r5, r6
 80006c8:	401e      	ands	r6, r3
 80006ca:	e7a1      	b.n	8000610 <__aeabi_fadd+0x120>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d11b      	bne.n	8000708 <__aeabi_fadd+0x218>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d16e      	bne.n	80007b2 <__aeabi_fadd+0x2c2>
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x1ea>
 80006d8:	e09a      	b.n	8000810 <__aeabi_fadd+0x320>
 80006da:	000a      	movs	r2, r1
 80006dc:	001d      	movs	r5, r3
 80006de:	003c      	movs	r4, r7
 80006e0:	e724      	b.n	800052c <__aeabi_fadd+0x3c>
 80006e2:	3f01      	subs	r7, #1
 80006e4:	2f00      	cmp	r7, #0
 80006e6:	d100      	bne.n	80006ea <__aeabi_fadd+0x1fa>
 80006e8:	e758      	b.n	800059c <__aeabi_fadd+0xac>
 80006ea:	2cff      	cmp	r4, #255	; 0xff
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x200>
 80006ee:	e74a      	b.n	8000586 <__aeabi_fadd+0x96>
 80006f0:	e7a7      	b.n	8000642 <__aeabi_fadd+0x152>
 80006f2:	1b5e      	subs	r6, r3, r5
 80006f4:	4689      	mov	r9, r1
 80006f6:	e776      	b.n	80005e6 <__aeabi_fadd+0xf6>
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d11c      	bne.n	8000736 <__aeabi_fadd+0x246>
 80006fc:	000a      	movs	r2, r1
 80006fe:	28ff      	cmp	r0, #255	; 0xff
 8000700:	d01f      	beq.n	8000742 <__aeabi_fadd+0x252>
 8000702:	0004      	movs	r4, r0
 8000704:	001d      	movs	r5, r3
 8000706:	e711      	b.n	800052c <__aeabi_fadd+0x3c>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d15d      	bne.n	80007c8 <__aeabi_fadd+0x2d8>
 800070c:	2b00      	cmp	r3, #0
 800070e:	d117      	bne.n	8000740 <__aeabi_fadd+0x250>
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	2200      	movs	r2, #0
 8000714:	03db      	lsls	r3, r3, #15
 8000716:	26ff      	movs	r6, #255	; 0xff
 8000718:	e70f      	b.n	800053a <__aeabi_fadd+0x4a>
 800071a:	000a      	movs	r2, r1
 800071c:	26ff      	movs	r6, #255	; 0xff
 800071e:	2300      	movs	r3, #0
 8000720:	e70b      	b.n	800053a <__aeabi_fadd+0x4a>
 8000722:	2c00      	cmp	r4, #0
 8000724:	d121      	bne.n	800076a <__aeabi_fadd+0x27a>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d166      	bne.n	80007f8 <__aeabi_fadd+0x308>
 800072a:	28ff      	cmp	r0, #255	; 0xff
 800072c:	d1e9      	bne.n	8000702 <__aeabi_fadd+0x212>
 800072e:	001d      	movs	r5, r3
 8000730:	e787      	b.n	8000642 <__aeabi_fadd+0x152>
 8000732:	2301      	movs	r3, #1
 8000734:	e752      	b.n	80005dc <__aeabi_fadd+0xec>
 8000736:	1c7a      	adds	r2, r7, #1
 8000738:	d0a7      	beq.n	800068a <__aeabi_fadd+0x19a>
 800073a:	43fa      	mvns	r2, r7
 800073c:	28ff      	cmp	r0, #255	; 0xff
 800073e:	d199      	bne.n	8000674 <__aeabi_fadd+0x184>
 8000740:	000a      	movs	r2, r1
 8000742:	001d      	movs	r5, r3
 8000744:	24ff      	movs	r4, #255	; 0xff
 8000746:	e6f1      	b.n	800052c <__aeabi_fadd+0x3c>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d121      	bne.n	8000790 <__aeabi_fadd+0x2a0>
 800074c:	2d00      	cmp	r5, #0
 800074e:	d04f      	beq.n	80007f0 <__aeabi_fadd+0x300>
 8000750:	2b00      	cmp	r3, #0
 8000752:	d04c      	beq.n	80007ee <__aeabi_fadd+0x2fe>
 8000754:	18ed      	adds	r5, r5, r3
 8000756:	016b      	lsls	r3, r5, #5
 8000758:	d59e      	bpl.n	8000698 <__aeabi_fadd+0x1a8>
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <__aeabi_fadd+0x330>)
 800075c:	3607      	adds	r6, #7
 800075e:	402e      	ands	r6, r5
 8000760:	2401      	movs	r4, #1
 8000762:	401d      	ands	r5, r3
 8000764:	e754      	b.n	8000610 <__aeabi_fadd+0x120>
 8000766:	2301      	movs	r3, #1
 8000768:	e718      	b.n	800059c <__aeabi_fadd+0xac>
 800076a:	28ff      	cmp	r0, #255	; 0xff
 800076c:	d0df      	beq.n	800072e <__aeabi_fadd+0x23e>
 800076e:	2480      	movs	r4, #128	; 0x80
 8000770:	04e4      	lsls	r4, r4, #19
 8000772:	427f      	negs	r7, r7
 8000774:	4325      	orrs	r5, r4
 8000776:	2f1b      	cmp	r7, #27
 8000778:	dc4d      	bgt.n	8000816 <__aeabi_fadd+0x326>
 800077a:	2620      	movs	r6, #32
 800077c:	1bf6      	subs	r6, r6, r7
 800077e:	002c      	movs	r4, r5
 8000780:	40b5      	lsls	r5, r6
 8000782:	40fc      	lsrs	r4, r7
 8000784:	1e6a      	subs	r2, r5, #1
 8000786:	4195      	sbcs	r5, r2
 8000788:	4325      	orrs	r5, r4
 800078a:	18ed      	adds	r5, r5, r3
 800078c:	0004      	movs	r4, r0
 800078e:	e706      	b.n	800059e <__aeabi_fadd+0xae>
 8000790:	2d00      	cmp	r5, #0
 8000792:	d0cc      	beq.n	800072e <__aeabi_fadd+0x23e>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x2aa>
 8000798:	e753      	b.n	8000642 <__aeabi_fadd+0x152>
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4660      	mov	r0, ip
 800079e:	03c9      	lsls	r1, r1, #15
 80007a0:	4208      	tst	r0, r1
 80007a2:	d003      	beq.n	80007ac <__aeabi_fadd+0x2bc>
 80007a4:	4640      	mov	r0, r8
 80007a6:	4208      	tst	r0, r1
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x2bc>
 80007aa:	001d      	movs	r5, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	4011      	ands	r1, r2
 80007b0:	e747      	b.n	8000642 <__aeabi_fadd+0x152>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_fadd+0x2c8>
 80007b6:	e6b9      	b.n	800052c <__aeabi_fadd+0x3c>
 80007b8:	1aea      	subs	r2, r5, r3
 80007ba:	0150      	lsls	r0, r2, #5
 80007bc:	d525      	bpl.n	800080a <__aeabi_fadd+0x31a>
 80007be:	2607      	movs	r6, #7
 80007c0:	1b5d      	subs	r5, r3, r5
 80007c2:	402e      	ands	r6, r5
 80007c4:	4689      	mov	r9, r1
 80007c6:	e723      	b.n	8000610 <__aeabi_fadd+0x120>
 80007c8:	24ff      	movs	r4, #255	; 0xff
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x2e0>
 80007ce:	e6ad      	b.n	800052c <__aeabi_fadd+0x3c>
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	4660      	mov	r0, ip
 80007d4:	03d2      	lsls	r2, r2, #15
 80007d6:	4210      	tst	r0, r2
 80007d8:	d004      	beq.n	80007e4 <__aeabi_fadd+0x2f4>
 80007da:	4640      	mov	r0, r8
 80007dc:	4210      	tst	r0, r2
 80007de:	d101      	bne.n	80007e4 <__aeabi_fadd+0x2f4>
 80007e0:	001d      	movs	r5, r3
 80007e2:	4689      	mov	r9, r1
 80007e4:	2201      	movs	r2, #1
 80007e6:	464b      	mov	r3, r9
 80007e8:	24ff      	movs	r4, #255	; 0xff
 80007ea:	401a      	ands	r2, r3
 80007ec:	e69e      	b.n	800052c <__aeabi_fadd+0x3c>
 80007ee:	002b      	movs	r3, r5
 80007f0:	08dd      	lsrs	r5, r3, #3
 80007f2:	000a      	movs	r2, r1
 80007f4:	2400      	movs	r4, #0
 80007f6:	e69d      	b.n	8000534 <__aeabi_fadd+0x44>
 80007f8:	1c7a      	adds	r2, r7, #1
 80007fa:	d0c6      	beq.n	800078a <__aeabi_fadd+0x29a>
 80007fc:	43ff      	mvns	r7, r7
 80007fe:	28ff      	cmp	r0, #255	; 0xff
 8000800:	d1b9      	bne.n	8000776 <__aeabi_fadd+0x286>
 8000802:	001d      	movs	r5, r3
 8000804:	e71d      	b.n	8000642 <__aeabi_fadd+0x152>
 8000806:	2501      	movs	r5, #1
 8000808:	e73f      	b.n	800068a <__aeabi_fadd+0x19a>
 800080a:	1e15      	subs	r5, r2, #0
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x320>
 800080e:	e744      	b.n	800069a <__aeabi_fadd+0x1aa>
 8000810:	2200      	movs	r2, #0
 8000812:	2300      	movs	r3, #0
 8000814:	e691      	b.n	800053a <__aeabi_fadd+0x4a>
 8000816:	2501      	movs	r5, #1
 8000818:	e7b7      	b.n	800078a <__aeabi_fadd+0x29a>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	fbffffff 	.word	0xfbffffff

08000824 <__eqsf2>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	0042      	lsls	r2, r0, #1
 8000828:	024e      	lsls	r6, r1, #9
 800082a:	004c      	lsls	r4, r1, #1
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	0a6d      	lsrs	r5, r5, #9
 8000830:	0e12      	lsrs	r2, r2, #24
 8000832:	0fc3      	lsrs	r3, r0, #31
 8000834:	0a76      	lsrs	r6, r6, #9
 8000836:	0e24      	lsrs	r4, r4, #24
 8000838:	0fc9      	lsrs	r1, r1, #31
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d00f      	beq.n	800085e <__eqsf2+0x3a>
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d011      	beq.n	8000866 <__eqsf2+0x42>
 8000842:	2001      	movs	r0, #1
 8000844:	42a2      	cmp	r2, r4
 8000846:	d000      	beq.n	800084a <__eqsf2+0x26>
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	42b5      	cmp	r5, r6
 800084c:	d1fc      	bne.n	8000848 <__eqsf2+0x24>
 800084e:	428b      	cmp	r3, r1
 8000850:	d00d      	beq.n	800086e <__eqsf2+0x4a>
 8000852:	2a00      	cmp	r2, #0
 8000854:	d1f8      	bne.n	8000848 <__eqsf2+0x24>
 8000856:	0028      	movs	r0, r5
 8000858:	1e45      	subs	r5, r0, #1
 800085a:	41a8      	sbcs	r0, r5
 800085c:	e7f4      	b.n	8000848 <__eqsf2+0x24>
 800085e:	2001      	movs	r0, #1
 8000860:	2d00      	cmp	r5, #0
 8000862:	d1f1      	bne.n	8000848 <__eqsf2+0x24>
 8000864:	e7eb      	b.n	800083e <__eqsf2+0x1a>
 8000866:	2001      	movs	r0, #1
 8000868:	2e00      	cmp	r6, #0
 800086a:	d1ed      	bne.n	8000848 <__eqsf2+0x24>
 800086c:	e7e9      	b.n	8000842 <__eqsf2+0x1e>
 800086e:	2000      	movs	r0, #0
 8000870:	e7ea      	b.n	8000848 <__eqsf2+0x24>
 8000872:	46c0      	nop			; (mov r8, r8)

08000874 <__gesf2>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	004a      	lsls	r2, r1, #1
 8000878:	024e      	lsls	r6, r1, #9
 800087a:	0245      	lsls	r5, r0, #9
 800087c:	0044      	lsls	r4, r0, #1
 800087e:	0a6d      	lsrs	r5, r5, #9
 8000880:	0e24      	lsrs	r4, r4, #24
 8000882:	0fc3      	lsrs	r3, r0, #31
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e12      	lsrs	r2, r2, #24
 8000888:	0fc9      	lsrs	r1, r1, #31
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d015      	beq.n	80008ba <__gesf2+0x46>
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d00e      	beq.n	80008b0 <__gesf2+0x3c>
 8000892:	2c00      	cmp	r4, #0
 8000894:	d115      	bne.n	80008c2 <__gesf2+0x4e>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d101      	bne.n	800089e <__gesf2+0x2a>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d01c      	beq.n	80008d8 <__gesf2+0x64>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d014      	beq.n	80008cc <__gesf2+0x58>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d027      	beq.n	80008f6 <__gesf2+0x82>
 80008a6:	2002      	movs	r0, #2
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4018      	ands	r0, r3
 80008ac:	3801      	subs	r0, #1
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0ee      	beq.n	8000892 <__gesf2+0x1e>
 80008b4:	2002      	movs	r0, #2
 80008b6:	4240      	negs	r0, r0
 80008b8:	e7f9      	b.n	80008ae <__gesf2+0x3a>
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d1fa      	bne.n	80008b4 <__gesf2+0x40>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d00e      	beq.n	80008e0 <__gesf2+0x6c>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d10e      	bne.n	80008e4 <__gesf2+0x70>
 80008c6:	2e00      	cmp	r6, #0
 80008c8:	d0ed      	beq.n	80008a6 <__gesf2+0x32>
 80008ca:	e00b      	b.n	80008e4 <__gesf2+0x70>
 80008cc:	2301      	movs	r3, #1
 80008ce:	3901      	subs	r1, #1
 80008d0:	4399      	bics	r1, r3
 80008d2:	0008      	movs	r0, r1
 80008d4:	3001      	adds	r0, #1
 80008d6:	e7ea      	b.n	80008ae <__gesf2+0x3a>
 80008d8:	2000      	movs	r0, #0
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d0e7      	beq.n	80008ae <__gesf2+0x3a>
 80008de:	e7e2      	b.n	80008a6 <__gesf2+0x32>
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d1e7      	bne.n	80008b4 <__gesf2+0x40>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d1de      	bne.n	80008a6 <__gesf2+0x32>
 80008e8:	4294      	cmp	r4, r2
 80008ea:	dd05      	ble.n	80008f8 <__gesf2+0x84>
 80008ec:	2102      	movs	r1, #2
 80008ee:	1e58      	subs	r0, r3, #1
 80008f0:	4008      	ands	r0, r1
 80008f2:	3801      	subs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__gesf2+0x3a>
 80008f6:	2400      	movs	r4, #0
 80008f8:	42a2      	cmp	r2, r4
 80008fa:	dc04      	bgt.n	8000906 <__gesf2+0x92>
 80008fc:	42b5      	cmp	r5, r6
 80008fe:	d8d2      	bhi.n	80008a6 <__gesf2+0x32>
 8000900:	2000      	movs	r0, #0
 8000902:	42b5      	cmp	r5, r6
 8000904:	d2d3      	bcs.n	80008ae <__gesf2+0x3a>
 8000906:	1e58      	subs	r0, r3, #1
 8000908:	2301      	movs	r3, #1
 800090a:	4398      	bics	r0, r3
 800090c:	3001      	adds	r0, #1
 800090e:	e7ce      	b.n	80008ae <__gesf2+0x3a>

08000910 <__lesf2>:
 8000910:	b530      	push	{r4, r5, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	0244      	lsls	r4, r0, #9
 8000916:	024d      	lsls	r5, r1, #9
 8000918:	0fc3      	lsrs	r3, r0, #31
 800091a:	0048      	lsls	r0, r1, #1
 800091c:	0a64      	lsrs	r4, r4, #9
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0e00      	lsrs	r0, r0, #24
 8000924:	0fc9      	lsrs	r1, r1, #31
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d012      	beq.n	8000950 <__lesf2+0x40>
 800092a:	28ff      	cmp	r0, #255	; 0xff
 800092c:	d00c      	beq.n	8000948 <__lesf2+0x38>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d112      	bne.n	8000958 <__lesf2+0x48>
 8000932:	2800      	cmp	r0, #0
 8000934:	d119      	bne.n	800096a <__lesf2+0x5a>
 8000936:	2d00      	cmp	r5, #0
 8000938:	d117      	bne.n	800096a <__lesf2+0x5a>
 800093a:	2c00      	cmp	r4, #0
 800093c:	d02b      	beq.n	8000996 <__lesf2+0x86>
 800093e:	2002      	movs	r0, #2
 8000940:	3b01      	subs	r3, #1
 8000942:	4018      	ands	r0, r3
 8000944:	3801      	subs	r0, #1
 8000946:	e026      	b.n	8000996 <__lesf2+0x86>
 8000948:	2d00      	cmp	r5, #0
 800094a:	d0f0      	beq.n	800092e <__lesf2+0x1e>
 800094c:	2002      	movs	r0, #2
 800094e:	e022      	b.n	8000996 <__lesf2+0x86>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d1fb      	bne.n	800094c <__lesf2+0x3c>
 8000954:	28ff      	cmp	r0, #255	; 0xff
 8000956:	d01f      	beq.n	8000998 <__lesf2+0x88>
 8000958:	2800      	cmp	r0, #0
 800095a:	d11f      	bne.n	800099c <__lesf2+0x8c>
 800095c:	2d00      	cmp	r5, #0
 800095e:	d11d      	bne.n	800099c <__lesf2+0x8c>
 8000960:	2002      	movs	r0, #2
 8000962:	3b01      	subs	r3, #1
 8000964:	4018      	ands	r0, r3
 8000966:	3801      	subs	r0, #1
 8000968:	e015      	b.n	8000996 <__lesf2+0x86>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d00e      	beq.n	800098c <__lesf2+0x7c>
 800096e:	428b      	cmp	r3, r1
 8000970:	d1e5      	bne.n	800093e <__lesf2+0x2e>
 8000972:	2200      	movs	r2, #0
 8000974:	4290      	cmp	r0, r2
 8000976:	dc04      	bgt.n	8000982 <__lesf2+0x72>
 8000978:	42ac      	cmp	r4, r5
 800097a:	d8e0      	bhi.n	800093e <__lesf2+0x2e>
 800097c:	2000      	movs	r0, #0
 800097e:	42ac      	cmp	r4, r5
 8000980:	d209      	bcs.n	8000996 <__lesf2+0x86>
 8000982:	1e58      	subs	r0, r3, #1
 8000984:	2301      	movs	r3, #1
 8000986:	4398      	bics	r0, r3
 8000988:	3001      	adds	r0, #1
 800098a:	e004      	b.n	8000996 <__lesf2+0x86>
 800098c:	2301      	movs	r3, #1
 800098e:	3901      	subs	r1, #1
 8000990:	4399      	bics	r1, r3
 8000992:	0008      	movs	r0, r1
 8000994:	3001      	adds	r0, #1
 8000996:	bd30      	pop	{r4, r5, pc}
 8000998:	2d00      	cmp	r5, #0
 800099a:	d1d7      	bne.n	800094c <__lesf2+0x3c>
 800099c:	428b      	cmp	r3, r1
 800099e:	d1ce      	bne.n	800093e <__lesf2+0x2e>
 80009a0:	4282      	cmp	r2, r0
 80009a2:	dde7      	ble.n	8000974 <__lesf2+0x64>
 80009a4:	2102      	movs	r1, #2
 80009a6:	1e58      	subs	r0, r3, #1
 80009a8:	4008      	ands	r0, r1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7f3      	b.n	8000996 <__lesf2+0x86>
 80009ae:	46c0      	nop			; (mov r8, r8)

080009b0 <__aeabi_fmul>:
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	464e      	mov	r6, r9
 80009b4:	4657      	mov	r7, sl
 80009b6:	4645      	mov	r5, r8
 80009b8:	46de      	mov	lr, fp
 80009ba:	b5e0      	push	{r5, r6, r7, lr}
 80009bc:	0243      	lsls	r3, r0, #9
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	0045      	lsls	r5, r0, #1
 80009c2:	b083      	sub	sp, #12
 80009c4:	1c0f      	adds	r7, r1, #0
 80009c6:	4699      	mov	r9, r3
 80009c8:	0e2d      	lsrs	r5, r5, #24
 80009ca:	0fc6      	lsrs	r6, r0, #31
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d057      	beq.n	8000a80 <__aeabi_fmul+0xd0>
 80009d0:	2dff      	cmp	r5, #255	; 0xff
 80009d2:	d024      	beq.n	8000a1e <__aeabi_fmul+0x6e>
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	04c0      	lsls	r0, r0, #19
 80009da:	4318      	orrs	r0, r3
 80009dc:	2300      	movs	r3, #0
 80009de:	4681      	mov	r9, r0
 80009e0:	469a      	mov	sl, r3
 80009e2:	469b      	mov	fp, r3
 80009e4:	3d7f      	subs	r5, #127	; 0x7f
 80009e6:	027c      	lsls	r4, r7, #9
 80009e8:	007a      	lsls	r2, r7, #1
 80009ea:	0ffb      	lsrs	r3, r7, #31
 80009ec:	0a64      	lsrs	r4, r4, #9
 80009ee:	0e12      	lsrs	r2, r2, #24
 80009f0:	4698      	mov	r8, r3
 80009f2:	d023      	beq.n	8000a3c <__aeabi_fmul+0x8c>
 80009f4:	2aff      	cmp	r2, #255	; 0xff
 80009f6:	d04b      	beq.n	8000a90 <__aeabi_fmul+0xe0>
 80009f8:	00e3      	lsls	r3, r4, #3
 80009fa:	2480      	movs	r4, #128	; 0x80
 80009fc:	2000      	movs	r0, #0
 80009fe:	04e4      	lsls	r4, r4, #19
 8000a00:	3a7f      	subs	r2, #127	; 0x7f
 8000a02:	431c      	orrs	r4, r3
 8000a04:	18ad      	adds	r5, r5, r2
 8000a06:	1c6b      	adds	r3, r5, #1
 8000a08:	4647      	mov	r7, r8
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	4077      	eors	r7, r6
 8000a10:	003a      	movs	r2, r7
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d848      	bhi.n	8000aa8 <__aeabi_fmul+0xf8>
 8000a16:	497d      	ldr	r1, [pc, #500]	; (8000c0c <__aeabi_fmul+0x25c>)
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	58cb      	ldr	r3, [r1, r3]
 8000a1c:	469f      	mov	pc, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fmul+0x74>
 8000a22:	e085      	b.n	8000b30 <__aeabi_fmul+0x180>
 8000a24:	3308      	adds	r3, #8
 8000a26:	469a      	mov	sl, r3
 8000a28:	3b06      	subs	r3, #6
 8000a2a:	469b      	mov	fp, r3
 8000a2c:	027c      	lsls	r4, r7, #9
 8000a2e:	007a      	lsls	r2, r7, #1
 8000a30:	0ffb      	lsrs	r3, r7, #31
 8000a32:	25ff      	movs	r5, #255	; 0xff
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	4698      	mov	r8, r3
 8000a3a:	d1db      	bne.n	80009f4 <__aeabi_fmul+0x44>
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fmul+0x92>
 8000a40:	e090      	b.n	8000b64 <__aeabi_fmul+0x1b4>
 8000a42:	4652      	mov	r2, sl
 8000a44:	2301      	movs	r3, #1
 8000a46:	431a      	orrs	r2, r3
 8000a48:	4692      	mov	sl, r2
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	e7db      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000a4e:	464c      	mov	r4, r9
 8000a50:	4658      	mov	r0, fp
 8000a52:	0017      	movs	r7, r2
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d024      	beq.n	8000aa2 <__aeabi_fmul+0xf2>
 8000a58:	2803      	cmp	r0, #3
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fmul+0xae>
 8000a5c:	e0cf      	b.n	8000bfe <__aeabi_fmul+0x24e>
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2300      	movs	r3, #0
 8000a62:	2801      	cmp	r0, #1
 8000a64:	d14d      	bne.n	8000b02 <__aeabi_fmul+0x152>
 8000a66:	0258      	lsls	r0, r3, #9
 8000a68:	05d2      	lsls	r2, r2, #23
 8000a6a:	0a40      	lsrs	r0, r0, #9
 8000a6c:	07ff      	lsls	r7, r7, #31
 8000a6e:	4310      	orrs	r0, r2
 8000a70:	4338      	orrs	r0, r7
 8000a72:	b003      	add	sp, #12
 8000a74:	bc3c      	pop	{r2, r3, r4, r5}
 8000a76:	4690      	mov	r8, r2
 8000a78:	4699      	mov	r9, r3
 8000a7a:	46a2      	mov	sl, r4
 8000a7c:	46ab      	mov	fp, r5
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d15b      	bne.n	8000b3c <__aeabi_fmul+0x18c>
 8000a84:	2304      	movs	r3, #4
 8000a86:	469a      	mov	sl, r3
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	469b      	mov	fp, r3
 8000a8e:	e7aa      	b.n	80009e6 <__aeabi_fmul+0x36>
 8000a90:	35ff      	adds	r5, #255	; 0xff
 8000a92:	2c00      	cmp	r4, #0
 8000a94:	d160      	bne.n	8000b58 <__aeabi_fmul+0x1a8>
 8000a96:	4652      	mov	r2, sl
 8000a98:	2302      	movs	r3, #2
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	4692      	mov	sl, r2
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	e7b1      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e7de      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000aa8:	464b      	mov	r3, r9
 8000aaa:	0c1b      	lsrs	r3, r3, #16
 8000aac:	469c      	mov	ip, r3
 8000aae:	464b      	mov	r3, r9
 8000ab0:	0426      	lsls	r6, r4, #16
 8000ab2:	0c36      	lsrs	r6, r6, #16
 8000ab4:	0418      	lsls	r0, r3, #16
 8000ab6:	4661      	mov	r1, ip
 8000ab8:	0033      	movs	r3, r6
 8000aba:	0c22      	lsrs	r2, r4, #16
 8000abc:	4664      	mov	r4, ip
 8000abe:	0c00      	lsrs	r0, r0, #16
 8000ac0:	4343      	muls	r3, r0
 8000ac2:	434e      	muls	r6, r1
 8000ac4:	4350      	muls	r0, r2
 8000ac6:	4354      	muls	r4, r2
 8000ac8:	1980      	adds	r0, r0, r6
 8000aca:	0c1a      	lsrs	r2, r3, #16
 8000acc:	1812      	adds	r2, r2, r0
 8000ace:	4296      	cmp	r6, r2
 8000ad0:	d903      	bls.n	8000ada <__aeabi_fmul+0x12a>
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	0249      	lsls	r1, r1, #9
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4464      	add	r4, ip
 8000ada:	041b      	lsls	r3, r3, #16
 8000adc:	0c1b      	lsrs	r3, r3, #16
 8000ade:	0410      	lsls	r0, r2, #16
 8000ae0:	18c0      	adds	r0, r0, r3
 8000ae2:	0183      	lsls	r3, r0, #6
 8000ae4:	1e5e      	subs	r6, r3, #1
 8000ae6:	41b3      	sbcs	r3, r6
 8000ae8:	0e80      	lsrs	r0, r0, #26
 8000aea:	4318      	orrs	r0, r3
 8000aec:	0c13      	lsrs	r3, r2, #16
 8000aee:	191b      	adds	r3, r3, r4
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	4303      	orrs	r3, r0
 8000af4:	001c      	movs	r4, r3
 8000af6:	0123      	lsls	r3, r4, #4
 8000af8:	d579      	bpl.n	8000bee <__aeabi_fmul+0x23e>
 8000afa:	2301      	movs	r3, #1
 8000afc:	0862      	lsrs	r2, r4, #1
 8000afe:	401c      	ands	r4, r3
 8000b00:	4314      	orrs	r4, r2
 8000b02:	9a01      	ldr	r2, [sp, #4]
 8000b04:	327f      	adds	r2, #127	; 0x7f
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	dd4d      	ble.n	8000ba6 <__aeabi_fmul+0x1f6>
 8000b0a:	0763      	lsls	r3, r4, #29
 8000b0c:	d004      	beq.n	8000b18 <__aeabi_fmul+0x168>
 8000b0e:	230f      	movs	r3, #15
 8000b10:	4023      	ands	r3, r4
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_fmul+0x168>
 8000b16:	3404      	adds	r4, #4
 8000b18:	0123      	lsls	r3, r4, #4
 8000b1a:	d503      	bpl.n	8000b24 <__aeabi_fmul+0x174>
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <__aeabi_fmul+0x260>)
 8000b1e:	9a01      	ldr	r2, [sp, #4]
 8000b20:	401c      	ands	r4, r3
 8000b22:	3280      	adds	r2, #128	; 0x80
 8000b24:	2afe      	cmp	r2, #254	; 0xfe
 8000b26:	dcbc      	bgt.n	8000aa2 <__aeabi_fmul+0xf2>
 8000b28:	01a3      	lsls	r3, r4, #6
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	e79a      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000b30:	230c      	movs	r3, #12
 8000b32:	469a      	mov	sl, r3
 8000b34:	3b09      	subs	r3, #9
 8000b36:	25ff      	movs	r5, #255	; 0xff
 8000b38:	469b      	mov	fp, r3
 8000b3a:	e754      	b.n	80009e6 <__aeabi_fmul+0x36>
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fc8f 	bl	8000460 <__clzsi2>
 8000b42:	464a      	mov	r2, r9
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	2576      	movs	r5, #118	; 0x76
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	426d      	negs	r5, r5
 8000b4e:	4691      	mov	r9, r2
 8000b50:	1a2d      	subs	r5, r5, r0
 8000b52:	469a      	mov	sl, r3
 8000b54:	469b      	mov	fp, r3
 8000b56:	e746      	b.n	80009e6 <__aeabi_fmul+0x36>
 8000b58:	4652      	mov	r2, sl
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	4692      	mov	sl, r2
 8000b60:	2003      	movs	r0, #3
 8000b62:	e750      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000b64:	0020      	movs	r0, r4
 8000b66:	f7ff fc7b 	bl	8000460 <__clzsi2>
 8000b6a:	1f43      	subs	r3, r0, #5
 8000b6c:	1a2d      	subs	r5, r5, r0
 8000b6e:	409c      	lsls	r4, r3
 8000b70:	3d76      	subs	r5, #118	; 0x76
 8000b72:	2000      	movs	r0, #0
 8000b74:	e747      	b.n	8000a06 <__aeabi_fmul+0x56>
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	2700      	movs	r7, #0
 8000b7a:	03db      	lsls	r3, r3, #15
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	e772      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000b80:	4642      	mov	r2, r8
 8000b82:	e766      	b.n	8000a52 <__aeabi_fmul+0xa2>
 8000b84:	464c      	mov	r4, r9
 8000b86:	0032      	movs	r2, r6
 8000b88:	4658      	mov	r0, fp
 8000b8a:	e762      	b.n	8000a52 <__aeabi_fmul+0xa2>
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	464a      	mov	r2, r9
 8000b90:	03db      	lsls	r3, r3, #15
 8000b92:	421a      	tst	r2, r3
 8000b94:	d022      	beq.n	8000bdc <__aeabi_fmul+0x22c>
 8000b96:	421c      	tst	r4, r3
 8000b98:	d120      	bne.n	8000bdc <__aeabi_fmul+0x22c>
 8000b9a:	4323      	orrs	r3, r4
 8000b9c:	025b      	lsls	r3, r3, #9
 8000b9e:	0a5b      	lsrs	r3, r3, #9
 8000ba0:	4647      	mov	r7, r8
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	e75f      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	1a9a      	subs	r2, r3, r2
 8000baa:	2a1b      	cmp	r2, #27
 8000bac:	dc21      	bgt.n	8000bf2 <__aeabi_fmul+0x242>
 8000bae:	0023      	movs	r3, r4
 8000bb0:	9901      	ldr	r1, [sp, #4]
 8000bb2:	40d3      	lsrs	r3, r2
 8000bb4:	319e      	adds	r1, #158	; 0x9e
 8000bb6:	408c      	lsls	r4, r1
 8000bb8:	001a      	movs	r2, r3
 8000bba:	0023      	movs	r3, r4
 8000bbc:	1e5c      	subs	r4, r3, #1
 8000bbe:	41a3      	sbcs	r3, r4
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	075a      	lsls	r2, r3, #29
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_fmul+0x220>
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2a04      	cmp	r2, #4
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fmul+0x220>
 8000bce:	3304      	adds	r3, #4
 8000bd0:	015a      	lsls	r2, r3, #5
 8000bd2:	d411      	bmi.n	8000bf8 <__aeabi_fmul+0x248>
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	0a5b      	lsrs	r3, r3, #9
 8000bd8:	2200      	movs	r2, #0
 8000bda:	e744      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	464a      	mov	r2, r9
 8000be0:	03db      	lsls	r3, r3, #15
 8000be2:	4313      	orrs	r3, r2
 8000be4:	025b      	lsls	r3, r3, #9
 8000be6:	0a5b      	lsrs	r3, r3, #9
 8000be8:	0037      	movs	r7, r6
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	e73b      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bee:	9501      	str	r5, [sp, #4]
 8000bf0:	e787      	b.n	8000b02 <__aeabi_fmul+0x152>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e736      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e733      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	03db      	lsls	r3, r3, #15
 8000c02:	4323      	orrs	r3, r4
 8000c04:	025b      	lsls	r3, r3, #9
 8000c06:	0a5b      	lsrs	r3, r3, #9
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	e72c      	b.n	8000a66 <__aeabi_fmul+0xb6>
 8000c0c:	080077d8 	.word	0x080077d8
 8000c10:	f7ffffff 	.word	0xf7ffffff

08000c14 <__aeabi_f2iz>:
 8000c14:	0241      	lsls	r1, r0, #9
 8000c16:	0042      	lsls	r2, r0, #1
 8000c18:	0fc3      	lsrs	r3, r0, #31
 8000c1a:	0a49      	lsrs	r1, r1, #9
 8000c1c:	0e12      	lsrs	r2, r2, #24
 8000c1e:	2000      	movs	r0, #0
 8000c20:	2a7e      	cmp	r2, #126	; 0x7e
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c24:	2a9d      	cmp	r2, #157	; 0x9d
 8000c26:	d80c      	bhi.n	8000c42 <__aeabi_f2iz+0x2e>
 8000c28:	2080      	movs	r0, #128	; 0x80
 8000c2a:	0400      	lsls	r0, r0, #16
 8000c2c:	4301      	orrs	r1, r0
 8000c2e:	2a95      	cmp	r2, #149	; 0x95
 8000c30:	dc0a      	bgt.n	8000c48 <__aeabi_f2iz+0x34>
 8000c32:	2096      	movs	r0, #150	; 0x96
 8000c34:	1a82      	subs	r2, r0, r2
 8000c36:	40d1      	lsrs	r1, r2
 8000c38:	4248      	negs	r0, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c3e:	0008      	movs	r0, r1
 8000c40:	4770      	bx	lr
 8000c42:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <__aeabi_f2iz+0x3c>)
 8000c44:	1898      	adds	r0, r3, r2
 8000c46:	e7fb      	b.n	8000c40 <__aeabi_f2iz+0x2c>
 8000c48:	3a96      	subs	r2, #150	; 0x96
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	e7f4      	b.n	8000c38 <__aeabi_f2iz+0x24>
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	7fffffff 	.word	0x7fffffff

08000c54 <__aeabi_i2f>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d03d      	beq.n	8000cd6 <__aeabi_i2f+0x82>
 8000c5a:	17c3      	asrs	r3, r0, #31
 8000c5c:	18c5      	adds	r5, r0, r3
 8000c5e:	405d      	eors	r5, r3
 8000c60:	0fc4      	lsrs	r4, r0, #31
 8000c62:	0028      	movs	r0, r5
 8000c64:	f7ff fbfc 	bl	8000460 <__clzsi2>
 8000c68:	229e      	movs	r2, #158	; 0x9e
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	2a96      	cmp	r2, #150	; 0x96
 8000c6e:	dc07      	bgt.n	8000c80 <__aeabi_i2f+0x2c>
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	2808      	cmp	r0, #8
 8000c74:	dd33      	ble.n	8000cde <__aeabi_i2f+0x8a>
 8000c76:	3808      	subs	r0, #8
 8000c78:	4085      	lsls	r5, r0
 8000c7a:	0268      	lsls	r0, r5, #9
 8000c7c:	0a40      	lsrs	r0, r0, #9
 8000c7e:	e023      	b.n	8000cc8 <__aeabi_i2f+0x74>
 8000c80:	2a99      	cmp	r2, #153	; 0x99
 8000c82:	dd0b      	ble.n	8000c9c <__aeabi_i2f+0x48>
 8000c84:	2305      	movs	r3, #5
 8000c86:	0029      	movs	r1, r5
 8000c88:	1a1b      	subs	r3, r3, r0
 8000c8a:	40d9      	lsrs	r1, r3
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	331b      	adds	r3, #27
 8000c90:	409d      	lsls	r5, r3
 8000c92:	002b      	movs	r3, r5
 8000c94:	1e5d      	subs	r5, r3, #1
 8000c96:	41ab      	sbcs	r3, r5
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	000d      	movs	r5, r1
 8000c9c:	2805      	cmp	r0, #5
 8000c9e:	dd01      	ble.n	8000ca4 <__aeabi_i2f+0x50>
 8000ca0:	1f43      	subs	r3, r0, #5
 8000ca2:	409d      	lsls	r5, r3
 8000ca4:	002b      	movs	r3, r5
 8000ca6:	490f      	ldr	r1, [pc, #60]	; (8000ce4 <__aeabi_i2f+0x90>)
 8000ca8:	400b      	ands	r3, r1
 8000caa:	076e      	lsls	r6, r5, #29
 8000cac:	d009      	beq.n	8000cc2 <__aeabi_i2f+0x6e>
 8000cae:	260f      	movs	r6, #15
 8000cb0:	4035      	ands	r5, r6
 8000cb2:	2d04      	cmp	r5, #4
 8000cb4:	d005      	beq.n	8000cc2 <__aeabi_i2f+0x6e>
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	015d      	lsls	r5, r3, #5
 8000cba:	d502      	bpl.n	8000cc2 <__aeabi_i2f+0x6e>
 8000cbc:	229f      	movs	r2, #159	; 0x9f
 8000cbe:	400b      	ands	r3, r1
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	019b      	lsls	r3, r3, #6
 8000cc4:	0a58      	lsrs	r0, r3, #9
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	0240      	lsls	r0, r0, #9
 8000cca:	05d2      	lsls	r2, r2, #23
 8000ccc:	0a40      	lsrs	r0, r0, #9
 8000cce:	07e4      	lsls	r4, r4, #31
 8000cd0:	4310      	orrs	r0, r2
 8000cd2:	4320      	orrs	r0, r4
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e7f4      	b.n	8000cc8 <__aeabi_i2f+0x74>
 8000cde:	0268      	lsls	r0, r5, #9
 8000ce0:	0a40      	lsrs	r0, r0, #9
 8000ce2:	e7f1      	b.n	8000cc8 <__aeabi_i2f+0x74>
 8000ce4:	fbffffff 	.word	0xfbffffff

08000ce8 <fix_abs>:
 * value is too large or there were garbage characters.
 */
extern fix16_t fix16_from_str(const char *buf);

static inline uint32_t fix_abs(fix16_t in)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
    if(in == fix16_minimum)
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	061b      	lsls	r3, r3, #24
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d102      	bne.n	8000d00 <fix_abs+0x18>
    {
        // minimum negative number has same representation as
        // its absolute value in unsigned
        return 0x80000000;
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	061b      	lsls	r3, r3, #24
 8000cfe:	e003      	b.n	8000d08 <fix_abs+0x20>
    }
    else
    {
        return ((in >= 0)?(in):(-in));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	17da      	asrs	r2, r3, #31
 8000d04:	189b      	adds	r3, r3, r2
 8000d06:	4053      	eors	r3, r2
    }
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <fix16_add>:
/* Subtraction and addition with overflow detection.
 * The versions without overflow detection are inlined in the header.
 */
#ifndef FIXMATH_NO_OVERFLOW
fix16_t fix16_add(fix16_t a, fix16_t b)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	// Use unsigned integers because overflow with signed integers is
	// an undefined operation (http://www.airs.com/blog/archives/120).
    uint32_t _a = a;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	617b      	str	r3, [r7, #20]
    uint32_t _b = b;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	613b      	str	r3, [r7, #16]
	uint32_t sum = _a + _b;
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	60fb      	str	r3, [r7, #12]

	// Overflow can only happen if sign of a == sign of b, and then
	// it causes sign of sum != sign of a.
	if (!((_a ^ _b) & 0x80000000) && ((_a ^ sum) & 0x80000000))
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4053      	eors	r3, r2
 8000d30:	d406      	bmi.n	8000d40 <fix16_add+0x30>
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4053      	eors	r3, r2
 8000d38:	d502      	bpl.n	8000d40 <fix16_add+0x30>
		return fix16_overflow;
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	061b      	lsls	r3, r3, #24
 8000d3e:	e000      	b.n	8000d42 <fix16_add+0x32>
	
	return sum;
 8000d40:	68fb      	ldr	r3, [r7, #12]
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b006      	add	sp, #24
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <fix16_sub>:

fix16_t fix16_sub(fix16_t a, fix16_t b)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
    uint32_t _a = a;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	617b      	str	r3, [r7, #20]
    uint32_t _b = b;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	613b      	str	r3, [r7, #16]
	uint32_t diff = _a - _b;
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	60fb      	str	r3, [r7, #12]

	// Overflow can only happen if sign of a != sign of b, and then
	// it causes sign of diff != sign of a.
	if (((_a ^ _b) & 0x80000000) && ((_a ^ diff) & 0x80000000))
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4053      	eors	r3, r2
 8000d6a:	d506      	bpl.n	8000d7a <fix16_sub+0x30>
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4053      	eors	r3, r2
 8000d72:	d502      	bpl.n	8000d7a <fix16_sub+0x30>
		return fix16_overflow;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	061b      	lsls	r3, r3, #24
 8000d78:	e000      	b.n	8000d7c <fix16_sub+0x32>
	
	return diff;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <fix16_mul>:
 * detection.
 */
 
#if !defined(FIXMATH_NO_64BIT) && !defined(FIXMATH_OPTIMIZE_8BIT)
fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8000d8c:	6239      	str	r1, [r7, #32]
	int64_t product = (int64_t)inArg0 * inArg1;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	17db      	asrs	r3, r3, #31
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6938      	ldr	r0, [r7, #16]
 8000da4:	6979      	ldr	r1, [r7, #20]
 8000da6:	f7ff fb79 	bl	800049c <__aeabi_lmul>
 8000daa:	0002      	movs	r2, r0
 8000dac:	000b      	movs	r3, r1
 8000dae:	633a      	str	r2, [r7, #48]	; 0x30
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
	
	#ifndef FIXMATH_NO_OVERFLOW
	// The upper 17 bits should all be the same (the sign).
	uint32_t upper = (product >> 47);
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	13db      	asrs	r3, r3, #15
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	#endif
	
	if (product < 0)
 8000dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da0f      	bge.n	8000de8 <fix16_mul+0x64>
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (~upper)
 8000dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	d002      	beq.n	8000dd4 <fix16_mul+0x50>
				return fix16_overflow;
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	e02a      	b.n	8000e2a <fix16_mul+0xa6>
		#endif
		
		#ifndef FIXMATH_NO_ROUNDING
		// This adjustment is required in order to round -1/2 correctly
		product--;
 8000dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd8:	2001      	movs	r0, #1
 8000dda:	4240      	negs	r0, r0
 8000ddc:	17c1      	asrs	r1, r0, #31
 8000dde:	1812      	adds	r2, r2, r0
 8000de0:	414b      	adcs	r3, r1
 8000de2:	633a      	str	r2, [r7, #48]	; 0x30
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
 8000de6:	e005      	b.n	8000df4 <fix16_mul+0x70>
		#endif
	}
	else
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (upper)
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <fix16_mul+0x70>
				return fix16_overflow;
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	061b      	lsls	r3, r3, #24
 8000df2:	e01a      	b.n	8000e2a <fix16_mul+0xa6>
	}
	
	#ifdef FIXMATH_NO_ROUNDING
	return product >> 16;
	#else
	fix16_t result = product >> 16;
 8000df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dfa:	0c12      	lsrs	r2, r2, #16
 8000dfc:	61ba      	str	r2, [r7, #24]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	61ba      	str	r2, [r7, #24]
 8000e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e06:	141b      	asrs	r3, r3, #16
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	result += (product & 0x8000) >> 15;
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	045b      	lsls	r3, r3, #17
 8000e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e14:	0bd4      	lsrs	r4, r2, #15
 8000e16:	431c      	orrs	r4, r3
 8000e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1a:	13dd      	asrs	r5, r3, #15
 8000e1c:	0022      	movs	r2, r4
 8000e1e:	2301      	movs	r3, #1
 8000e20:	401a      	ands	r2, r3
 8000e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
	
	return result;
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
	#endif
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b00e      	add	sp, #56	; 0x38
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}

08000e32 <fix16_div>:
	return result;
}
#endif

fix16_t fix16_div(fix16_t a, fix16_t b)
{
 8000e32:	b5b0      	push	{r4, r5, r7, lr}
 8000e34:	b094      	sub	sp, #80	; 0x50
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	61f8      	str	r0, [r7, #28]
 8000e3a:	61b9      	str	r1, [r7, #24]
	// This uses a hardware 32/32 bit division multiple times, until we have
	// computed all the bits in (a<<17)/b. Usually this takes 1-3 iterations.
	
	if (b == 0)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <fix16_div+0x16>
			return fix16_minimum;
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	061b      	lsls	r3, r3, #24
 8000e46:	e0c6      	b.n	8000fd6 <fix16_div+0x1a4>
	
    uint32_t remainder = fix_abs(a);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff ff4c 	bl	8000ce8 <fix_abs>
 8000e50:	0003      	movs	r3, r0
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t divider = fix_abs(b);
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff ff46 	bl	8000ce8 <fix_abs>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    uint64_t quotient = 0;
 8000e60:	2200      	movs	r2, #0
 8000e62:	2300      	movs	r3, #0
 8000e64:	643a      	str	r2, [r7, #64]	; 0x40
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
    int bit_pos = 17;
 8000e68:	2311      	movs	r3, #17
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Kick-start the division a bit.
	// This improves speed in the worst-case scenarios where N and D are large
	// It gets a lower estimate for the result by N/(D >> 17 + 1).
	if (divider & 0xFFF00000)
 8000e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e6e:	0d1b      	lsrs	r3, r3, #20
 8000e70:	051b      	lsls	r3, r3, #20
 8000e72:	d028      	beq.n	8000ec6 <fix16_div+0x94>
	{
		uint32_t shifted_div = ((divider >> 17) + 1);
 8000e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e76:	0c5b      	lsrs	r3, r3, #17
 8000e78:	3301      	adds	r3, #1
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
        quotient = remainder / shifted_div;
 8000e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e80:	f7ff f93e 	bl	8000100 <__udivsi3>
 8000e84:	0003      	movs	r3, r0
 8000e86:	643b      	str	r3, [r7, #64]	; 0x40
 8000e88:	2300      	movs	r3, #0
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
        uint64_t tmp = ((uint64_t)quotient * (uint64_t)divider) >> 17;
 8000e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f7ff fafe 	bl	800049c <__aeabi_lmul>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	000b      	movs	r3, r1
 8000ea4:	03d9      	lsls	r1, r3, #15
 8000ea6:	0c50      	lsrs	r0, r2, #17
 8000ea8:	4301      	orrs	r1, r0
 8000eaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8000eac:	0c5b      	lsrs	r3, r3, #17
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        remainder -= (uint32_t)(tmp);
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
	
	// If the divider is divisible by 2^n, take advantage of it.
	while (!(divider & 0xF) && bit_pos >= 4)
 8000eb8:	e005      	b.n	8000ec6 <fix16_div+0x94>
	{
		divider >>= 4;
 8000eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
		bit_pos -= 4;
 8000ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (!(divider & 0xF) && bit_pos >= 4)
 8000ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ec8:	220f      	movs	r2, #15
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d158      	bne.n	8000f80 <fix16_div+0x14e>
 8000ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	dcf2      	bgt.n	8000eba <fix16_div+0x88>
	}
	
	while (remainder && bit_pos >= 0)
 8000ed4:	e054      	b.n	8000f80 <fix16_div+0x14e>
	{
		// Shift remainder as much as we can without overflowing
		int shift = clz(remainder);
 8000ed6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ed8:	f7ff fac2 	bl	8000460 <__clzsi2>
 8000edc:	0003      	movs	r3, r0
 8000ede:	63bb      	str	r3, [r7, #56]	; 0x38
		if (shift > bit_pos) shift = bit_pos;
 8000ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dd01      	ble.n	8000eec <fix16_div+0xba>
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
		remainder <<= shift;
 8000eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
		bit_pos -= shift;
 8000ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
		
		uint32_t div = remainder / divider;
 8000efe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f02:	f7ff f8fd 	bl	8000100 <__udivsi3>
 8000f06:	0003      	movs	r3, r0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
        remainder = remainder % divider;
 8000f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff f97c 	bl	800020c <__aeabi_uidivmod>
 8000f14:	000b      	movs	r3, r1
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
        quotient += (uint64_t)div << bit_pos;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f22:	3b20      	subs	r3, #32
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db03      	blt.n	8000f30 <fix16_div+0xfe>
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0015      	movs	r5, r2
 8000f2e:	e00b      	b.n	8000f48 <fix16_div+0x116>
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f32:	2220      	movs	r2, #32
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	6938      	ldr	r0, [r7, #16]
 8000f38:	6979      	ldr	r1, [r7, #20]
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	40da      	lsrs	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f42:	4091      	lsls	r1, r2
 8000f44:	000d      	movs	r5, r1
 8000f46:	431d      	orrs	r5, r3
 8000f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0014      	movs	r4, r2
 8000f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f54:	1912      	adds	r2, r2, r4
 8000f56:	416b      	adcs	r3, r5
 8000f58:	643a      	str	r2, [r7, #64]	; 0x40
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44

		#ifndef FIXMATH_NO_OVERFLOW
		if (div & ~(0xFFFFFFFF >> bit_pos))
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	425a      	negs	r2, r3
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	40da      	lsrs	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43db      	mvns	r3, r3
 8000f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d002      	beq.n	8000f74 <fix16_div+0x142>
				return fix16_overflow;
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	061b      	lsls	r3, r3, #24
 8000f72:	e030      	b.n	8000fd6 <fix16_div+0x1a4>
		#endif
		
		remainder <<= 1;
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
		bit_pos--;
 8000f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (remainder && bit_pos >= 0)
 8000f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <fix16_div+0x15a>
 8000f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	daa4      	bge.n	8000ed6 <fix16_div+0xa4>
	}
	
	#ifndef FIXMATH_NO_ROUNDING
	// Quotient is always positive so rounding is easy
	quotient++;
 8000f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f8e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8000f90:	2101      	movs	r1, #1
 8000f92:	2200      	movs	r2, #0
 8000f94:	185b      	adds	r3, r3, r1
 8000f96:	4154      	adcs	r4, r2
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
 8000f9a:	647c      	str	r4, [r7, #68]	; 0x44
	#endif
	
	fix16_t result = quotient >> 1;
 8000f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f9e:	07db      	lsls	r3, r3, #31
 8000fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fa2:	0852      	lsrs	r2, r2, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
	
	// Figure out the sign of the result
	if ((a ^ b) & 0x80000000)
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	4053      	eors	r3, r2
 8000fbc:	d50a      	bpl.n	8000fd4 <fix16_div+0x1a2>
	{
		#ifndef FIXMATH_NO_OVERFLOW
		if (result == fix16_minimum)
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d102      	bne.n	8000fce <fix16_div+0x19c>
				return fix16_overflow;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	061b      	lsls	r3, r3, #24
 8000fcc:	e003      	b.n	8000fd6 <fix16_div+0x1a4>
		#endif
		
		result = -result;
 8000fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
	}
	
	return result;
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b014      	add	sp, #80	; 0x50
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}

08000fde <itoa_loop>:
    /* 5 decimals is enough for full fix16_t precision */
    1, 10, 100, 1000, 10000, 100000, 100000, 100000
};

static char *itoa_loop(char *buf, uint32_t scale, uint32_t value, bool skip)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	001a      	movs	r2, r3
 8000fec:	1cfb      	adds	r3, r7, #3
 8000fee:	701a      	strb	r2, [r3, #0]
    while (scale)
 8000ff0:	e02b      	b.n	800104a <itoa_loop+0x6c>
    {
        unsigned digit = (value / scale);
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff f883 	bl	8000100 <__udivsi3>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	617b      	str	r3, [r7, #20]
    
        if (!skip || digit || scale == 1)
 8000ffe:	1cfb      	adds	r3, r7, #3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2201      	movs	r2, #1
 8001004:	4053      	eors	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d105      	bne.n	8001018 <itoa_loop+0x3a>
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <itoa_loop+0x3a>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d111      	bne.n	800103c <itoa_loop+0x5e>
        {
            skip = false;
 8001018:	1cfb      	adds	r3, r7, #3
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
            *buf++ = '0' + digit;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1c59      	adds	r1, r3, #1
 8001026:	60f9      	str	r1, [r7, #12]
 8001028:	3230      	adds	r2, #48	; 0x30
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	701a      	strb	r2, [r3, #0]
            value %= scale;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff f8ea 	bl	800020c <__aeabi_uidivmod>
 8001038:	000b      	movs	r3, r1
 800103a:	607b      	str	r3, [r7, #4]
        }
        
        scale /= 10;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	210a      	movs	r1, #10
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff f85d 	bl	8000100 <__udivsi3>
 8001046:	0003      	movs	r3, r0
 8001048:	60bb      	str	r3, [r7, #8]
    while (scale)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1d0      	bne.n	8000ff2 <itoa_loop+0x14>
    }
    return buf;
 8001050:	68fb      	ldr	r3, [r7, #12]
}
 8001052:	0018      	movs	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	b006      	add	sp, #24
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <fix16_to_str>:

void fix16_to_str(fix16_t value, char *buf, int decimals)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
    uint32_t uvalue = (value >= 0) ? value : -value;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	17da      	asrs	r2, r3, #31
 800106c:	189b      	adds	r3, r3, r2
 800106e:	4053      	eors	r3, r2
 8001070:	617b      	str	r3, [r7, #20]
    if (value < 0)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	da04      	bge.n	8001082 <fix16_to_str+0x26>
        *buf++ = '-';
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	222d      	movs	r2, #45	; 0x2d
 8001080:	701a      	strb	r2, [r3, #0]

    /* Separate the integer and decimal parts of the value */
    unsigned intpart = uvalue >> 16;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	61fb      	str	r3, [r7, #28]
    uint32_t fracpart = uvalue & 0xFFFF;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	61bb      	str	r3, [r7, #24]
    uint32_t scale = scales[decimals & 7];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2207      	movs	r2, #7
 8001094:	401a      	ands	r2, r3
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <fix16_to_str+0xb4>)
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	58d3      	ldr	r3, [r2, r3]
 800109c:	613b      	str	r3, [r7, #16]
    fracpart = fix16_mul(fracpart, scale);
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff fe6d 	bl	8000d84 <fix16_mul>
 80010aa:	0003      	movs	r3, r0
 80010ac:	61bb      	str	r3, [r7, #24]
    
    if (fracpart >= scale)
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d306      	bcc.n	80010c4 <fix16_to_str+0x68>
    {
        /* Handle carry from decimal part */
        intpart++;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
        fracpart -= scale;    
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Format integer part */
    buf = itoa_loop(buf, 10000, intpart, true);
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	4913      	ldr	r1, [pc, #76]	; (8001114 <fix16_to_str+0xb8>)
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	2301      	movs	r3, #1
 80010cc:	f7ff ff87 	bl	8000fde <itoa_loop>
 80010d0:	0003      	movs	r3, r0
 80010d2:	60bb      	str	r3, [r7, #8]
    
    /* Format decimal part (if any) */
    if (scale != 1)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d012      	beq.n	8001100 <fix16_to_str+0xa4>
    {
        *buf++ = '.';
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	222e      	movs	r2, #46	; 0x2e
 80010e2:	701a      	strb	r2, [r3, #0]
        buf = itoa_loop(buf, scale / 10, fracpart, false);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	210a      	movs	r1, #10
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff f809 	bl	8000100 <__udivsi3>
 80010ee:	0003      	movs	r3, r0
 80010f0:	0019      	movs	r1, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	2300      	movs	r3, #0
 80010f8:	f7ff ff71 	bl	8000fde <itoa_loop>
 80010fc:	0003      	movs	r3, r0
 80010fe:	60bb      	str	r3, [r7, #8]
    }
    
    *buf = '\0';
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b008      	add	sp, #32
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	08007818 	.word	0x08007818
 8001114:	00002710 	.word	0x00002710

08001118 <fix16_atan2>:
{
	return ((fix16_pi >> 1) - fix16_asin(x));
}

fix16_t fix16_atan2(fix16_t inY , fix16_t inX)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	if((_fix16_atan_cache_index[0][hash] == inX) && (_fix16_atan_cache_index[1][hash] == inY))
		return _fix16_atan_cache_value[hash];
	#endif

	/* Absolute inY */
	mask = (inY >> (sizeof(fix16_t)*CHAR_BIT-1));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	61bb      	str	r3, [r7, #24]
	abs_inY = (inY + mask) ^ mask;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4053      	eors	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

	if (inX >= 0)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db2c      	blt.n	8001194 <fix16_atan2+0x7c>
	{
		r = fix16_div( (inX - abs_inY), (inX + abs_inY));
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	1ad0      	subs	r0, r2, r3
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	0019      	movs	r1, r3
 8001148:	f7ff fe73 	bl	8000e32 <fix16_div>
 800114c:	0003      	movs	r3, r0
 800114e:	613b      	str	r3, [r7, #16]
		r_3 = fix16_mul(fix16_mul(r, r),r);
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	0011      	movs	r1, r2
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff fe14 	bl	8000d84 <fix16_mul>
 800115c:	0002      	movs	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	0019      	movs	r1, r3
 8001162:	0010      	movs	r0, r2
 8001164:	f7ff fe0e 	bl	8000d84 <fix16_mul>
 8001168:	0003      	movs	r3, r0
 800116a:	60fb      	str	r3, [r7, #12]
		angle = fix16_mul(0x00003240 , r_3) - fix16_mul(0x0000FB50,r) + PI_DIV_4;
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	23c9      	movs	r3, #201	; 0xc9
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fe05 	bl	8000d84 <fix16_mul>
 800117a:	0004      	movs	r4, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <fix16_atan2+0xec>)
 8001180:	0019      	movs	r1, r3
 8001182:	0010      	movs	r0, r2
 8001184:	f7ff fdfe 	bl	8000d84 <fix16_mul>
 8001188:	0003      	movs	r3, r0
 800118a:	1ae3      	subs	r3, r4, r3
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <fix16_atan2+0xf0>)
 800118e:	189b      	adds	r3, r3, r2
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	e02b      	b.n	80011ec <fix16_atan2+0xd4>
	} else {
		r = fix16_div( (inX + abs_inY), (abs_inY - inX));
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	18d0      	adds	r0, r2, r3
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	0019      	movs	r1, r3
 80011a2:	f7ff fe46 	bl	8000e32 <fix16_div>
 80011a6:	0003      	movs	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]
		r_3 = fix16_mul(fix16_mul(r, r),r);
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fde7 	bl	8000d84 <fix16_mul>
 80011b6:	0002      	movs	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f7ff fde1 	bl	8000d84 <fix16_mul>
 80011c2:	0003      	movs	r3, r0
 80011c4:	60fb      	str	r3, [r7, #12]
		angle = fix16_mul(0x00003240 , r_3)
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	23c9      	movs	r3, #201	; 0xc9
 80011ca:	019b      	lsls	r3, r3, #6
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff fdd8 	bl	8000d84 <fix16_mul>
 80011d4:	0004      	movs	r4, r0
			- fix16_mul(0x0000FB50,r)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <fix16_atan2+0xec>)
 80011da:	0019      	movs	r1, r3
 80011dc:	0010      	movs	r0, r2
 80011de:	f7ff fdd1 	bl	8000d84 <fix16_mul>
 80011e2:	0003      	movs	r3, r0
 80011e4:	1ae3      	subs	r3, r4, r3
			+ THREE_PI_DIV_4;
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <fix16_atan2+0xf4>)
		angle = fix16_mul(0x00003240 , r_3)
 80011e8:	189b      	adds	r3, r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]
	}
	if (inY < 0)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da02      	bge.n	80011f8 <fix16_atan2+0xe0>
	{
		angle = -angle;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	425b      	negs	r3, r3
 80011f6:	61fb      	str	r3, [r7, #28]
	_fix16_atan_cache_index[0][hash] = inX;
	_fix16_atan_cache_index[1][hash] = inY;
	_fix16_atan_cache_value[hash] = angle;
	#endif

	return angle;
 80011f8:	69fb      	ldr	r3, [r7, #28]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b009      	add	sp, #36	; 0x24
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	0000fb50 	.word	0x0000fb50
 8001208:	0000c90f 	.word	0x0000c90f
 800120c:	00025b2f 	.word	0x00025b2f

08001210 <fix16_from_int>:
static inline fix16_t fix16_from_int(int a)     { return a * fix16_one; }
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	025b      	lsls	r3, r3, #9
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4353      	muls	r3, r2
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b002      	add	sp, #8
 8001226:	bd80      	pop	{r7, pc}

08001228 <fix16_to_int>:
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if (a >= 0)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0c      	blt.n	8001250 <fix16_to_int+0x28>
		return (a + (fix16_one >> 1)) / fix16_one;
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	105a      	asrs	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f7fe ffe4 	bl	8000214 <__divsi3>
 800124c:	0003      	movs	r3, r0
 800124e:	e00b      	b.n	8001268 <fix16_to_int+0x40>
	return (a - (fix16_one >> 1)) / fix16_one;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	105b      	asrs	r3, r3, #1
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	1ad2      	subs	r2, r2, r3
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	0019      	movs	r1, r3
 8001260:	0010      	movs	r0, r2
 8001262:	f7fe ffd7 	bl	8000214 <__divsi3>
 8001266:	0003      	movs	r3, r0
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <fix16_from_float>:
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	float temp = a * fix16_one;
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	025b      	lsls	r3, r3, #9
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff fce9 	bl	8000c54 <__aeabi_i2f>
 8001282:	1c03      	adds	r3, r0, #0
 8001284:	1c19      	adds	r1, r3, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fb92 	bl	80009b0 <__aeabi_fmul>
 800128c:	1c03      	adds	r3, r0, #0
 800128e:	60fb      	str	r3, [r7, #12]
	temp += (temp >= 0) ? 0.5f : -0.5f;
 8001290:	2100      	movs	r1, #0
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff f8da 	bl	800044c <__aeabi_fcmpge>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d002      	beq.n	80012a2 <fix16_from_float+0x32>
 800129c:	23fc      	movs	r3, #252	; 0xfc
 800129e:	059b      	lsls	r3, r3, #22
 80012a0:	e001      	b.n	80012a6 <fix16_from_float+0x36>
 80012a2:	23bf      	movs	r3, #191	; 0xbf
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	1c19      	adds	r1, r3, #0
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff f921 	bl	80004f0 <__aeabi_fadd>
 80012ae:	1c03      	adds	r3, r0, #0
 80012b0:	60fb      	str	r3, [r7, #12]
	return (fix16_t)temp;
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff fcae 	bl	8000c14 <__aeabi_f2iz>
 80012b8:	0003      	movs	r3, r0
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <fix16_abs>:
    { return (fix16_t)(x < 0 ? -(uint32_t)x : (uint32_t)x); }
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da02      	bge.n	80012d6 <fix16_abs+0x14>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	425b      	negs	r3, r3
 80012d4:	e000      	b.n	80012d8 <fix16_abs+0x16>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	425b      	negs	r3, r3
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <_write+0x28>)
 80012f8:	f004 fec2 	bl	8006080 <HAL_UART_Transmit>
	return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	200001f8 	.word	0x200001f8

0800130c <resetICM>:

void resetICM()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
	uint8_t tx[2] = {W | DEVICE_CONFIG, 0x01};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4a10      	ldr	r2, [pc, #64]	; (8001358 <resetICM+0x4c>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	0159      	lsls	r1, r3, #5
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	2200      	movs	r2, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f002 f9ff 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx, 2, 1000);
 800132a:	23fa      	movs	r3, #250	; 0xfa
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	1d39      	adds	r1, r7, #4
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <resetICM+0x50>)
 8001332:	2202      	movs	r2, #2
 8001334:	f003 f900 	bl	8004538 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	0159      	lsls	r1, r3, #5
 800133c:	23a0      	movs	r3, #160	; 0xa0
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	2201      	movs	r2, #1
 8001342:	0018      	movs	r0, r3
 8001344:	f002 f9f0 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f001 fb11 	bl	8002970 <HAL_Delay>
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	080077a8 	.word	0x080077a8
 800135c:	20000194 	.word	0x20000194

08001360 <spiSet>:

void spiSet(uint8_t addr, uint8_t val)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	0002      	movs	r2, r0
 8001368:	1dfb      	adds	r3, r7, #7
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	1dbb      	adds	r3, r7, #6
 800136e:	1c0a      	adds	r2, r1, #0
 8001370:	701a      	strb	r2, [r3, #0]
	uint8_t tx[2] = {0};
 8001372:	240c      	movs	r4, #12
 8001374:	193b      	adds	r3, r7, r4
 8001376:	2200      	movs	r2, #0
 8001378:	801a      	strh	r2, [r3, #0]
	tx[0] = W | addr;
 800137a:	193b      	adds	r3, r7, r4
 800137c:	1dfa      	adds	r2, r7, #7
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	701a      	strb	r2, [r3, #0]
	tx[1] = val;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	1dba      	adds	r2, r7, #6
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	0159      	lsls	r1, r3, #5
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	2200      	movs	r2, #0
 8001394:	0018      	movs	r0, r3
 8001396:	f002 f9c7 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx, 2, SPI_WAIT);
 800139a:	1939      	adds	r1, r7, r4
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <spiSet+0x60>)
 800139e:	2301      	movs	r3, #1
 80013a0:	2202      	movs	r2, #2
 80013a2:	f003 f8c9 	bl	8004538 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	0159      	lsls	r1, r3, #5
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	2201      	movs	r2, #1
 80013b0:	0018      	movs	r0, r3
 80013b2:	f002 f9b9 	bl	8003728 <HAL_GPIO_WritePin>
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b005      	add	sp, #20
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	20000194 	.word	0x20000194

080013c4 <spiGet>:

void spiGet(uint8_t addr, uint8_t* rx, uint8_t num)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6039      	str	r1, [r7, #0]
 80013cc:	0011      	movs	r1, r2
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	1c02      	adds	r2, r0, #0
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	1c0a      	adds	r2, r1, #0
 80013d8:	701a      	strb	r2, [r3, #0]
	uint8_t tx = R | addr;
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	4252      	negs	r2, r2
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	240f      	movs	r4, #15
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	0159      	lsls	r1, r3, #5
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2200      	movs	r2, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f002 f996 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &tx, 1, SPI_WAIT);
 80013fc:	1939      	adds	r1, r7, r4
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <spiGet+0x6c>)
 8001400:	2301      	movs	r3, #1
 8001402:	2201      	movs	r2, #1
 8001404:	f003 f898 	bl	8004538 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rx, num, SPI_WAIT);
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b29a      	uxth	r2, r3
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <spiGet+0x6c>)
 8001412:	2301      	movs	r3, #1
 8001414:	f003 f9e8 	bl	80047e8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	0159      	lsls	r1, r3, #5
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	2201      	movs	r2, #1
 8001422:	0018      	movs	r0, r3
 8001424:	f002 f980 	bl	8003728 <HAL_GPIO_WritePin>
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b005      	add	sp, #20
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000194 	.word	0x20000194

08001434 <printf16>:

void printf16(fix16_t num, int decimals){
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	decimals = decimals > 5 ? 5 : decimals;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b05      	cmp	r3, #5
 8001442:	dd00      	ble.n	8001446 <printf16+0x12>
 8001444:	2305      	movs	r3, #5
 8001446:	603b      	str	r3, [r7, #0]
	char str[14] = {'0'};
 8001448:	2108      	movs	r1, #8
 800144a:	000c      	movs	r4, r1
 800144c:	187b      	adds	r3, r7, r1
 800144e:	0018      	movs	r0, r3
 8001450:	230e      	movs	r3, #14
 8001452:	001a      	movs	r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	f005 fa11 	bl	800687c <memset>
 800145a:	0021      	movs	r1, r4
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2230      	movs	r2, #48	; 0x30
 8001460:	701a      	strb	r2, [r3, #0]
	fix16_to_str(num, str, decimals);
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	000c      	movs	r4, r1
 8001466:	1879      	adds	r1, r7, r1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fdf6 	bl	800105c <fix16_to_str>
	printf("%s", str);
 8001470:	0021      	movs	r1, r4
 8001472:	187a      	adds	r2, r7, r1
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <printf16+0x54>)
 8001476:	0011      	movs	r1, r2
 8001478:	0018      	movs	r0, r3
 800147a:	f005 fa07 	bl	800688c <iprintf>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b007      	add	sp, #28
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	080077ac 	.word	0x080077ac

0800148c <pn>:

void pn(){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	printf("\r\n");
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <pn+0x14>)
 8001492:	0018      	movs	r0, r3
 8001494:	f005 fa74 	bl	8006980 <puts>
}
 8001498:	46c0      	nop			; (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	080077b0 	.word	0x080077b0

080014a4 <pc>:

void ps(){
	printf(" ");
}

void pc(){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	printf(", ");
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <pc+0x14>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f005 f9ee 	bl	800688c <iprintf>
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	080077b4 	.word	0x080077b4

080014bc <brakeOn>:

void brakeOn() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, GPIO_PIN_RESET);
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <brakeOn+0x18>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	0019      	movs	r1, r3
 80014ca:	f002 f92d 	bl	8003728 <HAL_GPIO_WritePin>
	return;
 80014ce:	46c0      	nop			; (mov r8, r8)
}
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	50000400 	.word	0x50000400

080014d8 <brakeOff>:

void brakeOff() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, GPIO_PIN_SET);
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <brakeOff+0x18>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	0019      	movs	r1, r3
 80014e6:	f002 f91f 	bl	8003728 <HAL_GPIO_WritePin>
	return;
 80014ea:	46c0      	nop			; (mov r8, r8)
}
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	50000400 	.word	0x50000400

080014f4 <waitUntilStop>:

void waitUntilStop(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 100;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <waitUntilStop+0x40>)
 80014fc:	2264      	movs	r2, #100	; 0x64
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
	brakeOn();
 8001500:	f7ff ffdc 	bl	80014bc <brakeOn>
	int val1 = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
	int val2 = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	603b      	str	r3, [r7, #0]
	while (val1 != val2){
 800150c:	e008      	b.n	8001520 <waitUntilStop+0x2c>
		val1 = TIM1->CNT;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <waitUntilStop+0x44>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	607b      	str	r3, [r7, #4]
		HAL_Delay (10);
 8001514:	200a      	movs	r0, #10
 8001516:	f001 fa2b 	bl	8002970 <HAL_Delay>
		val2 = TIM1->CNT;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <waitUntilStop+0x44>)
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	603b      	str	r3, [r7, #0]
	while (val1 != val2){
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d1f2      	bne.n	800150e <waitUntilStop+0x1a>
	}
	brakeOff();
 8001528:	f7ff ffd6 	bl	80014d8 <brakeOff>
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40000400 	.word	0x40000400
 8001538:	40012c00 	.word	0x40012c00

0800153c <rad2deg>:
	voltage = fix16_sub(voltage, fix16_from_float(0.1)); // more fudge factor
	HAL_ADC_Stop(&hadc1);
	return voltage;
}

fix16_t rad2deg(fix16_t num){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	num = fix16_mul(num, fix16_from_int(180));
 8001544:	20b4      	movs	r0, #180	; 0xb4
 8001546:	f7ff fe63 	bl	8001210 <fix16_from_int>
 800154a:	0002      	movs	r2, r0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff fc17 	bl	8000d84 <fix16_mul>
 8001556:	0003      	movs	r3, r0
 8001558:	607b      	str	r3, [r7, #4]
	num = fix16_div(num, fix16_pi);
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <rad2deg+0x38>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fc66 	bl	8000e32 <fix16_div>
 8001566:	0003      	movs	r3, r0
 8001568:	607b      	str	r3, [r7, #4]
	return num;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}
 8001574:	0003243f 	.word	0x0003243f

08001578 <sign>:

//returns 1 if the number is negative, 0 if positive or 0
int32_t sign(int32_t num){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	return (num < 0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	0fdb      	lsrs	r3, r3, #31
 8001584:	b2db      	uxtb	r3, r3
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b0af      	sub	sp, #188	; 0xbc
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001596:	f001 f965 	bl	8002864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159a:	f000 fc59 	bl	8001e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159e:	f000 fe45 	bl	800222c <MX_GPIO_Init>
  MX_TIM1_Init();
 80015a2:	f000 fd45 	bl	8002030 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015a6:	f000 fdad 	bl	8002104 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015aa:	f000 fe0b 	bl	80021c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015ae:	f000 fc97 	bl	8001ee0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80015b2:	f000 fcff 	bl	8001fb4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //Start timers and ADC
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015b6:	4baa      	ldr	r3, [pc, #680]	; (8001860 <main+0x2d0>)
 80015b8:	2100      	movs	r1, #0
 80015ba:	0018      	movs	r0, r3
 80015bc:	f003 fe60 	bl	8005280 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80015c0:	4ba8      	ldr	r3, [pc, #672]	; (8001864 <main+0x2d4>)
 80015c2:	213c      	movs	r1, #60	; 0x3c
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 ffdb 	bl	8005580 <HAL_TIM_Encoder_Start>

  uint8_t rx[6] = { 0 };
 80015ca:	2528      	movs	r5, #40	; 0x28
 80015cc:	197b      	adds	r3, r7, r5
 80015ce:	0018      	movs	r0, r3
 80015d0:	2306      	movs	r3, #6
 80015d2:	001a      	movs	r2, r3
 80015d4:	2100      	movs	r1, #0
 80015d6:	f005 f951 	bl	800687c <memset>
  resetICM();
 80015da:	f7ff fe97 	bl	800130c <resetICM>
  spiSet(ACCEL_CONFIG0, 0x06);
 80015de:	2106      	movs	r1, #6
 80015e0:	2050      	movs	r0, #80	; 0x50
 80015e2:	f7ff febd 	bl	8001360 <spiSet>
  spiSet(GYRO_CONFIG0, 0x06);
 80015e6:	2106      	movs	r1, #6
 80015e8:	204f      	movs	r0, #79	; 0x4f
 80015ea:	f7ff feb9 	bl	8001360 <spiSet>
  spiSet(PWR_MGMT0, 0x0F);
 80015ee:	210f      	movs	r1, #15
 80015f0:	204e      	movs	r0, #78	; 0x4e
 80015f2:	f7ff feb5 	bl	8001360 <spiSet>
  HAL_Delay(45);
 80015f6:	202d      	movs	r0, #45	; 0x2d
 80015f8:	f001 f9ba 	bl	8002970 <HAL_Delay>
//  fix16_t Q = fix16_atan2(140351, 65536);
//  P = fix16_div(P,Q);
//  Q = fix16_mul(Q, fix16_from_int(2));
//  P = fix16_sqrt(P);

  printf("start\r\n");
 80015fc:	4b9a      	ldr	r3, [pc, #616]	; (8001868 <main+0x2d8>)
 80015fe:	0018      	movs	r0, r3
 8001600:	f005 f9be 	bl	8006980 <puts>
  pn();
 8001604:	f7ff ff42 	bl	800148c <pn>


  //variable definitions
  int16_t pos1 = 0, pos2 = 0, diff = 0;
 8001608:	2398      	movs	r3, #152	; 0x98
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	23b6      	movs	r3, #182	; 0xb6
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2200      	movs	r2, #0
 8001616:	801a      	strh	r2, [r3, #0]
 8001618:	23b4      	movs	r3, #180	; 0xb4
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	801a      	strh	r2, [r3, #0]
  fix16_t angle = 0, prevAngle = 0, gyrAngle = 0, accAngle = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	22b0      	movs	r2, #176	; 0xb0
 8001624:	18ba      	adds	r2, r7, r2
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	2294      	movs	r2, #148	; 0x94
 800162c:	18ba      	adds	r2, r7, r2
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	2290      	movs	r2, #144	; 0x90
 8001634:	18ba      	adds	r2, r7, r2
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	228c      	movs	r2, #140	; 0x8c
 800163c:	18ba      	adds	r2, r7, r2
 800163e:	6013      	str	r3, [r2, #0]
  uint32_t start = 0, end = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	2288      	movs	r2, #136	; 0x88
 8001644:	18ba      	adds	r2, r7, r2
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	2300      	movs	r3, #0
 800164a:	22ac      	movs	r2, #172	; 0xac
 800164c:	18ba      	adds	r2, r7, r2
 800164e:	6013      	str	r3, [r2, #0]
  uint8_t dir = 1;
 8001650:	2387      	movs	r3, #135	; 0x87
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
  uint32_t pulse = TIM3->CCR1;
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <main+0x2dc>)
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	22a8      	movs	r2, #168	; 0xa8
 800165e:	18ba      	adds	r2, r7, r2
 8001660:	6013      	str	r3, [r2, #0]
  int32_t control = 0, controlSignal = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	18ba      	adds	r2, r7, r2
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	67fb      	str	r3, [r7, #124]	; 0x7c
  int16_t a_i[3] = {0};
 800166e:	2320      	movs	r3, #32
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	0018      	movs	r0, r3
 8001674:	2306      	movs	r3, #6
 8001676:	001a      	movs	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	f005 f8ff 	bl	800687c <memset>
  fix16_t a_f[3] = {0};
 800167e:	2314      	movs	r3, #20
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	0018      	movs	r0, r3
 8001684:	230c      	movs	r3, #12
 8001686:	001a      	movs	r2, r3
 8001688:	2100      	movs	r1, #0
 800168a:	f005 f8f7 	bl	800687c <memset>
  int16_t g_i[3] = {0};
 800168e:	230c      	movs	r3, #12
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	0018      	movs	r0, r3
 8001694:	2306      	movs	r3, #6
 8001696:	001a      	movs	r2, r3
 8001698:	2100      	movs	r1, #0
 800169a:	f005 f8ef 	bl	800687c <memset>
  fix16_t g_f[3] = {0};
 800169e:	003b      	movs	r3, r7
 80016a0:	0018      	movs	r0, r3
 80016a2:	230c      	movs	r3, #12
 80016a4:	001a      	movs	r2, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	f005 f8e8 	bl	800687c <memset>
  fix16_t error = 0, errorInt = 0, errorDiff = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80016b0:	2300      	movs	r3, #0
 80016b2:	22a4      	movs	r2, #164	; 0xa4
 80016b4:	18ba      	adds	r2, r7, r2
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	2300      	movs	r3, #0
 80016ba:	677b      	str	r3, [r7, #116]	; 0x74
  fix16_t velocity = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	673b      	str	r3, [r7, #112]	; 0x70
  fix16_t controlVelocity = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  fix16_t velocityError = 0, velocityErrorInt = 0, velocityErrorDiff = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80016c8:	2300      	movs	r3, #0
 80016ca:	22a0      	movs	r2, #160	; 0xa0
 80016cc:	18ba      	adds	r2, r7, r2
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	667b      	str	r3, [r7, #100]	; 0x64
  fix16_t prevVelocityError = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	229c      	movs	r2, #156	; 0x9c
 80016d8:	18ba      	adds	r2, r7, r2
 80016da:	6013      	str	r3, [r2, #0]
  uint8_t firstRun = 1;
 80016dc:	239b      	movs	r3, #155	; 0x9b
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
  fix16_t angleControl, velocityControl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60


  const uint32_t dt = 10;
 80016e8:	230a      	movs	r3, #10
 80016ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  const fix16_t tau = fix16_from_int(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fd8f 	bl	8001210 <fix16_from_int>
 80016f2:	0003      	movs	r3, r0
 80016f4:	65bb      	str	r3, [r7, #88]	; 0x58
  const fix16_t alpha = fix16_div(tau, fix16_add(tau, fix16_div(fix16_from_int(dt), fix16_from_int(1000))));
 80016f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff fd89 	bl	8001210 <fix16_from_int>
 80016fe:	0004      	movs	r4, r0
 8001700:	23fa      	movs	r3, #250	; 0xfa
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff fd83 	bl	8001210 <fix16_from_int>
 800170a:	0003      	movs	r3, r0
 800170c:	0019      	movs	r1, r3
 800170e:	0020      	movs	r0, r4
 8001710:	f7ff fb8f 	bl	8000e32 <fix16_div>
 8001714:	0002      	movs	r2, r0
 8001716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001718:	0011      	movs	r1, r2
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff faf8 	bl	8000d10 <fix16_add>
 8001720:	0002      	movs	r2, r0
 8001722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff fb83 	bl	8000e32 <fix16_div>
 800172c:	0003      	movs	r3, r0
 800172e:	657b      	str	r3, [r7, #84]	; 0x54
  const fix16_t accFactor = fix16_div(fix16_from_int(16), fix16_from_int(32768));
 8001730:	2010      	movs	r0, #16
 8001732:	f7ff fd6d 	bl	8001210 <fix16_from_int>
 8001736:	0004      	movs	r4, r0
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff fd67 	bl	8001210 <fix16_from_int>
 8001742:	0003      	movs	r3, r0
 8001744:	0019      	movs	r1, r3
 8001746:	0020      	movs	r0, r4
 8001748:	f7ff fb73 	bl	8000e32 <fix16_div>
 800174c:	0003      	movs	r3, r0
 800174e:	653b      	str	r3, [r7, #80]	; 0x50
  const fix16_t gyrFactor = fix16_div(fix16_from_int(2000), fix16_from_int(32768));
 8001750:	23fa      	movs	r3, #250	; 0xfa
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fd5b 	bl	8001210 <fix16_from_int>
 800175a:	0004      	movs	r4, r0
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fd55 	bl	8001210 <fix16_from_int>
 8001766:	0003      	movs	r3, r0
 8001768:	0019      	movs	r1, r3
 800176a:	0020      	movs	r0, r4
 800176c:	f7ff fb61 	bl	8000e32 <fix16_div>
 8001770:	0003      	movs	r3, r0
 8001772:	64fb      	str	r3, [r7, #76]	; 0x4c
  const fix16_t Kp = fix16_from_float(120.00);
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <main+0x2e0>)
 8001776:	1c18      	adds	r0, r3, #0
 8001778:	f7ff fd7a 	bl	8001270 <fix16_from_float>
 800177c:	0003      	movs	r3, r0
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  const fix16_t Ki = fix16_from_float(0.00);
 8001780:	2300      	movs	r3, #0
 8001782:	1c18      	adds	r0, r3, #0
 8001784:	f7ff fd74 	bl	8001270 <fix16_from_float>
 8001788:	0003      	movs	r3, r0
 800178a:	647b      	str	r3, [r7, #68]	; 0x44
  const fix16_t Kd = fix16_from_float(200);
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <main+0x2e4>)
 800178e:	1c18      	adds	r0, r3, #0
 8001790:	f7ff fd6e 	bl	8001270 <fix16_from_float>
 8001794:	0003      	movs	r3, r0
 8001796:	643b      	str	r3, [r7, #64]	; 0x40
  const fix16_t Kp_s = fix16_from_float(5);
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <main+0x2e8>)
 800179a:	1c18      	adds	r0, r3, #0
 800179c:	f7ff fd68 	bl	8001270 <fix16_from_float>
 80017a0:	0003      	movs	r3, r0
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const fix16_t Ki_s = fix16_from_float(0.1);
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <main+0x2ec>)
 80017a6:	1c18      	adds	r0, r3, #0
 80017a8:	f7ff fd62 	bl	8001270 <fix16_from_float>
 80017ac:	0003      	movs	r3, r0
 80017ae:	63bb      	str	r3, [r7, #56]	; 0x38
  const fix16_t Kd_s = fix16_from_float(0.00);
 80017b0:	2300      	movs	r3, #0
 80017b2:	1c18      	adds	r0, r3, #0
 80017b4:	f7ff fd5c 	bl	8001270 <fix16_from_float>
 80017b8:	0003      	movs	r3, r0
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34

  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	482f      	ldr	r0, [pc, #188]	; (8001880 <main+0x2f0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	0019      	movs	r1, r3
 80017c6:	f001 ffaf 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017ca:	23a0      	movs	r3, #160	; 0xa0
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	0018      	movs	r0, r3
 80017d4:	f001 ffa8 	bl	8003728 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4828      	ldr	r0, [pc, #160]	; (8001880 <main+0x2f0>)
 80017de:	2201      	movs	r2, #1
 80017e0:	0019      	movs	r1, r3
 80017e2:	f001 ffa1 	bl	8003728 <HAL_GPIO_WritePin>
  waitUntilStop();
 80017e6:	f7ff fe85 	bl	80014f4 <waitUntilStop>
  TIM3->CCR1 = 100;
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <main+0x2dc>)
 80017ec:	2264      	movs	r2, #100	; 0x64
 80017ee:	635a      	str	r2, [r3, #52]	; 0x34

  spiGet(WHO_AM_I, rx, 1);
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	2201      	movs	r2, #1
 80017f4:	0019      	movs	r1, r3
 80017f6:	2075      	movs	r0, #117	; 0x75
 80017f8:	f7ff fde4 	bl	80013c4 <spiGet>
  printf("WHO_AM_I: %d\r\n", rx[0]);
 80017fc:	197b      	adds	r3, r7, r5
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	001a      	movs	r2, r3
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <main+0x2f4>)
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f005 f840 	bl	800688c <iprintf>
  HAL_Delay(1000);
 800180c:	23fa      	movs	r3, #250	; 0xfa
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	0018      	movs	r0, r3
 8001812:	f001 f8ad 	bl	8002970 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  start = HAL_GetTick();
 8001816:	f001 f8a1 	bl	800295c <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	2288      	movs	r2, #136	; 0x88
 800181e:	18ba      	adds	r2, r7, r2
 8001820:	6013      	str	r3, [r2, #0]

	  pos1 = pos2;
 8001822:	2098      	movs	r0, #152	; 0x98
 8001824:	183b      	adds	r3, r7, r0
 8001826:	21b6      	movs	r1, #182	; 0xb6
 8001828:	187a      	adds	r2, r7, r1
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	801a      	strh	r2, [r3, #0]
	  pos2 = TIM1 -> CNT;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <main+0x2f8>)
 8001830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001832:	187b      	adds	r3, r7, r1
 8001834:	801a      	strh	r2, [r3, #0]
	  diff = pos2 - pos1;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	183b      	adds	r3, r7, r0
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	b29a      	uxth	r2, r3
 8001842:	21b4      	movs	r1, #180	; 0xb4
 8001844:	187b      	adds	r3, r7, r1
 8001846:	801a      	strh	r2, [r3, #0]
	  if (diff < 0) diff += 65536;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2200      	movs	r2, #0
 800184c:	5e9b      	ldrsh	r3, [r3, r2]
 800184e:	2b00      	cmp	r3, #0
 8001850:	da1c      	bge.n	800188c <main+0x2fc>
 8001852:	22b4      	movs	r2, #180	; 0xb4
 8001854:	18bb      	adds	r3, r7, r2
 8001856:	18ba      	adds	r2, r7, r2
 8001858:	8812      	ldrh	r2, [r2, #0]
 800185a:	801a      	strh	r2, [r3, #0]
 800185c:	e016      	b.n	800188c <main+0x2fc>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	20000098 	.word	0x20000098
 8001864:	20000148 	.word	0x20000148
 8001868:	080077b8 	.word	0x080077b8
 800186c:	40000400 	.word	0x40000400
 8001870:	42f00000 	.word	0x42f00000
 8001874:	43480000 	.word	0x43480000
 8001878:	40a00000 	.word	0x40a00000
 800187c:	3dcccccd 	.word	0x3dcccccd
 8001880:	50000400 	.word	0x50000400
 8001884:	080077c0 	.word	0x080077c0
 8001888:	40012c00 	.word	0x40012c00

	  spiGet(ACCEL_DATA_X1, rx, 6);
 800188c:	2428      	movs	r4, #40	; 0x28
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2206      	movs	r2, #6
 8001892:	0019      	movs	r1, r3
 8001894:	201f      	movs	r0, #31
 8001896:	f7ff fd95 	bl	80013c4 <spiGet>

	  a_i[0] = (rx[0] << 8) | rx[1];
 800189a:	193b      	adds	r3, r7, r4
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	4313      	orrs	r3, r2
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	2120      	movs	r1, #32
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	801a      	strh	r2, [r3, #0]
	  a_i[1] = (rx[2] << 8) | rx[3];
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	789b      	ldrb	r3, [r3, #2]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	78db      	ldrb	r3, [r3, #3]
 80018be:	b21b      	sxth	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	805a      	strh	r2, [r3, #2]
	  a_i[2] = (rx[4] << 8) | rx[5];
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	795b      	ldrb	r3, [r3, #5]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b21a      	sxth	r2, r3
 80018da:	000d      	movs	r5, r1
 80018dc:	197b      	adds	r3, r7, r5
 80018de:	809a      	strh	r2, [r3, #4]

	  a_f[0] = fix16_mul(fix16_from_int(a_i[0]), accFactor);
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	2200      	movs	r2, #0
 80018e4:	5e9b      	ldrsh	r3, [r3, r2]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff fc92 	bl	8001210 <fix16_from_int>
 80018ec:	0002      	movs	r2, r0
 80018ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	f7ff fa46 	bl	8000d84 <fix16_mul>
 80018f8:	0002      	movs	r2, r0
 80018fa:	2614      	movs	r6, #20
 80018fc:	19bb      	adds	r3, r7, r6
 80018fe:	601a      	str	r2, [r3, #0]
	  a_f[1] = fix16_mul(fix16_from_int(a_i[1]), accFactor);
 8001900:	197b      	adds	r3, r7, r5
 8001902:	2202      	movs	r2, #2
 8001904:	5e9b      	ldrsh	r3, [r3, r2]
 8001906:	0018      	movs	r0, r3
 8001908:	f7ff fc82 	bl	8001210 <fix16_from_int>
 800190c:	0002      	movs	r2, r0
 800190e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001910:	0019      	movs	r1, r3
 8001912:	0010      	movs	r0, r2
 8001914:	f7ff fa36 	bl	8000d84 <fix16_mul>
 8001918:	0002      	movs	r2, r0
 800191a:	19bb      	adds	r3, r7, r6
 800191c:	605a      	str	r2, [r3, #4]
	  a_f[2] = fix16_mul(fix16_from_int(a_i[2]), accFactor);
 800191e:	197b      	adds	r3, r7, r5
 8001920:	2204      	movs	r2, #4
 8001922:	5e9b      	ldrsh	r3, [r3, r2]
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff fc73 	bl	8001210 <fix16_from_int>
 800192a:	0002      	movs	r2, r0
 800192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800192e:	0019      	movs	r1, r3
 8001930:	0010      	movs	r0, r2
 8001932:	f7ff fa27 	bl	8000d84 <fix16_mul>
 8001936:	0002      	movs	r2, r0
 8001938:	0035      	movs	r5, r6
 800193a:	197b      	adds	r3, r7, r5
 800193c:	609a      	str	r2, [r3, #8]

	  spiGet(GYRO_DATA_X1, rx, 6);
 800193e:	0021      	movs	r1, r4
 8001940:	000c      	movs	r4, r1
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2206      	movs	r2, #6
 8001946:	0019      	movs	r1, r3
 8001948:	2025      	movs	r0, #37	; 0x25
 800194a:	f7ff fd3b 	bl	80013c4 <spiGet>

	  g_i[0] = (rx[0] << 8) | rx[1];
 800194e:	0021      	movs	r1, r4
 8001950:	187b      	adds	r3, r7, r1
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	187b      	adds	r3, r7, r1
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21a      	sxth	r2, r3
 8001962:	200c      	movs	r0, #12
 8001964:	183b      	adds	r3, r7, r0
 8001966:	801a      	strh	r2, [r3, #0]
	  g_i[1] = (rx[2] << 8) | rx[3];
 8001968:	187b      	adds	r3, r7, r1
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21a      	sxth	r2, r3
 8001970:	187b      	adds	r3, r7, r1
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	b21b      	sxth	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	b21a      	sxth	r2, r3
 800197a:	183b      	adds	r3, r7, r0
 800197c:	805a      	strh	r2, [r3, #2]
	  g_i[2] = (rx[4] << 8) | rx[5];
 800197e:	187b      	adds	r3, r7, r1
 8001980:	791b      	ldrb	r3, [r3, #4]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	b21a      	sxth	r2, r3
 8001986:	187b      	adds	r3, r7, r1
 8001988:	795b      	ldrb	r3, [r3, #5]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21a      	sxth	r2, r3
 8001990:	0004      	movs	r4, r0
 8001992:	193b      	adds	r3, r7, r4
 8001994:	809a      	strh	r2, [r3, #4]

	  g_f[0] = fix16_mul(fix16_from_int(g_i[0]), gyrFactor);
 8001996:	193b      	adds	r3, r7, r4
 8001998:	2200      	movs	r2, #0
 800199a:	5e9b      	ldrsh	r3, [r3, r2]
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fc37 	bl	8001210 <fix16_from_int>
 80019a2:	0002      	movs	r2, r0
 80019a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a6:	0019      	movs	r1, r3
 80019a8:	0010      	movs	r0, r2
 80019aa:	f7ff f9eb 	bl	8000d84 <fix16_mul>
 80019ae:	0002      	movs	r2, r0
 80019b0:	003b      	movs	r3, r7
 80019b2:	601a      	str	r2, [r3, #0]
	  g_f[1] = fix16_mul(fix16_from_int(g_i[1]), gyrFactor);
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2202      	movs	r2, #2
 80019b8:	5e9b      	ldrsh	r3, [r3, r2]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7ff fc28 	bl	8001210 <fix16_from_int>
 80019c0:	0002      	movs	r2, r0
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	0019      	movs	r1, r3
 80019c6:	0010      	movs	r0, r2
 80019c8:	f7ff f9dc 	bl	8000d84 <fix16_mul>
 80019cc:	0002      	movs	r2, r0
 80019ce:	003b      	movs	r3, r7
 80019d0:	605a      	str	r2, [r3, #4]
	  g_f[2] = fix16_mul(fix16_from_int(g_i[2]), gyrFactor);
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	2204      	movs	r2, #4
 80019d6:	5e9b      	ldrsh	r3, [r3, r2]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff fc19 	bl	8001210 <fix16_from_int>
 80019de:	0002      	movs	r2, r0
 80019e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e2:	0019      	movs	r1, r3
 80019e4:	0010      	movs	r0, r2
 80019e6:	f7ff f9cd 	bl	8000d84 <fix16_mul>
 80019ea:	0002      	movs	r2, r0
 80019ec:	003b      	movs	r3, r7
 80019ee:	609a      	str	r2, [r3, #8]

	  prevAngle = angle;
 80019f0:	23b0      	movs	r3, #176	; 0xb0
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2294      	movs	r2, #148	; 0x94
 80019f8:	18ba      	adds	r2, r7, r2
 80019fa:	6013      	str	r3, [r2, #0]
	  accAngle = fix16_atan2(-a_f[0], -a_f[1]);
 80019fc:	197b      	adds	r3, r7, r5
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	425a      	negs	r2, r3
 8001a02:	197b      	adds	r3, r7, r5
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	425b      	negs	r3, r3
 8001a08:	0019      	movs	r1, r3
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	f7ff fb84 	bl	8001118 <fix16_atan2>
 8001a10:	0003      	movs	r3, r0
 8001a12:	248c      	movs	r4, #140	; 0x8c
 8001a14:	193a      	adds	r2, r7, r4
 8001a16:	6013      	str	r3, [r2, #0]
	  accAngle = rad2deg(accAngle);
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fd8d 	bl	800153c <rad2deg>
 8001a22:	0003      	movs	r3, r0
 8001a24:	193a      	adds	r2, r7, r4
 8001a26:	6013      	str	r3, [r2, #0]
	  accAngle = fix16_sub(accAngle, fix16_from_float(1.5));
 8001a28:	23ff      	movs	r3, #255	; 0xff
 8001a2a:	059b      	lsls	r3, r3, #22
 8001a2c:	1c18      	adds	r0, r3, #0
 8001a2e:	f7ff fc1f 	bl	8001270 <fix16_from_float>
 8001a32:	0002      	movs	r2, r0
 8001a34:	193b      	adds	r3, r7, r4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0011      	movs	r1, r2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff f985 	bl	8000d4a <fix16_sub>
 8001a40:	0003      	movs	r3, r0
 8001a42:	193a      	adds	r2, r7, r4
 8001a44:	6013      	str	r3, [r2, #0]

	  if (firstRun){
 8001a46:	239b      	movs	r3, #155	; 0x9b
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00a      	beq.n	8001a66 <main+0x4d6>
		  gyrAngle = accAngle;
 8001a50:	228c      	movs	r2, #140	; 0x8c
 8001a52:	18bb      	adds	r3, r7, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2190      	movs	r1, #144	; 0x90
 8001a58:	1879      	adds	r1, r7, r1
 8001a5a:	600b      	str	r3, [r1, #0]
		  angle = accAngle;
 8001a5c:	18bb      	adds	r3, r7, r2
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	22b0      	movs	r2, #176	; 0xb0
 8001a62:	18ba      	adds	r2, r7, r2
 8001a64:	6013      	str	r3, [r2, #0]
	  }

	  gyrAngle = fix16_add(angle, fix16_mul(-g_f[2], fix16_div(fix16_from_int(dt), fix16_from_int(1000))));
 8001a66:	003b      	movs	r3, r7
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	425c      	negs	r4, r3
 8001a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff fbce 	bl	8001210 <fix16_from_int>
 8001a74:	0005      	movs	r5, r0
 8001a76:	23fa      	movs	r3, #250	; 0xfa
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fbc8 	bl	8001210 <fix16_from_int>
 8001a80:	0003      	movs	r3, r0
 8001a82:	0019      	movs	r1, r3
 8001a84:	0028      	movs	r0, r5
 8001a86:	f7ff f9d4 	bl	8000e32 <fix16_div>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff f978 	bl	8000d84 <fix16_mul>
 8001a94:	0002      	movs	r2, r0
 8001a96:	25b0      	movs	r5, #176	; 0xb0
 8001a98:	197b      	adds	r3, r7, r5
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0011      	movs	r1, r2
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff f936 	bl	8000d10 <fix16_add>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	2290      	movs	r2, #144	; 0x90
 8001aa8:	18b9      	adds	r1, r7, r2
 8001aaa:	600b      	str	r3, [r1, #0]

	  angle = fix16_add(fix16_mul(alpha, gyrAngle), fix16_mul(fix16_sub(fix16_one, alpha), accAngle));
 8001aac:	18bb      	adds	r3, r7, r2
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff f965 	bl	8000d84 <fix16_mul>
 8001aba:	0004      	movs	r4, r0
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	025b      	lsls	r3, r3, #9
 8001ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff f940 	bl	8000d4a <fix16_sub>
 8001aca:	0002      	movs	r2, r0
 8001acc:	238c      	movs	r3, #140	; 0x8c
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	f7ff f955 	bl	8000d84 <fix16_mul>
 8001ada:	0003      	movs	r3, r0
 8001adc:	0019      	movs	r1, r3
 8001ade:	0020      	movs	r0, r4
 8001ae0:	f7ff f916 	bl	8000d10 <fix16_add>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	197a      	adds	r2, r7, r5
 8001ae8:	6013      	str	r3, [r2, #0]


	  //HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);

	  error = angle;
 8001aea:	197b      	adds	r3, r7, r5
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
	  errorDiff = fix16_sub(angle, prevAngle);
 8001af0:	2494      	movs	r4, #148	; 0x94
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	197b      	adds	r3, r7, r5
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0011      	movs	r1, r2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff f924 	bl	8000d4a <fix16_sub>
 8001b02:	0003      	movs	r3, r0
 8001b04:	677b      	str	r3, [r7, #116]	; 0x74
	  errorInt += error;
 8001b06:	26a4      	movs	r6, #164	; 0xa4
 8001b08:	19bb      	adds	r3, r7, r6
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0e:	18d3      	adds	r3, r2, r3
 8001b10:	19ba      	adds	r2, r7, r6
 8001b12:	6013      	str	r3, [r2, #0]
	  prevAngle = angle;
 8001b14:	197b      	adds	r3, r7, r5
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	193a      	adds	r2, r7, r4
 8001b1a:	6013      	str	r3, [r2, #0]

	  velocity = fix16_div(fix16_from_int(diff), fix16_from_int(200));
 8001b1c:	23b4      	movs	r3, #180	; 0xb4
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	5e9b      	ldrsh	r3, [r3, r2]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff fb73 	bl	8001210 <fix16_from_int>
 8001b2a:	0004      	movs	r4, r0
 8001b2c:	20c8      	movs	r0, #200	; 0xc8
 8001b2e:	f7ff fb6f 	bl	8001210 <fix16_from_int>
 8001b32:	0003      	movs	r3, r0
 8001b34:	0019      	movs	r1, r3
 8001b36:	0020      	movs	r0, r4
 8001b38:	f7ff f97b 	bl	8000e32 <fix16_div>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	673b      	str	r3, [r7, #112]	; 0x70
	  velocity = fix16_mul(velocity, fix16_from_int(1000/dt));
 8001b40:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b42:	23fa      	movs	r3, #250	; 0xfa
 8001b44:	0098      	lsls	r0, r3, #2
 8001b46:	f7fe fadb 	bl	8000100 <__udivsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fb5f 	bl	8001210 <fix16_from_int>
 8001b52:	0002      	movs	r2, r0
 8001b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b56:	0011      	movs	r1, r2
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff f913 	bl	8000d84 <fix16_mul>
 8001b5e:	0003      	movs	r3, r0
 8001b60:	673b      	str	r3, [r7, #112]	; 0x70

	  velocityError = velocity;
 8001b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b64:	66bb      	str	r3, [r7, #104]	; 0x68
	  velocityErrorDiff = fix16_sub(velocityError, prevVelocityError);
 8001b66:	249c      	movs	r4, #156	; 0x9c
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6e:	0011      	movs	r1, r2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff f8ea 	bl	8000d4a <fix16_sub>
 8001b76:	0003      	movs	r3, r0
 8001b78:	667b      	str	r3, [r7, #100]	; 0x64
	  velocityErrorInt += velocityError;
 8001b7a:	25a0      	movs	r5, #160	; 0xa0
 8001b7c:	197b      	adds	r3, r7, r5
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b82:	18d3      	adds	r3, r2, r3
 8001b84:	197a      	adds	r2, r7, r5
 8001b86:	6013      	str	r3, [r2, #0]
	  prevVelocityError = velocityError;
 8001b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b8a:	193a      	adds	r2, r7, r4
 8001b8c:	6013      	str	r3, [r2, #0]
//
//	  controlSignal = fix16_mul(controlSignal, fix16_from_float(100 / 36.0));
//	  controlSignal = MAX(MIN(controlSignal, fix16_from_int(100)), fix16_from_int(-100));
//	  controlSignal = fix16_to_int(controlSignal);

	  angleControl = fix16_add(fix16_add(fix16_mul(Kp, error), fix16_mul(Ki, errorInt)), fix16_mul(Kd, errorDiff));
 8001b8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff f8f5 	bl	8000d84 <fix16_mul>
 8001b9a:	0004      	movs	r4, r0
 8001b9c:	19bb      	adds	r3, r7, r6
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff f8ed 	bl	8000d84 <fix16_mul>
 8001baa:	0003      	movs	r3, r0
 8001bac:	0019      	movs	r1, r3
 8001bae:	0020      	movs	r0, r4
 8001bb0:	f7ff f8ae 	bl	8000d10 <fix16_add>
 8001bb4:	0004      	movs	r4, r0
 8001bb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bba:	0011      	movs	r1, r2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff f8e1 	bl	8000d84 <fix16_mul>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	f7ff f8a2 	bl	8000d10 <fix16_add>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
	  velocityControl = fix16_add(fix16_add(fix16_mul(Kp_s, velocityError), fix16_mul(Ki_s, velocityErrorInt)), fix16_mul(Kd_s, velocityErrorDiff));
 8001bd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff f8d4 	bl	8000d84 <fix16_mul>
 8001bdc:	0004      	movs	r4, r0
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be4:	0011      	movs	r1, r2
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff f8cc 	bl	8000d84 <fix16_mul>
 8001bec:	0003      	movs	r3, r0
 8001bee:	0019      	movs	r1, r3
 8001bf0:	0020      	movs	r0, r4
 8001bf2:	f7ff f88d 	bl	8000d10 <fix16_add>
 8001bf6:	0004      	movs	r4, r0
 8001bf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff f8c0 	bl	8000d84 <fix16_mul>
 8001c04:	0003      	movs	r3, r0
 8001c06:	0019      	movs	r1, r3
 8001c08:	0020      	movs	r0, r4
 8001c0a:	f7ff f881 	bl	8000d10 <fix16_add>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60

	  control = fix16_add(angleControl, -velocityControl);
 8001c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c14:	425a      	negs	r2, r3
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c18:	0011      	movs	r1, r2
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff f878 	bl	8000d10 <fix16_add>
 8001c20:	0003      	movs	r3, r0
 8001c22:	2480      	movs	r4, #128	; 0x80
 8001c24:	193a      	adds	r2, r7, r4
 8001c26:	6013      	str	r3, [r2, #0]

	  control = MAX(MIN(control, fix16_from_int(100)), fix16_from_int(-100));
 8001c28:	2064      	movs	r0, #100	; 0x64
 8001c2a:	f7ff faf1 	bl	8001210 <fix16_from_int>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4293      	cmp	r3, r2
 8001c36:	db04      	blt.n	8001c42 <main+0x6b2>
 8001c38:	2064      	movs	r0, #100	; 0x64
 8001c3a:	f7ff fae9 	bl	8001210 <fix16_from_int>
 8001c3e:	0004      	movs	r4, r0
 8001c40:	e002      	b.n	8001c48 <main+0x6b8>
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	681c      	ldr	r4, [r3, #0]
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	425b      	negs	r3, r3
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fadf 	bl	8001210 <fix16_from_int>
 8001c52:	0003      	movs	r3, r0
 8001c54:	429c      	cmp	r4, r3
 8001c56:	dd11      	ble.n	8001c7c <main+0x6ec>
 8001c58:	2064      	movs	r0, #100	; 0x64
 8001c5a:	f7ff fad9 	bl	8001210 <fix16_from_int>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4293      	cmp	r3, r2
 8001c68:	db04      	blt.n	8001c74 <main+0x6e4>
 8001c6a:	2064      	movs	r0, #100	; 0x64
 8001c6c:	f7ff fad0 	bl	8001210 <fix16_from_int>
 8001c70:	0003      	movs	r3, r0
 8001c72:	e009      	b.n	8001c88 <main+0x6f8>
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	e005      	b.n	8001c88 <main+0x6f8>
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	425b      	negs	r3, r3
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff fac5 	bl	8001210 <fix16_from_int>
 8001c86:	0003      	movs	r3, r0
 8001c88:	2480      	movs	r4, #128	; 0x80
 8001c8a:	193a      	adds	r2, r7, r4
 8001c8c:	6013      	str	r3, [r2, #0]
	  controlSignal = fix16_to_int(control);
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff fac8 	bl	8001228 <fix16_to_int>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	67fb      	str	r3, [r7, #124]	; 0x7c

	  controlVelocity = fix16_mul(control, fix16_from_float(100 / 36.0));
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <main+0x8b0>)
 8001c9e:	1c18      	adds	r0, r3, #0
 8001ca0:	f7ff fae6 	bl	8001270 <fix16_from_float>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0011      	movs	r1, r2
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff f869 	bl	8000d84 <fix16_mul>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	66fb      	str	r3, [r7, #108]	; 0x6c

	  if (fix16_sub(fix16_abs(controlVelocity), fix16_abs(velocity)) > 0 && ((sign(controlSignal) == sign(velocity)) || (fix16_abs(velocity) < fix16_from_int(10)))) {
 8001cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fb02 	bl	80012c2 <fix16_abs>
 8001cbe:	0004      	movs	r4, r0
 8001cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7ff fafd 	bl	80012c2 <fix16_abs>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	0019      	movs	r1, r3
 8001ccc:	0020      	movs	r0, r4
 8001cce:	f7ff f83c 	bl	8000d4a <fix16_sub>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	dd26      	ble.n	8001d24 <main+0x794>
 8001cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff fc4d 	bl	8001578 <sign>
 8001cde:	0004      	movs	r4, r0
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fc48 	bl	8001578 <sign>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	429c      	cmp	r4, r3
 8001cec:	d00a      	beq.n	8001d04 <main+0x774>
 8001cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff fae6 	bl	80012c2 <fix16_abs>
 8001cf6:	0004      	movs	r4, r0
 8001cf8:	200a      	movs	r0, #10
 8001cfa:	f7ff fa89 	bl	8001210 <fix16_from_int>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	429c      	cmp	r4, r3
 8001d02:	da0f      	bge.n	8001d24 <main+0x794>
		  pulse = 100 - (controlSignal * (1-2*(controlSignal<0)));
 8001d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d06:	179b      	asrs	r3, r3, #30
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d12:	4353      	muls	r3, r2
 8001d14:	2264      	movs	r2, #100	; 0x64
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	22a8      	movs	r2, #168	; 0xa8
 8001d1a:	18ba      	adds	r2, r7, r2
 8001d1c:	6013      	str	r3, [r2, #0]
		  brakeOff();
 8001d1e:	f7ff fbdb 	bl	80014d8 <brakeOff>
 8001d22:	e005      	b.n	8001d30 <main+0x7a0>
	  } else {
		  pulse = 100;
 8001d24:	2364      	movs	r3, #100	; 0x64
 8001d26:	22a8      	movs	r2, #168	; 0xa8
 8001d28:	18ba      	adds	r2, r7, r2
 8001d2a:	6013      	str	r3, [r2, #0]
		  brakeOn();
 8001d2c:	f7ff fbc6 	bl	80014bc <brakeOn>
	  }

	  if (fix16_abs(velocity) < fix16_from_int(10)) {
 8001d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff fac5 	bl	80012c2 <fix16_abs>
 8001d38:	0004      	movs	r4, r0
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	f7ff fa68 	bl	8001210 <fix16_from_int>
 8001d40:	0003      	movs	r3, r0
 8001d42:	429c      	cmp	r4, r3
 8001d44:	da12      	bge.n	8001d6c <main+0x7dc>
		  dir = !sign(controlSignal);
 8001d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff fc15 	bl	8001578 <sign>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	425a      	negs	r2, r3
 8001d52:	4153      	adcs	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	2187      	movs	r1, #135	; 0x87
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, dir);
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4837      	ldr	r0, [pc, #220]	; (8001e44 <main+0x8b4>)
 8001d66:	0019      	movs	r1, r3
 8001d68:	f001 fcde 	bl	8003728 <HAL_GPIO_WritePin>
	  }

	  if (fix16_abs(angle) > fix16_from_int(25)) {
 8001d6c:	23b0      	movs	r3, #176	; 0xb0
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff faa5 	bl	80012c2 <fix16_abs>
 8001d78:	0004      	movs	r4, r0
 8001d7a:	2019      	movs	r0, #25
 8001d7c:	f7ff fa48 	bl	8001210 <fix16_from_int>
 8001d80:	0003      	movs	r3, r0
 8001d82:	429c      	cmp	r4, r3
 8001d84:	dd07      	ble.n	8001d96 <main+0x806>
		  pulse = 100;
 8001d86:	2364      	movs	r3, #100	; 0x64
 8001d88:	22a8      	movs	r2, #168	; 0xa8
 8001d8a:	18ba      	adds	r2, r7, r2
 8001d8c:	6013      	str	r3, [r2, #0]
		  errorInt = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	22a4      	movs	r2, #164	; 0xa4
 8001d92:	18ba      	adds	r2, r7, r2
 8001d94:	6013      	str	r3, [r2, #0]
	  }

	  TIM3->CCR1 = pulse;
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <main+0x8b8>)
 8001d98:	24a8      	movs	r4, #168	; 0xa8
 8001d9a:	193a      	adds	r2, r7, r4
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
//	  printf16(controlSpeed, 2);
//	  pn();


	  //TIM3->CCR1 = 80;
	  printf("%d, ", HAL_GetTick());
 8001da0:	f000 fddc 	bl	800295c <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <main+0x8bc>)
 8001da8:	0011      	movs	r1, r2
 8001daa:	0018      	movs	r0, r3
 8001dac:	f004 fd6e 	bl	800688c <iprintf>
	  printf16(angleControl, 2);
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	2102      	movs	r1, #2
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fb3d 	bl	8001434 <printf16>
	  pc();
 8001dba:	f7ff fb73 	bl	80014a4 <pc>
	  printf16(velocityControl, 2);
 8001dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fb36 	bl	8001434 <printf16>
	  pc();
 8001dc8:	f7ff fb6c 	bl	80014a4 <pc>
	  printf16(control, 2);
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff fb2d 	bl	8001434 <printf16>
	  pc();
 8001dda:	f7ff fb63 	bl	80014a4 <pc>
	  printf16(angle, 2);
 8001dde:	23b0      	movs	r3, #176	; 0xb0
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2102      	movs	r1, #2
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff fb24 	bl	8001434 <printf16>
	  pc();
 8001dec:	f7ff fb5a 	bl	80014a4 <pc>
	  printf("%d, ", pulse);
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <main+0x8bc>)
 8001df6:	0011      	movs	r1, r2
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f004 fd47 	bl	800688c <iprintf>
	  pn();
 8001dfe:	f7ff fb45 	bl	800148c <pn>

	  end = HAL_GetTick();
 8001e02:	f000 fdab 	bl	800295c <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	22ac      	movs	r2, #172	; 0xac
 8001e0a:	18ba      	adds	r2, r7, r2
 8001e0c:	6013      	str	r3, [r2, #0]
	  while (end-start < dt){
 8001e0e:	e008      	b.n	8001e22 <main+0x892>
		  HAL_Delay(0);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 fdad 	bl	8002970 <HAL_Delay>
		  end = HAL_GetTick();
 8001e16:	f000 fda1 	bl	800295c <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	22ac      	movs	r2, #172	; 0xac
 8001e1e:	18ba      	adds	r2, r7, r2
 8001e20:	6013      	str	r3, [r2, #0]
	  while (end-start < dt){
 8001e22:	23ac      	movs	r3, #172	; 0xac
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2388      	movs	r3, #136	; 0x88
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d8ec      	bhi.n	8001e10 <main+0x880>
	  }

	  firstRun = 0;
 8001e36:	239b      	movs	r3, #155	; 0x9b
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
	  start = HAL_GetTick();
 8001e3e:	e4ea      	b.n	8001816 <main+0x286>
 8001e40:	4031c71c 	.word	0x4031c71c
 8001e44:	50000400 	.word	0x50000400
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	080077d0 	.word	0x080077d0

08001e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b093      	sub	sp, #76	; 0x4c
 8001e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e56:	2414      	movs	r4, #20
 8001e58:	193b      	adds	r3, r7, r4
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	2334      	movs	r3, #52	; 0x34
 8001e5e:	001a      	movs	r2, r3
 8001e60:	2100      	movs	r1, #0
 8001e62:	f004 fd0b 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	0018      	movs	r0, r3
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	001a      	movs	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f004 fd04 	bl	800687c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fc73 	bl	8003764 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	2202      	movs	r2, #2
 8001e82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e84:	193b      	adds	r3, r7, r4
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	0052      	lsls	r2, r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e98:	193b      	adds	r3, r7, r4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9e:	193b      	adds	r3, r7, r4
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f001 fcab 	bl	80037fc <HAL_RCC_OscConfig>
 8001ea6:	1e03      	subs	r3, r0, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001eaa:	f000 fa31 	bl	8002310 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2100      	movs	r1, #0
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f001 ffac 	bl	8003e28 <HAL_RCC_ClockConfig>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ed4:	f000 fa1c 	bl	8002310 <Error_Handler>
  }
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b013      	add	sp, #76	; 0x4c
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	0018      	movs	r0, r3
 8001eea:	230c      	movs	r3, #12
 8001eec:	001a      	movs	r2, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	f004 fcc4 	bl	800687c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001ef6:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <MX_ADC1_Init+0xd0>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	05d2      	lsls	r2, r2, #23
 8001f00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f16:	2204      	movs	r2, #4
 8001f18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f34:	2220      	movs	r2, #32
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f48:	222c      	movs	r2, #44	; 0x2c
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f62:	223c      	movs	r2, #60	; 0x3c
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f70:	0018      	movs	r0, r3
 8001f72:	f000 fe07 	bl	8002b84 <HAL_ADC_Init>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d001      	beq.n	8001f7e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001f7a:	f000 f9c9 	bl	8002310 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f90:	1d3a      	adds	r2, r7, #4
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_ADC1_Init+0xcc>)
 8001f94:	0011      	movs	r1, r2
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 ffd6 	bl	8002f48 <HAL_ADC_ConfigChannel>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001fa0:	f000 f9b6 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b004      	add	sp, #16
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200000e4 	.word	0x200000e4
 8001fb0:	40012400 	.word	0x40012400

08001fb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <MX_SPI1_Init+0x78>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fc0:	2282      	movs	r2, #130	; 0x82
 8001fc2:	0052      	lsls	r2, r2, #1
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fce:	22e0      	movs	r2, #224	; 0xe0
 8001fd0:	00d2      	lsls	r2, r2, #3
 8001fd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_SPI1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_SPI1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_SPI1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_SPI1_Init+0x74>)
 8002002:	2207      	movs	r2, #7
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_SPI1_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_SPI1_Init+0x74>)
 800200e:	2208      	movs	r2, #8
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <MX_SPI1_Init+0x74>)
 8002014:	0018      	movs	r0, r3
 8002016:	f002 f9d7 	bl	80043c8 <HAL_SPI_Init>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800201e:	f000 f977 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000194 	.word	0x20000194
 800202c:	40013000 	.word	0x40013000

08002030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08d      	sub	sp, #52	; 0x34
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002036:	240c      	movs	r4, #12
 8002038:	193b      	adds	r3, r7, r4
 800203a:	0018      	movs	r0, r3
 800203c:	2324      	movs	r3, #36	; 0x24
 800203e:	001a      	movs	r2, r3
 8002040:	2100      	movs	r1, #0
 8002042:	f004 fc1b 	bl	800687c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002046:	003b      	movs	r3, r7
 8002048:	0018      	movs	r0, r3
 800204a:	230c      	movs	r3, #12
 800204c:	001a      	movs	r2, r3
 800204e:	2100      	movs	r1, #0
 8002050:	f004 fc14 	bl	800687c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002054:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <MX_TIM1_Init+0xc8>)
 8002056:	4a29      	ldr	r2, [pc, #164]	; (80020fc <MX_TIM1_Init+0xcc>)
 8002058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <MX_TIM1_Init+0xc8>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <MX_TIM1_Init+0xc8>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MX_TIM1_Init+0xc8>)
 8002068:	4a25      	ldr	r2, [pc, #148]	; (8002100 <MX_TIM1_Init+0xd0>)
 800206a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <MX_TIM1_Init+0xc8>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <MX_TIM1_Init+0xc8>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_TIM1_Init+0xc8>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800207e:	0021      	movs	r1, r4
 8002080:	187b      	adds	r3, r7, r1
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002086:	187b      	adds	r3, r7, r1
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800208c:	187b      	adds	r3, r7, r1
 800208e:	2201      	movs	r2, #1
 8002090:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002092:	187b      	adds	r3, r7, r1
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002098:	187b      	adds	r3, r7, r1
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	2201      	movs	r2, #1
 80020a8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	2200      	movs	r2, #0
 80020b4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020b6:	187a      	adds	r2, r7, r1
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <MX_TIM1_Init+0xc8>)
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f003 f9b7 	bl	8005430 <HAL_TIM_Encoder_Init>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80020c6:	f000 f923 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ca:	003b      	movs	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d0:	003b      	movs	r3, r7
 80020d2:	2200      	movs	r2, #0
 80020d4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	003b      	movs	r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020dc:	003a      	movs	r2, r7
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_TIM1_Init+0xc8>)
 80020e0:	0011      	movs	r1, r2
 80020e2:	0018      	movs	r0, r3
 80020e4:	f003 ff14 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	1e03      	subs	r3, r0, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80020ec:	f000 f910 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b00d      	add	sp, #52	; 0x34
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	20000148 	.word	0x20000148
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	0000ffff 	.word	0x0000ffff

08002104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210a:	231c      	movs	r3, #28
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	0018      	movs	r0, r3
 8002110:	230c      	movs	r3, #12
 8002112:	001a      	movs	r2, r3
 8002114:	2100      	movs	r1, #0
 8002116:	f004 fbb1 	bl	800687c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211a:	003b      	movs	r3, r7
 800211c:	0018      	movs	r0, r3
 800211e:	231c      	movs	r3, #28
 8002120:	001a      	movs	r2, r3
 8002122:	2100      	movs	r1, #0
 8002124:	f004 fbaa 	bl	800687c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <MX_TIM3_Init+0xb8>)
 800212a:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <MX_TIM3_Init+0xbc>)
 800212c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <MX_TIM3_Init+0xb8>)
 8002130:	2207      	movs	r2, #7
 8002132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <MX_TIM3_Init+0xb8>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <MX_TIM3_Init+0xb8>)
 800213c:	2263      	movs	r2, #99	; 0x63
 800213e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <MX_TIM3_Init+0xb8>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <MX_TIM3_Init+0xb8>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_TIM3_Init+0xb8>)
 800214e:	0018      	movs	r0, r3
 8002150:	f003 f83e 	bl	80051d0 <HAL_TIM_PWM_Init>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d001      	beq.n	800215c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002158:	f000 f8da 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	211c      	movs	r1, #28
 800215e:	187b      	adds	r3, r7, r1
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800216a:	187a      	adds	r2, r7, r1
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <MX_TIM3_Init+0xb8>)
 800216e:	0011      	movs	r1, r2
 8002170:	0018      	movs	r0, r3
 8002172:	f003 fecd 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800217a:	f000 f8c9 	bl	8002310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217e:	003b      	movs	r3, r7
 8002180:	2260      	movs	r2, #96	; 0x60
 8002182:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002184:	003b      	movs	r3, r7
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218a:	003b      	movs	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002190:	003b      	movs	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002196:	0039      	movs	r1, r7
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_TIM3_Init+0xb8>)
 800219a:	2200      	movs	r2, #0
 800219c:	0018      	movs	r0, r3
 800219e:	f003 fa95 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80021a2:	1e03      	subs	r3, r0, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80021a6:	f000 f8b3 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <MX_TIM3_Init+0xb8>)
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fa0d 	bl	80025cc <HAL_TIM_MspPostInit>

}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b00a      	add	sp, #40	; 0x28
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	20000098 	.word	0x20000098
 80021c0:	40000400 	.word	0x40000400

080021c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <MX_USART2_UART_Init+0x64>)
 80021cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021d0:	22e1      	movs	r2, #225	; 0xe1
 80021d2:	0252      	lsls	r2, r2, #9
 80021d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021ea:	220c      	movs	r2, #12
 80021ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_USART2_UART_Init+0x60>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_USART2_UART_Init+0x60>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MX_USART2_UART_Init+0x60>)
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <MX_USART2_UART_Init+0x60>)
 800220e:	0018      	movs	r0, r3
 8002210:	f003 fee0 	bl	8005fd4 <HAL_UART_Init>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002218:	f000 f87a 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	200001f8 	.word	0x200001f8
 8002228:	40004400 	.word	0x40004400

0800222c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002232:	240c      	movs	r4, #12
 8002234:	193b      	adds	r3, r7, r4
 8002236:	0018      	movs	r0, r3
 8002238:	2314      	movs	r3, #20
 800223a:	001a      	movs	r2, r3
 800223c:	2100      	movs	r1, #0
 800223e:	f004 fb1d 	bl	800687c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <MX_GPIO_Init+0xd8>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <MX_GPIO_Init+0xd8>)
 8002248:	2102      	movs	r1, #2
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <MX_GPIO_Init+0xd8>)
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <MX_GPIO_Init+0xd8>)
 800225c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <MX_GPIO_Init+0xd8>)
 8002260:	2101      	movs	r1, #1
 8002262:	430a      	orrs	r2, r1
 8002264:	635a      	str	r2, [r3, #52]	; 0x34
 8002266:	4b27      	ldr	r3, [pc, #156]	; (8002304 <MX_GPIO_Init+0xd8>)
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BRAKE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8002272:	23c0      	movs	r3, #192	; 0xc0
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4824      	ldr	r0, [pc, #144]	; (8002308 <MX_GPIO_Init+0xdc>)
 8002278:	2200      	movs	r2, #0
 800227a:	0019      	movs	r1, r3
 800227c:	f001 fa54 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CS_Pin, GPIO_PIN_RESET);
 8002280:	4922      	ldr	r1, [pc, #136]	; (800230c <MX_GPIO_Init+0xe0>)
 8002282:	23a0      	movs	r3, #160	; 0xa0
 8002284:	05db      	lsls	r3, r3, #23
 8002286:	2200      	movs	r2, #0
 8002288:	0018      	movs	r0, r3
 800228a:	f001 fa4d 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BRAKE_Pin DIR_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin|DIR_Pin;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	22c0      	movs	r2, #192	; 0xc0
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	193b      	adds	r3, r7, r4
 8002298:	2201      	movs	r2, #1
 800229a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	193b      	adds	r3, r7, r4
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	193b      	adds	r3, r7, r4
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <MX_GPIO_Init+0xdc>)
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	f001 f8d6 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CS_Pin;
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <MX_GPIO_Init+0xe0>)
 80022b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	2201      	movs	r2, #1
 80022be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	193a      	adds	r2, r7, r4
 80022ce:	23a0      	movs	r3, #160	; 0xa0
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	0011      	movs	r1, r2
 80022d4:	0018      	movs	r0, r3
 80022d6:	f001 f8c3 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	2220      	movs	r2, #32
 80022de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	2200      	movs	r2, #0
 80022e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80022ec:	193a      	adds	r2, r7, r4
 80022ee:	23a0      	movs	r3, #160	; 0xa0
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f001 f8b3 	bl	8003460 <HAL_GPIO_Init>

}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b009      	add	sp, #36	; 0x24
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	50000400 	.word	0x50000400
 800230c:	00001010 	.word	0x00001010

08002310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002316:	e7fe      	b.n	8002316 <Error_Handler+0x6>

08002318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_MspInit+0x44>)
 8002320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_MspInit+0x44>)
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_MspInit+0x44>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2201      	movs	r2, #1
 8002330:	4013      	ands	r3, r2
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_MspInit+0x44>)
 8002338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_MspInit+0x44>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0549      	lsls	r1, r1, #21
 8002340:	430a      	orrs	r2, r1
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_MspInit+0x44>)
 8002346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	055b      	lsls	r3, r3, #21
 800234c:	4013      	ands	r3, r2
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b090      	sub	sp, #64	; 0x40
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	232c      	movs	r3, #44	; 0x2c
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	0018      	movs	r0, r3
 800236e:	2314      	movs	r3, #20
 8002370:	001a      	movs	r2, r3
 8002372:	2100      	movs	r1, #0
 8002374:	f004 fa82 	bl	800687c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002378:	2314      	movs	r3, #20
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	0018      	movs	r0, r3
 800237e:	2318      	movs	r3, #24
 8002380:	001a      	movs	r2, r3
 8002382:	2100      	movs	r1, #0
 8002384:	f004 fa7a 	bl	800687c <memset>
  if(hadc->Instance==ADC1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_ADC_MspInit+0xb0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d13a      	bne.n	8002408 <HAL_ADC_MspInit+0xa8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002392:	2114      	movs	r1, #20
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	01d2      	lsls	r2, r2, #7
 800239a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	0018      	movs	r0, r3
 80023a6:	f001 fee9 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80023ae:	f7ff ffaf 	bl	8002310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_ADC_MspInit+0xb4>)
 80023b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_ADC_MspInit+0xb4>)
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0349      	lsls	r1, r1, #13
 80023bc:	430a      	orrs	r2, r1
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_ADC_MspInit+0xb4>)
 80023c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	035b      	lsls	r3, r3, #13
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_ADC_MspInit+0xb4>)
 80023d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_ADC_MspInit+0xb4>)
 80023d4:	2101      	movs	r1, #1
 80023d6:	430a      	orrs	r2, r1
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_ADC_MspInit+0xb4>)
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = BAT_MEAS_Pin;
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	2201      	movs	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2203      	movs	r2, #3
 80023f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80023fa:	187a      	adds	r2, r7, r1
 80023fc:	23a0      	movs	r3, #160	; 0xa0
 80023fe:	05db      	lsls	r3, r3, #23
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f001 f82c 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b010      	add	sp, #64	; 0x40
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40012400 	.word	0x40012400
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	2314      	movs	r3, #20
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	0018      	movs	r0, r3
 8002426:	2314      	movs	r3, #20
 8002428:	001a      	movs	r2, r3
 800242a:	2100      	movs	r1, #0
 800242c:	f004 fa26 	bl	800687c <memset>
  if(hspi->Instance==SPI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_SPI_MspInit+0x8c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d130      	bne.n	800249c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_SPI_MspInit+0x90>)
 800243c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_SPI_MspInit+0x90>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0149      	lsls	r1, r1, #5
 8002444:	430a      	orrs	r2, r1
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_SPI_MspInit+0x90>)
 800244a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	015b      	lsls	r3, r3, #5
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_SPI_MspInit+0x90>)
 8002458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_SPI_MspInit+0x90>)
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	635a      	str	r2, [r3, #52]	; 0x34
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_SPI_MspInit+0x90>)
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	2201      	movs	r2, #1
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_11;
 800246e:	2114      	movs	r1, #20
 8002470:	187b      	adds	r3, r7, r1
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_SPI_MspInit+0x94>)
 8002474:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	187b      	adds	r3, r7, r1
 8002478:	2202      	movs	r2, #2
 800247a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	187b      	adds	r3, r7, r1
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	187a      	adds	r2, r7, r1
 8002490:	23a0      	movs	r3, #160	; 0xa0
 8002492:	05db      	lsls	r3, r3, #23
 8002494:	0011      	movs	r1, r2
 8002496:	0018      	movs	r0, r3
 8002498:	f000 ffe2 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b00a      	add	sp, #40	; 0x28
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013000 	.word	0x40013000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	00000882 	.word	0x00000882

080024b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b08b      	sub	sp, #44	; 0x2c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	2314      	movs	r3, #20
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	0018      	movs	r0, r3
 80024be:	2314      	movs	r3, #20
 80024c0:	001a      	movs	r2, r3
 80024c2:	2100      	movs	r1, #0
 80024c4:	f004 f9da 	bl	800687c <memset>
  if(htim_encoder->Instance==TIM1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2d      	ldr	r2, [pc, #180]	; (8002584 <HAL_TIM_Encoder_MspInit+0xd4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d154      	bne.n	800257c <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024d2:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0109      	lsls	r1, r1, #4
 80024dc:	430a      	orrs	r2, r1
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	2201      	movs	r2, #1
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 800250c:	2102      	movs	r1, #2
 800250e:	430a      	orrs	r2, r1
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800251e:	2114      	movs	r1, #20
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	0052      	lsls	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	000c      	movs	r4, r1
 800252a:	193b      	adds	r3, r7, r4
 800252c:	2202      	movs	r2, #2
 800252e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	193b      	adds	r3, r7, r4
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800253c:	193b      	adds	r3, r7, r4
 800253e:	2202      	movs	r2, #2
 8002540:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	193a      	adds	r2, r7, r4
 8002544:	23a0      	movs	r3, #160	; 0xa0
 8002546:	05db      	lsls	r3, r3, #23
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f000 ff88 	bl	8003460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002550:	0021      	movs	r1, r4
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2208      	movs	r2, #8
 8002556:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	187b      	adds	r3, r7, r1
 800255a:	2202      	movs	r2, #2
 800255c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2201      	movs	r2, #1
 800256e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	187b      	adds	r3, r7, r1
 8002572:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002574:	0019      	movs	r1, r3
 8002576:	0010      	movs	r0, r2
 8002578:	f000 ff72 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b00b      	add	sp, #44	; 0x2c
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40021000 	.word	0x40021000
 800258c:	50000400 	.word	0x50000400

08002590 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_TIM_PWM_MspInit+0x34>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10b      	bne.n	80025ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_TIM_PWM_MspInit+0x38>)
 80025a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_TIM_PWM_MspInit+0x38>)
 80025a8:	2102      	movs	r1, #2
 80025aa:	430a      	orrs	r2, r1
 80025ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_TIM_PWM_MspInit+0x38>)
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	b004      	add	sp, #16
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	230c      	movs	r3, #12
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	0018      	movs	r0, r3
 80025da:	2314      	movs	r3, #20
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f004 f94c 	bl	800687c <memset>
  if(htim->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_MspPostInit+0x70>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_TIM_MspPostInit+0x74>)
 80025f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_TIM_MspPostInit+0x74>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_TIM_MspPostInit+0x74>)
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002606:	210c      	movs	r1, #12
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2202      	movs	r2, #2
 8002612:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2200      	movs	r2, #0
 800261e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2201      	movs	r2, #1
 8002624:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	187a      	adds	r2, r7, r1
 8002628:	23a0      	movs	r3, #160	; 0xa0
 800262a:	05db      	lsls	r3, r3, #23
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f000 ff16 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b008      	add	sp, #32
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40000400 	.word	0x40000400
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	2314      	movs	r3, #20
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	0018      	movs	r0, r3
 8002652:	2314      	movs	r3, #20
 8002654:	001a      	movs	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	f004 f910 	bl	800687c <memset>
  if(huart->Instance==USART2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_UART_MspInit+0x8c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d130      	bne.n	80026c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_UART_MspInit+0x90>)
 8002668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_UART_MspInit+0x90>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	0289      	lsls	r1, r1, #10
 8002670:	430a      	orrs	r2, r1
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_UART_MspInit+0x90>)
 8002676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_UART_MspInit+0x90>)
 8002684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_UART_MspInit+0x90>)
 8002688:	2101      	movs	r1, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_UART_MspInit+0x90>)
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800269a:	2114      	movs	r1, #20
 800269c:	187b      	adds	r3, r7, r1
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	2202      	movs	r2, #2
 80026a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	2201      	movs	r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	187a      	adds	r2, r7, r1
 80026bc:	23a0      	movs	r3, #160	; 0xa0
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fecc 	bl	8003460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b00a      	add	sp, #40	; 0x28
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40004400 	.word	0x40004400
 80026d4:	40021000 	.word	0x40021000

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <NMI_Handler+0x4>

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026fc:	f000 f91c 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e00a      	b.n	800272e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002718:	e000      	b.n	800271c <_read+0x16>
 800271a:	bf00      	nop
 800271c:	0001      	movs	r1, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	60ba      	str	r2, [r7, #8]
 8002724:	b2ca      	uxtb	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3301      	adds	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	dbf0      	blt.n	8002718 <_read+0x12>
	}

return len;
 8002736:	687b      	ldr	r3, [r7, #4]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b006      	add	sp, #24
 800273e:	bd80      	pop	{r7, pc}

08002740 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	return -1;
 8002748:	2301      	movs	r3, #1
 800274a:	425b      	negs	r3, r3
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	0192      	lsls	r2, r2, #6
 8002764:	605a      	str	r2, [r3, #4]
	return 0;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <_isatty>:

int _isatty(int file)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	return 1;
 8002778:	2301      	movs	r3, #1
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}

08002782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
	return 0;
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c8:	f004 f82e 	bl	8006828 <__errno>
 80027cc:	0003      	movs	r3, r0
 80027ce:	220c      	movs	r2, #12
 80027d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	425b      	negs	r3, r3
 80027d6:	e009      	b.n	80027ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	18d2      	adds	r2, r2, r3
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <_sbrk+0x64>)
 80027e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b006      	add	sp, #24
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20002000 	.word	0x20002000
 80027f8:	00000400 	.word	0x00000400
 80027fc:	2000008c 	.word	0x2000008c
 8002800:	20000290 	.word	0x20000290

08002804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002812:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002814:	f7ff fff6 	bl	8002804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <LoopForever+0x6>)
  ldr r1, =_edata
 800281a:	490d      	ldr	r1, [pc, #52]	; (8002850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <LoopForever+0xe>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002830:	4c0a      	ldr	r4, [pc, #40]	; (800285c <LoopForever+0x16>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800283e:	f003 fff9 	bl	8006834 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002842:	f7fe fea5 	bl	8001590 <main>

08002846 <LoopForever>:

LoopForever:
  b LoopForever
 8002846:	e7fe      	b.n	8002846 <LoopForever>
  ldr   r0, =_estack
 8002848:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800284c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002850:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002854:	080079a4 	.word	0x080079a4
  ldr r2, =_sbss
 8002858:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800285c:	20000290 	.word	0x20000290

08002860 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002860:	e7fe      	b.n	8002860 <ADC1_IRQHandler>
	...

08002864 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_Init+0x3c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Init+0x3c>)
 8002876:	2180      	movs	r1, #128	; 0x80
 8002878:	0049      	lsls	r1, r1, #1
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800287e:	2003      	movs	r0, #3
 8002880:	f000 f810 	bl	80028a4 <HAL_InitTick>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d003      	beq.n	8002890 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002888:	1dfb      	adds	r3, r7, #7
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e001      	b.n	8002894 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002890:	f7ff fd42 	bl	8002318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	781b      	ldrb	r3, [r3, #0]
}
 8002898:	0018      	movs	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40022000 	.word	0x40022000

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028ac:	230f      	movs	r3, #15
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_InitTick+0x88>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02b      	beq.n	8002914 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_InitTick+0x8c>)
 80028be:	681c      	ldr	r4, [r3, #0]
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_InitTick+0x88>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	0019      	movs	r1, r3
 80028c6:	23fa      	movs	r3, #250	; 0xfa
 80028c8:	0098      	lsls	r0, r3, #2
 80028ca:	f7fd fc19 	bl	8000100 <__udivsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	0019      	movs	r1, r3
 80028d2:	0020      	movs	r0, r4
 80028d4:	f7fd fc14 	bl	8000100 <__udivsi3>
 80028d8:	0003      	movs	r3, r0
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fdb3 	bl	8003446 <HAL_SYSTICK_Config>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d112      	bne.n	800290a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d80a      	bhi.n	8002900 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	2301      	movs	r3, #1
 80028ee:	425b      	negs	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fd92 	bl	800341c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_InitTick+0x90>)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e00d      	b.n	800291c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002900:	230f      	movs	r3, #15
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e008      	b.n	800291c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800290a:	230f      	movs	r3, #15
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
 8002912:	e003      	b.n	800291c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002914:	230f      	movs	r3, #15
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	781b      	ldrb	r3, [r3, #0]
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b005      	add	sp, #20
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	20000008 	.word	0x20000008
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_IncTick+0x1c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	001a      	movs	r2, r3
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_IncTick+0x20>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	18d2      	adds	r2, r2, r3
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_IncTick+0x20>)
 800294a:	601a      	str	r2, [r3, #0]
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000008 	.word	0x20000008
 8002958:	20000288 	.word	0x20000288

0800295c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  return uwTick;
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <HAL_GetTick+0x10>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000288 	.word	0x20000288

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff fff0 	bl	800295c <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_Delay+0x40>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	001a      	movs	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	189b      	adds	r3, r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	f7ff ffe0 	bl	800295c <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b004      	add	sp, #16
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000008 	.word	0x20000008

080029b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80029c4:	401a      	ands	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b002      	add	sp, #8
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	fe3fffff 	.word	0xfe3fffff

080029dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	23e0      	movs	r3, #224	; 0xe0
 80029ea:	045b      	lsls	r3, r3, #17
 80029ec:	4013      	ands	r3, r2
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	2104      	movs	r1, #4
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	2107      	movs	r1, #7
 8002a0e:	4091      	lsls	r1, r2
 8002a10:	000a      	movs	r2, r1
 8002a12:	43d2      	mvns	r2, r2
 8002a14:	401a      	ands	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2104      	movs	r1, #4
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4099      	lsls	r1, r3
 8002a20:	000b      	movs	r3, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	211f      	movs	r1, #31
 8002a44:	400a      	ands	r2, r1
 8002a46:	210f      	movs	r1, #15
 8002a48:	4091      	lsls	r1, r2
 8002a4a:	000a      	movs	r2, r1
 8002a4c:	43d2      	mvns	r2, r2
 8002a4e:	401a      	ands	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	210f      	movs	r1, #15
 8002a56:	4019      	ands	r1, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	201f      	movs	r0, #31
 8002a5c:	4003      	ands	r3, r0
 8002a5e:	4099      	lsls	r1, r3
 8002a60:	000b      	movs	r3, r1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b004      	add	sp, #16
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	035b      	lsls	r3, r3, #13
 8002a82:	0b5b      	lsrs	r3, r3, #13
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b002      	add	sp, #8
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	0352      	lsls	r2, r2, #13
 8002aa4:	0b52      	lsrs	r2, r2, #13
 8002aa6:	43d2      	mvns	r2, r2
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	0212      	lsls	r2, r2, #8
 8002acc:	43d2      	mvns	r2, r2
 8002ace:	401a      	ands	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	4904      	ldr	r1, [pc, #16]	; (8002aec <LL_ADC_SetChannelSamplingTime+0x34>)
 8002ada:	400b      	ands	r3, r1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	07ffff00 	.word	0x07ffff00

08002af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <LL_ADC_EnableInternalRegulator+0x24>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0552      	lsls	r2, r2, #21
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	6fffffe8 	.word	0x6fffffe8

08002b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	055b      	lsls	r3, r3, #21
 8002b28:	401a      	ands	r2, r3
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	055b      	lsls	r3, r3, #21
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d101      	bne.n	8002b36 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_IsEnabled+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_IsEnabled+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e1b3      	b.n	8002f12 <HAL_ADC_Init+0x38e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff fbd3 	bl	8002360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2254      	movs	r2, #84	; 0x54
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff ffa3 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7ff ff88 	bl	8002af0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be0:	4bce      	ldr	r3, [pc, #824]	; (8002f1c <HAL_ADC_Init+0x398>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	49ce      	ldr	r1, [pc, #824]	; (8002f20 <HAL_ADC_Init+0x39c>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7fd fa8a 	bl	8000100 <__udivsi3>
 8002bec:	0003      	movs	r3, r0
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf4:	e002      	b.n	8002bfc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff ff86 	bl	8002b18 <LL_ADC_IsInternalRegulatorEnabled>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d10f      	bne.n	8002c30 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	2210      	movs	r2, #16
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2201      	movs	r2, #1
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c28:	231f      	movs	r3, #31
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff ff94 	bl	8002b62 <LL_ADC_REG_IsConversionOngoing>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	2210      	movs	r2, #16
 8002c44:	4013      	ands	r3, r2
 8002c46:	d000      	beq.n	8002c4a <HAL_ADC_Init+0xc6>
 8002c48:	e156      	b.n	8002ef8 <HAL_ADC_Init+0x374>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d000      	beq.n	8002c52 <HAL_ADC_Init+0xce>
 8002c50:	e152      	b.n	8002ef8 <HAL_ADC_Init+0x374>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	4ab3      	ldr	r2, [pc, #716]	; (8002f24 <HAL_ADC_Init+0x3a0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff ff6a 	bl	8002b40 <LL_ADC_IsEnabled>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d156      	bne.n	8002d1e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2218      	movs	r2, #24
 8002c78:	4393      	bics	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0f9b      	lsrs	r3, r3, #30
 8002c8e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c94:	4313      	orrs	r3, r2
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	223c      	movs	r2, #60	; 0x3c
 8002ca0:	5c9b      	ldrb	r3, [r3, r2]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d111      	bne.n	8002cca <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0f9b      	lsrs	r3, r3, #30
 8002cac:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cb2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002cb8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002cbe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4a95      	ldr	r2, [pc, #596]	; (8002f28 <HAL_ADC_Init+0x3a4>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	23c0      	movs	r3, #192	; 0xc0
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d018      	beq.n	8002d1e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d012      	beq.n	8002d1e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d00c      	beq.n	8002d1e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002d04:	4b89      	ldr	r3, [pc, #548]	; (8002f2c <HAL_ADC_Init+0x3a8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a89      	ldr	r2, [pc, #548]	; (8002f30 <HAL_ADC_Init+0x3ac>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	23f0      	movs	r3, #240	; 0xf0
 8002d14:	039b      	lsls	r3, r3, #14
 8002d16:	401a      	ands	r2, r3
 8002d18:	4b84      	ldr	r3, [pc, #528]	; (8002f2c <HAL_ADC_Init+0x3a8>)
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7e1b      	ldrb	r3, [r3, #24]
 8002d22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7e5b      	ldrb	r3, [r3, #25]
 8002d28:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e9b      	ldrb	r3, [r3, #26]
 8002d30:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d32:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_ADC_Init+0x1be>
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	e000      	b.n	8002d44 <HAL_ADC_Init+0x1c0>
 8002d42:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d4a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	da04      	bge.n	8002d5e <HAL_ADC_Init+0x1da>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	e001      	b.n	8002d62 <HAL_ADC_Init+0x1de>
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002d62:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	5c5b      	ldrb	r3, [r3, r1]
 8002d6a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d6c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	5c9b      	ldrb	r3, [r3, r2]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d115      	bne.n	8002daa <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7e9b      	ldrb	r3, [r3, #26]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d105      	bne.n	8002d92 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	0252      	lsls	r2, r2, #9
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e00b      	b.n	8002daa <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	2220      	movs	r2, #32
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	2201      	movs	r2, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db6:	23e0      	movs	r3, #224	; 0xe0
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a59      	ldr	r2, [pc, #356]	; (8002f34 <HAL_ADC_Init+0x3b0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	4a54      	ldr	r2, [pc, #336]	; (8002f38 <HAL_ADC_Init+0x3b4>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f7ff fdf9 	bl	80029f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	494b      	ldr	r1, [pc, #300]	; (8002f3c <HAL_ADC_Init+0x3b8>)
 8002e0e:	001a      	movs	r2, r3
 8002e10:	f7ff fdf1 	bl	80029f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2110      	movs	r1, #16
 8002e28:	4249      	negs	r1, r1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e2e:	e03c      	b.n	8002eaa <HAL_ADC_Init+0x326>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	039b      	lsls	r3, r3, #14
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d136      	bne.n	8002eaa <HAL_ADC_Init+0x326>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e00c      	b.n	8002e5c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	40da      	lsrs	r2, r3
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	220f      	movs	r2, #15
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	d006      	beq.n	8002e64 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b07      	cmp	r3, #7
 8002e60:	d9ef      	bls.n	8002e42 <HAL_ADC_Init+0x2be>
 8002e62:	e000      	b.n	8002e66 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002e64:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2110      	movs	r1, #16
 8002e78:	4249      	negs	r1, r1
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e7e:	e014      	b.n	8002eaa <HAL_ADC_Init+0x326>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4a2d      	ldr	r2, [pc, #180]	; (8002f40 <HAL_ADC_Init+0x3bc>)
 8002e8c:	4694      	mov	ip, r2
 8002e8e:	4463      	add	r3, ip
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	221c      	movs	r2, #28
 8002e94:	4013      	ands	r3, r2
 8002e96:	2210      	movs	r2, #16
 8002e98:	4252      	negs	r2, r2
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	0011      	movs	r1, r2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_ADC_Init+0x3c0>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_ADC_Init+0x34e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	2201      	movs	r2, #1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ed0:	e01c      	b.n	8002f0c <HAL_ADC_Init+0x388>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	2212      	movs	r2, #18
 8002ed8:	4393      	bics	r3, r2
 8002eda:	2210      	movs	r2, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002eee:	231f      	movs	r3, #31
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ef6:	e009      	b.n	8002f0c <HAL_ADC_Init+0x388>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	2210      	movs	r2, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f04:	231f      	movs	r3, #31
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002f0c:	231f      	movs	r3, #31
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b008      	add	sp, #32
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	00030d40 	.word	0x00030d40
 8002f24:	fffffefd 	.word	0xfffffefd
 8002f28:	1ffffc02 	.word	0x1ffffc02
 8002f2c:	40012708 	.word	0x40012708
 8002f30:	ffc3ffff 	.word	0xffc3ffff
 8002f34:	fffe0219 	.word	0xfffe0219
 8002f38:	dffffc02 	.word	0xdffffc02
 8002f3c:	07ffff04 	.word	0x07ffff04
 8002f40:	3fffffff 	.word	0x3fffffff
 8002f44:	833fffe7 	.word	0x833fffe7

08002f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f52:	2317      	movs	r3, #23
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2254      	movs	r2, #84	; 0x54
 8002f62:	5c9b      	ldrb	r3, [r3, r2]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x24>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e1c0      	b.n	80032ee <HAL_ADC_ConfigChannel+0x3a6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2254      	movs	r2, #84	; 0x54
 8002f70:	2101      	movs	r1, #1
 8002f72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff fdf2 	bl	8002b62 <LL_ADC_REG_IsConversionOngoing>
 8002f7e:	1e03      	subs	r3, r0, #0
 8002f80:	d000      	beq.n	8002f84 <HAL_ADC_ConfigChannel+0x3c>
 8002f82:	e1a3      	b.n	80032cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d100      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x46>
 8002f8c:	e143      	b.n	8003216 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f9e:	4ac1      	ldr	r2, [pc, #772]	; (80032a4 <HAL_ADC_ConfigChannel+0x35c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d108      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0019      	movs	r1, r3
 8002fae:	0010      	movs	r0, r2
 8002fb0:	f7ff fd5e 	bl	8002a70 <LL_ADC_REG_SetSequencerChAdd>
 8002fb4:	e0c9      	b.n	800314a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	211f      	movs	r1, #31
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	4099      	lsls	r1, r3
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	035b      	lsls	r3, r3, #13
 8002fd4:	0b5b      	lsrs	r3, r3, #13
 8002fd6:	d105      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x9c>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	221f      	movs	r2, #31
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	e098      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	4013      	ands	r3, r2
 8002fec:	d000      	beq.n	8002ff0 <HAL_ADC_ConfigChannel+0xa8>
 8002fee:	e091      	b.n	8003114 <HAL_ADC_ConfigChannel+0x1cc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d000      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0xb4>
 8002ffa:	e089      	b.n	8003110 <HAL_ADC_ConfigChannel+0x1c8>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2204      	movs	r2, #4
 8003002:	4013      	ands	r3, r2
 8003004:	d000      	beq.n	8003008 <HAL_ADC_ConfigChannel+0xc0>
 8003006:	e081      	b.n	800310c <HAL_ADC_ConfigChannel+0x1c4>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	d000      	beq.n	8003014 <HAL_ADC_ConfigChannel+0xcc>
 8003012:	e079      	b.n	8003108 <HAL_ADC_ConfigChannel+0x1c0>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2210      	movs	r2, #16
 800301a:	4013      	ands	r3, r2
 800301c:	d000      	beq.n	8003020 <HAL_ADC_ConfigChannel+0xd8>
 800301e:	e071      	b.n	8003104 <HAL_ADC_ConfigChannel+0x1bc>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	4013      	ands	r3, r2
 8003028:	d000      	beq.n	800302c <HAL_ADC_ConfigChannel+0xe4>
 800302a:	e069      	b.n	8003100 <HAL_ADC_ConfigChannel+0x1b8>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2240      	movs	r2, #64	; 0x40
 8003032:	4013      	ands	r3, r2
 8003034:	d000      	beq.n	8003038 <HAL_ADC_ConfigChannel+0xf0>
 8003036:	e061      	b.n	80030fc <HAL_ADC_ConfigChannel+0x1b4>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	4013      	ands	r3, r2
 8003040:	d000      	beq.n	8003044 <HAL_ADC_ConfigChannel+0xfc>
 8003042:	e059      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x1b0>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d151      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1ac>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4013      	ands	r3, r2
 800305a:	d149      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1a8>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4013      	ands	r3, r2
 8003066:	d141      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x1a4>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	4013      	ands	r3, r2
 8003072:	d139      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1a0>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4013      	ands	r3, r2
 800307e:	d131      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x19c>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	019b      	lsls	r3, r3, #6
 8003088:	4013      	ands	r3, r2
 800308a:	d129      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x198>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	01db      	lsls	r3, r3, #7
 8003094:	4013      	ands	r3, r2
 8003096:	d121      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x194>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	4013      	ands	r3, r2
 80030a2:	d119      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x190>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	4013      	ands	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x18c>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	d109      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x188>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	02db      	lsls	r3, r3, #11
 80030c4:	4013      	ands	r3, r2
 80030c6:	d001      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x184>
 80030c8:	2312      	movs	r3, #18
 80030ca:	e024      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030cc:	2300      	movs	r3, #0
 80030ce:	e022      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030d0:	2311      	movs	r3, #17
 80030d2:	e020      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030d4:	2310      	movs	r3, #16
 80030d6:	e01e      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030d8:	230f      	movs	r3, #15
 80030da:	e01c      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030dc:	230e      	movs	r3, #14
 80030de:	e01a      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030e0:	230d      	movs	r3, #13
 80030e2:	e018      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030e4:	230c      	movs	r3, #12
 80030e6:	e016      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030e8:	230b      	movs	r3, #11
 80030ea:	e014      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030ec:	230a      	movs	r3, #10
 80030ee:	e012      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030f0:	2309      	movs	r3, #9
 80030f2:	e010      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030f4:	2308      	movs	r3, #8
 80030f6:	e00e      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030f8:	2307      	movs	r3, #7
 80030fa:	e00c      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 80030fc:	2306      	movs	r3, #6
 80030fe:	e00a      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 8003100:	2305      	movs	r3, #5
 8003102:	e008      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 8003104:	2304      	movs	r3, #4
 8003106:	e006      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 8003108:	2303      	movs	r3, #3
 800310a:	e004      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 800310c:	2302      	movs	r3, #2
 800310e:	e002      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1ce>
 8003114:	2300      	movs	r3, #0
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	6852      	ldr	r2, [r2, #4]
 800311a:	201f      	movs	r0, #31
 800311c:	4002      	ands	r2, r0
 800311e:	4093      	lsls	r3, r2
 8003120:	000a      	movs	r2, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	d808      	bhi.n	800314a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	001a      	movs	r2, r3
 8003146:	f7ff fc73 	bl	8002a30 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	001a      	movs	r2, r3
 8003158:	f7ff fcae 	bl	8002ab8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	db00      	blt.n	8003166 <HAL_ADC_ConfigChannel+0x21e>
 8003164:	e0bc      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003166:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 8003168:	0018      	movs	r0, r3
 800316a:	f7ff fc37 	bl	80029dc <LL_ADC_GetCommonPathInternalCh>
 800316e:	0003      	movs	r3, r0
 8003170:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4d      	ldr	r2, [pc, #308]	; (80032ac <HAL_ADC_ConfigChannel+0x364>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d122      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003184:	d11d      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	0412      	lsls	r2, r2, #16
 800318c:	4313      	orrs	r3, r2
 800318e:	4a46      	ldr	r2, [pc, #280]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 8003190:	0019      	movs	r1, r3
 8003192:	0010      	movs	r0, r2
 8003194:	f7ff fc0e 	bl	80029b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003198:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <HAL_ADC_ConfigChannel+0x368>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4945      	ldr	r1, [pc, #276]	; (80032b4 <HAL_ADC_ConfigChannel+0x36c>)
 800319e:	0018      	movs	r0, r3
 80031a0:	f7fc ffae 	bl	8000100 <__udivsi3>
 80031a4:	0003      	movs	r3, r0
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	0013      	movs	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031b2:	e002      	b.n	80031ba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80031c0:	e08e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3c      	ldr	r2, [pc, #240]	; (80032b8 <HAL_ADC_ConfigChannel+0x370>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10e      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x2a2>
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	045b      	lsls	r3, r3, #17
 80031d2:	4013      	ands	r3, r2
 80031d4:	d109      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	0452      	lsls	r2, r2, #17
 80031dc:	4313      	orrs	r3, r2
 80031de:	4a32      	ldr	r2, [pc, #200]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 80031e0:	0019      	movs	r1, r3
 80031e2:	0010      	movs	r0, r2
 80031e4:	f7ff fbe6 	bl	80029b4 <LL_ADC_SetCommonPathInternalCh>
 80031e8:	e07a      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a33      	ldr	r2, [pc, #204]	; (80032bc <HAL_ADC_ConfigChannel+0x374>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d000      	beq.n	80031f6 <HAL_ADC_ConfigChannel+0x2ae>
 80031f4:	e074      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	03db      	lsls	r3, r3, #15
 80031fc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031fe:	d000      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x2ba>
 8003200:	e06e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	03d2      	lsls	r2, r2, #15
 8003208:	4313      	orrs	r3, r2
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 800320c:	0019      	movs	r1, r3
 800320e:	0010      	movs	r0, r2
 8003210:	f7ff fbd0 	bl	80029b4 <LL_ADC_SetCommonPathInternalCh>
 8003214:	e064      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	429a      	cmp	r2, r3
 8003220:	d004      	beq.n	800322c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_ADC_ConfigChannel+0x35c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d107      	bne.n	800323c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0019      	movs	r1, r3
 8003236:	0010      	movs	r0, r2
 8003238:	f7ff fc2b 	bl	8002a92 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	da4d      	bge.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 8003246:	0018      	movs	r0, r3
 8003248:	f7ff fbc8 	bl	80029dc <LL_ADC_GetCommonPathInternalCh>
 800324c:	0003      	movs	r3, r0
 800324e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_ADC_ConfigChannel+0x364>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d108      	bne.n	800326c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <HAL_ADC_ConfigChannel+0x378>)
 800325e:	4013      	ands	r3, r2
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f7ff fba5 	bl	80029b4 <LL_ADC_SetCommonPathInternalCh>
 800326a:	e039      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HAL_ADC_ConfigChannel+0x370>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <HAL_ADC_ConfigChannel+0x37c>)
 800327a:	4013      	ands	r3, r2
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 800327e:	0019      	movs	r1, r3
 8003280:	0010      	movs	r0, r2
 8003282:	f7ff fb97 	bl	80029b4 <LL_ADC_SetCommonPathInternalCh>
 8003286:	e02b      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <HAL_ADC_ConfigChannel+0x374>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d126      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_ADC_ConfigChannel+0x380>)
 8003296:	4013      	ands	r3, r2
 8003298:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <HAL_ADC_ConfigChannel+0x360>)
 800329a:	0019      	movs	r1, r3
 800329c:	0010      	movs	r0, r2
 800329e:	f7ff fb89 	bl	80029b4 <LL_ADC_SetCommonPathInternalCh>
 80032a2:	e01d      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x398>
 80032a4:	80000004 	.word	0x80000004
 80032a8:	40012708 	.word	0x40012708
 80032ac:	b0001000 	.word	0xb0001000
 80032b0:	20000000 	.word	0x20000000
 80032b4:	00030d40 	.word	0x00030d40
 80032b8:	b8004000 	.word	0xb8004000
 80032bc:	b4002000 	.word	0xb4002000
 80032c0:	ff7fffff 	.word	0xff7fffff
 80032c4:	feffffff 	.word	0xfeffffff
 80032c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	2220      	movs	r2, #32
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032d8:	2317      	movs	r3, #23
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2254      	movs	r2, #84	; 0x54
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80032e8:	2317      	movs	r3, #23
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b006      	add	sp, #24
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0002      	movs	r2, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b7f      	cmp	r3, #127	; 0x7f
 800330c:	d828      	bhi.n	8003360 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800330e:	4a2f      	ldr	r2, [pc, #188]	; (80033cc <__NVIC_SetPriority+0xd4>)
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b25b      	sxtb	r3, r3
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	33c0      	adds	r3, #192	; 0xc0
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	589b      	ldr	r3, [r3, r2]
 800331e:	1dfa      	adds	r2, r7, #7
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	0011      	movs	r1, r2
 8003324:	2203      	movs	r2, #3
 8003326:	400a      	ands	r2, r1
 8003328:	00d2      	lsls	r2, r2, #3
 800332a:	21ff      	movs	r1, #255	; 0xff
 800332c:	4091      	lsls	r1, r2
 800332e:	000a      	movs	r2, r1
 8003330:	43d2      	mvns	r2, r2
 8003332:	401a      	ands	r2, r3
 8003334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	019b      	lsls	r3, r3, #6
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	401a      	ands	r2, r3
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	0018      	movs	r0, r3
 8003344:	2303      	movs	r3, #3
 8003346:	4003      	ands	r3, r0
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800334c:	481f      	ldr	r0, [pc, #124]	; (80033cc <__NVIC_SetPriority+0xd4>)
 800334e:	1dfb      	adds	r3, r7, #7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b25b      	sxtb	r3, r3
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	430a      	orrs	r2, r1
 8003358:	33c0      	adds	r3, #192	; 0xc0
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800335e:	e031      	b.n	80033c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <__NVIC_SetPriority+0xd8>)
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	0019      	movs	r1, r3
 8003368:	230f      	movs	r3, #15
 800336a:	400b      	ands	r3, r1
 800336c:	3b08      	subs	r3, #8
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3306      	adds	r3, #6
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1dfa      	adds	r2, r7, #7
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	0011      	movs	r1, r2
 8003380:	2203      	movs	r2, #3
 8003382:	400a      	ands	r2, r1
 8003384:	00d2      	lsls	r2, r2, #3
 8003386:	21ff      	movs	r1, #255	; 0xff
 8003388:	4091      	lsls	r1, r2
 800338a:	000a      	movs	r2, r1
 800338c:	43d2      	mvns	r2, r2
 800338e:	401a      	ands	r2, r3
 8003390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	401a      	ands	r2, r3
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0018      	movs	r0, r3
 80033a0:	2303      	movs	r3, #3
 80033a2:	4003      	ands	r3, r0
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033a8:	4809      	ldr	r0, [pc, #36]	; (80033d0 <__NVIC_SetPriority+0xd8>)
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	001c      	movs	r4, r3
 80033b0:	230f      	movs	r3, #15
 80033b2:	4023      	ands	r3, r4
 80033b4:	3b08      	subs	r3, #8
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	430a      	orrs	r2, r1
 80033ba:	3306      	adds	r3, #6
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	18c3      	adds	r3, r0, r3
 80033c0:	3304      	adds	r3, #4
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b003      	add	sp, #12
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <SysTick_Config+0x40>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e6:	2301      	movs	r3, #1
 80033e8:	e010      	b.n	800340c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <SysTick_Config+0x44>)
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	3a01      	subs	r2, #1
 80033f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f2:	2301      	movs	r3, #1
 80033f4:	425b      	negs	r3, r3
 80033f6:	2103      	movs	r1, #3
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff ff7d 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <SysTick_Config+0x44>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <SysTick_Config+0x44>)
 8003406:	2207      	movs	r2, #7
 8003408:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800340a:	2300      	movs	r3, #0
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}
 8003414:	00ffffff 	.word	0x00ffffff
 8003418:	e000e010 	.word	0xe000e010

0800341c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	210f      	movs	r1, #15
 8003428:	187b      	adds	r3, r7, r1
 800342a:	1c02      	adds	r2, r0, #0
 800342c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	187b      	adds	r3, r7, r1
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b25b      	sxtb	r3, r3
 8003436:	0011      	movs	r1, r2
 8003438:	0018      	movs	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b004      	add	sp, #16
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff ffbf 	bl	80033d4 <SysTick_Config>
 8003456:	0003      	movs	r3, r0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346e:	e147      	b.n	8003700 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4091      	lsls	r1, r2
 800347a:	000a      	movs	r2, r1
 800347c:	4013      	ands	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d100      	bne.n	8003488 <HAL_GPIO_Init+0x28>
 8003486:	e138      	b.n	80036fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	4013      	ands	r3, r2
 8003490:	2b01      	cmp	r3, #1
 8003492:	d005      	beq.n	80034a0 <HAL_GPIO_Init+0x40>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	4013      	ands	r3, r2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d130      	bne.n	8003502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	409a      	lsls	r2, r3
 80034ae:	0013      	movs	r3, r2
 80034b0:	43da      	mvns	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	409a      	lsls	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d6:	2201      	movs	r2, #1
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
 80034dc:	0013      	movs	r3, r2
 80034de:	43da      	mvns	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	2201      	movs	r2, #1
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
 80034f4:	0013      	movs	r3, r2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2203      	movs	r2, #3
 8003508:	4013      	ands	r3, r2
 800350a:	2b03      	cmp	r3, #3
 800350c:	d017      	beq.n	800353e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	409a      	lsls	r2, r3
 800351c:	0013      	movs	r3, r2
 800351e:	43da      	mvns	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	4013      	ands	r3, r2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d123      	bne.n	8003592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	58d3      	ldr	r3, [r2, r3]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2207      	movs	r2, #7
 800355c:	4013      	ands	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	409a      	lsls	r2, r3
 8003564:	0013      	movs	r3, r2
 8003566:	43da      	mvns	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4013      	ands	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2107      	movs	r1, #7
 8003576:	400b      	ands	r3, r1
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	409a      	lsls	r2, r3
 800357c:	0013      	movs	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	08da      	lsrs	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3208      	adds	r2, #8
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	6939      	ldr	r1, [r7, #16]
 8003590:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2203      	movs	r2, #3
 800359e:	409a      	lsls	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	43da      	mvns	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2203      	movs	r2, #3
 80035b0:	401a      	ands	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	409a      	lsls	r2, r3
 80035b8:	0013      	movs	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	23c0      	movs	r3, #192	; 0xc0
 80035cc:	029b      	lsls	r3, r3, #10
 80035ce:	4013      	ands	r3, r2
 80035d0:	d100      	bne.n	80035d4 <HAL_GPIO_Init+0x174>
 80035d2:	e092      	b.n	80036fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035d4:	4a50      	ldr	r2, [pc, #320]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3318      	adds	r3, #24
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	589b      	ldr	r3, [r3, r2]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2203      	movs	r2, #3
 80035e6:	4013      	ands	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	220f      	movs	r2, #15
 80035ec:	409a      	lsls	r2, r3
 80035ee:	0013      	movs	r3, r2
 80035f0:	43da      	mvns	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	429a      	cmp	r2, r3
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0x1ca>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a45      	ldr	r2, [pc, #276]	; (800371c <HAL_GPIO_Init+0x2bc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00d      	beq.n	8003626 <HAL_GPIO_Init+0x1c6>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a44      	ldr	r2, [pc, #272]	; (8003720 <HAL_GPIO_Init+0x2c0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_Init+0x1c2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a43      	ldr	r2, [pc, #268]	; (8003724 <HAL_GPIO_Init+0x2c4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x1be>
 800361a:	2303      	movs	r3, #3
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x1cc>
 800361e:	2305      	movs	r3, #5
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x1cc>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x1cc>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x1cc>
 800362a:	2300      	movs	r3, #0
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	2103      	movs	r1, #3
 8003630:	400a      	ands	r2, r1
 8003632:	00d2      	lsls	r2, r2, #3
 8003634:	4093      	lsls	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800363c:	4936      	ldr	r1, [pc, #216]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3318      	adds	r3, #24
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	58d3      	ldr	r3, [r2, r3]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	43da      	mvns	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	025b      	lsls	r3, r3, #9
 8003664:	4013      	ands	r3, r2
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003670:	4929      	ldr	r1, [pc, #164]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 800367a:	2384      	movs	r3, #132	; 0x84
 800367c:	58d3      	ldr	r3, [r2, r3]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43da      	mvns	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	4013      	ands	r3, r2
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800369e:	491e      	ldr	r1, [pc, #120]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80036a0:	2284      	movs	r2, #132	; 0x84
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43da      	mvns	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	035b      	lsls	r3, r3, #13
 80036be:	4013      	ands	r3, r2
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80036d0:	4b11      	ldr	r3, [pc, #68]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43da      	mvns	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	039b      	lsls	r3, r3, #14
 80036e8:	4013      	ands	r3, r2
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_GPIO_Init+0x2b8>)
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	3301      	adds	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	40da      	lsrs	r2, r3
 8003708:	1e13      	subs	r3, r2, #0
 800370a:	d000      	beq.n	800370e <HAL_GPIO_Init+0x2ae>
 800370c:	e6b0      	b.n	8003470 <HAL_GPIO_Init+0x10>
  }
}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b006      	add	sp, #24
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	40021800 	.word	0x40021800
 800371c:	50000400 	.word	0x50000400
 8003720:	50000800 	.word	0x50000800
 8003724:	50000c00 	.word	0x50000c00

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	0008      	movs	r0, r1
 8003732:	0011      	movs	r1, r2
 8003734:	1cbb      	adds	r3, r7, #2
 8003736:	1c02      	adds	r2, r0, #0
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	1c7b      	adds	r3, r7, #1
 800373c:	1c0a      	adds	r2, r1, #0
 800373e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003740:	1c7b      	adds	r3, r7, #1
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003748:	1cbb      	adds	r3, r7, #2
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003752:	1cbb      	adds	r3, r7, #2
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003772:	4013      	ands	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d11f      	bne.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	0013      	movs	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	189b      	adds	r3, r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4912      	ldr	r1, [pc, #72]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003796:	0018      	movs	r0, r3
 8003798:	f7fc fcb2 	bl	8000100 <__udivsi3>
 800379c:	0003      	movs	r3, r0
 800379e:	3301      	adds	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037a2:	e008      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e001      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e009      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	401a      	ands	r2, r3
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d0ed      	beq.n	80037a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	40007000 	.word	0x40007000
 80037d8:	fffff9ff 	.word	0xfffff9ff
 80037dc:	20000000 	.word	0x20000000
 80037e0:	000f4240 	.word	0x000f4240

080037e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	23e0      	movs	r3, #224	; 0xe0
 80037ee:	01db      	lsls	r3, r3, #7
 80037f0:	4013      	ands	r3, r2
}
 80037f2:	0018      	movs	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e2f9      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	d100      	bne.n	800381a <HAL_RCC_OscConfig+0x1e>
 8003818:	e07c      	b.n	8003914 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381a:	4bc3      	ldr	r3, [pc, #780]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2238      	movs	r2, #56	; 0x38
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003824:	4bc0      	ldr	r3, [pc, #768]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2203      	movs	r2, #3
 800382a:	4013      	ands	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b10      	cmp	r3, #16
 8003832:	d102      	bne.n	800383a <HAL_RCC_OscConfig+0x3e>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d002      	beq.n	8003840 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d10b      	bne.n	8003858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	4bb9      	ldr	r3, [pc, #740]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	029b      	lsls	r3, r3, #10
 8003848:	4013      	ands	r3, r2
 800384a:	d062      	beq.n	8003912 <HAL_RCC_OscConfig+0x116>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d15e      	bne.n	8003912 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e2d4      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	025b      	lsls	r3, r3, #9
 8003860:	429a      	cmp	r2, r3
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x78>
 8003864:	4bb0      	ldr	r3, [pc, #704]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4baf      	ldr	r3, [pc, #700]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	0249      	lsls	r1, r1, #9
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e020      	b.n	80038b6 <HAL_RCC_OscConfig+0xba>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	23a0      	movs	r3, #160	; 0xa0
 800387a:	02db      	lsls	r3, r3, #11
 800387c:	429a      	cmp	r2, r3
 800387e:	d10e      	bne.n	800389e <HAL_RCC_OscConfig+0xa2>
 8003880:	4ba9      	ldr	r3, [pc, #676]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4ba8      	ldr	r3, [pc, #672]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003886:	2180      	movs	r1, #128	; 0x80
 8003888:	02c9      	lsls	r1, r1, #11
 800388a:	430a      	orrs	r2, r1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	4ba6      	ldr	r3, [pc, #664]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4ba5      	ldr	r3, [pc, #660]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	0249      	lsls	r1, r1, #9
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e00b      	b.n	80038b6 <HAL_RCC_OscConfig+0xba>
 800389e:	4ba2      	ldr	r3, [pc, #648]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038a4:	49a1      	ldr	r1, [pc, #644]	; (8003b2c <HAL_RCC_OscConfig+0x330>)
 80038a6:	400a      	ands	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	4b9f      	ldr	r3, [pc, #636]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b9e      	ldr	r3, [pc, #632]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038b0:	499f      	ldr	r1, [pc, #636]	; (8003b30 <HAL_RCC_OscConfig+0x334>)
 80038b2:	400a      	ands	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d014      	beq.n	80038e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7ff f84d 	bl	800295c <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7ff f848 	bl	800295c <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e293      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038da:	4b93      	ldr	r3, [pc, #588]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	029b      	lsls	r3, r3, #10
 80038e2:	4013      	ands	r3, r2
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xcc>
 80038e6:	e015      	b.n	8003914 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7ff f838 	bl	800295c <HAL_GetTick>
 80038ec:	0003      	movs	r3, r0
 80038ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f2:	f7ff f833 	bl	800295c <HAL_GetTick>
 80038f6:	0002      	movs	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b64      	cmp	r3, #100	; 0x64
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e27e      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003904:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	029b      	lsls	r3, r3, #10
 800390c:	4013      	ands	r3, r2
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0xf6>
 8003910:	e000      	b.n	8003914 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2202      	movs	r2, #2
 800391a:	4013      	ands	r3, r2
 800391c:	d100      	bne.n	8003920 <HAL_RCC_OscConfig+0x124>
 800391e:	e099      	b.n	8003a54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b81      	ldr	r3, [pc, #516]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2238      	movs	r2, #56	; 0x38
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2203      	movs	r2, #3
 8003930:	4013      	ands	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b10      	cmp	r3, #16
 8003938:	d102      	bne.n	8003940 <HAL_RCC_OscConfig+0x144>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d002      	beq.n	8003946 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d135      	bne.n	80039b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003946:	4b78      	ldr	r3, [pc, #480]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4013      	ands	r3, r2
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x162>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e251      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a74      	ldr	r2, [pc, #464]	; (8003b34 <HAL_RCC_OscConfig+0x338>)
 8003964:	4013      	ands	r3, r2
 8003966:	0019      	movs	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d112      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x33c>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 800398a:	430a      	orrs	r2, r1
 800398c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800398e:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0adb      	lsrs	r3, r3, #11
 8003994:	2207      	movs	r2, #7
 8003996:	4013      	ands	r3, r2
 8003998:	4a68      	ldr	r2, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x340>)
 800399a:	40da      	lsrs	r2, r3
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x344>)
 800399e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <HAL_RCC_OscConfig+0x348>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fe ff7d 	bl	80028a4 <HAL_InitTick>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d051      	beq.n	8003a52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e227      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d030      	beq.n	8003a1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039ba:	4b5b      	ldr	r3, [pc, #364]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <HAL_RCC_OscConfig+0x33c>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80039ce:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b55      	ldr	r3, [pc, #340]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	0049      	lsls	r1, r1, #1
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe ffbe 	bl	800295c <HAL_GetTick>
 80039e0:	0003      	movs	r3, r0
 80039e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fe ffb9 	bl	800295c <HAL_GetTick>
 80039ea:	0002      	movs	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e204      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039f8:	4b4b      	ldr	r3, [pc, #300]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4013      	ands	r3, r2
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a4a      	ldr	r2, [pc, #296]	; (8003b34 <HAL_RCC_OscConfig+0x338>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	021a      	lsls	r2, r3, #8
 8003a14:	4b44      	ldr	r3, [pc, #272]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a22:	4949      	ldr	r1, [pc, #292]	; (8003b48 <HAL_RCC_OscConfig+0x34c>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe ff98 	bl	800295c <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fe ff93 	bl	800295c <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1de      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x236>
 8003a50:	e000      	b.n	8003a54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d047      	beq.n	8003aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a5e:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2238      	movs	r2, #56	; 0x38
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b18      	cmp	r3, #24
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	2202      	movs	r2, #2
 8003a70:	4013      	ands	r3, r2
 8003a72:	d03c      	beq.n	8003aee <HAL_RCC_OscConfig+0x2f2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d138      	bne.n	8003aee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e1c0      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d019      	beq.n	8003abc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	430a      	orrs	r2, r1
 8003a92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe ff62 	bl	800295c <HAL_GetTick>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fe ff5d 	bl	800295c <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1a8      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d0f1      	beq.n	8003a9e <HAL_RCC_OscConfig+0x2a2>
 8003aba:	e018      	b.n	8003aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	438a      	bics	r2, r1
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe ff48 	bl	800295c <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe ff43 	bl	800295c <HAL_GetTick>
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e18e      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d1f1      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2204      	movs	r2, #4
 8003af4:	4013      	ands	r3, r2
 8003af6:	d100      	bne.n	8003afa <HAL_RCC_OscConfig+0x2fe>
 8003af8:	e0c6      	b.n	8003c88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	231f      	movs	r3, #31
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2238      	movs	r2, #56	; 0x38
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d11e      	bne.n	8003b4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_OscConfig+0x32c>)
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d100      	bne.n	8003b1a <HAL_RCC_OscConfig+0x31e>
 8003b18:	e0b6      	b.n	8003c88 <HAL_RCC_OscConfig+0x48c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d000      	beq.n	8003b24 <HAL_RCC_OscConfig+0x328>
 8003b22:	e0b1      	b.n	8003c88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e16c      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	fffeffff 	.word	0xfffeffff
 8003b30:	fffbffff 	.word	0xfffbffff
 8003b34:	ffff80ff 	.word	0xffff80ff
 8003b38:	ffffc7ff 	.word	0xffffc7ff
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	20000000 	.word	0x20000000
 8003b44:	20000004 	.word	0x20000004
 8003b48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b4c:	4baf      	ldr	r3, [pc, #700]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	055b      	lsls	r3, r3, #21
 8003b54:	4013      	ands	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_OscConfig+0x360>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x362>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4baa      	ldr	r3, [pc, #680]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b66:	4ba9      	ldr	r3, [pc, #676]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	0549      	lsls	r1, r1, #21
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b70:	4ba6      	ldr	r3, [pc, #664]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	055b      	lsls	r3, r3, #21
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b7e:	231f      	movs	r3, #31
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	4ba2      	ldr	r3, [pc, #648]	; (8003e10 <HAL_RCC_OscConfig+0x614>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d11a      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b92:	4b9f      	ldr	r3, [pc, #636]	; (8003e10 <HAL_RCC_OscConfig+0x614>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b9e      	ldr	r3, [pc, #632]	; (8003e10 <HAL_RCC_OscConfig+0x614>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0049      	lsls	r1, r1, #1
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fedc 	bl	800295c <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fe fed7 	bl	800295c <HAL_GetTick>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e122      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bbc:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <HAL_RCC_OscConfig+0x614>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x3e2>
 8003bd0:	4b8e      	ldr	r3, [pc, #568]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003bd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bd4:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x41c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x404>
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bea:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003bec:	2104      	movs	r1, #4
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bf2:	4b86      	ldr	r3, [pc, #536]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003bf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bf6:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x41c>
 8003c00:	4b82      	ldr	r3, [pc, #520]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c04:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c0c:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c10:	4b7e      	ldr	r3, [pc, #504]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c12:	2104      	movs	r1, #4
 8003c14:	438a      	bics	r2, r1
 8003c16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d014      	beq.n	8003c4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe fe9c 	bl	800295c <HAL_GetTick>
 8003c24:	0003      	movs	r3, r0
 8003c26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c28:	e009      	b.n	8003c3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fe fe97 	bl	800295c <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	4a77      	ldr	r2, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x618>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0e1      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3e:	4b73      	ldr	r3, [pc, #460]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	2202      	movs	r2, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x42e>
 8003c48:	e013      	b.n	8003c72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fe fe87 	bl	800295c <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c52:	e009      	b.n	8003c68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fe fe82 	bl	800295c <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	4a6d      	ldr	r2, [pc, #436]	; (8003e14 <HAL_RCC_OscConfig+0x618>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0cc      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c72:	231f      	movs	r3, #31
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b63      	ldr	r3, [pc, #396]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c80:	4b62      	ldr	r3, [pc, #392]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c82:	4965      	ldr	r1, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x61c>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d100      	bne.n	8003c92 <HAL_RCC_OscConfig+0x496>
 8003c90:	e0b6      	b.n	8003e00 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2238      	movs	r2, #56	; 0x38
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d100      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4a4>
 8003c9e:	e07e      	b.n	8003d9e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d153      	bne.n	8003d50 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b57      	ldr	r3, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003cae:	495b      	ldr	r1, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fe fe52 	bl	800295c <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe fe4d 	bl	800295c <HAL_GetTick>
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e098      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd0:	4b4e      	ldr	r3, [pc, #312]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	049b      	lsls	r3, r3, #18
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a4f      	ldr	r2, [pc, #316]	; (8003e20 <HAL_RCC_OscConfig+0x624>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	431a      	orrs	r2, r3
 8003d04:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d06:	430a      	orrs	r2, r1
 8003d08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0a:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	0449      	lsls	r1, r1, #17
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d18:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d1e:	2180      	movs	r1, #128	; 0x80
 8003d20:	0549      	lsls	r1, r1, #21
 8003d22:	430a      	orrs	r2, r1
 8003d24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe fe19 	bl	800295c <HAL_GetTick>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fe14 	bl	800295c <HAL_GetTick>
 8003d34:	0002      	movs	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e05f      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	049b      	lsls	r3, r3, #18
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x534>
 8003d4e:	e057      	b.n	8003e00 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d56:	4931      	ldr	r1, [pc, #196]	; (8003e1c <HAL_RCC_OscConfig+0x620>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d62:	2103      	movs	r1, #3
 8003d64:	438a      	bics	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003d68:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d6e:	492d      	ldr	r1, [pc, #180]	; (8003e24 <HAL_RCC_OscConfig+0x628>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe fdf2 	bl	800295c <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fe fded 	bl	800295c <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e038      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	049b      	lsls	r3, r3, #18
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x582>
 8003d9c:	e030      	b.n	8003e00 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e02b      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_RCC_OscConfig+0x610>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2203      	movs	r2, #3
 8003db4:	401a      	ands	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d11e      	bne.n	8003dfc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2270      	movs	r2, #112	; 0x70
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d117      	bne.n	8003dfc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	23fe      	movs	r3, #254	; 0xfe
 8003dd0:	01db      	lsls	r3, r3, #7
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d10e      	bne.n	8003dfc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	23f8      	movs	r3, #248	; 0xf8
 8003de2:	039b      	lsls	r3, r3, #14
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0f5b      	lsrs	r3, r3, #29
 8003df2:	075a      	lsls	r2, r3, #29
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b008      	add	sp, #32
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	00001388 	.word	0x00001388
 8003e18:	efffffff 	.word	0xefffffff
 8003e1c:	feffffff 	.word	0xfeffffff
 8003e20:	1fc1808c 	.word	0x1fc1808c
 8003e24:	effeffff 	.word	0xeffeffff

08003e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0e9      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2207      	movs	r2, #7
 8003e42:	4013      	ands	r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d91e      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b73      	ldr	r3, [pc, #460]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2207      	movs	r2, #7
 8003e50:	4393      	bics	r3, r2
 8003e52:	0019      	movs	r1, r3
 8003e54:	4b70      	ldr	r3, [pc, #448]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e5c:	f7fe fd7e 	bl	800295c <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e64:	e009      	b.n	8003e7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e66:	f7fe fd79 	bl	800295c <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	4a6a      	ldr	r2, [pc, #424]	; (800401c <HAL_RCC_ClockConfig+0x1f4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0ca      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e7a:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2207      	movs	r2, #7
 8003e80:	4013      	ands	r3, r2
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d1ee      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d015      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2204      	movs	r2, #4
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d006      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e9c:	4b60      	ldr	r3, [pc, #384]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b5f      	ldr	r3, [pc, #380]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003ea2:	21e0      	movs	r1, #224	; 0xe0
 8003ea4:	01c9      	lsls	r1, r1, #7
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eaa:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_RCC_ClockConfig+0x1fc>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d057      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed0:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	029b      	lsls	r3, r3, #10
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d12b      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e097      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee8:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	049b      	lsls	r3, r3, #18
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d11f      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e08b      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f00:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d113      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e07f      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f18:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d108      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e074      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f26:	4b3e      	ldr	r3, [pc, #248]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e06d      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f34:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2207      	movs	r2, #7
 8003f3a:	4393      	bics	r3, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fe fd08 	bl	800295c <HAL_GetTick>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f50:	e009      	b.n	8003f66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f52:	f7fe fd03 	bl	800295c <HAL_GetTick>
 8003f56:	0002      	movs	r2, r0
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	; (800401c <HAL_RCC_ClockConfig+0x1f4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e054      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2238      	movs	r2, #56	; 0x38
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1ec      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	4013      	ands	r3, r2
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d21e      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f98:	f7fe fce0 	bl	800295c <HAL_GetTick>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fa0:	e009      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa2:	f7fe fcdb 	bl	800295c <HAL_GetTick>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_RCC_ClockConfig+0x1f4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e02c      	b.n	8004010 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fb6:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2207      	movs	r2, #7
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1ee      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	; (8004028 <HAL_RCC_ClockConfig+0x200>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	0019      	movs	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fe2:	f000 f829 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 8003fe6:	0001      	movs	r1, r0
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_RCC_ClockConfig+0x1f8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	220f      	movs	r2, #15
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x204>)
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	58d3      	ldr	r3, [r2, r3]
 8003ff8:	221f      	movs	r2, #31
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	000a      	movs	r2, r1
 8003ffe:	40da      	lsrs	r2, r3
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_ClockConfig+0x208>)
 8004002:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_ClockConfig+0x20c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0018      	movs	r0, r3
 800400a:	f7fe fc4b 	bl	80028a4 <HAL_InitTick>
 800400e:	0003      	movs	r3, r0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40022000 	.word	0x40022000
 800401c:	00001388 	.word	0x00001388
 8004020:	40021000 	.word	0x40021000
 8004024:	fffff0ff 	.word	0xfffff0ff
 8004028:	ffff8fff 	.word	0xffff8fff
 800402c:	08007838 	.word	0x08007838
 8004030:	20000000 	.word	0x20000000
 8004034:	20000004 	.word	0x20000004

08004038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800403e:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2238      	movs	r2, #56	; 0x38
 8004044:	4013      	ands	r3, r2
 8004046:	d10f      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0adb      	lsrs	r3, r3, #11
 800404e:	2207      	movs	r2, #7
 8004050:	4013      	ands	r3, r2
 8004052:	2201      	movs	r2, #1
 8004054:	409a      	lsls	r2, r3
 8004056:	0013      	movs	r3, r2
 8004058:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	4835      	ldr	r0, [pc, #212]	; (8004134 <HAL_RCC_GetSysClockFreq+0xfc>)
 800405e:	f7fc f84f 	bl	8000100 <__udivsi3>
 8004062:	0003      	movs	r3, r0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	e05d      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2238      	movs	r2, #56	; 0x38
 800406e:	4013      	ands	r3, r2
 8004070:	2b08      	cmp	r3, #8
 8004072:	d102      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_GetSysClockFreq+0x100>)
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e054      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800407a:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2238      	movs	r2, #56	; 0x38
 8004080:	4013      	ands	r3, r2
 8004082:	2b10      	cmp	r3, #16
 8004084:	d138      	bne.n	80040f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004086:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2203      	movs	r2, #3
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	2207      	movs	r2, #7
 8004098:	4013      	ands	r3, r2
 800409a:	3301      	adds	r3, #1
 800409c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4824      	ldr	r0, [pc, #144]	; (8004138 <HAL_RCC_GetSysClockFreq+0x100>)
 80040a8:	f7fc f82a 	bl	8000100 <__udivsi3>
 80040ac:	0003      	movs	r3, r0
 80040ae:	0019      	movs	r1, r3
 80040b0:	4b1f      	ldr	r3, [pc, #124]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	227f      	movs	r2, #127	; 0x7f
 80040b8:	4013      	ands	r3, r2
 80040ba:	434b      	muls	r3, r1
 80040bc:	617b      	str	r3, [r7, #20]
        break;
 80040be:	e00d      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	481c      	ldr	r0, [pc, #112]	; (8004134 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040c4:	f7fc f81c 	bl	8000100 <__udivsi3>
 80040c8:	0003      	movs	r3, r0
 80040ca:	0019      	movs	r1, r3
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	227f      	movs	r2, #127	; 0x7f
 80040d4:	4013      	ands	r3, r2
 80040d6:	434b      	muls	r3, r1
 80040d8:	617b      	str	r3, [r7, #20]
        break;
 80040da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0f5b      	lsrs	r3, r3, #29
 80040e2:	2207      	movs	r2, #7
 80040e4:	4013      	ands	r3, r2
 80040e6:	3301      	adds	r3, #1
 80040e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f7fc f807 	bl	8000100 <__udivsi3>
 80040f2:	0003      	movs	r3, r0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	e015      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2238      	movs	r2, #56	; 0x38
 80040fe:	4013      	ands	r3, r2
 8004100:	2b20      	cmp	r3, #32
 8004102:	d103      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004104:	2380      	movs	r3, #128	; 0x80
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e00b      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2238      	movs	r2, #56	; 0x38
 8004112:	4013      	ands	r3, r2
 8004114:	2b18      	cmp	r3, #24
 8004116:	d103      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004118:	23fa      	movs	r3, #250	; 0xfa
 800411a:	01db      	lsls	r3, r3, #7
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e001      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004124:	693b      	ldr	r3, [r7, #16]
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b006      	add	sp, #24
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40021000 	.word	0x40021000
 8004134:	00f42400 	.word	0x00f42400
 8004138:	007a1200 	.word	0x007a1200

0800413c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <HAL_RCC_GetHCLKFreq+0x10>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20000000 	.word	0x20000000

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004154:	f7ff fff2 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004158:	0004      	movs	r4, r0
 800415a:	f7ff fb43 	bl	80037e4 <LL_RCC_GetAPB1Prescaler>
 800415e:	0003      	movs	r3, r0
 8004160:	0b1a      	lsrs	r2, r3, #12
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	58d3      	ldr	r3, [r2, r3]
 8004168:	221f      	movs	r2, #31
 800416a:	4013      	ands	r3, r2
 800416c:	40dc      	lsrs	r4, r3
 800416e:	0023      	movs	r3, r4
}
 8004170:	0018      	movs	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	bdb0      	pop	{r4, r5, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	08007878 	.word	0x08007878

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004184:	2313      	movs	r3, #19
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800418c:	2312      	movs	r3, #18
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	029b      	lsls	r3, r3, #10
 800419c:	4013      	ands	r3, r2
 800419e:	d100      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80041a0:	e0a4      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a2:	2311      	movs	r3, #17
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b7f      	ldr	r3, [pc, #508]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	055b      	lsls	r3, r3, #21
 80041b2:	4013      	ands	r3, r2
 80041b4:	d111      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b7c      	ldr	r3, [pc, #496]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ba:	4b7b      	ldr	r3, [pc, #492]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0549      	lsls	r1, r1, #21
 80041c0:	430a      	orrs	r2, r1
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80041c4:	4b78      	ldr	r3, [pc, #480]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80041c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	055b      	lsls	r3, r3, #21
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d2:	2311      	movs	r3, #17
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041da:	4b74      	ldr	r3, [pc, #464]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	0049      	lsls	r1, r1, #1
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e8:	f7fe fbb8 	bl	800295c <HAL_GetTick>
 80041ec:	0003      	movs	r3, r0
 80041ee:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f0:	e00b      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f2:	f7fe fbb3 	bl	800295c <HAL_GetTick>
 80041f6:	0002      	movs	r2, r0
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d904      	bls.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004200:	2313      	movs	r3, #19
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	2203      	movs	r2, #3
 8004206:	701a      	strb	r2, [r3, #0]
        break;
 8004208:	e005      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800420a:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d0ed      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8004216:	2313      	movs	r3, #19
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d154      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004224:	23c0      	movs	r3, #192	; 0xc0
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4013      	ands	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d019      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d014      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800423c:	4b5a      	ldr	r3, [pc, #360]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	4a5b      	ldr	r2, [pc, #364]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004242:	4013      	ands	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004246:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	0249      	lsls	r1, r1, #9
 8004250:	430a      	orrs	r2, r1
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004254:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800425a:	4956      	ldr	r1, [pc, #344]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800425c:	400a      	ands	r2, r1
 800425e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004260:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	d016      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fe fb75 	bl	800295c <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004276:	e00c      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fe fb70 	bl	800295c <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	4a4d      	ldr	r2, [pc, #308]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d904      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004288:	2313      	movs	r3, #19
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2203      	movs	r2, #3
 800428e:	701a      	strb	r2, [r3, #0]
            break;
 8004290:	e004      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	4b45      	ldr	r3, [pc, #276]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2202      	movs	r2, #2
 8004298:	4013      	ands	r3, r2
 800429a:	d0ed      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800429c:	2313      	movs	r3, #19
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a6:	4b40      	ldr	r3, [pc, #256]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	4a41      	ldr	r2, [pc, #260]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	4b3c      	ldr	r3, [pc, #240]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042b6:	430a      	orrs	r2, r1
 80042b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80042ba:	e00c      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042bc:	2312      	movs	r3, #18
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2213      	movs	r2, #19
 80042c2:	18ba      	adds	r2, r7, r2
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e005      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	2312      	movs	r3, #18
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2213      	movs	r2, #19
 80042d0:	18ba      	adds	r2, r7, r2
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042d6:	2311      	movs	r3, #17
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e4:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042e6:	4935      	ldr	r1, [pc, #212]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f6:	4b2c      	ldr	r3, [pc, #176]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	2203      	movs	r2, #3
 80042fc:	4393      	bics	r3, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004306:	430a      	orrs	r2, r1
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2220      	movs	r2, #32
 8004310:	4013      	ands	r3, r2
 8004312:	d009      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004314:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800431a:	4013      	ands	r3, r2
 800431c:	0019      	movs	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004324:	430a      	orrs	r2, r1
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	01db      	lsls	r3, r3, #7
 8004330:	4013      	ands	r3, r2
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	0899      	lsrs	r1, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004342:	430a      	orrs	r2, r1
 8004344:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	05db      	lsls	r3, r3, #23
 800434e:	429a      	cmp	r2, r3
 8004350:	d106      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	0249      	lsls	r1, r1, #9
 800435c:	430a      	orrs	r2, r1
 800435e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4013      	ands	r3, r2
 800436a:	d016      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800437c:	430a      	orrs	r2, r1
 800437e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	01db      	lsls	r3, r3, #7
 8004388:	429a      	cmp	r2, r3
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	0249      	lsls	r1, r1, #9
 8004396:	430a      	orrs	r2, r1
 8004398:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800439a:	2312      	movs	r3, #18
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	781b      	ldrb	r3, [r3, #0]
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b006      	add	sp, #24
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40007000 	.word	0x40007000
 80043b0:	fffffcff 	.word	0xfffffcff
 80043b4:	fffeffff 	.word	0xfffeffff
 80043b8:	00001388 	.word	0x00001388
 80043bc:	efffffff 	.word	0xefffffff
 80043c0:	ffffcfff 	.word	0xffffcfff
 80043c4:	ffff3fff 	.word	0xffff3fff

080043c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0a8      	b.n	800452c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	2382      	movs	r3, #130	; 0x82
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d009      	beq.n	8004402 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	61da      	str	r2, [r3, #28]
 80043f4:	e005      	b.n	8004402 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	225d      	movs	r2, #93	; 0x5d
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d107      	bne.n	8004424 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	225c      	movs	r2, #92	; 0x5c
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	0018      	movs	r0, r3
 8004420:	f7fd fffa 	bl	8002418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	225d      	movs	r2, #93	; 0x5d
 8004428:	2102      	movs	r1, #2
 800442a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	23e0      	movs	r3, #224	; 0xe0
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	429a      	cmp	r2, r3
 8004446:	d902      	bls.n	800444e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	e002      	b.n	8004454 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	015b      	lsls	r3, r3, #5
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	23f0      	movs	r3, #240	; 0xf0
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	429a      	cmp	r2, r3
 800445e:	d008      	beq.n	8004472 <HAL_SPI_Init+0xaa>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	23e0      	movs	r3, #224	; 0xe0
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	429a      	cmp	r2, r3
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	2382      	movs	r3, #130	; 0x82
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	401a      	ands	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6899      	ldr	r1, [r3, #8]
 8004480:	2384      	movs	r3, #132	; 0x84
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	400b      	ands	r3, r1
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2102      	movs	r1, #2
 800448e:	400b      	ands	r3, r1
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2101      	movs	r1, #1
 8004498:	400b      	ands	r3, r1
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6999      	ldr	r1, [r3, #24]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	400b      	ands	r3, r1
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2138      	movs	r1, #56	; 0x38
 80044ae:	400b      	ands	r3, r1
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	400b      	ands	r3, r1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	0011      	movs	r1, r2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	019b      	lsls	r3, r3, #6
 80044c6:	401a      	ands	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	2204      	movs	r2, #4
 80044d8:	401a      	ands	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2110      	movs	r1, #16
 80044e0:	400b      	ands	r3, r1
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e8:	2108      	movs	r1, #8
 80044ea:	400b      	ands	r3, r1
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68d9      	ldr	r1, [r3, #12]
 80044f2:	23f0      	movs	r3, #240	; 0xf0
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	400b      	ands	r3, r1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	0011      	movs	r1, r2
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	015b      	lsls	r3, r3, #5
 8004502:	401a      	ands	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4907      	ldr	r1, [pc, #28]	; (8004534 <HAL_SPI_Init+0x16c>)
 8004518:	400a      	ands	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	225d      	movs	r2, #93	; 0x5d
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}
 8004534:	fffff7ff 	.word	0xfffff7ff

08004538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	1dbb      	adds	r3, r7, #6
 8004546:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004548:	231f      	movs	r3, #31
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	225c      	movs	r2, #92	; 0x5c
 8004554:	5c9b      	ldrb	r3, [r3, r2]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_SPI_Transmit+0x26>
 800455a:	2302      	movs	r3, #2
 800455c:	e140      	b.n	80047e0 <HAL_SPI_Transmit+0x2a8>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	225c      	movs	r2, #92	; 0x5c
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004566:	f7fe f9f9 	bl	800295c <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800456e:	2316      	movs	r3, #22
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	1dba      	adds	r2, r7, #6
 8004574:	8812      	ldrh	r2, [r2, #0]
 8004576:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	225d      	movs	r2, #93	; 0x5d
 800457c:	5c9b      	ldrb	r3, [r3, r2]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	d004      	beq.n	800458e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004584:	231f      	movs	r3, #31
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	2202      	movs	r2, #2
 800458a:	701a      	strb	r2, [r3, #0]
    goto error;
 800458c:	e11d      	b.n	80047ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_SPI_Transmit+0x64>
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800459c:	231f      	movs	r3, #31
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80045a4:	e111      	b.n	80047ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	225d      	movs	r2, #93	; 0x5d
 80045aa:	2103      	movs	r1, #3
 80045ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1dba      	adds	r2, r7, #6
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1dba      	adds	r2, r7, #6
 80045c6:	8812      	ldrh	r2, [r2, #0]
 80045c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2244      	movs	r2, #68	; 0x44
 80045d4:	2100      	movs	r1, #0
 80045d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2246      	movs	r2, #70	; 0x46
 80045dc:	2100      	movs	r1, #0
 80045de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d110      	bne.n	800461a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2140      	movs	r1, #64	; 0x40
 8004604:	438a      	bics	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	01c9      	lsls	r1, r1, #7
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2240      	movs	r2, #64	; 0x40
 8004622:	4013      	ands	r3, r2
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d007      	beq.n	8004638 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2140      	movs	r1, #64	; 0x40
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	23e0      	movs	r3, #224	; 0xe0
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	429a      	cmp	r2, r3
 8004642:	d94e      	bls.n	80046e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_SPI_Transmit+0x11e>
 800464c:	2316      	movs	r3, #22
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d13f      	bne.n	80046d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	881a      	ldrh	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	1c9a      	adds	r2, r3, #2
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800467a:	e02c      	b.n	80046d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2202      	movs	r2, #2
 8004684:	4013      	ands	r3, r2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d112      	bne.n	80046b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	1c9a      	adds	r2, r3, #2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ae:	e012      	b.n	80046d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b0:	f7fe f954 	bl	800295c <HAL_GetTick>
 80046b4:	0002      	movs	r2, r0
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d802      	bhi.n	80046c6 <HAL_SPI_Transmit+0x18e>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	d102      	bne.n	80046cc <HAL_SPI_Transmit+0x194>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80046cc:	231f      	movs	r3, #31
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	2203      	movs	r2, #3
 80046d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80046d4:	e079      	b.n	80047ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1cd      	bne.n	800467c <HAL_SPI_Transmit+0x144>
 80046e0:	e04f      	b.n	8004782 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <HAL_SPI_Transmit+0x1bc>
 80046ea:	2316      	movs	r3, #22
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d141      	bne.n	8004778 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800471a:	e02d      	b.n	8004778 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d113      	bne.n	8004752 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004750:	e012      	b.n	8004778 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004752:	f7fe f903 	bl	800295c <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d802      	bhi.n	8004768 <HAL_SPI_Transmit+0x230>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	d102      	bne.n	800476e <HAL_SPI_Transmit+0x236>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800476e:	231f      	movs	r3, #31
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	2203      	movs	r2, #3
 8004774:	701a      	strb	r2, [r3, #0]
          goto error;
 8004776:	e028      	b.n	80047ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1cc      	bne.n	800471c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	0018      	movs	r0, r3
 800478a:	f000 fcdb 	bl	8005144 <SPI_EndRxTxTransaction>
 800478e:	1e03      	subs	r3, r0, #0
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d004      	beq.n	80047c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80047be:	231f      	movs	r3, #31
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e000      	b.n	80047ca <HAL_SPI_Transmit+0x292>
  }

error:
 80047c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	225d      	movs	r2, #93	; 0x5d
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	225c      	movs	r2, #92	; 0x5c
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80047da:	231f      	movs	r3, #31
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b008      	add	sp, #32
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	1dbb      	adds	r3, r7, #6
 80047f6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047f8:	2317      	movs	r3, #23
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	2382      	movs	r3, #130	; 0x82
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	429a      	cmp	r2, r3
 800480a:	d113      	bne.n	8004834 <HAL_SPI_Receive+0x4c>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	225d      	movs	r2, #93	; 0x5d
 8004818:	2104      	movs	r1, #4
 800481a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800481c:	1dbb      	adds	r3, r7, #6
 800481e:	881c      	ldrh	r4, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	0023      	movs	r3, r4
 800482c:	f000 f928 	bl	8004a80 <HAL_SPI_TransmitReceive>
 8004830:	0003      	movs	r3, r0
 8004832:	e11c      	b.n	8004a6e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	225c      	movs	r2, #92	; 0x5c
 8004838:	5c9b      	ldrb	r3, [r3, r2]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_SPI_Receive+0x5a>
 800483e:	2302      	movs	r3, #2
 8004840:	e115      	b.n	8004a6e <HAL_SPI_Receive+0x286>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	225c      	movs	r2, #92	; 0x5c
 8004846:	2101      	movs	r1, #1
 8004848:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800484a:	f7fe f887 	bl	800295c <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	225d      	movs	r2, #93	; 0x5d
 8004856:	5c9b      	ldrb	r3, [r3, r2]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d004      	beq.n	8004868 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800485e:	2317      	movs	r3, #23
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	2202      	movs	r2, #2
 8004864:	701a      	strb	r2, [r3, #0]
    goto error;
 8004866:	e0f7      	b.n	8004a58 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_SPI_Receive+0x8e>
 800486e:	1dbb      	adds	r3, r7, #6
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004876:	2317      	movs	r3, #23
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2201      	movs	r2, #1
 800487c:	701a      	strb	r2, [r3, #0]
    goto error;
 800487e:	e0eb      	b.n	8004a58 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	225d      	movs	r2, #93	; 0x5d
 8004884:	2104      	movs	r1, #4
 8004886:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1dba      	adds	r2, r7, #6
 8004898:	2144      	movs	r1, #68	; 0x44
 800489a:	8812      	ldrh	r2, [r2, #0]
 800489c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1dba      	adds	r2, r7, #6
 80048a2:	2146      	movs	r1, #70	; 0x46
 80048a4:	8812      	ldrh	r2, [r2, #0]
 80048a6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	23e0      	movs	r3, #224	; 0xe0
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d908      	bls.n	80048e4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4966      	ldr	r1, [pc, #408]	; (8004a78 <HAL_SPI_Receive+0x290>)
 80048de:	400a      	ands	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	e008      	b.n	80048f6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	0149      	lsls	r1, r1, #5
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10f      	bne.n	8004922 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2140      	movs	r1, #64	; 0x40
 800490e:	438a      	bics	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4957      	ldr	r1, [pc, #348]	; (8004a7c <HAL_SPI_Receive+0x294>)
 800491e:	400a      	ands	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2240      	movs	r2, #64	; 0x40
 800492a:	4013      	ands	r3, r2
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d007      	beq.n	8004940 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2140      	movs	r1, #64	; 0x40
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	23e0      	movs	r3, #224	; 0xe0
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	429a      	cmp	r2, r3
 800494a:	d900      	bls.n	800494e <HAL_SPI_Receive+0x166>
 800494c:	e069      	b.n	8004a22 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800494e:	e031      	b.n	80049b4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2201      	movs	r2, #1
 8004958:	4013      	ands	r3, r2
 800495a:	2b01      	cmp	r3, #1
 800495c:	d117      	bne.n	800498e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	001a      	movs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2246      	movs	r2, #70	; 0x46
 800497e:	5a9b      	ldrh	r3, [r3, r2]
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b299      	uxth	r1, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2246      	movs	r2, #70	; 0x46
 800498a:	5299      	strh	r1, [r3, r2]
 800498c:	e012      	b.n	80049b4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800498e:	f7fd ffe5 	bl	800295c <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d802      	bhi.n	80049a4 <HAL_SPI_Receive+0x1bc>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	d102      	bne.n	80049aa <HAL_SPI_Receive+0x1c2>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80049aa:	2317      	movs	r3, #23
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	2203      	movs	r2, #3
 80049b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80049b2:	e051      	b.n	8004a58 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2246      	movs	r2, #70	; 0x46
 80049b8:	5a9b      	ldrh	r3, [r3, r2]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1c7      	bne.n	8004950 <HAL_SPI_Receive+0x168>
 80049c0:	e035      	b.n	8004a2e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d115      	bne.n	80049fc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	b292      	uxth	r2, r2
 80049dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2246      	movs	r2, #70	; 0x46
 80049ec:	5a9b      	ldrh	r3, [r3, r2]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b299      	uxth	r1, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2246      	movs	r2, #70	; 0x46
 80049f8:	5299      	strh	r1, [r3, r2]
 80049fa:	e012      	b.n	8004a22 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049fc:	f7fd ffae 	bl	800295c <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d802      	bhi.n	8004a12 <HAL_SPI_Receive+0x22a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	d102      	bne.n	8004a18 <HAL_SPI_Receive+0x230>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004a18:	2317      	movs	r3, #23
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a20:	e01a      	b.n	8004a58 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2246      	movs	r2, #70	; 0x46
 8004a26:	5a9b      	ldrh	r3, [r3, r2]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1c9      	bne.n	80049c2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fb27 	bl	8005088 <SPI_EndRxTransaction>
 8004a3a:	1e03      	subs	r3, r0, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004a4c:	2317      	movs	r3, #23
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e000      	b.n	8004a58 <HAL_SPI_Receive+0x270>
  }

error :
 8004a56:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	225d      	movs	r2, #93	; 0x5d
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	225c      	movs	r2, #92	; 0x5c
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a68:	2317      	movs	r3, #23
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	781b      	ldrb	r3, [r3, #0]
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b007      	add	sp, #28
 8004a74:	bd90      	pop	{r4, r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	ffffefff 	.word	0xffffefff
 8004a7c:	ffffbfff 	.word	0xffffbfff

08004a80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	1cbb      	adds	r3, r7, #2
 8004a90:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a92:	2301      	movs	r3, #1
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a96:	2323      	movs	r3, #35	; 0x23
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	225c      	movs	r2, #92	; 0x5c
 8004aa2:	5c9b      	ldrb	r3, [r3, r2]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x2c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e1b6      	b.n	8004e1a <HAL_SPI_TransmitReceive+0x39a>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	225c      	movs	r2, #92	; 0x5c
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab4:	f7fd ff52 	bl	800295c <HAL_GetTick>
 8004ab8:	0003      	movs	r3, r0
 8004aba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004abc:	201b      	movs	r0, #27
 8004abe:	183b      	adds	r3, r7, r0
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	215d      	movs	r1, #93	; 0x5d
 8004ac4:	5c52      	ldrb	r2, [r2, r1]
 8004ac6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ace:	2312      	movs	r3, #18
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	1cba      	adds	r2, r7, #2
 8004ad4:	8812      	ldrh	r2, [r2, #0]
 8004ad6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ad8:	183b      	adds	r3, r7, r0
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d012      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x86>
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	2382      	movs	r3, #130	; 0x82
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d108      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_SPI_TransmitReceive+0x7c>
 8004af2:	231b      	movs	r3, #27
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d004      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004afc:	2323      	movs	r3, #35	; 0x23
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b04:	e17e      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x9a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x9a>
 8004b12:	1cbb      	adds	r3, r7, #2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8004b1a:	2323      	movs	r3, #35	; 0x23
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b22:	e16f      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	225d      	movs	r2, #93	; 0x5d
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d003      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	225d      	movs	r2, #93	; 0x5d
 8004b34:	2105      	movs	r1, #5
 8004b36:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1cba      	adds	r2, r7, #2
 8004b48:	2146      	movs	r1, #70	; 0x46
 8004b4a:	8812      	ldrh	r2, [r2, #0]
 8004b4c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1cba      	adds	r2, r7, #2
 8004b52:	2144      	movs	r1, #68	; 0x44
 8004b54:	8812      	ldrh	r2, [r2, #0]
 8004b56:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1cba      	adds	r2, r7, #2
 8004b62:	8812      	ldrh	r2, [r2, #0]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1cba      	adds	r2, r7, #2
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	23e0      	movs	r3, #224	; 0xe0
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d908      	bls.n	8004b98 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	49a4      	ldr	r1, [pc, #656]	; (8004e24 <HAL_SPI_TransmitReceive+0x3a4>)
 8004b92:	400a      	ands	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	e008      	b.n	8004baa <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2180      	movs	r1, #128	; 0x80
 8004ba4:	0149      	lsls	r1, r1, #5
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2240      	movs	r2, #64	; 0x40
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d007      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2140      	movs	r1, #64	; 0x40
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	23e0      	movs	r3, #224	; 0xe0
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d800      	bhi.n	8004bd6 <HAL_SPI_TransmitReceive+0x156>
 8004bd4:	e07f      	b.n	8004cd6 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x16a>
 8004bde:	2312      	movs	r3, #18
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d000      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x16a>
 8004be8:	e069      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	881a      	ldrh	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0e:	e056      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2202      	movs	r2, #2
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d11b      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x1d6>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x1d6>
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d113      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11c      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x21e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2246      	movs	r2, #70	; 0x46
 8004c68:	5a9b      	ldrh	r3, [r3, r2]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d016      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	1c9a      	adds	r2, r3, #2
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2246      	movs	r2, #70	; 0x46
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b299      	uxth	r1, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2246      	movs	r2, #70	; 0x46
 8004c98:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c9e:	f7fd fe5d 	bl	800295c <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d807      	bhi.n	8004cbe <HAL_SPI_TransmitReceive+0x23e>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	d004      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8004cb4:	2323      	movs	r3, #35	; 0x23
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2203      	movs	r2, #3
 8004cba:	701a      	strb	r2, [r3, #0]
        goto error;
 8004cbc:	e0a2      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1a3      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x190>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2246      	movs	r2, #70	; 0x46
 8004ccc:	5a9b      	ldrh	r3, [r3, r2]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d19d      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x190>
 8004cd4:	e085      	b.n	8004de2 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_SPI_TransmitReceive+0x26a>
 8004cde:	2312      	movs	r3, #18
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d000      	beq.n	8004cea <HAL_SPI_TransmitReceive+0x26a>
 8004ce8:	e070      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d10:	e05c      	b.n	8004dcc <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d11c      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x2da>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d017      	beq.n	8004d5a <HAL_SPI_TransmitReceive+0x2da>
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d114      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	7812      	ldrb	r2, [r2, #0]
 8004d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d11e      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x326>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2246      	movs	r2, #70	; 0x46
 8004d6c:	5a9b      	ldrh	r3, [r3, r2]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d018      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2246      	movs	r2, #70	; 0x46
 8004d94:	5a9b      	ldrh	r3, [r3, r2]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b299      	uxth	r1, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2246      	movs	r2, #70	; 0x46
 8004da0:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004da2:	2301      	movs	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004da6:	f7fd fdd9 	bl	800295c <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d802      	bhi.n	8004dbc <HAL_SPI_TransmitReceive+0x33c>
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	3301      	adds	r3, #1
 8004dba:	d102      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x342>
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8004dc2:	2323      	movs	r3, #35	; 0x23
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	701a      	strb	r2, [r3, #0]
        goto error;
 8004dca:	e01b      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d19d      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x292>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2246      	movs	r2, #70	; 0x46
 8004dda:	5a9b      	ldrh	r3, [r3, r2]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d197      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 f9ab 	bl	8005144 <SPI_EndRxTxTransaction>
 8004dee:	1e03      	subs	r3, r0, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8004df2:	2323      	movs	r3, #35	; 0x23
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60
 8004e00:	e000      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8004e02:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	225d      	movs	r2, #93	; 0x5d
 8004e08:	2101      	movs	r1, #1
 8004e0a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	225c      	movs	r2, #92	; 0x5c
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004e14:	2323      	movs	r3, #35	; 0x23
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	781b      	ldrb	r3, [r3, #0]
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b00a      	add	sp, #40	; 0x28
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	ffffefff 	.word	0xffffefff

08004e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	1dfb      	adds	r3, r7, #7
 8004e36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e38:	f7fd fd90 	bl	800295c <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	18d3      	adds	r3, r2, r3
 8004e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e48:	f7fd fd88 	bl	800295c <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e50:	4b3a      	ldr	r3, [pc, #232]	; (8004f3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	015b      	lsls	r3, r3, #5
 8004e56:	0d1b      	lsrs	r3, r3, #20
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	4353      	muls	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e5e:	e058      	b.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	3301      	adds	r3, #1
 8004e64:	d055      	beq.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e66:	f7fd fd79 	bl	800295c <HAL_GetTick>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d902      	bls.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d142      	bne.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	21e0      	movs	r1, #224	; 0xe0
 8004e88:	438a      	bics	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	2382      	movs	r3, #130	; 0x82
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d113      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d005      	beq.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d107      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2140      	movs	r1, #64	; 0x40
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	019b      	lsls	r3, r3, #6
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d110      	bne.n	8004eee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	491a      	ldr	r1, [pc, #104]	; (8004f40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	0189      	lsls	r1, r1, #6
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	225d      	movs	r2, #93	; 0x5d
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	225c      	movs	r2, #92	; 0x5c
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e017      	b.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	425a      	negs	r2, r3
 8004f22:	4153      	adcs	r3, r2
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	001a      	movs	r2, r3
 8004f28:	1dfb      	adds	r3, r7, #7
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d197      	bne.n	8004e60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	0018      	movs	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b008      	add	sp, #32
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	ffffdfff 	.word	0xffffdfff

08004f44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f52:	2317      	movs	r3, #23
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f5a:	f7fd fcff 	bl	800295c <HAL_GetTick>
 8004f5e:	0002      	movs	r2, r0
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f6a:	f7fd fcf7 	bl	800295c <HAL_GetTick>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	0013      	movs	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	00da      	lsls	r2, r3, #3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	0d1b      	lsrs	r3, r3, #20
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	4353      	muls	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f90:	e068      	b.n	8005064 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	23c0      	movs	r3, #192	; 0xc0
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d10a      	bne.n	8004fb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d107      	bne.n	8004fb2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	2117      	movs	r1, #23
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	d055      	beq.n	8005064 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fb8:	f7fd fcd0 	bl	800295c <HAL_GetTick>
 8004fbc:	0002      	movs	r2, r0
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d902      	bls.n	8004fce <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d142      	bne.n	8005054 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	21e0      	movs	r1, #224	; 0xe0
 8004fda:	438a      	bics	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	2382      	movs	r3, #130	; 0x82
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d113      	bne.n	8005012 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d005      	beq.n	8005002 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	2380      	movs	r3, #128	; 0x80
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d107      	bne.n	8005012 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	438a      	bics	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	429a      	cmp	r2, r3
 800501c:	d110      	bne.n	8005040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4916      	ldr	r1, [pc, #88]	; (8005084 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	0189      	lsls	r1, r1, #6
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	225d      	movs	r2, #93	; 0x5d
 8005044:	2101      	movs	r1, #1
 8005046:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	225c      	movs	r2, #92	; 0x5c
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e010      	b.n	8005076 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3b01      	subs	r3, #1
 8005062:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d18e      	bne.n	8004f92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b00a      	add	sp, #40	; 0x28
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	20000000 	.word	0x20000000
 8005084:	ffffdfff 	.word	0xffffdfff

08005088 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	2382      	movs	r3, #130	; 0x82
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	429a      	cmp	r2, r3
 800509e:	d113      	bne.n	80050c8 <SPI_EndRxTransaction+0x40>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d107      	bne.n	80050c8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2140      	movs	r1, #64	; 0x40
 80050c4:	438a      	bics	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	0013      	movs	r3, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	f7ff fea7 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 80050da:	1e03      	subs	r3, r0, #0
 80050dc:	d007      	beq.n	80050ee <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e2:	2220      	movs	r2, #32
 80050e4:	431a      	orrs	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e026      	b.n	800513c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	2382      	movs	r3, #130	; 0x82
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d11f      	bne.n	800513a <SPI_EndRxTransaction+0xb2>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	429a      	cmp	r2, r3
 8005104:	d005      	beq.n	8005112 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	429a      	cmp	r2, r3
 8005110:	d113      	bne.n	800513a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	23c0      	movs	r3, #192	; 0xc0
 8005116:	00d9      	lsls	r1, r3, #3
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	0013      	movs	r3, r2
 8005120:	2200      	movs	r2, #0
 8005122:	f7ff ff0f 	bl	8004f44 <SPI_WaitFifoStateUntilTimeout>
 8005126:	1e03      	subs	r3, r0, #0
 8005128:	d007      	beq.n	800513a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512e:	2220      	movs	r2, #32
 8005130:	431a      	orrs	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e000      	b.n	800513c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	0018      	movs	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	b004      	add	sp, #16
 8005142:	bd80      	pop	{r7, pc}

08005144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	23c0      	movs	r3, #192	; 0xc0
 8005154:	0159      	lsls	r1, r3, #5
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	0013      	movs	r3, r2
 800515e:	2200      	movs	r2, #0
 8005160:	f7ff fef0 	bl	8004f44 <SPI_WaitFifoStateUntilTimeout>
 8005164:	1e03      	subs	r3, r0, #0
 8005166:	d007      	beq.n	8005178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	2220      	movs	r2, #32
 800516e:	431a      	orrs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e027      	b.n	80051c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	0013      	movs	r3, r2
 8005182:	2200      	movs	r2, #0
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	f7ff fe4f 	bl	8004e28 <SPI_WaitFlagStateUntilTimeout>
 800518a:	1e03      	subs	r3, r0, #0
 800518c:	d007      	beq.n	800519e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005192:	2220      	movs	r2, #32
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e014      	b.n	80051c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	23c0      	movs	r3, #192	; 0xc0
 80051a2:	00d9      	lsls	r1, r3, #3
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	0013      	movs	r3, r2
 80051ac:	2200      	movs	r2, #0
 80051ae:	f7ff fec9 	bl	8004f44 <SPI_WaitFifoStateUntilTimeout>
 80051b2:	1e03      	subs	r3, r0, #0
 80051b4:	d007      	beq.n	80051c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ba:	2220      	movs	r2, #32
 80051bc:	431a      	orrs	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e000      	b.n	80051c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b004      	add	sp, #16
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e04a      	b.n	8005278 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	223d      	movs	r2, #61	; 0x3d
 80051e6:	5c9b      	ldrb	r3, [r3, r2]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	223c      	movs	r2, #60	; 0x3c
 80051f2:	2100      	movs	r1, #0
 80051f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fd f9c9 	bl	8002590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	223d      	movs	r2, #61	; 0x3d
 8005202:	2102      	movs	r1, #2
 8005204:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	0019      	movs	r1, r3
 8005210:	0010      	movs	r0, r2
 8005212:	f000 fb51 	bl	80058b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2248      	movs	r2, #72	; 0x48
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	223e      	movs	r2, #62	; 0x3e
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	223f      	movs	r2, #63	; 0x3f
 800522a:	2101      	movs	r1, #1
 800522c:	5499      	strb	r1, [r3, r2]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2241      	movs	r2, #65	; 0x41
 800523a:	2101      	movs	r1, #1
 800523c:	5499      	strb	r1, [r3, r2]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2242      	movs	r2, #66	; 0x42
 8005242:	2101      	movs	r1, #1
 8005244:	5499      	strb	r1, [r3, r2]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2243      	movs	r2, #67	; 0x43
 800524a:	2101      	movs	r1, #1
 800524c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2244      	movs	r2, #68	; 0x44
 8005252:	2101      	movs	r1, #1
 8005254:	5499      	strb	r1, [r3, r2]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2245      	movs	r2, #69	; 0x45
 800525a:	2101      	movs	r1, #1
 800525c:	5499      	strb	r1, [r3, r2]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2246      	movs	r2, #70	; 0x46
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2247      	movs	r2, #71	; 0x47
 800526a:	2101      	movs	r1, #1
 800526c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	223d      	movs	r2, #61	; 0x3d
 8005272:	2101      	movs	r1, #1
 8005274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d108      	bne.n	80052a2 <HAL_TIM_PWM_Start+0x22>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	223e      	movs	r2, #62	; 0x3e
 8005294:	5c9b      	ldrb	r3, [r3, r2]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	4193      	sbcs	r3, r2
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e037      	b.n	8005312 <HAL_TIM_PWM_Start+0x92>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d108      	bne.n	80052ba <HAL_TIM_PWM_Start+0x3a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	223f      	movs	r2, #63	; 0x3f
 80052ac:	5c9b      	ldrb	r3, [r3, r2]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	4193      	sbcs	r3, r2
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	e02b      	b.n	8005312 <HAL_TIM_PWM_Start+0x92>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d108      	bne.n	80052d2 <HAL_TIM_PWM_Start+0x52>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	5c9b      	ldrb	r3, [r3, r2]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	1e5a      	subs	r2, r3, #1
 80052cc:	4193      	sbcs	r3, r2
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	e01f      	b.n	8005312 <HAL_TIM_PWM_Start+0x92>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d108      	bne.n	80052ea <HAL_TIM_PWM_Start+0x6a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2241      	movs	r2, #65	; 0x41
 80052dc:	5c9b      	ldrb	r3, [r3, r2]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	4193      	sbcs	r3, r2
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	e013      	b.n	8005312 <HAL_TIM_PWM_Start+0x92>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d108      	bne.n	8005302 <HAL_TIM_PWM_Start+0x82>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2242      	movs	r2, #66	; 0x42
 80052f4:	5c9b      	ldrb	r3, [r3, r2]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	1e5a      	subs	r2, r3, #1
 80052fc:	4193      	sbcs	r3, r2
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e007      	b.n	8005312 <HAL_TIM_PWM_Start+0x92>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2243      	movs	r2, #67	; 0x43
 8005306:	5c9b      	ldrb	r3, [r3, r2]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	1e5a      	subs	r2, r3, #1
 800530e:	4193      	sbcs	r3, r2
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e07b      	b.n	8005412 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0xaa>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	223e      	movs	r2, #62	; 0x3e
 8005324:	2102      	movs	r1, #2
 8005326:	5499      	strb	r1, [r3, r2]
 8005328:	e023      	b.n	8005372 <HAL_TIM_PWM_Start+0xf2>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0xba>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	223f      	movs	r2, #63	; 0x3f
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]
 8005338:	e01b      	b.n	8005372 <HAL_TIM_PWM_Start+0xf2>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b08      	cmp	r3, #8
 800533e:	d104      	bne.n	800534a <HAL_TIM_PWM_Start+0xca>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	2102      	movs	r1, #2
 8005346:	5499      	strb	r1, [r3, r2]
 8005348:	e013      	b.n	8005372 <HAL_TIM_PWM_Start+0xf2>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Start+0xda>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2241      	movs	r2, #65	; 0x41
 8005354:	2102      	movs	r1, #2
 8005356:	5499      	strb	r1, [r3, r2]
 8005358:	e00b      	b.n	8005372 <HAL_TIM_PWM_Start+0xf2>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b10      	cmp	r3, #16
 800535e:	d104      	bne.n	800536a <HAL_TIM_PWM_Start+0xea>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2242      	movs	r2, #66	; 0x42
 8005364:	2102      	movs	r1, #2
 8005366:	5499      	strb	r1, [r3, r2]
 8005368:	e003      	b.n	8005372 <HAL_TIM_PWM_Start+0xf2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2243      	movs	r2, #67	; 0x43
 800536e:	2102      	movs	r1, #2
 8005370:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	2201      	movs	r2, #1
 800537a:	0018      	movs	r0, r3
 800537c:	f000 fda4 	bl	8005ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a25      	ldr	r2, [pc, #148]	; (800541c <HAL_TIM_PWM_Start+0x19c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIM_PWM_Start+0x11e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a24      	ldr	r2, [pc, #144]	; (8005420 <HAL_TIM_PWM_Start+0x1a0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIM_PWM_Start+0x11e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a22      	ldr	r2, [pc, #136]	; (8005424 <HAL_TIM_PWM_Start+0x1a4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_PWM_Start+0x122>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_TIM_PWM_Start+0x124>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	0209      	lsls	r1, r1, #8
 80053b6:	430a      	orrs	r2, r1
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <HAL_TIM_PWM_Start+0x19c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_PWM_Start+0x14e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_TIM_PWM_Start+0x1a8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d116      	bne.n	80053fc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_TIM_PWM_Start+0x1ac>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d016      	beq.n	800540e <HAL_TIM_PWM_Start+0x18e>
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	025b      	lsls	r3, r3, #9
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d011      	beq.n	800540e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	430a      	orrs	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fa:	e008      	b.n	800540e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2101      	movs	r1, #1
 8005408:	430a      	orrs	r2, r1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e000      	b.n	8005410 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	0018      	movs	r0, r3
 8005414:	46bd      	mov	sp, r7
 8005416:	b004      	add	sp, #16
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	40000400 	.word	0x40000400
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e090      	b.n	8005566 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	223d      	movs	r2, #61	; 0x3d
 8005448:	5c9b      	ldrb	r3, [r3, r2]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	223c      	movs	r2, #60	; 0x3c
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0018      	movs	r0, r3
 800545c:	f7fd f828 	bl	80024b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	223d      	movs	r2, #61	; 0x3d
 8005464:	2102      	movs	r1, #2
 8005466:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	493f      	ldr	r1, [pc, #252]	; (8005570 <HAL_TIM_Encoder_Init+0x140>)
 8005474:	400a      	ands	r2, r1
 8005476:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	0019      	movs	r1, r3
 8005482:	0010      	movs	r0, r2
 8005484:	f000 fa18 	bl	80058b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_TIM_Encoder_Init+0x144>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	4313      	orrs	r3, r2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4a2c      	ldr	r2, [pc, #176]	; (8005578 <HAL_TIM_Encoder_Init+0x148>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4a2b      	ldr	r2, [pc, #172]	; (800557c <HAL_TIM_Encoder_Init+0x14c>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	4313      	orrs	r3, r2
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	011a      	lsls	r2, r3, #4
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	031b      	lsls	r3, r3, #12
 80054f2:	4313      	orrs	r3, r2
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2222      	movs	r2, #34	; 0x22
 80054fe:	4393      	bics	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2288      	movs	r2, #136	; 0x88
 8005506:	4393      	bics	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	4313      	orrs	r3, r2
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2248      	movs	r2, #72	; 0x48
 8005538:	2101      	movs	r1, #1
 800553a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	223e      	movs	r2, #62	; 0x3e
 8005540:	2101      	movs	r1, #1
 8005542:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	223f      	movs	r2, #63	; 0x3f
 8005548:	2101      	movs	r1, #1
 800554a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2244      	movs	r2, #68	; 0x44
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2245      	movs	r2, #69	; 0x45
 8005558:	2101      	movs	r1, #1
 800555a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	223d      	movs	r2, #61	; 0x3d
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b006      	add	sp, #24
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	fffebff8 	.word	0xfffebff8
 8005574:	fffffcfc 	.word	0xfffffcfc
 8005578:	fffff3f3 	.word	0xfffff3f3
 800557c:	ffff0f0f 	.word	0xffff0f0f

08005580 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800558a:	230f      	movs	r3, #15
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	213e      	movs	r1, #62	; 0x3e
 8005592:	5c52      	ldrb	r2, [r2, r1]
 8005594:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005596:	230e      	movs	r3, #14
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	213f      	movs	r1, #63	; 0x3f
 800559e:	5c52      	ldrb	r2, [r2, r1]
 80055a0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055a2:	230d      	movs	r3, #13
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	2144      	movs	r1, #68	; 0x44
 80055aa:	5c52      	ldrb	r2, [r2, r1]
 80055ac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055ae:	230c      	movs	r3, #12
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	2145      	movs	r1, #69	; 0x45
 80055b6:	5c52      	ldrb	r2, [r2, r1]
 80055b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d114      	bne.n	80055ea <HAL_TIM_Encoder_Start+0x6a>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055c0:	230f      	movs	r3, #15
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d104      	bne.n	80055d4 <HAL_TIM_Encoder_Start+0x54>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055ca:	230d      	movs	r3, #13
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d001      	beq.n	80055d8 <HAL_TIM_Encoder_Start+0x58>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e074      	b.n	80056c2 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	223e      	movs	r2, #62	; 0x3e
 80055dc:	2102      	movs	r1, #2
 80055de:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2244      	movs	r2, #68	; 0x44
 80055e4:	2102      	movs	r1, #2
 80055e6:	5499      	strb	r1, [r3, r2]
 80055e8:	e03d      	b.n	8005666 <HAL_TIM_Encoder_Start+0xe6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d114      	bne.n	800561a <HAL_TIM_Encoder_Start+0x9a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055f0:	230e      	movs	r3, #14
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d104      	bne.n	8005604 <HAL_TIM_Encoder_Start+0x84>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055fa:	230c      	movs	r3, #12
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <HAL_TIM_Encoder_Start+0x88>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e05c      	b.n	80056c2 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	223f      	movs	r2, #63	; 0x3f
 800560c:	2102      	movs	r1, #2
 800560e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2245      	movs	r2, #69	; 0x45
 8005614:	2102      	movs	r1, #2
 8005616:	5499      	strb	r1, [r3, r2]
 8005618:	e025      	b.n	8005666 <HAL_TIM_Encoder_Start+0xe6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800561a:	230f      	movs	r3, #15
 800561c:	18fb      	adds	r3, r7, r3
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10e      	bne.n	8005642 <HAL_TIM_Encoder_Start+0xc2>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005624:	230e      	movs	r3, #14
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d109      	bne.n	8005642 <HAL_TIM_Encoder_Start+0xc2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800562e:	230d      	movs	r3, #13
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d104      	bne.n	8005642 <HAL_TIM_Encoder_Start+0xc2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005638:	230c      	movs	r3, #12
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_TIM_Encoder_Start+0xc6>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e03d      	b.n	80056c2 <HAL_TIM_Encoder_Start+0x142>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223e      	movs	r2, #62	; 0x3e
 800564a:	2102      	movs	r1, #2
 800564c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	223f      	movs	r2, #63	; 0x3f
 8005652:	2102      	movs	r1, #2
 8005654:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2244      	movs	r2, #68	; 0x44
 800565a:	2102      	movs	r1, #2
 800565c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2245      	movs	r2, #69	; 0x45
 8005662:	2102      	movs	r1, #2
 8005664:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_TIM_Encoder_Start+0xf2>
 800566c:	2b04      	cmp	r3, #4
 800566e:	d008      	beq.n	8005682 <HAL_TIM_Encoder_Start+0x102>
 8005670:	e00f      	b.n	8005692 <HAL_TIM_Encoder_Start+0x112>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	2100      	movs	r1, #0
 800567a:	0018      	movs	r0, r3
 800567c:	f000 fc24 	bl	8005ec8 <TIM_CCxChannelCmd>
      break;
 8005680:	e016      	b.n	80056b0 <HAL_TIM_Encoder_Start+0x130>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	2104      	movs	r1, #4
 800568a:	0018      	movs	r0, r3
 800568c:	f000 fc1c 	bl	8005ec8 <TIM_CCxChannelCmd>
      break;
 8005690:	e00e      	b.n	80056b0 <HAL_TIM_Encoder_Start+0x130>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	2100      	movs	r1, #0
 800569a:	0018      	movs	r0, r3
 800569c:	f000 fc14 	bl	8005ec8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	2104      	movs	r1, #4
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 fc0d 	bl	8005ec8 <TIM_CCxChannelCmd>
      break;
 80056ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2101      	movs	r1, #1
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	0018      	movs	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b004      	add	sp, #16
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	223c      	movs	r2, #60	; 0x3c
 80056dc:	5c9b      	ldrb	r3, [r3, r2]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e0df      	b.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	223c      	movs	r2, #60	; 0x3c
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b14      	cmp	r3, #20
 80056f2:	d900      	bls.n	80056f6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80056f4:	e0d1      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	009a      	lsls	r2, r3, #2
 80056fa:	4b6d      	ldr	r3, [pc, #436]	; (80058b0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80056fc:	18d3      	adds	r3, r2, r3
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0011      	movs	r1, r2
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f940 	bl	8005990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2108      	movs	r1, #8
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2104      	movs	r1, #4
 800572c:	438a      	bics	r2, r1
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]
      break;
 8005742:	e0ab      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	0011      	movs	r1, r2
 800574c:	0018      	movs	r0, r3
 800574e:	f000 f99f 	bl	8005a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699a      	ldr	r2, [r3, #24]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2180      	movs	r1, #128	; 0x80
 800575e:	0109      	lsls	r1, r1, #4
 8005760:	430a      	orrs	r2, r1
 8005762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4951      	ldr	r1, [pc, #324]	; (80058b4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005770:	400a      	ands	r2, r1
 8005772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6999      	ldr	r1, [r3, #24]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	619a      	str	r2, [r3, #24]
      break;
 8005788:	e088      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0011      	movs	r1, r2
 8005792:	0018      	movs	r0, r3
 8005794:	f000 f9fa 	bl	8005b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2108      	movs	r1, #8
 80057a4:	430a      	orrs	r2, r1
 80057a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2104      	movs	r1, #4
 80057b4:	438a      	bics	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69d9      	ldr	r1, [r3, #28]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	61da      	str	r2, [r3, #28]
      break;
 80057ca:	e067      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	0011      	movs	r1, r2
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 fa5b 	bl	8005c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	0109      	lsls	r1, r1, #4
 80057e8:	430a      	orrs	r2, r1
 80057ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	492f      	ldr	r1, [pc, #188]	; (80058b4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80057f8:	400a      	ands	r2, r1
 80057fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69d9      	ldr	r1, [r3, #28]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	61da      	str	r2, [r3, #28]
      break;
 8005810:	e044      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	0011      	movs	r1, r2
 800581a:	0018      	movs	r0, r3
 800581c:	f000 fa9c 	bl	8005d58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2108      	movs	r1, #8
 800582c:	430a      	orrs	r2, r1
 800582e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2104      	movs	r1, #4
 800583c:	438a      	bics	r2, r1
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005852:	e023      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	0011      	movs	r1, r2
 800585c:	0018      	movs	r0, r3
 800585e:	f000 fad5 	bl	8005e0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	0109      	lsls	r1, r1, #4
 8005870:	430a      	orrs	r2, r1
 8005872:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	490d      	ldr	r1, [pc, #52]	; (80058b4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005880:	400a      	ands	r2, r1
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	021a      	lsls	r2, r3, #8
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005898:	e000      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800589a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	223c      	movs	r2, #60	; 0x3c
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b004      	add	sp, #16
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	08007898 	.word	0x08007898
 80058b4:	fffffbff 	.word	0xfffffbff

080058b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a2b      	ldr	r2, [pc, #172]	; (8005978 <TIM_Base_SetConfig+0xc0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_Base_SetConfig+0x20>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2a      	ldr	r2, [pc, #168]	; (800597c <TIM_Base_SetConfig+0xc4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d108      	bne.n	80058ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2270      	movs	r2, #112	; 0x70
 80058dc:	4393      	bics	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a22      	ldr	r2, [pc, #136]	; (8005978 <TIM_Base_SetConfig+0xc0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_Base_SetConfig+0x5a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a21      	ldr	r2, [pc, #132]	; (800597c <TIM_Base_SetConfig+0xc4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_Base_SetConfig+0x5a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a20      	ldr	r2, [pc, #128]	; (8005980 <TIM_Base_SetConfig+0xc8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0x5a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1f      	ldr	r2, [pc, #124]	; (8005984 <TIM_Base_SetConfig+0xcc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0x5a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a1e      	ldr	r2, [pc, #120]	; (8005988 <TIM_Base_SetConfig+0xd0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a1d      	ldr	r2, [pc, #116]	; (800598c <TIM_Base_SetConfig+0xd4>)
 8005916:	4013      	ands	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	4393      	bics	r3, r2
 800592a:	001a      	movs	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a0a      	ldr	r2, [pc, #40]	; (8005978 <TIM_Base_SetConfig+0xc0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0xaa>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <TIM_Base_SetConfig+0xcc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0xaa>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <TIM_Base_SetConfig+0xd0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d103      	bne.n	800596a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	615a      	str	r2, [r3, #20]
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	b004      	add	sp, #16
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40000400 	.word	0x40000400
 8005980:	40002000 	.word	0x40002000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	fffffcff 	.word	0xfffffcff

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	2201      	movs	r2, #1
 80059a0:	4393      	bics	r3, r2
 80059a2:	001a      	movs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <TIM_OC1_SetConfig+0xe8>)
 80059be:	4013      	ands	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2203      	movs	r2, #3
 80059c6:	4393      	bics	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2202      	movs	r2, #2
 80059d8:	4393      	bics	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a24      	ldr	r2, [pc, #144]	; (8005a7c <TIM_OC1_SetConfig+0xec>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d007      	beq.n	80059fe <TIM_OC1_SetConfig+0x6e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <TIM_OC1_SetConfig+0xf0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d003      	beq.n	80059fe <TIM_OC1_SetConfig+0x6e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <TIM_OC1_SetConfig+0xf4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2208      	movs	r2, #8
 8005a02:	4393      	bics	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2204      	movs	r2, #4
 8005a14:	4393      	bics	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <TIM_OC1_SetConfig+0xec>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_OC1_SetConfig+0xa0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <TIM_OC1_SetConfig+0xf0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC1_SetConfig+0xa0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <TIM_OC1_SetConfig+0xf4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d111      	bne.n	8005a54 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <TIM_OC1_SetConfig+0xf8>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <TIM_OC1_SetConfig+0xfc>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b006      	add	sp, #24
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	fffeff8f 	.word	0xfffeff8f
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800
 8005a88:	fffffeff 	.word	0xfffffeff
 8005a8c:	fffffdff 	.word	0xfffffdff

08005a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	4393      	bics	r3, r2
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	; (8005b70 <TIM_OC2_SetConfig+0xe0>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <TIM_OC2_SetConfig+0xe4>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	4393      	bics	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <TIM_OC2_SetConfig+0xe8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10d      	bne.n	8005b0e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	4393      	bics	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	4393      	bics	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <TIM_OC2_SetConfig+0xe8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <TIM_OC2_SetConfig+0x96>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <TIM_OC2_SetConfig+0xec>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC2_SetConfig+0x96>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a17      	ldr	r2, [pc, #92]	; (8005b80 <TIM_OC2_SetConfig+0xf0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d113      	bne.n	8005b4e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4a16      	ldr	r2, [pc, #88]	; (8005b84 <TIM_OC2_SetConfig+0xf4>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <TIM_OC2_SetConfig+0xf8>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b006      	add	sp, #24
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	feff8fff 	.word	0xfeff8fff
 8005b74:	fffffcff 	.word	0xfffffcff
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800
 8005b84:	fffffbff 	.word	0xfffffbff
 8005b88:	fffff7ff 	.word	0xfffff7ff

08005b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4a33      	ldr	r2, [pc, #204]	; (8005c68 <TIM_OC3_SetConfig+0xdc>)
 8005b9c:	401a      	ands	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4a2d      	ldr	r2, [pc, #180]	; (8005c6c <TIM_OC3_SetConfig+0xe0>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	4393      	bics	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	4a27      	ldr	r2, [pc, #156]	; (8005c70 <TIM_OC3_SetConfig+0xe4>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <TIM_OC3_SetConfig+0xe8>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10d      	bne.n	8005c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <TIM_OC3_SetConfig+0xec>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <TIM_OC3_SetConfig+0xf0>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <TIM_OC3_SetConfig+0xe8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_OC3_SetConfig+0x92>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <TIM_OC3_SetConfig+0xf4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_OC3_SetConfig+0x92>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <TIM_OC3_SetConfig+0xf8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d113      	bne.n	8005c46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <TIM_OC3_SetConfig+0xfc>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <TIM_OC3_SetConfig+0x100>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b006      	add	sp, #24
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	fffffeff 	.word	0xfffffeff
 8005c6c:	fffeff8f 	.word	0xfffeff8f
 8005c70:	fffffdff 	.word	0xfffffdff
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	fffff7ff 	.word	0xfffff7ff
 8005c7c:	fffffbff 	.word	0xfffffbff
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800
 8005c88:	ffffefff 	.word	0xffffefff
 8005c8c:	ffffdfff 	.word	0xffffdfff

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	4a26      	ldr	r2, [pc, #152]	; (8005d38 <TIM_OC4_SetConfig+0xa8>)
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <TIM_OC4_SetConfig+0xac>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <TIM_OC4_SetConfig+0xb0>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <TIM_OC4_SetConfig+0xb4>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a17      	ldr	r2, [pc, #92]	; (8005d48 <TIM_OC4_SetConfig+0xb8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_OC4_SetConfig+0x70>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <TIM_OC4_SetConfig+0xbc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC4_SetConfig+0x70>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <TIM_OC4_SetConfig+0xc0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d109      	bne.n	8005d14 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <TIM_OC4_SetConfig+0xc4>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b006      	add	sp, #24
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	ffffefff 	.word	0xffffefff
 8005d3c:	feff8fff 	.word	0xfeff8fff
 8005d40:	fffffcff 	.word	0xfffffcff
 8005d44:	ffffdfff 	.word	0xffffdfff
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800
 8005d54:	ffffbfff 	.word	0xffffbfff

08005d58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4a23      	ldr	r2, [pc, #140]	; (8005df4 <TIM_OC5_SetConfig+0x9c>)
 8005d68:	401a      	ands	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <TIM_OC5_SetConfig+0xa0>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <TIM_OC5_SetConfig+0xa4>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <TIM_OC5_SetConfig+0xa8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_OC5_SetConfig+0x66>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <TIM_OC5_SetConfig+0xac>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC5_SetConfig+0x66>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <TIM_OC5_SetConfig+0xb0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d109      	bne.n	8005dd2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <TIM_OC5_SetConfig+0x9c>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	621a      	str	r2, [r3, #32]
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b006      	add	sp, #24
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	fffeffff 	.word	0xfffeffff
 8005df8:	fffeff8f 	.word	0xfffeff8f
 8005dfc:	fffdffff 	.word	0xfffdffff
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800

08005e0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4a24      	ldr	r2, [pc, #144]	; (8005eac <TIM_OC6_SetConfig+0xa0>)
 8005e1c:	401a      	ands	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <TIM_OC6_SetConfig+0xa4>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <TIM_OC6_SetConfig+0xa8>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	051b      	lsls	r3, r3, #20
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <TIM_OC6_SetConfig+0xac>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_OC6_SetConfig+0x68>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <TIM_OC6_SetConfig+0xb0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_OC6_SetConfig+0x68>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <TIM_OC6_SetConfig+0xb4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d109      	bne.n	8005e88 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <TIM_OC6_SetConfig+0xb8>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	029b      	lsls	r3, r3, #10
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b006      	add	sp, #24
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	ffefffff 	.word	0xffefffff
 8005eb0:	feff8fff 	.word	0xfeff8fff
 8005eb4:	ffdfffff 	.word	0xffdfffff
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
 8005ec4:	fffbffff 	.word	0xfffbffff

08005ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	221f      	movs	r2, #31
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2201      	movs	r2, #1
 8005edc:	409a      	lsls	r2, r3
 8005ede:	0013      	movs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	43d2      	mvns	r2, r2
 8005eea:	401a      	ands	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	211f      	movs	r1, #31
 8005ef8:	400b      	ands	r3, r1
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	4099      	lsls	r1, r3
 8005efe:	000b      	movs	r3, r1
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b006      	add	sp, #24
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	223c      	movs	r2, #60	; 0x3c
 8005f1e:	5c9b      	ldrb	r3, [r3, r2]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e04a      	b.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	223c      	movs	r2, #60	; 0x3c
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	223d      	movs	r2, #61	; 0x3d
 8005f34:	2102      	movs	r1, #2
 8005f36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a1d      	ldr	r2, [pc, #116]	; (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2270      	movs	r2, #112	; 0x70
 8005f68:	4393      	bics	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a11      	ldr	r2, [pc, #68]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10c      	bne.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2280      	movs	r2, #128	; 0x80
 8005f96:	4393      	bics	r3, r2
 8005f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	223d      	movs	r2, #61	; 0x3d
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	223c      	movs	r2, #60	; 0x3c
 8005fb8:	2100      	movs	r1, #0
 8005fba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b004      	add	sp, #16
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	40012c00 	.word	0x40012c00
 8005fcc:	ff0fffff 	.word	0xff0fffff
 8005fd0:	40000400 	.word	0x40000400

08005fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e046      	b.n	8006074 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2284      	movs	r2, #132	; 0x84
 8005fea:	589b      	ldr	r3, [r3, r2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d107      	bne.n	8006000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2280      	movs	r2, #128	; 0x80
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7fc fb22 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2284      	movs	r2, #132	; 0x84
 8006004:	2124      	movs	r1, #36	; 0x24
 8006006:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2101      	movs	r1, #1
 8006014:	438a      	bics	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f8dc 	bl	80061d8 <UART_SetConfig>
 8006020:	0003      	movs	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e024      	b.n	8006074 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	0018      	movs	r0, r3
 8006036:	f000 fa37 	bl	80064a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	490d      	ldr	r1, [pc, #52]	; (800607c <HAL_UART_Init+0xa8>)
 8006046:	400a      	ands	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	212a      	movs	r1, #42	; 0x2a
 8006056:	438a      	bics	r2, r1
 8006058:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 facf 	bl	8006610 <UART_CheckIdleState>
 8006072:	0003      	movs	r3, r0
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	b002      	add	sp, #8
 800607a:	bd80      	pop	{r7, pc}
 800607c:	ffffb7ff 	.word	0xffffb7ff

08006080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	1dbb      	adds	r3, r7, #6
 800608e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2284      	movs	r2, #132	; 0x84
 8006094:	589b      	ldr	r3, [r3, r2]
 8006096:	2b20      	cmp	r3, #32
 8006098:	d000      	beq.n	800609c <HAL_UART_Transmit+0x1c>
 800609a:	e097      	b.n	80061cc <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_Transmit+0x2a>
 80060a2:	1dbb      	adds	r3, r7, #6
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e08f      	b.n	80061ce <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	015b      	lsls	r3, r3, #5
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d109      	bne.n	80060ce <HAL_UART_Transmit+0x4e>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2201      	movs	r2, #1
 80060c6:	4013      	ands	r3, r2
 80060c8:	d001      	beq.n	80060ce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e07f      	b.n	80061ce <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2280      	movs	r2, #128	; 0x80
 80060d2:	5c9b      	ldrb	r3, [r3, r2]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_UART_Transmit+0x5c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e078      	b.n	80061ce <HAL_UART_Transmit+0x14e>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2280      	movs	r2, #128	; 0x80
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	228c      	movs	r2, #140	; 0x8c
 80060e8:	2100      	movs	r1, #0
 80060ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2284      	movs	r2, #132	; 0x84
 80060f0:	2121      	movs	r1, #33	; 0x21
 80060f2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060f4:	f7fc fc32 	bl	800295c <HAL_GetTick>
 80060f8:	0003      	movs	r3, r0
 80060fa:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	1dba      	adds	r2, r7, #6
 8006100:	2154      	movs	r1, #84	; 0x54
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1dba      	adds	r2, r7, #6
 800610a:	2156      	movs	r1, #86	; 0x56
 800610c:	8812      	ldrh	r2, [r2, #0]
 800610e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	015b      	lsls	r3, r3, #5
 8006118:	429a      	cmp	r2, r3
 800611a:	d108      	bne.n	800612e <HAL_UART_Transmit+0xae>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e003      	b.n	8006136 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2280      	movs	r2, #128	; 0x80
 800613a:	2100      	movs	r1, #0
 800613c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800613e:	e02c      	b.n	800619a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	0013      	movs	r3, r2
 800614a:	2200      	movs	r2, #0
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	f000 faab 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8006152:	1e03      	subs	r3, r0, #0
 8006154:	d001      	beq.n	800615a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e039      	b.n	80061ce <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10b      	bne.n	8006178 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	001a      	movs	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	05d2      	lsls	r2, r2, #23
 800616c:	0dd2      	lsrs	r2, r2, #23
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	3302      	adds	r3, #2
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e007      	b.n	8006188 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2256      	movs	r2, #86	; 0x56
 800618c:	5a9b      	ldrh	r3, [r3, r2]
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b299      	uxth	r1, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2256      	movs	r2, #86	; 0x56
 8006198:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2256      	movs	r2, #86	; 0x56
 800619e:	5a9b      	ldrh	r3, [r3, r2]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1cc      	bne.n	8006140 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	0013      	movs	r3, r2
 80061b0:	2200      	movs	r2, #0
 80061b2:	2140      	movs	r1, #64	; 0x40
 80061b4:	f000 fa78 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 80061b8:	1e03      	subs	r3, r0, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e006      	b.n	80061ce <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2284      	movs	r2, #132	; 0x84
 80061c4:	2120      	movs	r1, #32
 80061c6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e000      	b.n	80061ce <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
  }
}
 80061ce:	0018      	movs	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	b008      	add	sp, #32
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e0:	231e      	movs	r3, #30
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a9f      	ldr	r2, [pc, #636]	; (8006484 <UART_SetConfig+0x2ac>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	430a      	orrs	r2, r1
 8006214:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4a9a      	ldr	r2, [pc, #616]	; (8006488 <UART_SetConfig+0x2b0>)
 800621e:	4013      	ands	r3, r2
 8006220:	0019      	movs	r1, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	617b      	str	r3, [r7, #20]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	4a91      	ldr	r2, [pc, #580]	; (800648c <UART_SetConfig+0x2b4>)
 8006246:	4013      	ands	r3, r2
 8006248:	0019      	movs	r1, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	220f      	movs	r2, #15
 800625c:	4393      	bics	r3, r2
 800625e:	0019      	movs	r1, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a87      	ldr	r2, [pc, #540]	; (8006490 <UART_SetConfig+0x2b8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d125      	bne.n	80062c2 <UART_SetConfig+0xea>
 8006276:	4b87      	ldr	r3, [pc, #540]	; (8006494 <UART_SetConfig+0x2bc>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	2203      	movs	r2, #3
 800627c:	4013      	ands	r3, r2
 800627e:	2b01      	cmp	r3, #1
 8006280:	d00f      	beq.n	80062a2 <UART_SetConfig+0xca>
 8006282:	d304      	bcc.n	800628e <UART_SetConfig+0xb6>
 8006284:	2b02      	cmp	r3, #2
 8006286:	d007      	beq.n	8006298 <UART_SetConfig+0xc0>
 8006288:	2b03      	cmp	r3, #3
 800628a:	d00f      	beq.n	80062ac <UART_SetConfig+0xd4>
 800628c:	e013      	b.n	80062b6 <UART_SetConfig+0xde>
 800628e:	231f      	movs	r3, #31
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e022      	b.n	80062de <UART_SetConfig+0x106>
 8006298:	231f      	movs	r3, #31
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	2202      	movs	r2, #2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e01d      	b.n	80062de <UART_SetConfig+0x106>
 80062a2:	231f      	movs	r3, #31
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	2204      	movs	r2, #4
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e018      	b.n	80062de <UART_SetConfig+0x106>
 80062ac:	231f      	movs	r3, #31
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	2208      	movs	r2, #8
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	e013      	b.n	80062de <UART_SetConfig+0x106>
 80062b6:	231f      	movs	r3, #31
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	2210      	movs	r2, #16
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	e00d      	b.n	80062de <UART_SetConfig+0x106>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a74      	ldr	r2, [pc, #464]	; (8006498 <UART_SetConfig+0x2c0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d104      	bne.n	80062d6 <UART_SetConfig+0xfe>
 80062cc:	231f      	movs	r3, #31
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e003      	b.n	80062de <UART_SetConfig+0x106>
 80062d6:	231f      	movs	r3, #31
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	2210      	movs	r2, #16
 80062dc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d000      	beq.n	80062ec <UART_SetConfig+0x114>
 80062ea:	e065      	b.n	80063b8 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 80062ec:	231f      	movs	r3, #31
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d00d      	beq.n	8006312 <UART_SetConfig+0x13a>
 80062f6:	dc02      	bgt.n	80062fe <UART_SetConfig+0x126>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <UART_SetConfig+0x130>
 80062fc:	e015      	b.n	800632a <UART_SetConfig+0x152>
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d00a      	beq.n	8006318 <UART_SetConfig+0x140>
 8006302:	2b08      	cmp	r3, #8
 8006304:	d00d      	beq.n	8006322 <UART_SetConfig+0x14a>
 8006306:	e010      	b.n	800632a <UART_SetConfig+0x152>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006308:	f7fd ff22 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 800630c:	0003      	movs	r3, r0
 800630e:	61bb      	str	r3, [r7, #24]
        break;
 8006310:	e012      	b.n	8006338 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006312:	4b62      	ldr	r3, [pc, #392]	; (800649c <UART_SetConfig+0x2c4>)
 8006314:	61bb      	str	r3, [r7, #24]
        break;
 8006316:	e00f      	b.n	8006338 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006318:	f7fd fe8e 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 800631c:	0003      	movs	r3, r0
 800631e:	61bb      	str	r3, [r7, #24]
        break;
 8006320:	e00a      	b.n	8006338 <UART_SetConfig+0x160>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	61bb      	str	r3, [r7, #24]
        break;
 8006328:	e006      	b.n	8006338 <UART_SetConfig+0x160>
      default:
        pclk = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800632e:	231e      	movs	r3, #30
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
        break;
 8006336:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d100      	bne.n	8006340 <UART_SetConfig+0x168>
 800633e:	e08c      	b.n	800645a <UART_SetConfig+0x282>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006344:	4b56      	ldr	r3, [pc, #344]	; (80064a0 <UART_SetConfig+0x2c8>)
 8006346:	0052      	lsls	r2, r2, #1
 8006348:	5ad3      	ldrh	r3, [r2, r3]
 800634a:	0019      	movs	r1, r3
 800634c:	69b8      	ldr	r0, [r7, #24]
 800634e:	f7f9 fed7 	bl	8000100 <__udivsi3>
 8006352:	0003      	movs	r3, r0
 8006354:	005a      	lsls	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	18d2      	adds	r2, r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	0019      	movs	r1, r3
 8006364:	0010      	movs	r0, r2
 8006366:	f7f9 fecb 	bl	8000100 <__udivsi3>
 800636a:	0003      	movs	r3, r0
 800636c:	b29b      	uxth	r3, r3
 800636e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d91b      	bls.n	80063ae <UART_SetConfig+0x1d6>
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4a4a      	ldr	r2, [pc, #296]	; (80064a4 <UART_SetConfig+0x2cc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d817      	bhi.n	80063ae <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	b29a      	uxth	r2, r3
 8006382:	200e      	movs	r0, #14
 8006384:	183b      	adds	r3, r7, r0
 8006386:	210f      	movs	r1, #15
 8006388:	438a      	bics	r2, r1
 800638a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	085b      	lsrs	r3, r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	2207      	movs	r2, #7
 8006394:	4013      	ands	r3, r2
 8006396:	b299      	uxth	r1, r3
 8006398:	183b      	adds	r3, r7, r0
 800639a:	183a      	adds	r2, r7, r0
 800639c:	8812      	ldrh	r2, [r2, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	183a      	adds	r2, r7, r0
 80063a8:	8812      	ldrh	r2, [r2, #0]
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	e055      	b.n	800645a <UART_SetConfig+0x282>
      }
      else
      {
        ret = HAL_ERROR;
 80063ae:	231e      	movs	r3, #30
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e050      	b.n	800645a <UART_SetConfig+0x282>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b8:	231f      	movs	r3, #31
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d00d      	beq.n	80063de <UART_SetConfig+0x206>
 80063c2:	dc02      	bgt.n	80063ca <UART_SetConfig+0x1f2>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <UART_SetConfig+0x1fc>
 80063c8:	e015      	b.n	80063f6 <UART_SetConfig+0x21e>
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d00a      	beq.n	80063e4 <UART_SetConfig+0x20c>
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d00d      	beq.n	80063ee <UART_SetConfig+0x216>
 80063d2:	e010      	b.n	80063f6 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fd febc 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 80063d8:	0003      	movs	r3, r0
 80063da:	61bb      	str	r3, [r7, #24]
        break;
 80063dc:	e012      	b.n	8006404 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063de:	4b2f      	ldr	r3, [pc, #188]	; (800649c <UART_SetConfig+0x2c4>)
 80063e0:	61bb      	str	r3, [r7, #24]
        break;
 80063e2:	e00f      	b.n	8006404 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e4:	f7fd fe28 	bl	8004038 <HAL_RCC_GetSysClockFreq>
 80063e8:	0003      	movs	r3, r0
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e00a      	b.n	8006404 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	61bb      	str	r3, [r7, #24]
        break;
 80063f4:	e006      	b.n	8006404 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063fa:	231e      	movs	r3, #30
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	2201      	movs	r2, #1
 8006400:	701a      	strb	r2, [r3, #0]
        break;
 8006402:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d027      	beq.n	800645a <UART_SetConfig+0x282>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800640e:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <UART_SetConfig+0x2c8>)
 8006410:	0052      	lsls	r2, r2, #1
 8006412:	5ad3      	ldrh	r3, [r2, r3]
 8006414:	0019      	movs	r1, r3
 8006416:	69b8      	ldr	r0, [r7, #24]
 8006418:	f7f9 fe72 	bl	8000100 <__udivsi3>
 800641c:	0003      	movs	r3, r0
 800641e:	001a      	movs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	085b      	lsrs	r3, r3, #1
 8006426:	18d2      	adds	r2, r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	0019      	movs	r1, r3
 800642e:	0010      	movs	r0, r2
 8006430:	f7f9 fe66 	bl	8000100 <__udivsi3>
 8006434:	0003      	movs	r3, r0
 8006436:	b29b      	uxth	r3, r3
 8006438:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b0f      	cmp	r3, #15
 800643e:	d908      	bls.n	8006452 <UART_SetConfig+0x27a>
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <UART_SetConfig+0x2cc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d804      	bhi.n	8006452 <UART_SetConfig+0x27a>
      {
        huart->Instance->BRR = usartdiv;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	e003      	b.n	800645a <UART_SetConfig+0x282>
      }
      else
      {
        ret = HAL_ERROR;
 8006452:	231e      	movs	r3, #30
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	2201      	movs	r2, #1
 8006458:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	226a      	movs	r2, #106	; 0x6a
 800645e:	2101      	movs	r1, #1
 8006460:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2268      	movs	r2, #104	; 0x68
 8006466:	2101      	movs	r1, #1
 8006468:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006476:	231e      	movs	r3, #30
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	781b      	ldrb	r3, [r3, #0]
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b008      	add	sp, #32
 8006482:	bd80      	pop	{r7, pc}
 8006484:	cfff69f3 	.word	0xcfff69f3
 8006488:	ffffcfff 	.word	0xffffcfff
 800648c:	11fff4ff 	.word	0x11fff4ff
 8006490:	40013800 	.word	0x40013800
 8006494:	40021000 	.word	0x40021000
 8006498:	40004400 	.word	0x40004400
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	080078ec 	.word	0x080078ec
 80064a4:	0000ffff 	.word	0x0000ffff

080064a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	2201      	movs	r2, #1
 80064b6:	4013      	ands	r3, r2
 80064b8:	d00b      	beq.n	80064d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a4a      	ldr	r2, [pc, #296]	; (80065ec <UART_AdvFeatureConfig+0x144>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	0019      	movs	r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d6:	2202      	movs	r2, #2
 80064d8:	4013      	ands	r3, r2
 80064da:	d00b      	beq.n	80064f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4a43      	ldr	r2, [pc, #268]	; (80065f0 <UART_AdvFeatureConfig+0x148>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	0019      	movs	r1, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	2204      	movs	r2, #4
 80064fa:	4013      	ands	r3, r2
 80064fc:	d00b      	beq.n	8006516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4a3b      	ldr	r2, [pc, #236]	; (80065f4 <UART_AdvFeatureConfig+0x14c>)
 8006506:	4013      	ands	r3, r2
 8006508:	0019      	movs	r1, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	2208      	movs	r2, #8
 800651c:	4013      	ands	r3, r2
 800651e:	d00b      	beq.n	8006538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4a34      	ldr	r2, [pc, #208]	; (80065f8 <UART_AdvFeatureConfig+0x150>)
 8006528:	4013      	ands	r3, r2
 800652a:	0019      	movs	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	2210      	movs	r2, #16
 800653e:	4013      	ands	r3, r2
 8006540:	d00b      	beq.n	800655a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <UART_AdvFeatureConfig+0x154>)
 800654a:	4013      	ands	r3, r2
 800654c:	0019      	movs	r1, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	2220      	movs	r2, #32
 8006560:	4013      	ands	r3, r2
 8006562:	d00b      	beq.n	800657c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	4a25      	ldr	r2, [pc, #148]	; (8006600 <UART_AdvFeatureConfig+0x158>)
 800656c:	4013      	ands	r3, r2
 800656e:	0019      	movs	r1, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	2240      	movs	r2, #64	; 0x40
 8006582:	4013      	ands	r3, r2
 8006584:	d01d      	beq.n	80065c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <UART_AdvFeatureConfig+0x15c>)
 800658e:	4013      	ands	r3, r2
 8006590:	0019      	movs	r1, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	035b      	lsls	r3, r3, #13
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d10b      	bne.n	80065c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4a15      	ldr	r2, [pc, #84]	; (8006608 <UART_AdvFeatureConfig+0x160>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	0019      	movs	r1, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	4013      	ands	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4a0e      	ldr	r2, [pc, #56]	; (800660c <UART_AdvFeatureConfig+0x164>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	0019      	movs	r1, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
  }
}
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	fffdffff 	.word	0xfffdffff
 80065f0:	fffeffff 	.word	0xfffeffff
 80065f4:	fffbffff 	.word	0xfffbffff
 80065f8:	ffff7fff 	.word	0xffff7fff
 80065fc:	ffffefff 	.word	0xffffefff
 8006600:	ffffdfff 	.word	0xffffdfff
 8006604:	ffefffff 	.word	0xffefffff
 8006608:	ff9fffff 	.word	0xff9fffff
 800660c:	fff7ffff 	.word	0xfff7ffff

08006610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af02      	add	r7, sp, #8
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	228c      	movs	r2, #140	; 0x8c
 800661c:	2100      	movs	r1, #0
 800661e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006620:	f7fc f99c 	bl	800295c <HAL_GetTick>
 8006624:	0003      	movs	r3, r0
 8006626:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2208      	movs	r2, #8
 8006630:	4013      	ands	r3, r2
 8006632:	2b08      	cmp	r3, #8
 8006634:	d10d      	bne.n	8006652 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	2380      	movs	r3, #128	; 0x80
 800663a:	0399      	lsls	r1, r3, #14
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <UART_CheckIdleState+0x94>)
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	0013      	movs	r3, r2
 8006644:	2200      	movs	r2, #0
 8006646:	f000 f82f 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 800664a:	1e03      	subs	r3, r0, #0
 800664c:	d001      	beq.n	8006652 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e024      	b.n	800669c <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2204      	movs	r2, #4
 800665a:	4013      	ands	r3, r2
 800665c:	2b04      	cmp	r3, #4
 800665e:	d10d      	bne.n	800667c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	03d9      	lsls	r1, r3, #15
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <UART_CheckIdleState+0x94>)
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	0013      	movs	r3, r2
 800666e:	2200      	movs	r2, #0
 8006670:	f000 f81a 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8006674:	1e03      	subs	r3, r0, #0
 8006676:	d001      	beq.n	800667c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e00f      	b.n	800669c <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2284      	movs	r2, #132	; 0x84
 8006680:	2120      	movs	r1, #32
 8006682:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2288      	movs	r2, #136	; 0x88
 8006688:	2120      	movs	r1, #32
 800668a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2280      	movs	r2, #128	; 0x80
 8006696:	2100      	movs	r1, #0
 8006698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	b004      	add	sp, #16
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	01ffffff 	.word	0x01ffffff

080066a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b094      	sub	sp, #80	; 0x50
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	e09f      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0x152>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066bc:	3301      	adds	r3, #1
 80066be:	d100      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80066c0:	e09b      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0x152>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fc f94b 	bl	800295c <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13b      	bne.n	8006750 <UART_WaitOnFlagUntilTimeout+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d8:	f3ef 8310 	mrs	r3, PRIMASK
 80066dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
 80066e2:	2301      	movs	r3, #1
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	f383 8810 	msr	PRIMASK, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	494b      	ldr	r1, [pc, #300]	; (8006824 <UART_WaitOnFlagUntilTimeout+0x17c>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006706:	f3ef 8310 	mrs	r3, PRIMASK
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	643b      	str	r3, [r7, #64]	; 0x40
 8006710:	2301      	movs	r3, #1
 8006712:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	f383 8810 	msr	PRIMASK, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2101      	movs	r1, #1
 8006726:	438a      	bics	r2, r1
 8006728:	609a      	str	r2, [r3, #8]
 800672a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2284      	movs	r2, #132	; 0x84
 8006738:	2120      	movs	r1, #32
 800673a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2288      	movs	r2, #136	; 0x88
 8006740:	2120      	movs	r1, #32
 8006742:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2280      	movs	r2, #128	; 0x80
 8006748:	2100      	movs	r1, #0
 800674a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e065      	b.n	800681c <UART_WaitOnFlagUntilTimeout+0x174>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2204      	movs	r2, #4
 8006758:	4013      	ands	r3, r2
 800675a:	d04e      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0x152>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	401a      	ands	r2, r3
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	429a      	cmp	r2, r3
 800676e:	d144      	bne.n	80067fa <UART_WaitOnFlagUntilTimeout+0x152>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	0112      	lsls	r2, r2, #4
 8006778:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677a:	f3ef 8310 	mrs	r3, PRIMASK
 800677e:	613b      	str	r3, [r7, #16]
  return(result);
 8006780:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006784:	2301      	movs	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f383 8810 	msr	PRIMASK, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4922      	ldr	r1, [pc, #136]	; (8006824 <UART_WaitOnFlagUntilTimeout+0x17c>)
 800679a:	400a      	ands	r2, r1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a8:	f3ef 8310 	mrs	r3, PRIMASK
 80067ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80067ae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b2:	2301      	movs	r3, #1
 80067b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	f383 8810 	msr	PRIMASK, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2101      	movs	r1, #1
 80067c8:	438a      	bics	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2284      	movs	r2, #132	; 0x84
 80067da:	2120      	movs	r1, #32
 80067dc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2288      	movs	r2, #136	; 0x88
 80067e2:	2120      	movs	r1, #32
 80067e4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	228c      	movs	r2, #140	; 0x8c
 80067ea:	2120      	movs	r1, #32
 80067ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2280      	movs	r2, #128	; 0x80
 80067f2:	2100      	movs	r1, #0
 80067f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e010      	b.n	800681c <UART_WaitOnFlagUntilTimeout+0x174>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4013      	ands	r3, r2
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	425a      	negs	r2, r3
 800680a:	4153      	adcs	r3, r2
 800680c:	b2db      	uxtb	r3, r3
 800680e:	001a      	movs	r2, r3
 8006810:	1dfb      	adds	r3, r7, #7
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d100      	bne.n	800681a <UART_WaitOnFlagUntilTimeout+0x172>
 8006818:	e74f      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	0018      	movs	r0, r3
 800681e:	46bd      	mov	sp, r7
 8006820:	b014      	add	sp, #80	; 0x50
 8006822:	bd80      	pop	{r7, pc}
 8006824:	fffffe5f 	.word	0xfffffe5f

08006828 <__errno>:
 8006828:	4b01      	ldr	r3, [pc, #4]	; (8006830 <__errno+0x8>)
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	4770      	bx	lr
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	2000000c 	.word	0x2000000c

08006834 <__libc_init_array>:
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	2600      	movs	r6, #0
 8006838:	4d0c      	ldr	r5, [pc, #48]	; (800686c <__libc_init_array+0x38>)
 800683a:	4c0d      	ldr	r4, [pc, #52]	; (8006870 <__libc_init_array+0x3c>)
 800683c:	1b64      	subs	r4, r4, r5
 800683e:	10a4      	asrs	r4, r4, #2
 8006840:	42a6      	cmp	r6, r4
 8006842:	d109      	bne.n	8006858 <__libc_init_array+0x24>
 8006844:	2600      	movs	r6, #0
 8006846:	f000 ffa3 	bl	8007790 <_init>
 800684a:	4d0a      	ldr	r5, [pc, #40]	; (8006874 <__libc_init_array+0x40>)
 800684c:	4c0a      	ldr	r4, [pc, #40]	; (8006878 <__libc_init_array+0x44>)
 800684e:	1b64      	subs	r4, r4, r5
 8006850:	10a4      	asrs	r4, r4, #2
 8006852:	42a6      	cmp	r6, r4
 8006854:	d105      	bne.n	8006862 <__libc_init_array+0x2e>
 8006856:	bd70      	pop	{r4, r5, r6, pc}
 8006858:	00b3      	lsls	r3, r6, #2
 800685a:	58eb      	ldr	r3, [r5, r3]
 800685c:	4798      	blx	r3
 800685e:	3601      	adds	r6, #1
 8006860:	e7ee      	b.n	8006840 <__libc_init_array+0xc>
 8006862:	00b3      	lsls	r3, r6, #2
 8006864:	58eb      	ldr	r3, [r5, r3]
 8006866:	4798      	blx	r3
 8006868:	3601      	adds	r6, #1
 800686a:	e7f2      	b.n	8006852 <__libc_init_array+0x1e>
 800686c:	0800799c 	.word	0x0800799c
 8006870:	0800799c 	.word	0x0800799c
 8006874:	0800799c 	.word	0x0800799c
 8006878:	080079a0 	.word	0x080079a0

0800687c <memset>:
 800687c:	0003      	movs	r3, r0
 800687e:	1812      	adds	r2, r2, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	7019      	strb	r1, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>

0800688c <iprintf>:
 800688c:	b40f      	push	{r0, r1, r2, r3}
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <iprintf+0x30>)
 8006890:	b513      	push	{r0, r1, r4, lr}
 8006892:	681c      	ldr	r4, [r3, #0]
 8006894:	2c00      	cmp	r4, #0
 8006896:	d005      	beq.n	80068a4 <iprintf+0x18>
 8006898:	69a3      	ldr	r3, [r4, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <iprintf+0x18>
 800689e:	0020      	movs	r0, r4
 80068a0:	f000 fa3c 	bl	8006d1c <__sinit>
 80068a4:	ab05      	add	r3, sp, #20
 80068a6:	9a04      	ldr	r2, [sp, #16]
 80068a8:	68a1      	ldr	r1, [r4, #8]
 80068aa:	0020      	movs	r0, r4
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	f000 fc05 	bl	80070bc <_vfiprintf_r>
 80068b2:	bc16      	pop	{r1, r2, r4}
 80068b4:	bc08      	pop	{r3}
 80068b6:	b004      	add	sp, #16
 80068b8:	4718      	bx	r3
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	2000000c 	.word	0x2000000c

080068c0 <_puts_r>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	0005      	movs	r5, r0
 80068c4:	000e      	movs	r6, r1
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d004      	beq.n	80068d4 <_puts_r+0x14>
 80068ca:	6983      	ldr	r3, [r0, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <_puts_r+0x14>
 80068d0:	f000 fa24 	bl	8006d1c <__sinit>
 80068d4:	69ab      	ldr	r3, [r5, #24]
 80068d6:	68ac      	ldr	r4, [r5, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <_puts_r+0x22>
 80068dc:	0028      	movs	r0, r5
 80068de:	f000 fa1d 	bl	8006d1c <__sinit>
 80068e2:	4b24      	ldr	r3, [pc, #144]	; (8006974 <_puts_r+0xb4>)
 80068e4:	429c      	cmp	r4, r3
 80068e6:	d10f      	bne.n	8006908 <_puts_r+0x48>
 80068e8:	686c      	ldr	r4, [r5, #4]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	071b      	lsls	r3, r3, #28
 80068ee:	d502      	bpl.n	80068f6 <_puts_r+0x36>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d11f      	bne.n	8006936 <_puts_r+0x76>
 80068f6:	0021      	movs	r1, r4
 80068f8:	0028      	movs	r0, r5
 80068fa:	f000 f8a1 	bl	8006a40 <__swsetup_r>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d019      	beq.n	8006936 <_puts_r+0x76>
 8006902:	2001      	movs	r0, #1
 8006904:	4240      	negs	r0, r0
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <_puts_r+0xb8>)
 800690a:	429c      	cmp	r4, r3
 800690c:	d101      	bne.n	8006912 <_puts_r+0x52>
 800690e:	68ac      	ldr	r4, [r5, #8]
 8006910:	e7eb      	b.n	80068ea <_puts_r+0x2a>
 8006912:	4b1a      	ldr	r3, [pc, #104]	; (800697c <_puts_r+0xbc>)
 8006914:	429c      	cmp	r4, r3
 8006916:	d1e8      	bne.n	80068ea <_puts_r+0x2a>
 8006918:	68ec      	ldr	r4, [r5, #12]
 800691a:	e7e6      	b.n	80068ea <_puts_r+0x2a>
 800691c:	3601      	adds	r6, #1
 800691e:	60a3      	str	r3, [r4, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	da04      	bge.n	800692e <_puts_r+0x6e>
 8006924:	69a2      	ldr	r2, [r4, #24]
 8006926:	429a      	cmp	r2, r3
 8006928:	dc16      	bgt.n	8006958 <_puts_r+0x98>
 800692a:	290a      	cmp	r1, #10
 800692c:	d014      	beq.n	8006958 <_puts_r+0x98>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	7019      	strb	r1, [r3, #0]
 8006936:	68a3      	ldr	r3, [r4, #8]
 8006938:	7831      	ldrb	r1, [r6, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	2900      	cmp	r1, #0
 800693e:	d1ed      	bne.n	800691c <_puts_r+0x5c>
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	da0f      	bge.n	8006966 <_puts_r+0xa6>
 8006946:	0022      	movs	r2, r4
 8006948:	310a      	adds	r1, #10
 800694a:	0028      	movs	r0, r5
 800694c:	f000 f822 	bl	8006994 <__swbuf_r>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d0d6      	beq.n	8006902 <_puts_r+0x42>
 8006954:	200a      	movs	r0, #10
 8006956:	e7d6      	b.n	8006906 <_puts_r+0x46>
 8006958:	0022      	movs	r2, r4
 800695a:	0028      	movs	r0, r5
 800695c:	f000 f81a 	bl	8006994 <__swbuf_r>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d1e8      	bne.n	8006936 <_puts_r+0x76>
 8006964:	e7cd      	b.n	8006902 <_puts_r+0x42>
 8006966:	200a      	movs	r0, #10
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	6022      	str	r2, [r4, #0]
 800696e:	7018      	strb	r0, [r3, #0]
 8006970:	e7c9      	b.n	8006906 <_puts_r+0x46>
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	08007928 	.word	0x08007928
 8006978:	08007948 	.word	0x08007948
 800697c:	08007908 	.word	0x08007908

08006980 <puts>:
 8006980:	b510      	push	{r4, lr}
 8006982:	4b03      	ldr	r3, [pc, #12]	; (8006990 <puts+0x10>)
 8006984:	0001      	movs	r1, r0
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	f7ff ff9a 	bl	80068c0 <_puts_r>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	2000000c 	.word	0x2000000c

08006994 <__swbuf_r>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	0005      	movs	r5, r0
 8006998:	000e      	movs	r6, r1
 800699a:	0014      	movs	r4, r2
 800699c:	2800      	cmp	r0, #0
 800699e:	d004      	beq.n	80069aa <__swbuf_r+0x16>
 80069a0:	6983      	ldr	r3, [r0, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <__swbuf_r+0x16>
 80069a6:	f000 f9b9 	bl	8006d1c <__sinit>
 80069aa:	4b22      	ldr	r3, [pc, #136]	; (8006a34 <__swbuf_r+0xa0>)
 80069ac:	429c      	cmp	r4, r3
 80069ae:	d12d      	bne.n	8006a0c <__swbuf_r+0x78>
 80069b0:	686c      	ldr	r4, [r5, #4]
 80069b2:	69a3      	ldr	r3, [r4, #24]
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	d531      	bpl.n	8006a20 <__swbuf_r+0x8c>
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d02e      	beq.n	8006a20 <__swbuf_r+0x8c>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	6922      	ldr	r2, [r4, #16]
 80069c6:	b2f7      	uxtb	r7, r6
 80069c8:	1a98      	subs	r0, r3, r2
 80069ca:	6963      	ldr	r3, [r4, #20]
 80069cc:	b2f6      	uxtb	r6, r6
 80069ce:	4283      	cmp	r3, r0
 80069d0:	dc05      	bgt.n	80069de <__swbuf_r+0x4a>
 80069d2:	0021      	movs	r1, r4
 80069d4:	0028      	movs	r0, r5
 80069d6:	f000 f933 	bl	8006c40 <_fflush_r>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d126      	bne.n	8006a2c <__swbuf_r+0x98>
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	3001      	adds	r0, #1
 80069e2:	3b01      	subs	r3, #1
 80069e4:	60a3      	str	r3, [r4, #8]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	701f      	strb	r7, [r3, #0]
 80069ee:	6963      	ldr	r3, [r4, #20]
 80069f0:	4283      	cmp	r3, r0
 80069f2:	d004      	beq.n	80069fe <__swbuf_r+0x6a>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	07db      	lsls	r3, r3, #31
 80069f8:	d51a      	bpl.n	8006a30 <__swbuf_r+0x9c>
 80069fa:	2e0a      	cmp	r6, #10
 80069fc:	d118      	bne.n	8006a30 <__swbuf_r+0x9c>
 80069fe:	0021      	movs	r1, r4
 8006a00:	0028      	movs	r0, r5
 8006a02:	f000 f91d 	bl	8006c40 <_fflush_r>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d012      	beq.n	8006a30 <__swbuf_r+0x9c>
 8006a0a:	e00f      	b.n	8006a2c <__swbuf_r+0x98>
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <__swbuf_r+0xa4>)
 8006a0e:	429c      	cmp	r4, r3
 8006a10:	d101      	bne.n	8006a16 <__swbuf_r+0x82>
 8006a12:	68ac      	ldr	r4, [r5, #8]
 8006a14:	e7cd      	b.n	80069b2 <__swbuf_r+0x1e>
 8006a16:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <__swbuf_r+0xa8>)
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d1ca      	bne.n	80069b2 <__swbuf_r+0x1e>
 8006a1c:	68ec      	ldr	r4, [r5, #12]
 8006a1e:	e7c8      	b.n	80069b2 <__swbuf_r+0x1e>
 8006a20:	0021      	movs	r1, r4
 8006a22:	0028      	movs	r0, r5
 8006a24:	f000 f80c 	bl	8006a40 <__swsetup_r>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d0ca      	beq.n	80069c2 <__swbuf_r+0x2e>
 8006a2c:	2601      	movs	r6, #1
 8006a2e:	4276      	negs	r6, r6
 8006a30:	0030      	movs	r0, r6
 8006a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a34:	08007928 	.word	0x08007928
 8006a38:	08007948 	.word	0x08007948
 8006a3c:	08007908 	.word	0x08007908

08006a40 <__swsetup_r>:
 8006a40:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <__swsetup_r+0xdc>)
 8006a42:	b570      	push	{r4, r5, r6, lr}
 8006a44:	681d      	ldr	r5, [r3, #0]
 8006a46:	0006      	movs	r6, r0
 8006a48:	000c      	movs	r4, r1
 8006a4a:	2d00      	cmp	r5, #0
 8006a4c:	d005      	beq.n	8006a5a <__swsetup_r+0x1a>
 8006a4e:	69ab      	ldr	r3, [r5, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <__swsetup_r+0x1a>
 8006a54:	0028      	movs	r0, r5
 8006a56:	f000 f961 	bl	8006d1c <__sinit>
 8006a5a:	4b31      	ldr	r3, [pc, #196]	; (8006b20 <__swsetup_r+0xe0>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	d10f      	bne.n	8006a80 <__swsetup_r+0x40>
 8006a60:	686c      	ldr	r4, [r5, #4]
 8006a62:	230c      	movs	r3, #12
 8006a64:	5ee2      	ldrsh	r2, [r4, r3]
 8006a66:	b293      	uxth	r3, r2
 8006a68:	0719      	lsls	r1, r3, #28
 8006a6a:	d42d      	bmi.n	8006ac8 <__swsetup_r+0x88>
 8006a6c:	06d9      	lsls	r1, r3, #27
 8006a6e:	d411      	bmi.n	8006a94 <__swsetup_r+0x54>
 8006a70:	2309      	movs	r3, #9
 8006a72:	2001      	movs	r0, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	3337      	adds	r3, #55	; 0x37
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	4240      	negs	r0, r0
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <__swsetup_r+0xe4>)
 8006a82:	429c      	cmp	r4, r3
 8006a84:	d101      	bne.n	8006a8a <__swsetup_r+0x4a>
 8006a86:	68ac      	ldr	r4, [r5, #8]
 8006a88:	e7eb      	b.n	8006a62 <__swsetup_r+0x22>
 8006a8a:	4b27      	ldr	r3, [pc, #156]	; (8006b28 <__swsetup_r+0xe8>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d1e8      	bne.n	8006a62 <__swsetup_r+0x22>
 8006a90:	68ec      	ldr	r4, [r5, #12]
 8006a92:	e7e6      	b.n	8006a62 <__swsetup_r+0x22>
 8006a94:	075b      	lsls	r3, r3, #29
 8006a96:	d513      	bpl.n	8006ac0 <__swsetup_r+0x80>
 8006a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d008      	beq.n	8006ab0 <__swsetup_r+0x70>
 8006a9e:	0023      	movs	r3, r4
 8006aa0:	3344      	adds	r3, #68	; 0x44
 8006aa2:	4299      	cmp	r1, r3
 8006aa4:	d002      	beq.n	8006aac <__swsetup_r+0x6c>
 8006aa6:	0030      	movs	r0, r6
 8006aa8:	f000 fa38 	bl	8006f1c <_free_r>
 8006aac:	2300      	movs	r3, #0
 8006aae:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab0:	2224      	movs	r2, #36	; 0x24
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	4393      	bics	r3, r2
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	89a2      	ldrh	r2, [r4, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10b      	bne.n	8006ae6 <__swsetup_r+0xa6>
 8006ace:	21a0      	movs	r1, #160	; 0xa0
 8006ad0:	2280      	movs	r2, #128	; 0x80
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	0089      	lsls	r1, r1, #2
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	400b      	ands	r3, r1
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <__swsetup_r+0xa6>
 8006ade:	0021      	movs	r1, r4
 8006ae0:	0030      	movs	r0, r6
 8006ae2:	f000 f9d7 	bl	8006e94 <__smakebuf_r>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	89a2      	ldrh	r2, [r4, #12]
 8006aea:	4013      	ands	r3, r2
 8006aec:	d011      	beq.n	8006b12 <__swsetup_r+0xd2>
 8006aee:	2300      	movs	r3, #0
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	6963      	ldr	r3, [r4, #20]
 8006af4:	425b      	negs	r3, r3
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	2000      	movs	r0, #0
 8006afa:	6923      	ldr	r3, [r4, #16]
 8006afc:	4283      	cmp	r3, r0
 8006afe:	d1be      	bne.n	8006a7e <__swsetup_r+0x3e>
 8006b00:	230c      	movs	r3, #12
 8006b02:	5ee2      	ldrsh	r2, [r4, r3]
 8006b04:	0613      	lsls	r3, r2, #24
 8006b06:	d5ba      	bpl.n	8006a7e <__swsetup_r+0x3e>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	3801      	subs	r0, #1
 8006b10:	e7b5      	b.n	8006a7e <__swsetup_r+0x3e>
 8006b12:	0792      	lsls	r2, r2, #30
 8006b14:	d400      	bmi.n	8006b18 <__swsetup_r+0xd8>
 8006b16:	6963      	ldr	r3, [r4, #20]
 8006b18:	60a3      	str	r3, [r4, #8]
 8006b1a:	e7ed      	b.n	8006af8 <__swsetup_r+0xb8>
 8006b1c:	2000000c 	.word	0x2000000c
 8006b20:	08007928 	.word	0x08007928
 8006b24:	08007948 	.word	0x08007948
 8006b28:	08007908 	.word	0x08007908

08006b2c <__sflush_r>:
 8006b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b2e:	898a      	ldrh	r2, [r1, #12]
 8006b30:	0005      	movs	r5, r0
 8006b32:	000c      	movs	r4, r1
 8006b34:	0713      	lsls	r3, r2, #28
 8006b36:	d460      	bmi.n	8006bfa <__sflush_r+0xce>
 8006b38:	684b      	ldr	r3, [r1, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	dc04      	bgt.n	8006b48 <__sflush_r+0x1c>
 8006b3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc01      	bgt.n	8006b48 <__sflush_r+0x1c>
 8006b44:	2000      	movs	r0, #0
 8006b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b4a:	2f00      	cmp	r7, #0
 8006b4c:	d0fa      	beq.n	8006b44 <__sflush_r+0x18>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	682e      	ldr	r6, [r5, #0]
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	2380      	movs	r3, #128	; 0x80
 8006b56:	015b      	lsls	r3, r3, #5
 8006b58:	6a21      	ldr	r1, [r4, #32]
 8006b5a:	401a      	ands	r2, r3
 8006b5c:	d034      	beq.n	8006bc8 <__sflush_r+0x9c>
 8006b5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	075b      	lsls	r3, r3, #29
 8006b64:	d506      	bpl.n	8006b74 <__sflush_r+0x48>
 8006b66:	6863      	ldr	r3, [r4, #4]
 8006b68:	1ac0      	subs	r0, r0, r3
 8006b6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <__sflush_r+0x48>
 8006b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b72:	1ac0      	subs	r0, r0, r3
 8006b74:	0002      	movs	r2, r0
 8006b76:	6a21      	ldr	r1, [r4, #32]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	0028      	movs	r0, r5
 8006b7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b7e:	47b8      	blx	r7
 8006b80:	89a1      	ldrh	r1, [r4, #12]
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	d106      	bne.n	8006b94 <__sflush_r+0x68>
 8006b86:	682b      	ldr	r3, [r5, #0]
 8006b88:	2b1d      	cmp	r3, #29
 8006b8a:	d830      	bhi.n	8006bee <__sflush_r+0xc2>
 8006b8c:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <__sflush_r+0x110>)
 8006b8e:	40da      	lsrs	r2, r3
 8006b90:	07d3      	lsls	r3, r2, #31
 8006b92:	d52c      	bpl.n	8006bee <__sflush_r+0xc2>
 8006b94:	2300      	movs	r3, #0
 8006b96:	6063      	str	r3, [r4, #4]
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	04cb      	lsls	r3, r1, #19
 8006b9e:	d505      	bpl.n	8006bac <__sflush_r+0x80>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <__sflush_r+0x7e>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d100      	bne.n	8006bac <__sflush_r+0x80>
 8006baa:	6560      	str	r0, [r4, #84]	; 0x54
 8006bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bae:	602e      	str	r6, [r5, #0]
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	d0c7      	beq.n	8006b44 <__sflush_r+0x18>
 8006bb4:	0023      	movs	r3, r4
 8006bb6:	3344      	adds	r3, #68	; 0x44
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	d002      	beq.n	8006bc2 <__sflush_r+0x96>
 8006bbc:	0028      	movs	r0, r5
 8006bbe:	f000 f9ad 	bl	8006f1c <_free_r>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bc6:	e7be      	b.n	8006b46 <__sflush_r+0x1a>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	0028      	movs	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d1c6      	bne.n	8006b60 <__sflush_r+0x34>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0c3      	beq.n	8006b60 <__sflush_r+0x34>
 8006bd8:	2b1d      	cmp	r3, #29
 8006bda:	d001      	beq.n	8006be0 <__sflush_r+0xb4>
 8006bdc:	2b16      	cmp	r3, #22
 8006bde:	d101      	bne.n	8006be4 <__sflush_r+0xb8>
 8006be0:	602e      	str	r6, [r5, #0]
 8006be2:	e7af      	b.n	8006b44 <__sflush_r+0x18>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	89a2      	ldrh	r2, [r4, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	e7ab      	b.n	8006b46 <__sflush_r+0x1a>
 8006bee:	2340      	movs	r3, #64	; 0x40
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	4240      	negs	r0, r0
 8006bf8:	e7a5      	b.n	8006b46 <__sflush_r+0x1a>
 8006bfa:	690f      	ldr	r7, [r1, #16]
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	d0a1      	beq.n	8006b44 <__sflush_r+0x18>
 8006c00:	680b      	ldr	r3, [r1, #0]
 8006c02:	600f      	str	r7, [r1, #0]
 8006c04:	1bdb      	subs	r3, r3, r7
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	0792      	lsls	r2, r2, #30
 8006c0c:	d100      	bne.n	8006c10 <__sflush_r+0xe4>
 8006c0e:	694b      	ldr	r3, [r1, #20]
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dc00      	bgt.n	8006c1a <__sflush_r+0xee>
 8006c18:	e794      	b.n	8006b44 <__sflush_r+0x18>
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	003a      	movs	r2, r7
 8006c1e:	6a21      	ldr	r1, [r4, #32]
 8006c20:	0028      	movs	r0, r5
 8006c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c24:	47b0      	blx	r6
 8006c26:	2800      	cmp	r0, #0
 8006c28:	dc03      	bgt.n	8006c32 <__sflush_r+0x106>
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	89a2      	ldrh	r2, [r4, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	e7df      	b.n	8006bf2 <__sflush_r+0xc6>
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	183f      	adds	r7, r7, r0
 8006c36:	1a1b      	subs	r3, r3, r0
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	e7ea      	b.n	8006c12 <__sflush_r+0xe6>
 8006c3c:	20400001 	.word	0x20400001

08006c40 <_fflush_r>:
 8006c40:	690b      	ldr	r3, [r1, #16]
 8006c42:	b570      	push	{r4, r5, r6, lr}
 8006c44:	0005      	movs	r5, r0
 8006c46:	000c      	movs	r4, r1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <_fflush_r+0x10>
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d004      	beq.n	8006c5e <_fflush_r+0x1e>
 8006c54:	6983      	ldr	r3, [r0, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <_fflush_r+0x1e>
 8006c5a:	f000 f85f 	bl	8006d1c <__sinit>
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <_fflush_r+0x4c>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d109      	bne.n	8006c78 <_fflush_r+0x38>
 8006c64:	686c      	ldr	r4, [r5, #4]
 8006c66:	220c      	movs	r2, #12
 8006c68:	5ea3      	ldrsh	r3, [r4, r2]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0ee      	beq.n	8006c4c <_fflush_r+0xc>
 8006c6e:	0021      	movs	r1, r4
 8006c70:	0028      	movs	r0, r5
 8006c72:	f7ff ff5b 	bl	8006b2c <__sflush_r>
 8006c76:	e7ea      	b.n	8006c4e <_fflush_r+0xe>
 8006c78:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <_fflush_r+0x50>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <_fflush_r+0x42>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7f1      	b.n	8006c66 <_fflush_r+0x26>
 8006c82:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <_fflush_r+0x54>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	d1ee      	bne.n	8006c66 <_fflush_r+0x26>
 8006c88:	68ec      	ldr	r4, [r5, #12]
 8006c8a:	e7ec      	b.n	8006c66 <_fflush_r+0x26>
 8006c8c:	08007928 	.word	0x08007928
 8006c90:	08007948 	.word	0x08007948
 8006c94:	08007908 	.word	0x08007908

08006c98 <std>:
 8006c98:	2300      	movs	r3, #0
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	0004      	movs	r4, r0
 8006c9e:	6003      	str	r3, [r0, #0]
 8006ca0:	6043      	str	r3, [r0, #4]
 8006ca2:	6083      	str	r3, [r0, #8]
 8006ca4:	8181      	strh	r1, [r0, #12]
 8006ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ca8:	81c2      	strh	r2, [r0, #14]
 8006caa:	6103      	str	r3, [r0, #16]
 8006cac:	6143      	str	r3, [r0, #20]
 8006cae:	6183      	str	r3, [r0, #24]
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	305c      	adds	r0, #92	; 0x5c
 8006cb6:	f7ff fde1 	bl	800687c <memset>
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <std+0x38>)
 8006cbc:	6224      	str	r4, [r4, #32]
 8006cbe:	6263      	str	r3, [r4, #36]	; 0x24
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <std+0x3c>)
 8006cc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <std+0x40>)
 8006cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <std+0x44>)
 8006cca:	6323      	str	r3, [r4, #48]	; 0x30
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	080075f9 	.word	0x080075f9
 8006cd4:	08007621 	.word	0x08007621
 8006cd8:	08007659 	.word	0x08007659
 8006cdc:	08007685 	.word	0x08007685

08006ce0 <_cleanup_r>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4902      	ldr	r1, [pc, #8]	; (8006cec <_cleanup_r+0xc>)
 8006ce4:	f000 f88c 	bl	8006e00 <_fwalk_reent>
 8006ce8:	bd10      	pop	{r4, pc}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	08006c41 	.word	0x08006c41

08006cf0 <__sfmoreglue>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	2568      	movs	r5, #104	; 0x68
 8006cf4:	1e4a      	subs	r2, r1, #1
 8006cf6:	4355      	muls	r5, r2
 8006cf8:	000e      	movs	r6, r1
 8006cfa:	0029      	movs	r1, r5
 8006cfc:	3174      	adds	r1, #116	; 0x74
 8006cfe:	f000 f957 	bl	8006fb0 <_malloc_r>
 8006d02:	1e04      	subs	r4, r0, #0
 8006d04:	d008      	beq.n	8006d18 <__sfmoreglue+0x28>
 8006d06:	2100      	movs	r1, #0
 8006d08:	002a      	movs	r2, r5
 8006d0a:	6001      	str	r1, [r0, #0]
 8006d0c:	6046      	str	r6, [r0, #4]
 8006d0e:	300c      	adds	r0, #12
 8006d10:	60a0      	str	r0, [r4, #8]
 8006d12:	3268      	adds	r2, #104	; 0x68
 8006d14:	f7ff fdb2 	bl	800687c <memset>
 8006d18:	0020      	movs	r0, r4
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}

08006d1c <__sinit>:
 8006d1c:	6983      	ldr	r3, [r0, #24]
 8006d1e:	b513      	push	{r0, r1, r4, lr}
 8006d20:	0004      	movs	r4, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d128      	bne.n	8006d78 <__sinit+0x5c>
 8006d26:	6483      	str	r3, [r0, #72]	; 0x48
 8006d28:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006d2a:	6503      	str	r3, [r0, #80]	; 0x50
 8006d2c:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <__sinit+0x60>)
 8006d2e:	4a14      	ldr	r2, [pc, #80]	; (8006d80 <__sinit+0x64>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6282      	str	r2, [r0, #40]	; 0x28
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	4298      	cmp	r0, r3
 8006d38:	d101      	bne.n	8006d3e <__sinit+0x22>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	6183      	str	r3, [r0, #24]
 8006d3e:	0020      	movs	r0, r4
 8006d40:	f000 f820 	bl	8006d84 <__sfp>
 8006d44:	6060      	str	r0, [r4, #4]
 8006d46:	0020      	movs	r0, r4
 8006d48:	f000 f81c 	bl	8006d84 <__sfp>
 8006d4c:	60a0      	str	r0, [r4, #8]
 8006d4e:	0020      	movs	r0, r4
 8006d50:	f000 f818 	bl	8006d84 <__sfp>
 8006d54:	2200      	movs	r2, #0
 8006d56:	60e0      	str	r0, [r4, #12]
 8006d58:	2104      	movs	r1, #4
 8006d5a:	6860      	ldr	r0, [r4, #4]
 8006d5c:	f7ff ff9c 	bl	8006c98 <std>
 8006d60:	2201      	movs	r2, #1
 8006d62:	2109      	movs	r1, #9
 8006d64:	68a0      	ldr	r0, [r4, #8]
 8006d66:	f7ff ff97 	bl	8006c98 <std>
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	2112      	movs	r1, #18
 8006d6e:	68e0      	ldr	r0, [r4, #12]
 8006d70:	f7ff ff92 	bl	8006c98 <std>
 8006d74:	2301      	movs	r3, #1
 8006d76:	61a3      	str	r3, [r4, #24]
 8006d78:	bd13      	pop	{r0, r1, r4, pc}
 8006d7a:	46c0      	nop			; (mov r8, r8)
 8006d7c:	08007904 	.word	0x08007904
 8006d80:	08006ce1 	.word	0x08006ce1

08006d84 <__sfp>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <__sfp+0x74>)
 8006d88:	0007      	movs	r7, r0
 8006d8a:	681e      	ldr	r6, [r3, #0]
 8006d8c:	69b3      	ldr	r3, [r6, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <__sfp+0x14>
 8006d92:	0030      	movs	r0, r6
 8006d94:	f7ff ffc2 	bl	8006d1c <__sinit>
 8006d98:	3648      	adds	r6, #72	; 0x48
 8006d9a:	68b4      	ldr	r4, [r6, #8]
 8006d9c:	6873      	ldr	r3, [r6, #4]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	d504      	bpl.n	8006dac <__sfp+0x28>
 8006da2:	6833      	ldr	r3, [r6, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <__sfp+0x34>
 8006da8:	6836      	ldr	r6, [r6, #0]
 8006daa:	e7f6      	b.n	8006d9a <__sfp+0x16>
 8006dac:	220c      	movs	r2, #12
 8006dae:	5ea5      	ldrsh	r5, [r4, r2]
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d00d      	beq.n	8006dd0 <__sfp+0x4c>
 8006db4:	3468      	adds	r4, #104	; 0x68
 8006db6:	e7f2      	b.n	8006d9e <__sfp+0x1a>
 8006db8:	2104      	movs	r1, #4
 8006dba:	0038      	movs	r0, r7
 8006dbc:	f7ff ff98 	bl	8006cf0 <__sfmoreglue>
 8006dc0:	6030      	str	r0, [r6, #0]
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1f0      	bne.n	8006da8 <__sfp+0x24>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	0004      	movs	r4, r0
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	0020      	movs	r0, r4
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	0020      	movs	r0, r4
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <__sfp+0x78>)
 8006dd4:	6665      	str	r5, [r4, #100]	; 0x64
 8006dd6:	6025      	str	r5, [r4, #0]
 8006dd8:	6065      	str	r5, [r4, #4]
 8006dda:	60a5      	str	r5, [r4, #8]
 8006ddc:	60e3      	str	r3, [r4, #12]
 8006dde:	6125      	str	r5, [r4, #16]
 8006de0:	6165      	str	r5, [r4, #20]
 8006de2:	61a5      	str	r5, [r4, #24]
 8006de4:	2208      	movs	r2, #8
 8006de6:	0029      	movs	r1, r5
 8006de8:	305c      	adds	r0, #92	; 0x5c
 8006dea:	f7ff fd47 	bl	800687c <memset>
 8006dee:	6365      	str	r5, [r4, #52]	; 0x34
 8006df0:	63a5      	str	r5, [r4, #56]	; 0x38
 8006df2:	64a5      	str	r5, [r4, #72]	; 0x48
 8006df4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006df6:	e7e9      	b.n	8006dcc <__sfp+0x48>
 8006df8:	08007904 	.word	0x08007904
 8006dfc:	ffff0001 	.word	0xffff0001

08006e00 <_fwalk_reent>:
 8006e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e02:	0004      	movs	r4, r0
 8006e04:	0007      	movs	r7, r0
 8006e06:	2600      	movs	r6, #0
 8006e08:	9101      	str	r1, [sp, #4]
 8006e0a:	3448      	adds	r4, #72	; 0x48
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	d101      	bne.n	8006e14 <_fwalk_reent+0x14>
 8006e10:	0030      	movs	r0, r6
 8006e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e14:	6863      	ldr	r3, [r4, #4]
 8006e16:	68a5      	ldr	r5, [r4, #8]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	9b00      	ldr	r3, [sp, #0]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	d501      	bpl.n	8006e26 <_fwalk_reent+0x26>
 8006e22:	6824      	ldr	r4, [r4, #0]
 8006e24:	e7f2      	b.n	8006e0c <_fwalk_reent+0xc>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d908      	bls.n	8006e3e <_fwalk_reent+0x3e>
 8006e2c:	220e      	movs	r2, #14
 8006e2e:	5eab      	ldrsh	r3, [r5, r2]
 8006e30:	3301      	adds	r3, #1
 8006e32:	d004      	beq.n	8006e3e <_fwalk_reent+0x3e>
 8006e34:	0029      	movs	r1, r5
 8006e36:	0038      	movs	r0, r7
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	4798      	blx	r3
 8006e3c:	4306      	orrs	r6, r0
 8006e3e:	3568      	adds	r5, #104	; 0x68
 8006e40:	e7eb      	b.n	8006e1a <_fwalk_reent+0x1a>
	...

08006e44 <__swhatbuf_r>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	000e      	movs	r6, r1
 8006e48:	001d      	movs	r5, r3
 8006e4a:	230e      	movs	r3, #14
 8006e4c:	5ec9      	ldrsh	r1, [r1, r3]
 8006e4e:	b096      	sub	sp, #88	; 0x58
 8006e50:	0014      	movs	r4, r2
 8006e52:	2900      	cmp	r1, #0
 8006e54:	da07      	bge.n	8006e66 <__swhatbuf_r+0x22>
 8006e56:	2300      	movs	r3, #0
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	89b3      	ldrh	r3, [r6, #12]
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	d411      	bmi.n	8006e84 <__swhatbuf_r+0x40>
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	e00f      	b.n	8006e86 <__swhatbuf_r+0x42>
 8006e66:	466a      	mov	r2, sp
 8006e68:	f000 fc38 	bl	80076dc <_fstat_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	dbf2      	blt.n	8006e56 <__swhatbuf_r+0x12>
 8006e70:	22f0      	movs	r2, #240	; 0xf0
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	0212      	lsls	r2, r2, #8
 8006e76:	4013      	ands	r3, r2
 8006e78:	4a05      	ldr	r2, [pc, #20]	; (8006e90 <__swhatbuf_r+0x4c>)
 8006e7a:	189b      	adds	r3, r3, r2
 8006e7c:	425a      	negs	r2, r3
 8006e7e:	4153      	adcs	r3, r2
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	e7ed      	b.n	8006e60 <__swhatbuf_r+0x1c>
 8006e84:	2340      	movs	r3, #64	; 0x40
 8006e86:	2000      	movs	r0, #0
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	b016      	add	sp, #88	; 0x58
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	ffffe000 	.word	0xffffe000

08006e94 <__smakebuf_r>:
 8006e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e96:	2602      	movs	r6, #2
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	0005      	movs	r5, r0
 8006e9c:	000c      	movs	r4, r1
 8006e9e:	4233      	tst	r3, r6
 8006ea0:	d006      	beq.n	8006eb0 <__smakebuf_r+0x1c>
 8006ea2:	0023      	movs	r3, r4
 8006ea4:	3347      	adds	r3, #71	; 0x47
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	2301      	movs	r3, #1
 8006eac:	6163      	str	r3, [r4, #20]
 8006eae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006eb0:	ab01      	add	r3, sp, #4
 8006eb2:	466a      	mov	r2, sp
 8006eb4:	f7ff ffc6 	bl	8006e44 <__swhatbuf_r>
 8006eb8:	9900      	ldr	r1, [sp, #0]
 8006eba:	0007      	movs	r7, r0
 8006ebc:	0028      	movs	r0, r5
 8006ebe:	f000 f877 	bl	8006fb0 <_malloc_r>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d108      	bne.n	8006ed8 <__smakebuf_r+0x44>
 8006ec6:	220c      	movs	r2, #12
 8006ec8:	5ea3      	ldrsh	r3, [r4, r2]
 8006eca:	059a      	lsls	r2, r3, #22
 8006ecc:	d4ef      	bmi.n	8006eae <__smakebuf_r+0x1a>
 8006ece:	2203      	movs	r2, #3
 8006ed0:	4393      	bics	r3, r2
 8006ed2:	431e      	orrs	r6, r3
 8006ed4:	81a6      	strh	r6, [r4, #12]
 8006ed6:	e7e4      	b.n	8006ea2 <__smakebuf_r+0xe>
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <__smakebuf_r+0x84>)
 8006eda:	62ab      	str	r3, [r5, #40]	; 0x28
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	89a2      	ldrh	r2, [r4, #12]
 8006ee0:	6020      	str	r0, [r4, #0]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	9b00      	ldr	r3, [sp, #0]
 8006ee8:	6120      	str	r0, [r4, #16]
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	9b01      	ldr	r3, [sp, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00d      	beq.n	8006f0e <__smakebuf_r+0x7a>
 8006ef2:	230e      	movs	r3, #14
 8006ef4:	5ee1      	ldrsh	r1, [r4, r3]
 8006ef6:	0028      	movs	r0, r5
 8006ef8:	f000 fc02 	bl	8007700 <_isatty_r>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d006      	beq.n	8006f0e <__smakebuf_r+0x7a>
 8006f00:	2203      	movs	r2, #3
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	4393      	bics	r3, r2
 8006f06:	001a      	movs	r2, r3
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	89a0      	ldrh	r0, [r4, #12]
 8006f10:	4338      	orrs	r0, r7
 8006f12:	81a0      	strh	r0, [r4, #12]
 8006f14:	e7cb      	b.n	8006eae <__smakebuf_r+0x1a>
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	08006ce1 	.word	0x08006ce1

08006f1c <_free_r>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	0005      	movs	r5, r0
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d010      	beq.n	8006f46 <_free_r+0x2a>
 8006f24:	1f0c      	subs	r4, r1, #4
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da00      	bge.n	8006f2e <_free_r+0x12>
 8006f2c:	18e4      	adds	r4, r4, r3
 8006f2e:	0028      	movs	r0, r5
 8006f30:	f000 fc17 	bl	8007762 <__malloc_lock>
 8006f34:	4a1d      	ldr	r2, [pc, #116]	; (8006fac <_free_r+0x90>)
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <_free_r+0x2c>
 8006f3c:	6063      	str	r3, [r4, #4]
 8006f3e:	6014      	str	r4, [r2, #0]
 8006f40:	0028      	movs	r0, r5
 8006f42:	f000 fc0f 	bl	8007764 <__malloc_unlock>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d909      	bls.n	8006f60 <_free_r+0x44>
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	1860      	adds	r0, r4, r1
 8006f50:	4283      	cmp	r3, r0
 8006f52:	d1f3      	bne.n	8006f3c <_free_r+0x20>
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	1841      	adds	r1, r0, r1
 8006f5a:	6021      	str	r1, [r4, #0]
 8006f5c:	e7ee      	b.n	8006f3c <_free_r+0x20>
 8006f5e:	0013      	movs	r3, r2
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	d001      	beq.n	8006f6a <_free_r+0x4e>
 8006f66:	42a2      	cmp	r2, r4
 8006f68:	d9f9      	bls.n	8006f5e <_free_r+0x42>
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	1858      	adds	r0, r3, r1
 8006f6e:	42a0      	cmp	r0, r4
 8006f70:	d10b      	bne.n	8006f8a <_free_r+0x6e>
 8006f72:	6820      	ldr	r0, [r4, #0]
 8006f74:	1809      	adds	r1, r1, r0
 8006f76:	1858      	adds	r0, r3, r1
 8006f78:	6019      	str	r1, [r3, #0]
 8006f7a:	4282      	cmp	r2, r0
 8006f7c:	d1e0      	bne.n	8006f40 <_free_r+0x24>
 8006f7e:	6810      	ldr	r0, [r2, #0]
 8006f80:	6852      	ldr	r2, [r2, #4]
 8006f82:	1841      	adds	r1, r0, r1
 8006f84:	6019      	str	r1, [r3, #0]
 8006f86:	605a      	str	r2, [r3, #4]
 8006f88:	e7da      	b.n	8006f40 <_free_r+0x24>
 8006f8a:	42a0      	cmp	r0, r4
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x78>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	e7d5      	b.n	8006f40 <_free_r+0x24>
 8006f94:	6821      	ldr	r1, [r4, #0]
 8006f96:	1860      	adds	r0, r4, r1
 8006f98:	4282      	cmp	r2, r0
 8006f9a:	d103      	bne.n	8006fa4 <_free_r+0x88>
 8006f9c:	6810      	ldr	r0, [r2, #0]
 8006f9e:	6852      	ldr	r2, [r2, #4]
 8006fa0:	1841      	adds	r1, r0, r1
 8006fa2:	6021      	str	r1, [r4, #0]
 8006fa4:	6062      	str	r2, [r4, #4]
 8006fa6:	605c      	str	r4, [r3, #4]
 8006fa8:	e7ca      	b.n	8006f40 <_free_r+0x24>
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	20000090 	.word	0x20000090

08006fb0 <_malloc_r>:
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	1ccd      	adds	r5, r1, #3
 8006fb6:	439d      	bics	r5, r3
 8006fb8:	3508      	adds	r5, #8
 8006fba:	0006      	movs	r6, r0
 8006fbc:	2d0c      	cmp	r5, #12
 8006fbe:	d21e      	bcs.n	8006ffe <_malloc_r+0x4e>
 8006fc0:	250c      	movs	r5, #12
 8006fc2:	42a9      	cmp	r1, r5
 8006fc4:	d81d      	bhi.n	8007002 <_malloc_r+0x52>
 8006fc6:	0030      	movs	r0, r6
 8006fc8:	f000 fbcb 	bl	8007762 <__malloc_lock>
 8006fcc:	4a25      	ldr	r2, [pc, #148]	; (8007064 <_malloc_r+0xb4>)
 8006fce:	6814      	ldr	r4, [r2, #0]
 8006fd0:	0021      	movs	r1, r4
 8006fd2:	2900      	cmp	r1, #0
 8006fd4:	d119      	bne.n	800700a <_malloc_r+0x5a>
 8006fd6:	4c24      	ldr	r4, [pc, #144]	; (8007068 <_malloc_r+0xb8>)
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <_malloc_r+0x36>
 8006fde:	0030      	movs	r0, r6
 8006fe0:	f000 faf8 	bl	80075d4 <_sbrk_r>
 8006fe4:	6020      	str	r0, [r4, #0]
 8006fe6:	0029      	movs	r1, r5
 8006fe8:	0030      	movs	r0, r6
 8006fea:	f000 faf3 	bl	80075d4 <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d12b      	bne.n	800704a <_malloc_r+0x9a>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	0030      	movs	r0, r6
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	f000 fbb4 	bl	8007764 <__malloc_unlock>
 8006ffc:	e003      	b.n	8007006 <_malloc_r+0x56>
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	dadf      	bge.n	8006fc2 <_malloc_r+0x12>
 8007002:	230c      	movs	r3, #12
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	2000      	movs	r0, #0
 8007008:	bd70      	pop	{r4, r5, r6, pc}
 800700a:	680b      	ldr	r3, [r1, #0]
 800700c:	1b5b      	subs	r3, r3, r5
 800700e:	d419      	bmi.n	8007044 <_malloc_r+0x94>
 8007010:	2b0b      	cmp	r3, #11
 8007012:	d903      	bls.n	800701c <_malloc_r+0x6c>
 8007014:	600b      	str	r3, [r1, #0]
 8007016:	18cc      	adds	r4, r1, r3
 8007018:	6025      	str	r5, [r4, #0]
 800701a:	e003      	b.n	8007024 <_malloc_r+0x74>
 800701c:	684b      	ldr	r3, [r1, #4]
 800701e:	428c      	cmp	r4, r1
 8007020:	d10d      	bne.n	800703e <_malloc_r+0x8e>
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	0030      	movs	r0, r6
 8007026:	f000 fb9d 	bl	8007764 <__malloc_unlock>
 800702a:	0020      	movs	r0, r4
 800702c:	2207      	movs	r2, #7
 800702e:	300b      	adds	r0, #11
 8007030:	1d23      	adds	r3, r4, #4
 8007032:	4390      	bics	r0, r2
 8007034:	1ac3      	subs	r3, r0, r3
 8007036:	d0e7      	beq.n	8007008 <_malloc_r+0x58>
 8007038:	425a      	negs	r2, r3
 800703a:	50e2      	str	r2, [r4, r3]
 800703c:	e7e4      	b.n	8007008 <_malloc_r+0x58>
 800703e:	6063      	str	r3, [r4, #4]
 8007040:	000c      	movs	r4, r1
 8007042:	e7ef      	b.n	8007024 <_malloc_r+0x74>
 8007044:	000c      	movs	r4, r1
 8007046:	6849      	ldr	r1, [r1, #4]
 8007048:	e7c3      	b.n	8006fd2 <_malloc_r+0x22>
 800704a:	2303      	movs	r3, #3
 800704c:	1cc4      	adds	r4, r0, #3
 800704e:	439c      	bics	r4, r3
 8007050:	42a0      	cmp	r0, r4
 8007052:	d0e1      	beq.n	8007018 <_malloc_r+0x68>
 8007054:	1a21      	subs	r1, r4, r0
 8007056:	0030      	movs	r0, r6
 8007058:	f000 fabc 	bl	80075d4 <_sbrk_r>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d1db      	bne.n	8007018 <_malloc_r+0x68>
 8007060:	e7c7      	b.n	8006ff2 <_malloc_r+0x42>
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	20000090 	.word	0x20000090
 8007068:	20000094 	.word	0x20000094

0800706c <__sfputc_r>:
 800706c:	6893      	ldr	r3, [r2, #8]
 800706e:	b510      	push	{r4, lr}
 8007070:	3b01      	subs	r3, #1
 8007072:	6093      	str	r3, [r2, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	da04      	bge.n	8007082 <__sfputc_r+0x16>
 8007078:	6994      	ldr	r4, [r2, #24]
 800707a:	42a3      	cmp	r3, r4
 800707c:	db07      	blt.n	800708e <__sfputc_r+0x22>
 800707e:	290a      	cmp	r1, #10
 8007080:	d005      	beq.n	800708e <__sfputc_r+0x22>
 8007082:	6813      	ldr	r3, [r2, #0]
 8007084:	1c58      	adds	r0, r3, #1
 8007086:	6010      	str	r0, [r2, #0]
 8007088:	7019      	strb	r1, [r3, #0]
 800708a:	0008      	movs	r0, r1
 800708c:	bd10      	pop	{r4, pc}
 800708e:	f7ff fc81 	bl	8006994 <__swbuf_r>
 8007092:	0001      	movs	r1, r0
 8007094:	e7f9      	b.n	800708a <__sfputc_r+0x1e>

08007096 <__sfputs_r>:
 8007096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007098:	0006      	movs	r6, r0
 800709a:	000f      	movs	r7, r1
 800709c:	0014      	movs	r4, r2
 800709e:	18d5      	adds	r5, r2, r3
 80070a0:	42ac      	cmp	r4, r5
 80070a2:	d101      	bne.n	80070a8 <__sfputs_r+0x12>
 80070a4:	2000      	movs	r0, #0
 80070a6:	e007      	b.n	80070b8 <__sfputs_r+0x22>
 80070a8:	7821      	ldrb	r1, [r4, #0]
 80070aa:	003a      	movs	r2, r7
 80070ac:	0030      	movs	r0, r6
 80070ae:	f7ff ffdd 	bl	800706c <__sfputc_r>
 80070b2:	3401      	adds	r4, #1
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d1f3      	bne.n	80070a0 <__sfputs_r+0xa>
 80070b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070bc <_vfiprintf_r>:
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	b0a1      	sub	sp, #132	; 0x84
 80070c0:	9003      	str	r0, [sp, #12]
 80070c2:	000f      	movs	r7, r1
 80070c4:	0016      	movs	r6, r2
 80070c6:	001d      	movs	r5, r3
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d005      	beq.n	80070d8 <_vfiprintf_r+0x1c>
 80070cc:	6983      	ldr	r3, [r0, #24]
 80070ce:	9305      	str	r3, [sp, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <_vfiprintf_r+0x1c>
 80070d4:	f7ff fe22 	bl	8006d1c <__sinit>
 80070d8:	4b7b      	ldr	r3, [pc, #492]	; (80072c8 <_vfiprintf_r+0x20c>)
 80070da:	429f      	cmp	r7, r3
 80070dc:	d15c      	bne.n	8007198 <_vfiprintf_r+0xdc>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	685f      	ldr	r7, [r3, #4]
 80070e2:	89bb      	ldrh	r3, [r7, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	d563      	bpl.n	80071b0 <_vfiprintf_r+0xf4>
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d060      	beq.n	80071b0 <_vfiprintf_r+0xf4>
 80070ee:	2300      	movs	r3, #0
 80070f0:	ac08      	add	r4, sp, #32
 80070f2:	6163      	str	r3, [r4, #20]
 80070f4:	3320      	adds	r3, #32
 80070f6:	7663      	strb	r3, [r4, #25]
 80070f8:	3310      	adds	r3, #16
 80070fa:	76a3      	strb	r3, [r4, #26]
 80070fc:	9507      	str	r5, [sp, #28]
 80070fe:	0035      	movs	r5, r6
 8007100:	782b      	ldrb	r3, [r5, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <_vfiprintf_r+0x4e>
 8007106:	2b25      	cmp	r3, #37	; 0x25
 8007108:	d15c      	bne.n	80071c4 <_vfiprintf_r+0x108>
 800710a:	1bab      	subs	r3, r5, r6
 800710c:	9305      	str	r3, [sp, #20]
 800710e:	d00c      	beq.n	800712a <_vfiprintf_r+0x6e>
 8007110:	0032      	movs	r2, r6
 8007112:	0039      	movs	r1, r7
 8007114:	9803      	ldr	r0, [sp, #12]
 8007116:	f7ff ffbe 	bl	8007096 <__sfputs_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d100      	bne.n	8007120 <_vfiprintf_r+0x64>
 800711e:	e0c4      	b.n	80072aa <_vfiprintf_r+0x1ee>
 8007120:	6962      	ldr	r2, [r4, #20]
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	4694      	mov	ip, r2
 8007126:	4463      	add	r3, ip
 8007128:	6163      	str	r3, [r4, #20]
 800712a:	782b      	ldrb	r3, [r5, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d100      	bne.n	8007132 <_vfiprintf_r+0x76>
 8007130:	e0bb      	b.n	80072aa <_vfiprintf_r+0x1ee>
 8007132:	2201      	movs	r2, #1
 8007134:	2300      	movs	r3, #0
 8007136:	4252      	negs	r2, r2
 8007138:	6062      	str	r2, [r4, #4]
 800713a:	a904      	add	r1, sp, #16
 800713c:	3254      	adds	r2, #84	; 0x54
 800713e:	1852      	adds	r2, r2, r1
 8007140:	1c6e      	adds	r6, r5, #1
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	60e3      	str	r3, [r4, #12]
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	7013      	strb	r3, [r2, #0]
 800714a:	65a3      	str	r3, [r4, #88]	; 0x58
 800714c:	7831      	ldrb	r1, [r6, #0]
 800714e:	2205      	movs	r2, #5
 8007150:	485e      	ldr	r0, [pc, #376]	; (80072cc <_vfiprintf_r+0x210>)
 8007152:	f000 fafb 	bl	800774c <memchr>
 8007156:	1c75      	adds	r5, r6, #1
 8007158:	2800      	cmp	r0, #0
 800715a:	d135      	bne.n	80071c8 <_vfiprintf_r+0x10c>
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	06d3      	lsls	r3, r2, #27
 8007160:	d504      	bpl.n	800716c <_vfiprintf_r+0xb0>
 8007162:	2353      	movs	r3, #83	; 0x53
 8007164:	a904      	add	r1, sp, #16
 8007166:	185b      	adds	r3, r3, r1
 8007168:	2120      	movs	r1, #32
 800716a:	7019      	strb	r1, [r3, #0]
 800716c:	0713      	lsls	r3, r2, #28
 800716e:	d504      	bpl.n	800717a <_vfiprintf_r+0xbe>
 8007170:	2353      	movs	r3, #83	; 0x53
 8007172:	a904      	add	r1, sp, #16
 8007174:	185b      	adds	r3, r3, r1
 8007176:	212b      	movs	r1, #43	; 0x2b
 8007178:	7019      	strb	r1, [r3, #0]
 800717a:	7833      	ldrb	r3, [r6, #0]
 800717c:	2b2a      	cmp	r3, #42	; 0x2a
 800717e:	d02c      	beq.n	80071da <_vfiprintf_r+0x11e>
 8007180:	0035      	movs	r5, r6
 8007182:	2100      	movs	r1, #0
 8007184:	200a      	movs	r0, #10
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	782a      	ldrb	r2, [r5, #0]
 800718a:	1c6e      	adds	r6, r5, #1
 800718c:	3a30      	subs	r2, #48	; 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d964      	bls.n	800725c <_vfiprintf_r+0x1a0>
 8007192:	2900      	cmp	r1, #0
 8007194:	d02e      	beq.n	80071f4 <_vfiprintf_r+0x138>
 8007196:	e026      	b.n	80071e6 <_vfiprintf_r+0x12a>
 8007198:	4b4d      	ldr	r3, [pc, #308]	; (80072d0 <_vfiprintf_r+0x214>)
 800719a:	429f      	cmp	r7, r3
 800719c:	d102      	bne.n	80071a4 <_vfiprintf_r+0xe8>
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	689f      	ldr	r7, [r3, #8]
 80071a2:	e79e      	b.n	80070e2 <_vfiprintf_r+0x26>
 80071a4:	4b4b      	ldr	r3, [pc, #300]	; (80072d4 <_vfiprintf_r+0x218>)
 80071a6:	429f      	cmp	r7, r3
 80071a8:	d19b      	bne.n	80070e2 <_vfiprintf_r+0x26>
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	68df      	ldr	r7, [r3, #12]
 80071ae:	e798      	b.n	80070e2 <_vfiprintf_r+0x26>
 80071b0:	0039      	movs	r1, r7
 80071b2:	9803      	ldr	r0, [sp, #12]
 80071b4:	f7ff fc44 	bl	8006a40 <__swsetup_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d098      	beq.n	80070ee <_vfiprintf_r+0x32>
 80071bc:	2001      	movs	r0, #1
 80071be:	4240      	negs	r0, r0
 80071c0:	b021      	add	sp, #132	; 0x84
 80071c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c4:	3501      	adds	r5, #1
 80071c6:	e79b      	b.n	8007100 <_vfiprintf_r+0x44>
 80071c8:	4b40      	ldr	r3, [pc, #256]	; (80072cc <_vfiprintf_r+0x210>)
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	1ac0      	subs	r0, r0, r3
 80071ce:	2301      	movs	r3, #1
 80071d0:	4083      	lsls	r3, r0
 80071d2:	4313      	orrs	r3, r2
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	002e      	movs	r6, r5
 80071d8:	e7b8      	b.n	800714c <_vfiprintf_r+0x90>
 80071da:	9b07      	ldr	r3, [sp, #28]
 80071dc:	1d19      	adds	r1, r3, #4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	9107      	str	r1, [sp, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db01      	blt.n	80071ea <_vfiprintf_r+0x12e>
 80071e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e8:	e004      	b.n	80071f4 <_vfiprintf_r+0x138>
 80071ea:	425b      	negs	r3, r3
 80071ec:	60e3      	str	r3, [r4, #12]
 80071ee:	2302      	movs	r3, #2
 80071f0:	4313      	orrs	r3, r2
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	782b      	ldrb	r3, [r5, #0]
 80071f6:	2b2e      	cmp	r3, #46	; 0x2e
 80071f8:	d10a      	bne.n	8007210 <_vfiprintf_r+0x154>
 80071fa:	786b      	ldrb	r3, [r5, #1]
 80071fc:	2b2a      	cmp	r3, #42	; 0x2a
 80071fe:	d135      	bne.n	800726c <_vfiprintf_r+0x1b0>
 8007200:	9b07      	ldr	r3, [sp, #28]
 8007202:	3502      	adds	r5, #2
 8007204:	1d1a      	adds	r2, r3, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	9207      	str	r2, [sp, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	db2b      	blt.n	8007266 <_vfiprintf_r+0x1aa>
 800720e:	9309      	str	r3, [sp, #36]	; 0x24
 8007210:	4e31      	ldr	r6, [pc, #196]	; (80072d8 <_vfiprintf_r+0x21c>)
 8007212:	7829      	ldrb	r1, [r5, #0]
 8007214:	2203      	movs	r2, #3
 8007216:	0030      	movs	r0, r6
 8007218:	f000 fa98 	bl	800774c <memchr>
 800721c:	2800      	cmp	r0, #0
 800721e:	d006      	beq.n	800722e <_vfiprintf_r+0x172>
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	1b80      	subs	r0, r0, r6
 8007224:	4083      	lsls	r3, r0
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	3501      	adds	r5, #1
 800722a:	4313      	orrs	r3, r2
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	7829      	ldrb	r1, [r5, #0]
 8007230:	2206      	movs	r2, #6
 8007232:	482a      	ldr	r0, [pc, #168]	; (80072dc <_vfiprintf_r+0x220>)
 8007234:	1c6e      	adds	r6, r5, #1
 8007236:	7621      	strb	r1, [r4, #24]
 8007238:	f000 fa88 	bl	800774c <memchr>
 800723c:	2800      	cmp	r0, #0
 800723e:	d03a      	beq.n	80072b6 <_vfiprintf_r+0x1fa>
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <_vfiprintf_r+0x224>)
 8007242:	2b00      	cmp	r3, #0
 8007244:	d125      	bne.n	8007292 <_vfiprintf_r+0x1d6>
 8007246:	2207      	movs	r2, #7
 8007248:	9b07      	ldr	r3, [sp, #28]
 800724a:	3307      	adds	r3, #7
 800724c:	4393      	bics	r3, r2
 800724e:	3308      	adds	r3, #8
 8007250:	9307      	str	r3, [sp, #28]
 8007252:	6963      	ldr	r3, [r4, #20]
 8007254:	9a04      	ldr	r2, [sp, #16]
 8007256:	189b      	adds	r3, r3, r2
 8007258:	6163      	str	r3, [r4, #20]
 800725a:	e750      	b.n	80070fe <_vfiprintf_r+0x42>
 800725c:	4343      	muls	r3, r0
 800725e:	2101      	movs	r1, #1
 8007260:	189b      	adds	r3, r3, r2
 8007262:	0035      	movs	r5, r6
 8007264:	e790      	b.n	8007188 <_vfiprintf_r+0xcc>
 8007266:	2301      	movs	r3, #1
 8007268:	425b      	negs	r3, r3
 800726a:	e7d0      	b.n	800720e <_vfiprintf_r+0x152>
 800726c:	2300      	movs	r3, #0
 800726e:	200a      	movs	r0, #10
 8007270:	001a      	movs	r2, r3
 8007272:	3501      	adds	r5, #1
 8007274:	6063      	str	r3, [r4, #4]
 8007276:	7829      	ldrb	r1, [r5, #0]
 8007278:	1c6e      	adds	r6, r5, #1
 800727a:	3930      	subs	r1, #48	; 0x30
 800727c:	2909      	cmp	r1, #9
 800727e:	d903      	bls.n	8007288 <_vfiprintf_r+0x1cc>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0c5      	beq.n	8007210 <_vfiprintf_r+0x154>
 8007284:	9209      	str	r2, [sp, #36]	; 0x24
 8007286:	e7c3      	b.n	8007210 <_vfiprintf_r+0x154>
 8007288:	4342      	muls	r2, r0
 800728a:	2301      	movs	r3, #1
 800728c:	1852      	adds	r2, r2, r1
 800728e:	0035      	movs	r5, r6
 8007290:	e7f1      	b.n	8007276 <_vfiprintf_r+0x1ba>
 8007292:	ab07      	add	r3, sp, #28
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	003a      	movs	r2, r7
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <_vfiprintf_r+0x228>)
 800729a:	0021      	movs	r1, r4
 800729c:	9803      	ldr	r0, [sp, #12]
 800729e:	e000      	b.n	80072a2 <_vfiprintf_r+0x1e6>
 80072a0:	bf00      	nop
 80072a2:	9004      	str	r0, [sp, #16]
 80072a4:	9b04      	ldr	r3, [sp, #16]
 80072a6:	3301      	adds	r3, #1
 80072a8:	d1d3      	bne.n	8007252 <_vfiprintf_r+0x196>
 80072aa:	89bb      	ldrh	r3, [r7, #12]
 80072ac:	065b      	lsls	r3, r3, #25
 80072ae:	d500      	bpl.n	80072b2 <_vfiprintf_r+0x1f6>
 80072b0:	e784      	b.n	80071bc <_vfiprintf_r+0x100>
 80072b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80072b4:	e784      	b.n	80071c0 <_vfiprintf_r+0x104>
 80072b6:	ab07      	add	r3, sp, #28
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	003a      	movs	r2, r7
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <_vfiprintf_r+0x228>)
 80072be:	0021      	movs	r1, r4
 80072c0:	9803      	ldr	r0, [sp, #12]
 80072c2:	f000 f87f 	bl	80073c4 <_printf_i>
 80072c6:	e7ec      	b.n	80072a2 <_vfiprintf_r+0x1e6>
 80072c8:	08007928 	.word	0x08007928
 80072cc:	08007968 	.word	0x08007968
 80072d0:	08007948 	.word	0x08007948
 80072d4:	08007908 	.word	0x08007908
 80072d8:	0800796e 	.word	0x0800796e
 80072dc:	08007972 	.word	0x08007972
 80072e0:	00000000 	.word	0x00000000
 80072e4:	08007097 	.word	0x08007097

080072e8 <_printf_common>:
 80072e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ea:	0015      	movs	r5, r2
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	688a      	ldr	r2, [r1, #8]
 80072f0:	690b      	ldr	r3, [r1, #16]
 80072f2:	9000      	str	r0, [sp, #0]
 80072f4:	000c      	movs	r4, r1
 80072f6:	4293      	cmp	r3, r2
 80072f8:	da00      	bge.n	80072fc <_printf_common+0x14>
 80072fa:	0013      	movs	r3, r2
 80072fc:	0022      	movs	r2, r4
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	3243      	adds	r2, #67	; 0x43
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	2a00      	cmp	r2, #0
 8007306:	d001      	beq.n	800730c <_printf_common+0x24>
 8007308:	3301      	adds	r3, #1
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	069b      	lsls	r3, r3, #26
 8007310:	d502      	bpl.n	8007318 <_printf_common+0x30>
 8007312:	682b      	ldr	r3, [r5, #0]
 8007314:	3302      	adds	r3, #2
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	2706      	movs	r7, #6
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	401f      	ands	r7, r3
 800731e:	d027      	beq.n	8007370 <_printf_common+0x88>
 8007320:	0023      	movs	r3, r4
 8007322:	3343      	adds	r3, #67	; 0x43
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	1e5a      	subs	r2, r3, #1
 8007328:	4193      	sbcs	r3, r2
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d430      	bmi.n	8007392 <_printf_common+0xaa>
 8007330:	0022      	movs	r2, r4
 8007332:	9901      	ldr	r1, [sp, #4]
 8007334:	3243      	adds	r2, #67	; 0x43
 8007336:	9800      	ldr	r0, [sp, #0]
 8007338:	9e08      	ldr	r6, [sp, #32]
 800733a:	47b0      	blx	r6
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d025      	beq.n	800738c <_printf_common+0xa4>
 8007340:	2306      	movs	r3, #6
 8007342:	6820      	ldr	r0, [r4, #0]
 8007344:	682a      	ldr	r2, [r5, #0]
 8007346:	68e1      	ldr	r1, [r4, #12]
 8007348:	4003      	ands	r3, r0
 800734a:	2500      	movs	r5, #0
 800734c:	2b04      	cmp	r3, #4
 800734e:	d103      	bne.n	8007358 <_printf_common+0x70>
 8007350:	1a8d      	subs	r5, r1, r2
 8007352:	43eb      	mvns	r3, r5
 8007354:	17db      	asrs	r3, r3, #31
 8007356:	401d      	ands	r5, r3
 8007358:	68a3      	ldr	r3, [r4, #8]
 800735a:	6922      	ldr	r2, [r4, #16]
 800735c:	4293      	cmp	r3, r2
 800735e:	dd01      	ble.n	8007364 <_printf_common+0x7c>
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	18ed      	adds	r5, r5, r3
 8007364:	2700      	movs	r7, #0
 8007366:	42bd      	cmp	r5, r7
 8007368:	d120      	bne.n	80073ac <_printf_common+0xc4>
 800736a:	2000      	movs	r0, #0
 800736c:	e010      	b.n	8007390 <_printf_common+0xa8>
 800736e:	3701      	adds	r7, #1
 8007370:	68e3      	ldr	r3, [r4, #12]
 8007372:	682a      	ldr	r2, [r5, #0]
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	42bb      	cmp	r3, r7
 8007378:	ddd2      	ble.n	8007320 <_printf_common+0x38>
 800737a:	0022      	movs	r2, r4
 800737c:	2301      	movs	r3, #1
 800737e:	3219      	adds	r2, #25
 8007380:	9901      	ldr	r1, [sp, #4]
 8007382:	9800      	ldr	r0, [sp, #0]
 8007384:	9e08      	ldr	r6, [sp, #32]
 8007386:	47b0      	blx	r6
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d1f0      	bne.n	800736e <_printf_common+0x86>
 800738c:	2001      	movs	r0, #1
 800738e:	4240      	negs	r0, r0
 8007390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007392:	2030      	movs	r0, #48	; 0x30
 8007394:	18e1      	adds	r1, r4, r3
 8007396:	3143      	adds	r1, #67	; 0x43
 8007398:	7008      	strb	r0, [r1, #0]
 800739a:	0021      	movs	r1, r4
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	3145      	adds	r1, #69	; 0x45
 80073a0:	7809      	ldrb	r1, [r1, #0]
 80073a2:	18a2      	adds	r2, r4, r2
 80073a4:	3243      	adds	r2, #67	; 0x43
 80073a6:	3302      	adds	r3, #2
 80073a8:	7011      	strb	r1, [r2, #0]
 80073aa:	e7c1      	b.n	8007330 <_printf_common+0x48>
 80073ac:	0022      	movs	r2, r4
 80073ae:	2301      	movs	r3, #1
 80073b0:	321a      	adds	r2, #26
 80073b2:	9901      	ldr	r1, [sp, #4]
 80073b4:	9800      	ldr	r0, [sp, #0]
 80073b6:	9e08      	ldr	r6, [sp, #32]
 80073b8:	47b0      	blx	r6
 80073ba:	1c43      	adds	r3, r0, #1
 80073bc:	d0e6      	beq.n	800738c <_printf_common+0xa4>
 80073be:	3701      	adds	r7, #1
 80073c0:	e7d1      	b.n	8007366 <_printf_common+0x7e>
	...

080073c4 <_printf_i>:
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	9204      	str	r2, [sp, #16]
 80073ca:	000a      	movs	r2, r1
 80073cc:	3243      	adds	r2, #67	; 0x43
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	9003      	str	r0, [sp, #12]
 80073d2:	9202      	str	r2, [sp, #8]
 80073d4:	7e0a      	ldrb	r2, [r1, #24]
 80073d6:	000c      	movs	r4, r1
 80073d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073da:	2a6e      	cmp	r2, #110	; 0x6e
 80073dc:	d100      	bne.n	80073e0 <_printf_i+0x1c>
 80073de:	e086      	b.n	80074ee <_printf_i+0x12a>
 80073e0:	d81f      	bhi.n	8007422 <_printf_i+0x5e>
 80073e2:	2a63      	cmp	r2, #99	; 0x63
 80073e4:	d033      	beq.n	800744e <_printf_i+0x8a>
 80073e6:	d808      	bhi.n	80073fa <_printf_i+0x36>
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d100      	bne.n	80073ee <_printf_i+0x2a>
 80073ec:	e08c      	b.n	8007508 <_printf_i+0x144>
 80073ee:	2a58      	cmp	r2, #88	; 0x58
 80073f0:	d04d      	beq.n	800748e <_printf_i+0xca>
 80073f2:	0025      	movs	r5, r4
 80073f4:	3542      	adds	r5, #66	; 0x42
 80073f6:	702a      	strb	r2, [r5, #0]
 80073f8:	e030      	b.n	800745c <_printf_i+0x98>
 80073fa:	2a64      	cmp	r2, #100	; 0x64
 80073fc:	d001      	beq.n	8007402 <_printf_i+0x3e>
 80073fe:	2a69      	cmp	r2, #105	; 0x69
 8007400:	d1f7      	bne.n	80073f2 <_printf_i+0x2e>
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6825      	ldr	r5, [r4, #0]
 8007406:	1d0a      	adds	r2, r1, #4
 8007408:	0628      	lsls	r0, r5, #24
 800740a:	d529      	bpl.n	8007460 <_printf_i+0x9c>
 800740c:	6808      	ldr	r0, [r1, #0]
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	2800      	cmp	r0, #0
 8007412:	da03      	bge.n	800741c <_printf_i+0x58>
 8007414:	232d      	movs	r3, #45	; 0x2d
 8007416:	9a02      	ldr	r2, [sp, #8]
 8007418:	4240      	negs	r0, r0
 800741a:	7013      	strb	r3, [r2, #0]
 800741c:	4e6b      	ldr	r6, [pc, #428]	; (80075cc <_printf_i+0x208>)
 800741e:	270a      	movs	r7, #10
 8007420:	e04f      	b.n	80074c2 <_printf_i+0xfe>
 8007422:	2a73      	cmp	r2, #115	; 0x73
 8007424:	d074      	beq.n	8007510 <_printf_i+0x14c>
 8007426:	d808      	bhi.n	800743a <_printf_i+0x76>
 8007428:	2a6f      	cmp	r2, #111	; 0x6f
 800742a:	d01f      	beq.n	800746c <_printf_i+0xa8>
 800742c:	2a70      	cmp	r2, #112	; 0x70
 800742e:	d1e0      	bne.n	80073f2 <_printf_i+0x2e>
 8007430:	2220      	movs	r2, #32
 8007432:	6809      	ldr	r1, [r1, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	6022      	str	r2, [r4, #0]
 8007438:	e003      	b.n	8007442 <_printf_i+0x7e>
 800743a:	2a75      	cmp	r2, #117	; 0x75
 800743c:	d016      	beq.n	800746c <_printf_i+0xa8>
 800743e:	2a78      	cmp	r2, #120	; 0x78
 8007440:	d1d7      	bne.n	80073f2 <_printf_i+0x2e>
 8007442:	0022      	movs	r2, r4
 8007444:	2178      	movs	r1, #120	; 0x78
 8007446:	3245      	adds	r2, #69	; 0x45
 8007448:	7011      	strb	r1, [r2, #0]
 800744a:	4e61      	ldr	r6, [pc, #388]	; (80075d0 <_printf_i+0x20c>)
 800744c:	e022      	b.n	8007494 <_printf_i+0xd0>
 800744e:	0025      	movs	r5, r4
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	3542      	adds	r5, #66	; 0x42
 8007454:	1d11      	adds	r1, r2, #4
 8007456:	6019      	str	r1, [r3, #0]
 8007458:	6813      	ldr	r3, [r2, #0]
 800745a:	702b      	strb	r3, [r5, #0]
 800745c:	2301      	movs	r3, #1
 800745e:	e065      	b.n	800752c <_printf_i+0x168>
 8007460:	6808      	ldr	r0, [r1, #0]
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	0669      	lsls	r1, r5, #25
 8007466:	d5d3      	bpl.n	8007410 <_printf_i+0x4c>
 8007468:	b200      	sxth	r0, r0
 800746a:	e7d1      	b.n	8007410 <_printf_i+0x4c>
 800746c:	6819      	ldr	r1, [r3, #0]
 800746e:	6825      	ldr	r5, [r4, #0]
 8007470:	1d08      	adds	r0, r1, #4
 8007472:	6018      	str	r0, [r3, #0]
 8007474:	6808      	ldr	r0, [r1, #0]
 8007476:	062e      	lsls	r6, r5, #24
 8007478:	d505      	bpl.n	8007486 <_printf_i+0xc2>
 800747a:	4e54      	ldr	r6, [pc, #336]	; (80075cc <_printf_i+0x208>)
 800747c:	2708      	movs	r7, #8
 800747e:	2a6f      	cmp	r2, #111	; 0x6f
 8007480:	d01b      	beq.n	80074ba <_printf_i+0xf6>
 8007482:	270a      	movs	r7, #10
 8007484:	e019      	b.n	80074ba <_printf_i+0xf6>
 8007486:	066d      	lsls	r5, r5, #25
 8007488:	d5f7      	bpl.n	800747a <_printf_i+0xb6>
 800748a:	b280      	uxth	r0, r0
 800748c:	e7f5      	b.n	800747a <_printf_i+0xb6>
 800748e:	3145      	adds	r1, #69	; 0x45
 8007490:	4e4e      	ldr	r6, [pc, #312]	; (80075cc <_printf_i+0x208>)
 8007492:	700a      	strb	r2, [r1, #0]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	1d01      	adds	r1, r0, #4
 800749a:	6800      	ldr	r0, [r0, #0]
 800749c:	6019      	str	r1, [r3, #0]
 800749e:	0615      	lsls	r5, r2, #24
 80074a0:	d521      	bpl.n	80074e6 <_printf_i+0x122>
 80074a2:	07d3      	lsls	r3, r2, #31
 80074a4:	d502      	bpl.n	80074ac <_printf_i+0xe8>
 80074a6:	2320      	movs	r3, #32
 80074a8:	431a      	orrs	r2, r3
 80074aa:	6022      	str	r2, [r4, #0]
 80074ac:	2710      	movs	r7, #16
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d103      	bne.n	80074ba <_printf_i+0xf6>
 80074b2:	2320      	movs	r3, #32
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	439a      	bics	r2, r3
 80074b8:	6022      	str	r2, [r4, #0]
 80074ba:	0023      	movs	r3, r4
 80074bc:	2200      	movs	r2, #0
 80074be:	3343      	adds	r3, #67	; 0x43
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	60a3      	str	r3, [r4, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	db58      	blt.n	800757c <_printf_i+0x1b8>
 80074ca:	2204      	movs	r2, #4
 80074cc:	6821      	ldr	r1, [r4, #0]
 80074ce:	4391      	bics	r1, r2
 80074d0:	6021      	str	r1, [r4, #0]
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d154      	bne.n	8007580 <_printf_i+0x1bc>
 80074d6:	9d02      	ldr	r5, [sp, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d05a      	beq.n	8007592 <_printf_i+0x1ce>
 80074dc:	0025      	movs	r5, r4
 80074de:	7833      	ldrb	r3, [r6, #0]
 80074e0:	3542      	adds	r5, #66	; 0x42
 80074e2:	702b      	strb	r3, [r5, #0]
 80074e4:	e055      	b.n	8007592 <_printf_i+0x1ce>
 80074e6:	0655      	lsls	r5, r2, #25
 80074e8:	d5db      	bpl.n	80074a2 <_printf_i+0xde>
 80074ea:	b280      	uxth	r0, r0
 80074ec:	e7d9      	b.n	80074a2 <_printf_i+0xde>
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	680d      	ldr	r5, [r1, #0]
 80074f2:	1d10      	adds	r0, r2, #4
 80074f4:	6949      	ldr	r1, [r1, #20]
 80074f6:	6018      	str	r0, [r3, #0]
 80074f8:	6813      	ldr	r3, [r2, #0]
 80074fa:	062e      	lsls	r6, r5, #24
 80074fc:	d501      	bpl.n	8007502 <_printf_i+0x13e>
 80074fe:	6019      	str	r1, [r3, #0]
 8007500:	e002      	b.n	8007508 <_printf_i+0x144>
 8007502:	066d      	lsls	r5, r5, #25
 8007504:	d5fb      	bpl.n	80074fe <_printf_i+0x13a>
 8007506:	8019      	strh	r1, [r3, #0]
 8007508:	2300      	movs	r3, #0
 800750a:	9d02      	ldr	r5, [sp, #8]
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	e04f      	b.n	80075b0 <_printf_i+0x1ec>
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	1d11      	adds	r1, r2, #4
 8007514:	6019      	str	r1, [r3, #0]
 8007516:	6815      	ldr	r5, [r2, #0]
 8007518:	2100      	movs	r1, #0
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	0028      	movs	r0, r5
 800751e:	f000 f915 	bl	800774c <memchr>
 8007522:	2800      	cmp	r0, #0
 8007524:	d001      	beq.n	800752a <_printf_i+0x166>
 8007526:	1b40      	subs	r0, r0, r5
 8007528:	6060      	str	r0, [r4, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	2300      	movs	r3, #0
 8007530:	9a02      	ldr	r2, [sp, #8]
 8007532:	7013      	strb	r3, [r2, #0]
 8007534:	e03c      	b.n	80075b0 <_printf_i+0x1ec>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	002a      	movs	r2, r5
 800753a:	9904      	ldr	r1, [sp, #16]
 800753c:	9803      	ldr	r0, [sp, #12]
 800753e:	9d05      	ldr	r5, [sp, #20]
 8007540:	47a8      	blx	r5
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	d03e      	beq.n	80075c4 <_printf_i+0x200>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	079b      	lsls	r3, r3, #30
 800754a:	d415      	bmi.n	8007578 <_printf_i+0x1b4>
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	68e0      	ldr	r0, [r4, #12]
 8007550:	4298      	cmp	r0, r3
 8007552:	da39      	bge.n	80075c8 <_printf_i+0x204>
 8007554:	0018      	movs	r0, r3
 8007556:	e037      	b.n	80075c8 <_printf_i+0x204>
 8007558:	0022      	movs	r2, r4
 800755a:	2301      	movs	r3, #1
 800755c:	3219      	adds	r2, #25
 800755e:	9904      	ldr	r1, [sp, #16]
 8007560:	9803      	ldr	r0, [sp, #12]
 8007562:	9e05      	ldr	r6, [sp, #20]
 8007564:	47b0      	blx	r6
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	d02c      	beq.n	80075c4 <_printf_i+0x200>
 800756a:	3501      	adds	r5, #1
 800756c:	68e3      	ldr	r3, [r4, #12]
 800756e:	9a07      	ldr	r2, [sp, #28]
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	42ab      	cmp	r3, r5
 8007574:	dcf0      	bgt.n	8007558 <_printf_i+0x194>
 8007576:	e7e9      	b.n	800754c <_printf_i+0x188>
 8007578:	2500      	movs	r5, #0
 800757a:	e7f7      	b.n	800756c <_printf_i+0x1a8>
 800757c:	2800      	cmp	r0, #0
 800757e:	d0ad      	beq.n	80074dc <_printf_i+0x118>
 8007580:	9d02      	ldr	r5, [sp, #8]
 8007582:	0039      	movs	r1, r7
 8007584:	f7f8 fe42 	bl	800020c <__aeabi_uidivmod>
 8007588:	5c73      	ldrb	r3, [r6, r1]
 800758a:	3d01      	subs	r5, #1
 800758c:	702b      	strb	r3, [r5, #0]
 800758e:	2800      	cmp	r0, #0
 8007590:	d1f7      	bne.n	8007582 <_printf_i+0x1be>
 8007592:	2f08      	cmp	r7, #8
 8007594:	d109      	bne.n	80075aa <_printf_i+0x1e6>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	07db      	lsls	r3, r3, #31
 800759a:	d506      	bpl.n	80075aa <_printf_i+0x1e6>
 800759c:	6863      	ldr	r3, [r4, #4]
 800759e:	6922      	ldr	r2, [r4, #16]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	dc02      	bgt.n	80075aa <_printf_i+0x1e6>
 80075a4:	2330      	movs	r3, #48	; 0x30
 80075a6:	3d01      	subs	r5, #1
 80075a8:	702b      	strb	r3, [r5, #0]
 80075aa:	9b02      	ldr	r3, [sp, #8]
 80075ac:	1b5b      	subs	r3, r3, r5
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	aa07      	add	r2, sp, #28
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	0021      	movs	r1, r4
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	9803      	ldr	r0, [sp, #12]
 80075bc:	f7ff fe94 	bl	80072e8 <_printf_common>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d1b8      	bne.n	8007536 <_printf_i+0x172>
 80075c4:	2001      	movs	r0, #1
 80075c6:	4240      	negs	r0, r0
 80075c8:	b009      	add	sp, #36	; 0x24
 80075ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075cc:	08007979 	.word	0x08007979
 80075d0:	0800798a 	.word	0x0800798a

080075d4 <_sbrk_r>:
 80075d4:	2300      	movs	r3, #0
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	4c06      	ldr	r4, [pc, #24]	; (80075f4 <_sbrk_r+0x20>)
 80075da:	0005      	movs	r5, r0
 80075dc:	0008      	movs	r0, r1
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	f7fb f8da 	bl	8002798 <_sbrk>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d103      	bne.n	80075f0 <_sbrk_r+0x1c>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d000      	beq.n	80075f0 <_sbrk_r+0x1c>
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	2000028c 	.word	0x2000028c

080075f8 <__sread>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	000c      	movs	r4, r1
 80075fc:	250e      	movs	r5, #14
 80075fe:	5f49      	ldrsh	r1, [r1, r5]
 8007600:	f000 f8b2 	bl	8007768 <_read_r>
 8007604:	2800      	cmp	r0, #0
 8007606:	db03      	blt.n	8007610 <__sread+0x18>
 8007608:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800760a:	181b      	adds	r3, r3, r0
 800760c:	6563      	str	r3, [r4, #84]	; 0x54
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	4a02      	ldr	r2, [pc, #8]	; (800761c <__sread+0x24>)
 8007614:	4013      	ands	r3, r2
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	e7f9      	b.n	800760e <__sread+0x16>
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	ffffefff 	.word	0xffffefff

08007620 <__swrite>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	001f      	movs	r7, r3
 8007624:	898b      	ldrh	r3, [r1, #12]
 8007626:	0005      	movs	r5, r0
 8007628:	000c      	movs	r4, r1
 800762a:	0016      	movs	r6, r2
 800762c:	05db      	lsls	r3, r3, #23
 800762e:	d505      	bpl.n	800763c <__swrite+0x1c>
 8007630:	230e      	movs	r3, #14
 8007632:	5ec9      	ldrsh	r1, [r1, r3]
 8007634:	2200      	movs	r2, #0
 8007636:	2302      	movs	r3, #2
 8007638:	f000 f874 	bl	8007724 <_lseek_r>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	4a05      	ldr	r2, [pc, #20]	; (8007654 <__swrite+0x34>)
 8007640:	0028      	movs	r0, r5
 8007642:	4013      	ands	r3, r2
 8007644:	81a3      	strh	r3, [r4, #12]
 8007646:	0032      	movs	r2, r6
 8007648:	230e      	movs	r3, #14
 800764a:	5ee1      	ldrsh	r1, [r4, r3]
 800764c:	003b      	movs	r3, r7
 800764e:	f000 f81f 	bl	8007690 <_write_r>
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007654:	ffffefff 	.word	0xffffefff

08007658 <__sseek>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	000c      	movs	r4, r1
 800765c:	250e      	movs	r5, #14
 800765e:	5f49      	ldrsh	r1, [r1, r5]
 8007660:	f000 f860 	bl	8007724 <_lseek_r>
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	1c42      	adds	r2, r0, #1
 8007668:	d103      	bne.n	8007672 <__sseek+0x1a>
 800766a:	4a05      	ldr	r2, [pc, #20]	; (8007680 <__sseek+0x28>)
 800766c:	4013      	ands	r3, r2
 800766e:	81a3      	strh	r3, [r4, #12]
 8007670:	bd70      	pop	{r4, r5, r6, pc}
 8007672:	2280      	movs	r2, #128	; 0x80
 8007674:	0152      	lsls	r2, r2, #5
 8007676:	4313      	orrs	r3, r2
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	6560      	str	r0, [r4, #84]	; 0x54
 800767c:	e7f8      	b.n	8007670 <__sseek+0x18>
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	ffffefff 	.word	0xffffefff

08007684 <__sclose>:
 8007684:	b510      	push	{r4, lr}
 8007686:	230e      	movs	r3, #14
 8007688:	5ec9      	ldrsh	r1, [r1, r3]
 800768a:	f000 f815 	bl	80076b8 <_close_r>
 800768e:	bd10      	pop	{r4, pc}

08007690 <_write_r>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	0005      	movs	r5, r0
 8007694:	0008      	movs	r0, r1
 8007696:	0011      	movs	r1, r2
 8007698:	2200      	movs	r2, #0
 800769a:	4c06      	ldr	r4, [pc, #24]	; (80076b4 <_write_r+0x24>)
 800769c:	6022      	str	r2, [r4, #0]
 800769e:	001a      	movs	r2, r3
 80076a0:	f7f9 fe1e 	bl	80012e0 <_write>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d103      	bne.n	80076b0 <_write_r+0x20>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d000      	beq.n	80076b0 <_write_r+0x20>
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	2000028c 	.word	0x2000028c

080076b8 <_close_r>:
 80076b8:	2300      	movs	r3, #0
 80076ba:	b570      	push	{r4, r5, r6, lr}
 80076bc:	4c06      	ldr	r4, [pc, #24]	; (80076d8 <_close_r+0x20>)
 80076be:	0005      	movs	r5, r0
 80076c0:	0008      	movs	r0, r1
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	f7fb f83c 	bl	8002740 <_close>
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d103      	bne.n	80076d4 <_close_r+0x1c>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d000      	beq.n	80076d4 <_close_r+0x1c>
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	2000028c 	.word	0x2000028c

080076dc <_fstat_r>:
 80076dc:	2300      	movs	r3, #0
 80076de:	b570      	push	{r4, r5, r6, lr}
 80076e0:	4c06      	ldr	r4, [pc, #24]	; (80076fc <_fstat_r+0x20>)
 80076e2:	0005      	movs	r5, r0
 80076e4:	0008      	movs	r0, r1
 80076e6:	0011      	movs	r1, r2
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	f7fb f833 	bl	8002754 <_fstat>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d103      	bne.n	80076fa <_fstat_r+0x1e>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d000      	beq.n	80076fa <_fstat_r+0x1e>
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	2000028c 	.word	0x2000028c

08007700 <_isatty_r>:
 8007700:	2300      	movs	r3, #0
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	4c06      	ldr	r4, [pc, #24]	; (8007720 <_isatty_r+0x20>)
 8007706:	0005      	movs	r5, r0
 8007708:	0008      	movs	r0, r1
 800770a:	6023      	str	r3, [r4, #0]
 800770c:	f7fb f830 	bl	8002770 <_isatty>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d103      	bne.n	800771c <_isatty_r+0x1c>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d000      	beq.n	800771c <_isatty_r+0x1c>
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	bd70      	pop	{r4, r5, r6, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	2000028c 	.word	0x2000028c

08007724 <_lseek_r>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	0005      	movs	r5, r0
 8007728:	0008      	movs	r0, r1
 800772a:	0011      	movs	r1, r2
 800772c:	2200      	movs	r2, #0
 800772e:	4c06      	ldr	r4, [pc, #24]	; (8007748 <_lseek_r+0x24>)
 8007730:	6022      	str	r2, [r4, #0]
 8007732:	001a      	movs	r2, r3
 8007734:	f7fb f825 	bl	8002782 <_lseek>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d103      	bne.n	8007744 <_lseek_r+0x20>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d000      	beq.n	8007744 <_lseek_r+0x20>
 8007742:	602b      	str	r3, [r5, #0]
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	2000028c 	.word	0x2000028c

0800774c <memchr>:
 800774c:	b2c9      	uxtb	r1, r1
 800774e:	1882      	adds	r2, r0, r2
 8007750:	4290      	cmp	r0, r2
 8007752:	d101      	bne.n	8007758 <memchr+0xc>
 8007754:	2000      	movs	r0, #0
 8007756:	4770      	bx	lr
 8007758:	7803      	ldrb	r3, [r0, #0]
 800775a:	428b      	cmp	r3, r1
 800775c:	d0fb      	beq.n	8007756 <memchr+0xa>
 800775e:	3001      	adds	r0, #1
 8007760:	e7f6      	b.n	8007750 <memchr+0x4>

08007762 <__malloc_lock>:
 8007762:	4770      	bx	lr

08007764 <__malloc_unlock>:
 8007764:	4770      	bx	lr
	...

08007768 <_read_r>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	0005      	movs	r5, r0
 800776c:	0008      	movs	r0, r1
 800776e:	0011      	movs	r1, r2
 8007770:	2200      	movs	r2, #0
 8007772:	4c06      	ldr	r4, [pc, #24]	; (800778c <_read_r+0x24>)
 8007774:	6022      	str	r2, [r4, #0]
 8007776:	001a      	movs	r2, r3
 8007778:	f7fa ffc5 	bl	8002706 <_read>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d103      	bne.n	8007788 <_read_r+0x20>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d000      	beq.n	8007788 <_read_r+0x20>
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	2000028c 	.word	0x2000028c

08007790 <_init>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr

0800779c <_fini>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr
