
MotorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08006d70  08006d70  00016d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007230  08007230  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200001dc  08007414  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08007414  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f407  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cdd  00000000  00000000  0002f613  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  000312f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00031f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017388  00000000  00000000  00032ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a243  00000000  00000000  00049e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f856  00000000  00000000  000540b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b4  00000000  00000000  000e3984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d54 	.word	0x08006d54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006d54 	.word	0x08006d54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f04:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f14:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f18:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00b      	beq.n	8000f38 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f20:	e000      	b.n	8000f24 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f22:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f9      	beq.n	8000f22 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f2e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffd1 	bl	8000ef8 <ITM_SendChar>
 return(ch);
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fc69 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f87f 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f000 f9bf 	bl	80012f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f72:	f000 f993 	bl	800129c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f76:	f000 f939 	bl	80011ec <MX_TIM3_Init>
  MX_TIM1_Init();
 8000f7a:	f000 f8df 	bl	800113c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4832      	ldr	r0, [pc, #200]	; (800104c <main+0xec>)
 8000f82:	f001 fc09 	bl	8002798 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f86:	213c      	movs	r1, #60	; 0x3c
 8000f88:	4831      	ldr	r0, [pc, #196]	; (8001050 <main+0xf0>)
 8000f8a:	f001 fd5b 	bl	8002a44 <HAL_TIM_Encoder_Start>

  uint32_t pulse = TIM3->CCR1;
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <main+0xf4>)
 8000f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f92:	617b      	str	r3, [r7, #20]
  uint32_t startTime = HAL_GetTick();
 8000f94:	f000 fcb8 	bl	8001908 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]
  uint32_t currentTime = HAL_GetTick() - startTime;
 8000f9a:	f000 fcb5 	bl	8001908 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	60fb      	str	r3, [r7, #12]
  double speedFactor = 0;
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9c7 2300 	strd	r2, r3, [r7]

  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4828      	ldr	r0, [pc, #160]	; (8001058 <main+0xf8>)
 8000fb8:	f000 ff1a 	bl	8001df0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  currentTime = HAL_GetTick() - startTime;
 8000fbc:	f000 fca4 	bl	8001908 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	60fb      	str	r3, [r7, #12]
	  speedFactor = sin(currentTime/1000.0);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff faa3 	bl	8000514 <__aeabi_ui2d>
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <main+0xfc>)
 8000fd4:	f7ff fc42 	bl	800085c <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	ec43 2b17 	vmov	d7, r2, r3
 8000fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe4:	eef0 0a67 	vmov.f32	s1, s15
 8000fe8:	f004 ff26 	bl	8005e38 <sin>
 8000fec:	ed87 0b00 	vstr	d0, [r7]

	  //HAL_GPIO_TogglePin (LD2_GPIO_Port, LD2_Pin);

	  //printf("Test\n");

	  pulse = floor(100.0-100.0*fabs(speedFactor));
 8000ff0:	683c      	ldr	r4, [r7, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <main+0x100>)
 8000ffe:	4620      	mov	r0, r4
 8001000:	4629      	mov	r1, r5
 8001002:	f7ff fb01 	bl	8000608 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4914      	ldr	r1, [pc, #80]	; (8001060 <main+0x100>)
 8001010:	f7ff f942 	bl	8000298 <__aeabi_dsub>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	ec43 2b17 	vmov	d7, r2, r3
 800101c:	eeb0 0a47 	vmov.f32	s0, s14
 8001020:	eef0 0a67 	vmov.f32	s1, s15
 8001024:	f004 fe84 	bl	8005d30 <floor>
 8001028:	ec53 2b10 	vmov	r2, r3, d0
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fdc2 	bl	8000bb8 <__aeabi_d2uiz>
 8001034:	4603      	mov	r3, r0
 8001036:	617b      	str	r3, [r7, #20]
	  TIM3->CCR1 = pulse;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <main+0xf4>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	6353      	str	r3, [r2, #52]	; 0x34
	  printf("%d\n", TIM1->CNT);
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <main+0x104>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <main+0x108>)
 8001046:	f002 ffa5 	bl	8003f94 <iprintf>
  {
 800104a:	e7b7      	b.n	8000fbc <main+0x5c>
 800104c:	20000204 	.word	0x20000204
 8001050:	2000024c 	.word	0x2000024c
 8001054:	40000400 	.word	0x40000400
 8001058:	40020400 	.word	0x40020400
 800105c:	408f4000 	.word	0x408f4000
 8001060:	40590000 	.word	0x40590000
 8001064:	40010000 	.word	0x40010000
 8001068:	08006d70 	.word	0x08006d70

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fb26 	bl	80036cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <SystemClock_Config+0xc8>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <SystemClock_Config+0xc8>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <SystemClock_Config+0xc8>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <SystemClock_Config+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a20      	ldr	r2, [pc, #128]	; (8001138 <SystemClock_Config+0xcc>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <SystemClock_Config+0xcc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d0:	2310      	movs	r3, #16
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010dc:	2308      	movs	r3, #8
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fe97 	bl	8001e24 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010fc:	f000 f97c 	bl	80013f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f8fa 	bl	8002314 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001126:	f000 f967 	bl	80013f8 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fabe 	bl	80036cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_TIM1_Init+0xa8>)
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <MX_TIM1_Init+0xac>)
 800115c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_TIM1_Init+0xa8>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_TIM1_Init+0xa8>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_TIM1_Init+0xa8>)
 800116c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001170:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_TIM1_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM1_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM1_Init+0xa8>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001184:	2301      	movs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800119c:	2301      	movs	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM1_Init+0xa8>)
 80011b0:	f001 fba2 	bl	80028f8 <HAL_TIM_Encoder_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011ba:	f000 f91d 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_TIM1_Init+0xa8>)
 80011cc:	f001 ffbc 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 f90f 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3730      	adds	r7, #48	; 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000024c 	.word	0x2000024c
 80011e8:	40010000 	.word	0x40010000

080011ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001210:	4a21      	ldr	r2, [pc, #132]	; (8001298 <MX_TIM3_Init+0xac>)
 8001212:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25-1;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001216:	2218      	movs	r2, #24
 8001218:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM3_Init+0xa8>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001222:	2263      	movs	r2, #99	; 0x63
 8001224:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM3_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001232:	4818      	ldr	r0, [pc, #96]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001234:	f001 fa60 	bl	80026f8 <HAL_TIM_PWM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800123e:	f000 f8db 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4619      	mov	r1, r3
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001252:	f001 ff79 	bl	8003148 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800125c:	f000 f8cc 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 95;
 8001264:	235f      	movs	r3, #95	; 0x5f
 8001266:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001278:	f001 fc72 	bl	8002b60 <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001282:	f000 f8b9 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM3_Init+0xa8>)
 8001288:	f000 f94c 	bl	8001524 <HAL_TIM_MspPostInit>

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000204 	.word	0x20000204
 8001298:	40000400 	.word	0x40000400

0800129c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_USART2_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART2_UART_Init+0x4c>)
 80012d4:	f001 ffa6 	bl	8003224 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f88b 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000294 	.word	0x20000294
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <MX_GPIO_Init+0xf8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a36      	ldr	r2, [pc, #216]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2f      	ldr	r2, [pc, #188]	; (80013e8 <MX_GPIO_Init+0xf8>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <MX_GPIO_Init+0xf8>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_GPIO_Init+0xf8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2120      	movs	r1, #32
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_GPIO_Init+0xfc>)
 800137c:	f000 fd38 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_GPIO_Init+0x100>)
 8001386:	f000 fd33 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001390:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4814      	ldr	r0, [pc, #80]	; (80013f4 <MX_GPIO_Init+0x104>)
 80013a2:	f000 fba3 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a6:	2320      	movs	r3, #32
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480b      	ldr	r0, [pc, #44]	; (80013ec <MX_GPIO_Init+0xfc>)
 80013be:	f000 fb95 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80013c2:	2320      	movs	r3, #32
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_GPIO_Init+0x100>)
 80013da:	f000 fb87 	bl	8001aec <HAL_GPIO_Init>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fe:	e7fe      	b.n	80013fe <Error_Handler+0x6>

08001400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143e:	2007      	movs	r0, #7
 8001440:	f000 fb20 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12c      	bne.n	80014cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x88>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014bc:	2301      	movs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_TIM_Encoder_MspInit+0x8c>)
 80014c8:	f000 fb10 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_TIM_PWM_MspInit+0x3c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10d      	bne.n	800150e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_TIM_PWM_MspInit+0x40>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <HAL_TIM_PWM_MspInit+0x40>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_TIM_PWM_MspInit+0x40>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40000400 	.word	0x40000400
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_TIM_MspPostInit+0x68>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d11d      	bne.n	8001582 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_TIM_MspPostInit+0x6c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_TIM_MspPostInit+0x6c>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_TIM_MspPostInit+0x6c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001562:	2310      	movs	r3, #16
 8001564:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001572:	2302      	movs	r3, #2
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <HAL_TIM_MspPostInit+0x70>)
 800157e:	f000 fab5 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40000400 	.word	0x40000400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_UART_MspInit+0x8c>)
 800160e:	f000 fa6d 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f934 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
	}

return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc38 	bl	8000f46 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
	}
	return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
	return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	605a      	str	r2, [r3, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f001 ff76 	bl	8003678 <__errno>
 800178c:	4602      	mov	r2, r0
 800178e:	230c      	movs	r3, #12
 8001790:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	200001f8 	.word	0x200001f8
 80017c0:	200002e0 	.word	0x200002e0

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f001 ff35 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fba1 	bl	8000f60 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800182c:	08007238 	.word	0x08007238
  ldr r2, =_sbss
 8001830:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001834:	200002e0 	.word	0x200002e0

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f90d 	bl	8001a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fdc6 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f917 	bl	8001ad2 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f8ed 	bl	8001a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	200002d8 	.word	0x200002d8

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200002d8 	.word	0x200002d8

08001920 <__NVIC_SetPriorityGrouping>:
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_SetPriority>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <SysTick_Config>:
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00f      	b.n	8001a76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SysTick_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5e:	210f      	movs	r1, #15
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f7ff ff8e 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <SysTick_Config+0x40>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SysTick_Config+0x40>)
 8001a70:	2207      	movs	r2, #7
 8001a72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff47 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aac:	f7ff ff5c 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	6978      	ldr	r0, [r7, #20]
 8001ab8:	f7ff ff8e 	bl	80019d8 <NVIC_EncodePriority>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5d 	bl	8001984 <__NVIC_SetPriority>
}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffb0 	bl	8001a40 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e159      	b.n	8001dbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 8148 	bne.w	8001db6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d005      	beq.n	8001b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d130      	bne.n	8001ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 0201 	and.w	r2, r3, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d017      	beq.n	8001bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a2 	beq.w	8001db6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	4a55      	ldr	r2, [pc, #340]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6453      	str	r3, [r2, #68]	; 0x44
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c8e:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a48      	ldr	r2, [pc, #288]	; (8001dd8 <HAL_GPIO_Init+0x2ec>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x202>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <HAL_GPIO_Init+0x2f0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x1fe>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <HAL_GPIO_Init+0x2f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <HAL_GPIO_Init+0x2f8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x1f6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x1f2>
 8001cda:	2304      	movs	r3, #4
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x204>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5c:	4a23      	ldr	r2, [pc, #140]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f aea2 	bls.w	8001b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3724      	adds	r7, #36	; 0x24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020c00 	.word	0x40020c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e264      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d075      	beq.n	8001f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	4ba3      	ldr	r3, [pc, #652]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d00c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b9d      	ldr	r3, [pc, #628]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b99      	ldr	r3, [pc, #612]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d157      	bne.n	8001f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e23f      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x74>
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a90      	ldr	r2, [pc, #576]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x98>
 8001ea2:	4b8b      	ldr	r3, [pc, #556]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a8a      	ldr	r2, [pc, #552]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a83      	ldr	r2, [pc, #524]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fd14 	bl	8001908 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fd10 	bl	8001908 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e204      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xc0>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fd00 	bl	8001908 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fcfc 	bl	8001908 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1f0      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0xe8>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1c4      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4952      	ldr	r1, [pc, #328]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCC_OscConfig+0x2b0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fcb5 	bl	8001908 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fcb1 	bl	8001908 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1a5      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4940      	ldr	r1, [pc, #256]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <HAL_RCC_OscConfig+0x2b0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fc94 	bl	8001908 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fc90 	bl	8001908 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e184      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d030      	beq.n	8002070 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x2b4>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff fc74 	bl	8001908 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fc70 	bl	8001908 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e164      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x200>
 8002042:	e015      	b.n	8002070 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_OscConfig+0x2b4>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff fc5d 	bl	8001908 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002052:	f7ff fc59 	bl	8001908 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e14d      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a0 	beq.w	80021be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x2b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d121      	bne.n	80020fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_RCC_OscConfig+0x2b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_RCC_OscConfig+0x2b8>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fc1f 	bl	8001908 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	e011      	b.n	80020f2 <HAL_RCC_OscConfig+0x2ce>
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	42470000 	.word	0x42470000
 80020d8:	42470e80 	.word	0x42470e80
 80020dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7ff fc12 	bl	8001908 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e106      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_RCC_OscConfig+0x4e4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x2f0>
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a80      	ldr	r2, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x32a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x312>
 800211c:	4b7b      	ldr	r3, [pc, #492]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a7a      	ldr	r2, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x32a>
 8002136:	4b75      	ldr	r3, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a74      	ldr	r2, [pc, #464]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	4b72      	ldr	r3, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a71      	ldr	r2, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fbd7 	bl	8001908 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fbd3 	bl	8001908 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0c5      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x33a>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff fbc1 	bl	8001908 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fbbd 	bl	8001908 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0af      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a55      	ldr	r2, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 809b 	beq.w	80022fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d05c      	beq.n	800228e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d141      	bne.n	8002260 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fb91 	bl	8001908 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff fb8d 	bl	8001908 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e081      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fc:	4b43      	ldr	r3, [pc, #268]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	019b      	lsls	r3, r3, #6
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	3b01      	subs	r3, #1
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	4937      	ldr	r1, [pc, #220]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fb66 	bl	8001908 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff fb62 	bl	8001908 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e056      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x41c>
 800225e:	e04e      	b.n	80022fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fb4f 	bl	8001908 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff fb4b 	bl	8001908 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e03f      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x44a>
 800228c:	e037      	b.n	80022fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e032      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d028      	beq.n	80022fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d121      	bne.n	80022fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d11a      	bne.n	80022fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d111      	bne.n	80022fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40007000 	.word	0x40007000
 800230c:	40023800 	.word	0x40023800
 8002310:	42470060 	.word	0x42470060

08002314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0cc      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b68      	ldr	r3, [pc, #416]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d90c      	bls.n	8002350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b65      	ldr	r3, [pc, #404]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d044      	beq.n	8002434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d119      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e067      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4934      	ldr	r1, [pc, #208]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7ff fa80 	bl	8001908 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7ff fa7c 	bl	8001908 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e04f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20c      	bcs.n	800245c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4601      	mov	r1, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	fa21 f303 	lsr.w	r3, r1, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f9e0 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08006d74 	.word	0x08006d74
 80024d8:	20000000 	.word	0x20000000
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d007      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x32>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d008      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x38>
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 80b4 	bne.w	8002674 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800250e:	60bb      	str	r3, [r7, #8]
       break;
 8002510:	e0b3      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b5e      	ldr	r3, [pc, #376]	; (800268c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002514:	60bb      	str	r3, [r7, #8]
      break;
 8002516:	e0b0      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002520:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002522:	4b58      	ldr	r3, [pc, #352]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d04a      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b55      	ldr	r3, [pc, #340]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	f04f 0400 	mov.w	r4, #0
 8002538:	f240 11ff 	movw	r1, #511	; 0x1ff
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	ea03 0501 	and.w	r5, r3, r1
 8002544:	ea04 0602 	and.w	r6, r4, r2
 8002548:	4629      	mov	r1, r5
 800254a:	4632      	mov	r2, r6
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f04f 0400 	mov.w	r4, #0
 8002554:	0154      	lsls	r4, r2, #5
 8002556:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800255a:	014b      	lsls	r3, r1, #5
 800255c:	4619      	mov	r1, r3
 800255e:	4622      	mov	r2, r4
 8002560:	1b49      	subs	r1, r1, r5
 8002562:	eb62 0206 	sbc.w	r2, r2, r6
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f04f 0400 	mov.w	r4, #0
 800256e:	0194      	lsls	r4, r2, #6
 8002570:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002574:	018b      	lsls	r3, r1, #6
 8002576:	1a5b      	subs	r3, r3, r1
 8002578:	eb64 0402 	sbc.w	r4, r4, r2
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	00e2      	lsls	r2, r4, #3
 8002586:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800258a:	00d9      	lsls	r1, r3, #3
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	195b      	adds	r3, r3, r5
 8002592:	eb44 0406 	adc.w	r4, r4, r6
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	0262      	lsls	r2, r4, #9
 80025a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025a4:	0259      	lsls	r1, r3, #9
 80025a6:	460b      	mov	r3, r1
 80025a8:	4614      	mov	r4, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	4621      	mov	r1, r4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	f7fe fb1e 	bl	8000bf8 <__aeabi_uldivmod>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e049      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b2f      	ldr	r3, [pc, #188]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	ea03 0501 	and.w	r5, r3, r1
 80025da:	ea04 0602 	and.w	r6, r4, r2
 80025de:	4629      	mov	r1, r5
 80025e0:	4632      	mov	r2, r6
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f04f 0400 	mov.w	r4, #0
 80025ea:	0154      	lsls	r4, r2, #5
 80025ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f0:	014b      	lsls	r3, r1, #5
 80025f2:	4619      	mov	r1, r3
 80025f4:	4622      	mov	r2, r4
 80025f6:	1b49      	subs	r1, r1, r5
 80025f8:	eb62 0206 	sbc.w	r2, r2, r6
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	0194      	lsls	r4, r2, #6
 8002606:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800260a:	018b      	lsls	r3, r1, #6
 800260c:	1a5b      	subs	r3, r3, r1
 800260e:	eb64 0402 	sbc.w	r4, r4, r2
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002620:	00d9      	lsls	r1, r3, #3
 8002622:	460b      	mov	r3, r1
 8002624:	4614      	mov	r4, r2
 8002626:	195b      	adds	r3, r3, r5
 8002628:	eb44 0406 	adc.w	r4, r4, r6
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	02a2      	lsls	r2, r4, #10
 8002636:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800263a:	0299      	lsls	r1, r3, #10
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	4618      	mov	r0, r3
 8002642:	4621      	mov	r1, r4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	461a      	mov	r2, r3
 800264c:	4623      	mov	r3, r4
 800264e:	f7fe fad3 	bl	8000bf8 <__aeabi_uldivmod>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	60bb      	str	r3, [r7, #8]
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002676:	60bb      	str	r3, [r7, #8]
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	68bb      	ldr	r3, [r7, #8]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	00f42400 	.word	0x00f42400
 800268c:	007a1200 	.word	0x007a1200

08002690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff0 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026b0:	4601      	mov	r1, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08006d84 	.word	0x08006d84

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffdc 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d8:	4601      	mov	r1, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0b5b      	lsrs	r3, r3, #13
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4a03      	ldr	r2, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08006d84 	.word	0x08006d84

080026f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e041      	b.n	800278e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fede 	bl	80014e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 fad4 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_TIM_PWM_Start+0x24>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e022      	b.n	8002802 <HAL_TIM_PWM_Start+0x6a>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d109      	bne.n	80027d6 <HAL_TIM_PWM_Start+0x3e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e015      	b.n	8002802 <HAL_TIM_PWM_Start+0x6a>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d109      	bne.n	80027f0 <HAL_TIM_PWM_Start+0x58>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e008      	b.n	8002802 <HAL_TIM_PWM_Start+0x6a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e068      	b.n	80028dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <HAL_TIM_PWM_Start+0x82>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002818:	e013      	b.n	8002842 <HAL_TIM_PWM_Start+0xaa>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d104      	bne.n	800282a <HAL_TIM_PWM_Start+0x92>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002828:	e00b      	b.n	8002842 <HAL_TIM_PWM_Start+0xaa>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0xa2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	e003      	b.n	8002842 <HAL_TIM_PWM_Start+0xaa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2201      	movs	r2, #1
 8002848:	6839      	ldr	r1, [r7, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fc56 	bl	80030fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <HAL_TIM_PWM_Start+0x14c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d107      	bne.n	800286a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_TIM_PWM_Start+0x14c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d018      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x10e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d013      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x10e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_TIM_PWM_Start+0x150>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00e      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x10e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_TIM_PWM_Start+0x154>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x10e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a16      	ldr	r2, [pc, #88]	; (80028f0 <HAL_TIM_PWM_Start+0x158>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_TIM_PWM_Start+0x10e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_TIM_PWM_Start+0x15c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d111      	bne.n	80028ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d010      	beq.n	80028da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	e007      	b.n	80028da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40000c00 	.word	0x40000c00
 80028f4:	40014000 	.word	0x40014000

080028f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e097      	b.n	8002a3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fe fd95 	bl	8001450 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800293c:	f023 0307 	bic.w	r3, r3, #7
 8002940:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f000 f9c9 	bl	8002ce4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	4313      	orrs	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002998:	f023 030c 	bic.w	r3, r3, #12
 800299c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	4313      	orrs	r3, r2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	011a      	lsls	r2, r3, #4
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	4313      	orrs	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80029d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80029de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	4313      	orrs	r3, r2
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d110      	bne.n	8002a96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a7a:	7b7b      	ldrb	r3, [r7, #13]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d001      	beq.n	8002a84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e068      	b.n	8002b56 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	e031      	b.n	8002afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d110      	bne.n	8002abe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a9c:	7bbb      	ldrb	r3, [r7, #14]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002aa2:	7b3b      	ldrb	r3, [r7, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d001      	beq.n	8002aac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e054      	b.n	8002b56 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002abc:	e01d      	b.n	8002afa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d108      	bne.n	8002ad6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002aca:	7b7b      	ldrb	r3, [r7, #13]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d102      	bne.n	8002ad6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ad0:	7b3b      	ldrb	r3, [r7, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e03d      	b.n	8002b56 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_TIM_Encoder_Start+0xc2>
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d008      	beq.n	8002b16 <HAL_TIM_Encoder_Start+0xd2>
 8002b04:	e00f      	b.n	8002b26 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 faf4 	bl	80030fc <TIM_CCxChannelCmd>
      break;
 8002b14:	e016      	b.n	8002b44 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 faec 	bl	80030fc <TIM_CCxChannelCmd>
      break;
 8002b24:	e00e      	b.n	8002b44 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fae4 	bl	80030fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fadd 	bl	80030fc <TIM_CCxChannelCmd>
      break;
 8002b42:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0ae      	b.n	8002cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	f200 809f 	bhi.w	8002ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002bc9 	.word	0x08002bc9
 8002b98:	08002ccd 	.word	0x08002ccd
 8002b9c:	08002ccd 	.word	0x08002ccd
 8002ba0:	08002ccd 	.word	0x08002ccd
 8002ba4:	08002c09 	.word	0x08002c09
 8002ba8:	08002ccd 	.word	0x08002ccd
 8002bac:	08002ccd 	.word	0x08002ccd
 8002bb0:	08002ccd 	.word	0x08002ccd
 8002bb4:	08002c4b 	.word	0x08002c4b
 8002bb8:	08002ccd 	.word	0x08002ccd
 8002bbc:	08002ccd 	.word	0x08002ccd
 8002bc0:	08002ccd 	.word	0x08002ccd
 8002bc4:	08002c8b 	.word	0x08002c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f908 	bl	8002de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0208 	orr.w	r2, r2, #8
 8002be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0204 	bic.w	r2, r2, #4
 8002bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6999      	ldr	r1, [r3, #24]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	619a      	str	r2, [r3, #24]
      break;
 8002c06:	e064      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f94e 	bl	8002eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6999      	ldr	r1, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	021a      	lsls	r2, r3, #8
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	619a      	str	r2, [r3, #24]
      break;
 8002c48:	e043      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 f999 	bl	8002f88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0208 	orr.w	r2, r2, #8
 8002c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0204 	bic.w	r2, r2, #4
 8002c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	61da      	str	r2, [r3, #28]
      break;
 8002c88:	e023      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f9e3 	bl	800305c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69d9      	ldr	r1, [r3, #28]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	61da      	str	r2, [r3, #28]
      break;
 8002cca:	e002      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <TIM_Base_SetConfig+0xe4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00f      	beq.n	8002d1c <TIM_Base_SetConfig+0x38>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d02:	d00b      	beq.n	8002d1c <TIM_Base_SetConfig+0x38>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <TIM_Base_SetConfig+0xe8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <TIM_Base_SetConfig+0x38>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <TIM_Base_SetConfig+0xec>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0x38>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <TIM_Base_SetConfig+0xf0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d108      	bne.n	8002d2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <TIM_Base_SetConfig+0xe4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01b      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d017      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a22      	ldr	r2, [pc, #136]	; (8002dcc <TIM_Base_SetConfig+0xe8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <TIM_Base_SetConfig+0xec>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00f      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <TIM_Base_SetConfig+0xf0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <TIM_Base_SetConfig+0xf4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <TIM_Base_SetConfig+0xf8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <TIM_Base_SetConfig+0xfc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <TIM_Base_SetConfig+0xe4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d103      	bne.n	8002db4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	615a      	str	r2, [r3, #20]
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40014400 	.word	0x40014400
 8002de0:	40014800 	.word	0x40014800

08002de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0302 	bic.w	r3, r3, #2
 8002e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <TIM_OC1_SetConfig+0xc8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10c      	bne.n	8002e5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 0308 	bic.w	r3, r3, #8
 8002e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <TIM_OC1_SetConfig+0xc8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d111      	bne.n	8002e86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	621a      	str	r2, [r3, #32]
}
 8002ea0:	bf00      	nop
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	40010000 	.word	0x40010000

08002eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0210 	bic.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f023 0320 	bic.w	r3, r3, #32
 8002efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <TIM_OC2_SetConfig+0xd4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10d      	bne.n	8002f2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <TIM_OC2_SetConfig+0xd4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d113      	bne.n	8002f5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000

08002f88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <TIM_OC3_SetConfig+0xd0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10d      	bne.n	8003002 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <TIM_OC3_SetConfig+0xd0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d113      	bne.n	8003032 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	621a      	str	r2, [r3, #32]
}
 800304c:	bf00      	nop
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	40010000 	.word	0x40010000

0800305c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	031b      	lsls	r3, r3, #12
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <TIM_OC4_SetConfig+0x9c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d109      	bne.n	80030d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000

080030fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 031f 	and.w	r3, r3, #31
 800310e:	2201      	movs	r2, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1a      	ldr	r2, [r3, #32]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800315c:	2302      	movs	r3, #2
 800315e:	e050      	b.n	8003202 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d018      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ac:	d013      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10c      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40014000 	.word	0x40014000

08003224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e03f      	b.n	80032b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe f9a4 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f829 	bl	80032c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800327c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800328c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800329c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003302:	f023 030c 	bic.w	r3, r3, #12
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	430b      	orrs	r3, r1
 800330e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4ad0      	ldr	r2, [pc, #832]	; (800366c <UART_SetConfig+0x3ac>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <UART_SetConfig+0x7a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4ace      	ldr	r2, [pc, #824]	; (8003670 <UART_SetConfig+0x3b0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d103      	bne.n	8003342 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800333a:	f7ff f9c9 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	e002      	b.n	8003348 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003342:	f7ff f9b1 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003346:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003350:	f040 80ba 	bne.w	80034c8 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	461d      	mov	r5, r3
 8003358:	f04f 0600 	mov.w	r6, #0
 800335c:	46a8      	mov	r8, r5
 800335e:	46b1      	mov	r9, r6
 8003360:	eb18 0308 	adds.w	r3, r8, r8
 8003364:	eb49 0409 	adc.w	r4, r9, r9
 8003368:	4698      	mov	r8, r3
 800336a:	46a1      	mov	r9, r4
 800336c:	eb18 0805 	adds.w	r8, r8, r5
 8003370:	eb49 0906 	adc.w	r9, r9, r6
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003388:	4688      	mov	r8, r1
 800338a:	4691      	mov	r9, r2
 800338c:	eb18 0005 	adds.w	r0, r8, r5
 8003390:	eb49 0106 	adc.w	r1, r9, r6
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	461d      	mov	r5, r3
 800339a:	f04f 0600 	mov.w	r6, #0
 800339e:	196b      	adds	r3, r5, r5
 80033a0:	eb46 0406 	adc.w	r4, r6, r6
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	f7fd fc26 	bl	8000bf8 <__aeabi_uldivmod>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	461a      	mov	r2, r3
 80033b2:	4bb0      	ldr	r3, [pc, #704]	; (8003674 <UART_SetConfig+0x3b4>)
 80033b4:	fba3 2302 	umull	r2, r3, r3, r2
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	461d      	mov	r5, r3
 80033c2:	f04f 0600 	mov.w	r6, #0
 80033c6:	46a9      	mov	r9, r5
 80033c8:	46b2      	mov	sl, r6
 80033ca:	eb19 0309 	adds.w	r3, r9, r9
 80033ce:	eb4a 040a 	adc.w	r4, sl, sl
 80033d2:	4699      	mov	r9, r3
 80033d4:	46a2      	mov	sl, r4
 80033d6:	eb19 0905 	adds.w	r9, r9, r5
 80033da:	eb4a 0a06 	adc.w	sl, sl, r6
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f2:	4689      	mov	r9, r1
 80033f4:	4692      	mov	sl, r2
 80033f6:	eb19 0005 	adds.w	r0, r9, r5
 80033fa:	eb4a 0106 	adc.w	r1, sl, r6
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	461d      	mov	r5, r3
 8003404:	f04f 0600 	mov.w	r6, #0
 8003408:	196b      	adds	r3, r5, r5
 800340a:	eb46 0406 	adc.w	r4, r6, r6
 800340e:	461a      	mov	r2, r3
 8003410:	4623      	mov	r3, r4
 8003412:	f7fd fbf1 	bl	8000bf8 <__aeabi_uldivmod>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	461a      	mov	r2, r3
 800341c:	4b95      	ldr	r3, [pc, #596]	; (8003674 <UART_SetConfig+0x3b4>)
 800341e:	fba3 1302 	umull	r1, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2164      	movs	r1, #100	; 0x64
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	3332      	adds	r3, #50	; 0x32
 8003430:	4a90      	ldr	r2, [pc, #576]	; (8003674 <UART_SetConfig+0x3b4>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800343e:	4498      	add	r8, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	461d      	mov	r5, r3
 8003444:	f04f 0600 	mov.w	r6, #0
 8003448:	46a9      	mov	r9, r5
 800344a:	46b2      	mov	sl, r6
 800344c:	eb19 0309 	adds.w	r3, r9, r9
 8003450:	eb4a 040a 	adc.w	r4, sl, sl
 8003454:	4699      	mov	r9, r3
 8003456:	46a2      	mov	sl, r4
 8003458:	eb19 0905 	adds.w	r9, r9, r5
 800345c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800346c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003470:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003474:	4689      	mov	r9, r1
 8003476:	4692      	mov	sl, r2
 8003478:	eb19 0005 	adds.w	r0, r9, r5
 800347c:	eb4a 0106 	adc.w	r1, sl, r6
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	461d      	mov	r5, r3
 8003486:	f04f 0600 	mov.w	r6, #0
 800348a:	196b      	adds	r3, r5, r5
 800348c:	eb46 0406 	adc.w	r4, r6, r6
 8003490:	461a      	mov	r2, r3
 8003492:	4623      	mov	r3, r4
 8003494:	f7fd fbb0 	bl	8000bf8 <__aeabi_uldivmod>
 8003498:	4603      	mov	r3, r0
 800349a:	460c      	mov	r4, r1
 800349c:	461a      	mov	r2, r3
 800349e:	4b75      	ldr	r3, [pc, #468]	; (8003674 <UART_SetConfig+0x3b4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a70      	ldr	r2, [pc, #448]	; (8003674 <UART_SetConfig+0x3b4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 0207 	and.w	r2, r3, #7
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4442      	add	r2, r8
 80034c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034c6:	e0cc      	b.n	8003662 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	469a      	mov	sl, r3
 80034cc:	f04f 0b00 	mov.w	fp, #0
 80034d0:	46d0      	mov	r8, sl
 80034d2:	46d9      	mov	r9, fp
 80034d4:	eb18 0308 	adds.w	r3, r8, r8
 80034d8:	eb49 0409 	adc.w	r4, r9, r9
 80034dc:	4698      	mov	r8, r3
 80034de:	46a1      	mov	r9, r4
 80034e0:	eb18 080a 	adds.w	r8, r8, sl
 80034e4:	eb49 090b 	adc.w	r9, r9, fp
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034fc:	4688      	mov	r8, r1
 80034fe:	4691      	mov	r9, r2
 8003500:	eb1a 0508 	adds.w	r5, sl, r8
 8003504:	eb4b 0609 	adc.w	r6, fp, r9
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4619      	mov	r1, r3
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f04f 0400 	mov.w	r4, #0
 800351a:	0094      	lsls	r4, r2, #2
 800351c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003520:	008b      	lsls	r3, r1, #2
 8003522:	461a      	mov	r2, r3
 8003524:	4623      	mov	r3, r4
 8003526:	4628      	mov	r0, r5
 8003528:	4631      	mov	r1, r6
 800352a:	f7fd fb65 	bl	8000bf8 <__aeabi_uldivmod>
 800352e:	4603      	mov	r3, r0
 8003530:	460c      	mov	r4, r1
 8003532:	461a      	mov	r2, r3
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <UART_SetConfig+0x3b4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	469b      	mov	fp, r3
 8003544:	f04f 0c00 	mov.w	ip, #0
 8003548:	46d9      	mov	r9, fp
 800354a:	46e2      	mov	sl, ip
 800354c:	eb19 0309 	adds.w	r3, r9, r9
 8003550:	eb4a 040a 	adc.w	r4, sl, sl
 8003554:	4699      	mov	r9, r3
 8003556:	46a2      	mov	sl, r4
 8003558:	eb19 090b 	adds.w	r9, r9, fp
 800355c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003574:	4689      	mov	r9, r1
 8003576:	4692      	mov	sl, r2
 8003578:	eb1b 0509 	adds.w	r5, fp, r9
 800357c:	eb4c 060a 	adc.w	r6, ip, sl
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	f04f 0400 	mov.w	r4, #0
 8003592:	0094      	lsls	r4, r2, #2
 8003594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	461a      	mov	r2, r3
 800359c:	4623      	mov	r3, r4
 800359e:	4628      	mov	r0, r5
 80035a0:	4631      	mov	r1, r6
 80035a2:	f7fd fb29 	bl	8000bf8 <__aeabi_uldivmod>
 80035a6:	4603      	mov	r3, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <UART_SetConfig+0x3b4>)
 80035ae:	fba3 1302 	umull	r1, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2164      	movs	r1, #100	; 0x64
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	3332      	adds	r3, #50	; 0x32
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <UART_SetConfig+0x3b4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035cc:	4498      	add	r8, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	469b      	mov	fp, r3
 80035d2:	f04f 0c00 	mov.w	ip, #0
 80035d6:	46d9      	mov	r9, fp
 80035d8:	46e2      	mov	sl, ip
 80035da:	eb19 0309 	adds.w	r3, r9, r9
 80035de:	eb4a 040a 	adc.w	r4, sl, sl
 80035e2:	4699      	mov	r9, r3
 80035e4:	46a2      	mov	sl, r4
 80035e6:	eb19 090b 	adds.w	r9, r9, fp
 80035ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003602:	4689      	mov	r9, r1
 8003604:	4692      	mov	sl, r2
 8003606:	eb1b 0509 	adds.w	r5, fp, r9
 800360a:	eb4c 060a 	adc.w	r6, ip, sl
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4619      	mov	r1, r3
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f04f 0400 	mov.w	r4, #0
 8003620:	0094      	lsls	r4, r2, #2
 8003622:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003626:	008b      	lsls	r3, r1, #2
 8003628:	461a      	mov	r2, r3
 800362a:	4623      	mov	r3, r4
 800362c:	4628      	mov	r0, r5
 800362e:	4631      	mov	r1, r6
 8003630:	f7fd fae2 	bl	8000bf8 <__aeabi_uldivmod>
 8003634:	4603      	mov	r3, r0
 8003636:	460c      	mov	r4, r1
 8003638:	461a      	mov	r2, r3
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <UART_SetConfig+0x3b4>)
 800363c:	fba3 1302 	umull	r1, r3, r3, r2
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	2164      	movs	r1, #100	; 0x64
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	3332      	adds	r3, #50	; 0x32
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <UART_SetConfig+0x3b4>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4442      	add	r2, r8
 8003660:	609a      	str	r2, [r3, #8]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366c:	40011000 	.word	0x40011000
 8003670:	40011400 	.word	0x40011400
 8003674:	51eb851f 	.word	0x51eb851f

08003678 <__errno>:
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <__errno+0x8>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	2000000c 	.word	0x2000000c

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	4e0d      	ldr	r6, [pc, #52]	; (80036bc <__libc_init_array+0x38>)
 8003688:	4c0d      	ldr	r4, [pc, #52]	; (80036c0 <__libc_init_array+0x3c>)
 800368a:	1ba4      	subs	r4, r4, r6
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	2500      	movs	r5, #0
 8003690:	42a5      	cmp	r5, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	4e0b      	ldr	r6, [pc, #44]	; (80036c4 <__libc_init_array+0x40>)
 8003696:	4c0c      	ldr	r4, [pc, #48]	; (80036c8 <__libc_init_array+0x44>)
 8003698:	f003 fb5c 	bl	8006d54 <_init>
 800369c:	1ba4      	subs	r4, r4, r6
 800369e:	10a4      	asrs	r4, r4, #2
 80036a0:	2500      	movs	r5, #0
 80036a2:	42a5      	cmp	r5, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ac:	4798      	blx	r3
 80036ae:	3501      	adds	r5, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036b6:	4798      	blx	r3
 80036b8:	3501      	adds	r5, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	08007230 	.word	0x08007230
 80036c0:	08007230 	.word	0x08007230
 80036c4:	08007230 	.word	0x08007230
 80036c8:	08007234 	.word	0x08007234

080036cc <memset>:
 80036cc:	4402      	add	r2, r0
 80036ce:	4603      	mov	r3, r0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d100      	bne.n	80036d6 <memset+0xa>
 80036d4:	4770      	bx	lr
 80036d6:	f803 1b01 	strb.w	r1, [r3], #1
 80036da:	e7f9      	b.n	80036d0 <memset+0x4>

080036dc <__cvt>:
 80036dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036e0:	ec55 4b10 	vmov	r4, r5, d0
 80036e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80036e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	460e      	mov	r6, r1
 80036ee:	4691      	mov	r9, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	bfb8      	it	lt
 80036f4:	4622      	movlt	r2, r4
 80036f6:	462b      	mov	r3, r5
 80036f8:	f027 0720 	bic.w	r7, r7, #32
 80036fc:	bfbb      	ittet	lt
 80036fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003702:	461d      	movlt	r5, r3
 8003704:	2300      	movge	r3, #0
 8003706:	232d      	movlt	r3, #45	; 0x2d
 8003708:	bfb8      	it	lt
 800370a:	4614      	movlt	r4, r2
 800370c:	2f46      	cmp	r7, #70	; 0x46
 800370e:	700b      	strb	r3, [r1, #0]
 8003710:	d004      	beq.n	800371c <__cvt+0x40>
 8003712:	2f45      	cmp	r7, #69	; 0x45
 8003714:	d100      	bne.n	8003718 <__cvt+0x3c>
 8003716:	3601      	adds	r6, #1
 8003718:	2102      	movs	r1, #2
 800371a:	e000      	b.n	800371e <__cvt+0x42>
 800371c:	2103      	movs	r1, #3
 800371e:	ab03      	add	r3, sp, #12
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	ab02      	add	r3, sp, #8
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4632      	mov	r2, r6
 8003728:	4653      	mov	r3, sl
 800372a:	ec45 4b10 	vmov	d0, r4, r5
 800372e:	f000 fcd7 	bl	80040e0 <_dtoa_r>
 8003732:	2f47      	cmp	r7, #71	; 0x47
 8003734:	4680      	mov	r8, r0
 8003736:	d102      	bne.n	800373e <__cvt+0x62>
 8003738:	f019 0f01 	tst.w	r9, #1
 800373c:	d026      	beq.n	800378c <__cvt+0xb0>
 800373e:	2f46      	cmp	r7, #70	; 0x46
 8003740:	eb08 0906 	add.w	r9, r8, r6
 8003744:	d111      	bne.n	800376a <__cvt+0x8e>
 8003746:	f898 3000 	ldrb.w	r3, [r8]
 800374a:	2b30      	cmp	r3, #48	; 0x30
 800374c:	d10a      	bne.n	8003764 <__cvt+0x88>
 800374e:	2200      	movs	r2, #0
 8003750:	2300      	movs	r3, #0
 8003752:	4620      	mov	r0, r4
 8003754:	4629      	mov	r1, r5
 8003756:	f7fd f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800375a:	b918      	cbnz	r0, 8003764 <__cvt+0x88>
 800375c:	f1c6 0601 	rsb	r6, r6, #1
 8003760:	f8ca 6000 	str.w	r6, [sl]
 8003764:	f8da 3000 	ldr.w	r3, [sl]
 8003768:	4499      	add	r9, r3
 800376a:	2200      	movs	r2, #0
 800376c:	2300      	movs	r3, #0
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fd f9b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003776:	b938      	cbnz	r0, 8003788 <__cvt+0xac>
 8003778:	2230      	movs	r2, #48	; 0x30
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	454b      	cmp	r3, r9
 800377e:	d205      	bcs.n	800378c <__cvt+0xb0>
 8003780:	1c59      	adds	r1, r3, #1
 8003782:	9103      	str	r1, [sp, #12]
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e7f8      	b.n	800377a <__cvt+0x9e>
 8003788:	f8cd 900c 	str.w	r9, [sp, #12]
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003790:	eba3 0308 	sub.w	r3, r3, r8
 8003794:	4640      	mov	r0, r8
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	b004      	add	sp, #16
 800379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800379e <__exponent>:
 800379e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037a0:	2900      	cmp	r1, #0
 80037a2:	4604      	mov	r4, r0
 80037a4:	bfba      	itte	lt
 80037a6:	4249      	neglt	r1, r1
 80037a8:	232d      	movlt	r3, #45	; 0x2d
 80037aa:	232b      	movge	r3, #43	; 0x2b
 80037ac:	2909      	cmp	r1, #9
 80037ae:	f804 2b02 	strb.w	r2, [r4], #2
 80037b2:	7043      	strb	r3, [r0, #1]
 80037b4:	dd20      	ble.n	80037f8 <__exponent+0x5a>
 80037b6:	f10d 0307 	add.w	r3, sp, #7
 80037ba:	461f      	mov	r7, r3
 80037bc:	260a      	movs	r6, #10
 80037be:	fb91 f5f6 	sdiv	r5, r1, r6
 80037c2:	fb06 1115 	mls	r1, r6, r5, r1
 80037c6:	3130      	adds	r1, #48	; 0x30
 80037c8:	2d09      	cmp	r5, #9
 80037ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80037ce:	f103 32ff 	add.w	r2, r3, #4294967295
 80037d2:	4629      	mov	r1, r5
 80037d4:	dc09      	bgt.n	80037ea <__exponent+0x4c>
 80037d6:	3130      	adds	r1, #48	; 0x30
 80037d8:	3b02      	subs	r3, #2
 80037da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037de:	42bb      	cmp	r3, r7
 80037e0:	4622      	mov	r2, r4
 80037e2:	d304      	bcc.n	80037ee <__exponent+0x50>
 80037e4:	1a10      	subs	r0, r2, r0
 80037e6:	b003      	add	sp, #12
 80037e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ea:	4613      	mov	r3, r2
 80037ec:	e7e7      	b.n	80037be <__exponent+0x20>
 80037ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037f2:	f804 2b01 	strb.w	r2, [r4], #1
 80037f6:	e7f2      	b.n	80037de <__exponent+0x40>
 80037f8:	2330      	movs	r3, #48	; 0x30
 80037fa:	4419      	add	r1, r3
 80037fc:	7083      	strb	r3, [r0, #2]
 80037fe:	1d02      	adds	r2, r0, #4
 8003800:	70c1      	strb	r1, [r0, #3]
 8003802:	e7ef      	b.n	80037e4 <__exponent+0x46>

08003804 <_printf_float>:
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	b08d      	sub	sp, #52	; 0x34
 800380a:	460c      	mov	r4, r1
 800380c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003810:	4616      	mov	r6, r2
 8003812:	461f      	mov	r7, r3
 8003814:	4605      	mov	r5, r0
 8003816:	f001 fae5 	bl	8004de4 <_localeconv_r>
 800381a:	6803      	ldr	r3, [r0, #0]
 800381c:	9304      	str	r3, [sp, #16]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fcde 	bl	80001e0 <strlen>
 8003824:	2300      	movs	r3, #0
 8003826:	930a      	str	r3, [sp, #40]	; 0x28
 8003828:	f8d8 3000 	ldr.w	r3, [r8]
 800382c:	9005      	str	r0, [sp, #20]
 800382e:	3307      	adds	r3, #7
 8003830:	f023 0307 	bic.w	r3, r3, #7
 8003834:	f103 0208 	add.w	r2, r3, #8
 8003838:	f894 a018 	ldrb.w	sl, [r4, #24]
 800383c:	f8d4 b000 	ldr.w	fp, [r4]
 8003840:	f8c8 2000 	str.w	r2, [r8]
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800384c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003850:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003854:	9307      	str	r3, [sp, #28]
 8003856:	f8cd 8018 	str.w	r8, [sp, #24]
 800385a:	f04f 32ff 	mov.w	r2, #4294967295
 800385e:	4ba7      	ldr	r3, [pc, #668]	; (8003afc <_printf_float+0x2f8>)
 8003860:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003864:	f7fd f96a 	bl	8000b3c <__aeabi_dcmpun>
 8003868:	bb70      	cbnz	r0, 80038c8 <_printf_float+0xc4>
 800386a:	f04f 32ff 	mov.w	r2, #4294967295
 800386e:	4ba3      	ldr	r3, [pc, #652]	; (8003afc <_printf_float+0x2f8>)
 8003870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003874:	f7fd f944 	bl	8000b00 <__aeabi_dcmple>
 8003878:	bb30      	cbnz	r0, 80038c8 <_printf_float+0xc4>
 800387a:	2200      	movs	r2, #0
 800387c:	2300      	movs	r3, #0
 800387e:	4640      	mov	r0, r8
 8003880:	4649      	mov	r1, r9
 8003882:	f7fd f933 	bl	8000aec <__aeabi_dcmplt>
 8003886:	b110      	cbz	r0, 800388e <_printf_float+0x8a>
 8003888:	232d      	movs	r3, #45	; 0x2d
 800388a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800388e:	4a9c      	ldr	r2, [pc, #624]	; (8003b00 <_printf_float+0x2fc>)
 8003890:	4b9c      	ldr	r3, [pc, #624]	; (8003b04 <_printf_float+0x300>)
 8003892:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003896:	bf8c      	ite	hi
 8003898:	4690      	movhi	r8, r2
 800389a:	4698      	movls	r8, r3
 800389c:	2303      	movs	r3, #3
 800389e:	f02b 0204 	bic.w	r2, fp, #4
 80038a2:	6123      	str	r3, [r4, #16]
 80038a4:	6022      	str	r2, [r4, #0]
 80038a6:	f04f 0900 	mov.w	r9, #0
 80038aa:	9700      	str	r7, [sp, #0]
 80038ac:	4633      	mov	r3, r6
 80038ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80038b0:	4621      	mov	r1, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 f9e6 	bl	8003c84 <_printf_common>
 80038b8:	3001      	adds	r0, #1
 80038ba:	f040 808d 	bne.w	80039d8 <_printf_float+0x1d4>
 80038be:	f04f 30ff 	mov.w	r0, #4294967295
 80038c2:	b00d      	add	sp, #52	; 0x34
 80038c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	4640      	mov	r0, r8
 80038ce:	4649      	mov	r1, r9
 80038d0:	f7fd f934 	bl	8000b3c <__aeabi_dcmpun>
 80038d4:	b110      	cbz	r0, 80038dc <_printf_float+0xd8>
 80038d6:	4a8c      	ldr	r2, [pc, #560]	; (8003b08 <_printf_float+0x304>)
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <_printf_float+0x308>)
 80038da:	e7da      	b.n	8003892 <_printf_float+0x8e>
 80038dc:	6861      	ldr	r1, [r4, #4]
 80038de:	1c4b      	adds	r3, r1, #1
 80038e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80038e4:	a80a      	add	r0, sp, #40	; 0x28
 80038e6:	d13e      	bne.n	8003966 <_printf_float+0x162>
 80038e8:	2306      	movs	r3, #6
 80038ea:	6063      	str	r3, [r4, #4]
 80038ec:	2300      	movs	r3, #0
 80038ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80038f2:	ab09      	add	r3, sp, #36	; 0x24
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	ec49 8b10 	vmov	d0, r8, r9
 80038fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80038fe:	6022      	str	r2, [r4, #0]
 8003900:	f8cd a004 	str.w	sl, [sp, #4]
 8003904:	6861      	ldr	r1, [r4, #4]
 8003906:	4628      	mov	r0, r5
 8003908:	f7ff fee8 	bl	80036dc <__cvt>
 800390c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003910:	2b47      	cmp	r3, #71	; 0x47
 8003912:	4680      	mov	r8, r0
 8003914:	d109      	bne.n	800392a <_printf_float+0x126>
 8003916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003918:	1cd8      	adds	r0, r3, #3
 800391a:	db02      	blt.n	8003922 <_printf_float+0x11e>
 800391c:	6862      	ldr	r2, [r4, #4]
 800391e:	4293      	cmp	r3, r2
 8003920:	dd47      	ble.n	80039b2 <_printf_float+0x1ae>
 8003922:	f1aa 0a02 	sub.w	sl, sl, #2
 8003926:	fa5f fa8a 	uxtb.w	sl, sl
 800392a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800392e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003930:	d824      	bhi.n	800397c <_printf_float+0x178>
 8003932:	3901      	subs	r1, #1
 8003934:	4652      	mov	r2, sl
 8003936:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800393a:	9109      	str	r1, [sp, #36]	; 0x24
 800393c:	f7ff ff2f 	bl	800379e <__exponent>
 8003940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003942:	1813      	adds	r3, r2, r0
 8003944:	2a01      	cmp	r2, #1
 8003946:	4681      	mov	r9, r0
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	dc02      	bgt.n	8003952 <_printf_float+0x14e>
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	07d1      	lsls	r1, r2, #31
 8003950:	d501      	bpl.n	8003956 <_printf_float+0x152>
 8003952:	3301      	adds	r3, #1
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0a5      	beq.n	80038aa <_printf_float+0xa6>
 800395e:	232d      	movs	r3, #45	; 0x2d
 8003960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003964:	e7a1      	b.n	80038aa <_printf_float+0xa6>
 8003966:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800396a:	f000 8177 	beq.w	8003c5c <_printf_float+0x458>
 800396e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003972:	d1bb      	bne.n	80038ec <_printf_float+0xe8>
 8003974:	2900      	cmp	r1, #0
 8003976:	d1b9      	bne.n	80038ec <_printf_float+0xe8>
 8003978:	2301      	movs	r3, #1
 800397a:	e7b6      	b.n	80038ea <_printf_float+0xe6>
 800397c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003980:	d119      	bne.n	80039b6 <_printf_float+0x1b2>
 8003982:	2900      	cmp	r1, #0
 8003984:	6863      	ldr	r3, [r4, #4]
 8003986:	dd0c      	ble.n	80039a2 <_printf_float+0x19e>
 8003988:	6121      	str	r1, [r4, #16]
 800398a:	b913      	cbnz	r3, 8003992 <_printf_float+0x18e>
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	07d2      	lsls	r2, r2, #31
 8003990:	d502      	bpl.n	8003998 <_printf_float+0x194>
 8003992:	3301      	adds	r3, #1
 8003994:	440b      	add	r3, r1
 8003996:	6123      	str	r3, [r4, #16]
 8003998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800399a:	65a3      	str	r3, [r4, #88]	; 0x58
 800399c:	f04f 0900 	mov.w	r9, #0
 80039a0:	e7d9      	b.n	8003956 <_printf_float+0x152>
 80039a2:	b913      	cbnz	r3, 80039aa <_printf_float+0x1a6>
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	07d0      	lsls	r0, r2, #31
 80039a8:	d501      	bpl.n	80039ae <_printf_float+0x1aa>
 80039aa:	3302      	adds	r3, #2
 80039ac:	e7f3      	b.n	8003996 <_printf_float+0x192>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e7f1      	b.n	8003996 <_printf_float+0x192>
 80039b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80039b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80039ba:	4293      	cmp	r3, r2
 80039bc:	db05      	blt.n	80039ca <_printf_float+0x1c6>
 80039be:	6822      	ldr	r2, [r4, #0]
 80039c0:	6123      	str	r3, [r4, #16]
 80039c2:	07d1      	lsls	r1, r2, #31
 80039c4:	d5e8      	bpl.n	8003998 <_printf_float+0x194>
 80039c6:	3301      	adds	r3, #1
 80039c8:	e7e5      	b.n	8003996 <_printf_float+0x192>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bfd4      	ite	le
 80039ce:	f1c3 0302 	rsble	r3, r3, #2
 80039d2:	2301      	movgt	r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	e7de      	b.n	8003996 <_printf_float+0x192>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	055a      	lsls	r2, r3, #21
 80039dc:	d407      	bmi.n	80039ee <_printf_float+0x1ea>
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	4642      	mov	r2, r8
 80039e2:	4631      	mov	r1, r6
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b8      	blx	r7
 80039e8:	3001      	adds	r0, #1
 80039ea:	d12b      	bne.n	8003a44 <_printf_float+0x240>
 80039ec:	e767      	b.n	80038be <_printf_float+0xba>
 80039ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80039f2:	f240 80dc 	bls.w	8003bae <_printf_float+0x3aa>
 80039f6:	2200      	movs	r2, #0
 80039f8:	2300      	movs	r3, #0
 80039fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039fe:	f7fd f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d033      	beq.n	8003a6e <_printf_float+0x26a>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <_printf_float+0x30c>)
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	47b8      	blx	r7
 8003a10:	3001      	adds	r0, #1
 8003a12:	f43f af54 	beq.w	80038be <_printf_float+0xba>
 8003a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	db02      	blt.n	8003a24 <_printf_float+0x220>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	07d8      	lsls	r0, r3, #31
 8003a22:	d50f      	bpl.n	8003a44 <_printf_float+0x240>
 8003a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a28:	4631      	mov	r1, r6
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f43f af45 	beq.w	80038be <_printf_float+0xba>
 8003a34:	f04f 0800 	mov.w	r8, #0
 8003a38:	f104 091a 	add.w	r9, r4, #26
 8003a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	4543      	cmp	r3, r8
 8003a42:	dc09      	bgt.n	8003a58 <_printf_float+0x254>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	079b      	lsls	r3, r3, #30
 8003a48:	f100 8103 	bmi.w	8003c52 <_printf_float+0x44e>
 8003a4c:	68e0      	ldr	r0, [r4, #12]
 8003a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a50:	4298      	cmp	r0, r3
 8003a52:	bfb8      	it	lt
 8003a54:	4618      	movlt	r0, r3
 8003a56:	e734      	b.n	80038c2 <_printf_float+0xbe>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	464a      	mov	r2, r9
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	4628      	mov	r0, r5
 8003a60:	47b8      	blx	r7
 8003a62:	3001      	adds	r0, #1
 8003a64:	f43f af2b 	beq.w	80038be <_printf_float+0xba>
 8003a68:	f108 0801 	add.w	r8, r8, #1
 8003a6c:	e7e6      	b.n	8003a3c <_printf_float+0x238>
 8003a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dc2b      	bgt.n	8003acc <_printf_float+0x2c8>
 8003a74:	2301      	movs	r3, #1
 8003a76:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <_printf_float+0x30c>)
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	47b8      	blx	r7
 8003a7e:	3001      	adds	r0, #1
 8003a80:	f43f af1d 	beq.w	80038be <_printf_float+0xba>
 8003a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a86:	b923      	cbnz	r3, 8003a92 <_printf_float+0x28e>
 8003a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a8a:	b913      	cbnz	r3, 8003a92 <_printf_float+0x28e>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	07d9      	lsls	r1, r3, #31
 8003a90:	d5d8      	bpl.n	8003a44 <_printf_float+0x240>
 8003a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a96:	4631      	mov	r1, r6
 8003a98:	4628      	mov	r0, r5
 8003a9a:	47b8      	blx	r7
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	f43f af0e 	beq.w	80038be <_printf_float+0xba>
 8003aa2:	f04f 0900 	mov.w	r9, #0
 8003aa6:	f104 0a1a 	add.w	sl, r4, #26
 8003aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aac:	425b      	negs	r3, r3
 8003aae:	454b      	cmp	r3, r9
 8003ab0:	dc01      	bgt.n	8003ab6 <_printf_float+0x2b2>
 8003ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab4:	e794      	b.n	80039e0 <_printf_float+0x1dc>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	4652      	mov	r2, sl
 8003aba:	4631      	mov	r1, r6
 8003abc:	4628      	mov	r0, r5
 8003abe:	47b8      	blx	r7
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	f43f aefc 	beq.w	80038be <_printf_float+0xba>
 8003ac6:	f109 0901 	add.w	r9, r9, #1
 8003aca:	e7ee      	b.n	8003aaa <_printf_float+0x2a6>
 8003acc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ace:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bfa8      	it	ge
 8003ad4:	461a      	movge	r2, r3
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	4691      	mov	r9, r2
 8003ada:	dd07      	ble.n	8003aec <_printf_float+0x2e8>
 8003adc:	4613      	mov	r3, r2
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	47b8      	blx	r7
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	f43f aee9 	beq.w	80038be <_printf_float+0xba>
 8003aec:	f104 031a 	add.w	r3, r4, #26
 8003af0:	f04f 0b00 	mov.w	fp, #0
 8003af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003af8:	9306      	str	r3, [sp, #24]
 8003afa:	e015      	b.n	8003b28 <_printf_float+0x324>
 8003afc:	7fefffff 	.word	0x7fefffff
 8003b00:	08006d94 	.word	0x08006d94
 8003b04:	08006d90 	.word	0x08006d90
 8003b08:	08006d9c 	.word	0x08006d9c
 8003b0c:	08006d98 	.word	0x08006d98
 8003b10:	08006da0 	.word	0x08006da0
 8003b14:	2301      	movs	r3, #1
 8003b16:	9a06      	ldr	r2, [sp, #24]
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	47b8      	blx	r7
 8003b1e:	3001      	adds	r0, #1
 8003b20:	f43f aecd 	beq.w	80038be <_printf_float+0xba>
 8003b24:	f10b 0b01 	add.w	fp, fp, #1
 8003b28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b2c:	ebaa 0309 	sub.w	r3, sl, r9
 8003b30:	455b      	cmp	r3, fp
 8003b32:	dcef      	bgt.n	8003b14 <_printf_float+0x310>
 8003b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	44d0      	add	r8, sl
 8003b3c:	db15      	blt.n	8003b6a <_printf_float+0x366>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	07da      	lsls	r2, r3, #31
 8003b42:	d412      	bmi.n	8003b6a <_printf_float+0x366>
 8003b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b48:	eba3 020a 	sub.w	r2, r3, sl
 8003b4c:	eba3 0a01 	sub.w	sl, r3, r1
 8003b50:	4592      	cmp	sl, r2
 8003b52:	bfa8      	it	ge
 8003b54:	4692      	movge	sl, r2
 8003b56:	f1ba 0f00 	cmp.w	sl, #0
 8003b5a:	dc0e      	bgt.n	8003b7a <_printf_float+0x376>
 8003b5c:	f04f 0800 	mov.w	r8, #0
 8003b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b64:	f104 091a 	add.w	r9, r4, #26
 8003b68:	e019      	b.n	8003b9e <_printf_float+0x39a>
 8003b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4628      	mov	r0, r5
 8003b72:	47b8      	blx	r7
 8003b74:	3001      	adds	r0, #1
 8003b76:	d1e5      	bne.n	8003b44 <_printf_float+0x340>
 8003b78:	e6a1      	b.n	80038be <_printf_float+0xba>
 8003b7a:	4653      	mov	r3, sl
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	d1e9      	bne.n	8003b5c <_printf_float+0x358>
 8003b88:	e699      	b.n	80038be <_printf_float+0xba>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	464a      	mov	r2, r9
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b8      	blx	r7
 8003b94:	3001      	adds	r0, #1
 8003b96:	f43f ae92 	beq.w	80038be <_printf_float+0xba>
 8003b9a:	f108 0801 	add.w	r8, r8, #1
 8003b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	eba3 030a 	sub.w	r3, r3, sl
 8003ba8:	4543      	cmp	r3, r8
 8003baa:	dcee      	bgt.n	8003b8a <_printf_float+0x386>
 8003bac:	e74a      	b.n	8003a44 <_printf_float+0x240>
 8003bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	dc01      	bgt.n	8003bb8 <_printf_float+0x3b4>
 8003bb4:	07db      	lsls	r3, r3, #31
 8003bb6:	d53a      	bpl.n	8003c2e <_printf_float+0x42a>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4642      	mov	r2, r8
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b8      	blx	r7
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f43f ae7b 	beq.w	80038be <_printf_float+0xba>
 8003bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f108 0801 	add.w	r8, r8, #1
 8003bd8:	f43f ae71 	beq.w	80038be <_printf_float+0xba>
 8003bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bde:	2200      	movs	r2, #0
 8003be0:	f103 3aff 	add.w	sl, r3, #4294967295
 8003be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003be8:	2300      	movs	r3, #0
 8003bea:	f7fc ff75 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bee:	b9c8      	cbnz	r0, 8003c24 <_printf_float+0x420>
 8003bf0:	4653      	mov	r3, sl
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	47b8      	blx	r7
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d10e      	bne.n	8003c1c <_printf_float+0x418>
 8003bfe:	e65e      	b.n	80038be <_printf_float+0xba>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4652      	mov	r2, sl
 8003c04:	4631      	mov	r1, r6
 8003c06:	4628      	mov	r0, r5
 8003c08:	47b8      	blx	r7
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f43f ae57 	beq.w	80038be <_printf_float+0xba>
 8003c10:	f108 0801 	add.w	r8, r8, #1
 8003c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	4543      	cmp	r3, r8
 8003c1a:	dcf1      	bgt.n	8003c00 <_printf_float+0x3fc>
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c22:	e6de      	b.n	80039e2 <_printf_float+0x1de>
 8003c24:	f04f 0800 	mov.w	r8, #0
 8003c28:	f104 0a1a 	add.w	sl, r4, #26
 8003c2c:	e7f2      	b.n	8003c14 <_printf_float+0x410>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e7df      	b.n	8003bf2 <_printf_float+0x3ee>
 8003c32:	2301      	movs	r3, #1
 8003c34:	464a      	mov	r2, r9
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b8      	blx	r7
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	f43f ae3e 	beq.w	80038be <_printf_float+0xba>
 8003c42:	f108 0801 	add.w	r8, r8, #1
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	4543      	cmp	r3, r8
 8003c4e:	dcf0      	bgt.n	8003c32 <_printf_float+0x42e>
 8003c50:	e6fc      	b.n	8003a4c <_printf_float+0x248>
 8003c52:	f04f 0800 	mov.w	r8, #0
 8003c56:	f104 0919 	add.w	r9, r4, #25
 8003c5a:	e7f4      	b.n	8003c46 <_printf_float+0x442>
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	f43f ae8b 	beq.w	8003978 <_printf_float+0x174>
 8003c62:	2300      	movs	r3, #0
 8003c64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003c68:	ab09      	add	r3, sp, #36	; 0x24
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	ec49 8b10 	vmov	d0, r8, r9
 8003c70:	6022      	str	r2, [r4, #0]
 8003c72:	f8cd a004 	str.w	sl, [sp, #4]
 8003c76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7ff fd2e 	bl	80036dc <__cvt>
 8003c80:	4680      	mov	r8, r0
 8003c82:	e648      	b.n	8003916 <_printf_float+0x112>

08003c84 <_printf_common>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	4691      	mov	r9, r2
 8003c8a:	461f      	mov	r7, r3
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	690b      	ldr	r3, [r1, #16]
 8003c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bfb8      	it	lt
 8003c98:	4613      	movlt	r3, r2
 8003c9a:	f8c9 3000 	str.w	r3, [r9]
 8003c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	b112      	cbz	r2, 8003cae <_printf_common+0x2a>
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f8c9 3000 	str.w	r3, [r9]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	0699      	lsls	r1, r3, #26
 8003cb2:	bf42      	ittt	mi
 8003cb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cb8:	3302      	addmi	r3, #2
 8003cba:	f8c9 3000 	strmi.w	r3, [r9]
 8003cbe:	6825      	ldr	r5, [r4, #0]
 8003cc0:	f015 0506 	ands.w	r5, r5, #6
 8003cc4:	d107      	bne.n	8003cd6 <_printf_common+0x52>
 8003cc6:	f104 0a19 	add.w	sl, r4, #25
 8003cca:	68e3      	ldr	r3, [r4, #12]
 8003ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	dc28      	bgt.n	8003d28 <_printf_common+0xa4>
 8003cd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	3300      	adds	r3, #0
 8003cde:	bf18      	it	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	0692      	lsls	r2, r2, #26
 8003ce4:	d42d      	bmi.n	8003d42 <_printf_common+0xbe>
 8003ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cea:	4639      	mov	r1, r7
 8003cec:	4630      	mov	r0, r6
 8003cee:	47c0      	blx	r8
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d020      	beq.n	8003d36 <_printf_common+0xb2>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	68e5      	ldr	r5, [r4, #12]
 8003cf8:	f8d9 2000 	ldr.w	r2, [r9]
 8003cfc:	f003 0306 	and.w	r3, r3, #6
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	bf08      	it	eq
 8003d04:	1aad      	subeq	r5, r5, r2
 8003d06:	68a3      	ldr	r3, [r4, #8]
 8003d08:	6922      	ldr	r2, [r4, #16]
 8003d0a:	bf0c      	ite	eq
 8003d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d10:	2500      	movne	r5, #0
 8003d12:	4293      	cmp	r3, r2
 8003d14:	bfc4      	itt	gt
 8003d16:	1a9b      	subgt	r3, r3, r2
 8003d18:	18ed      	addgt	r5, r5, r3
 8003d1a:	f04f 0900 	mov.w	r9, #0
 8003d1e:	341a      	adds	r4, #26
 8003d20:	454d      	cmp	r5, r9
 8003d22:	d11a      	bne.n	8003d5a <_printf_common+0xd6>
 8003d24:	2000      	movs	r0, #0
 8003d26:	e008      	b.n	8003d3a <_printf_common+0xb6>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4652      	mov	r2, sl
 8003d2c:	4639      	mov	r1, r7
 8003d2e:	4630      	mov	r0, r6
 8003d30:	47c0      	blx	r8
 8003d32:	3001      	adds	r0, #1
 8003d34:	d103      	bne.n	8003d3e <_printf_common+0xba>
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3e:	3501      	adds	r5, #1
 8003d40:	e7c3      	b.n	8003cca <_printf_common+0x46>
 8003d42:	18e1      	adds	r1, r4, r3
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	2030      	movs	r0, #48	; 0x30
 8003d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d4c:	4422      	add	r2, r4
 8003d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d56:	3302      	adds	r3, #2
 8003d58:	e7c5      	b.n	8003ce6 <_printf_common+0x62>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	4639      	mov	r1, r7
 8003d60:	4630      	mov	r0, r6
 8003d62:	47c0      	blx	r8
 8003d64:	3001      	adds	r0, #1
 8003d66:	d0e6      	beq.n	8003d36 <_printf_common+0xb2>
 8003d68:	f109 0901 	add.w	r9, r9, #1
 8003d6c:	e7d8      	b.n	8003d20 <_printf_common+0x9c>
	...

08003d70 <_printf_i>:
 8003d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d78:	460c      	mov	r4, r1
 8003d7a:	7e09      	ldrb	r1, [r1, #24]
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	296e      	cmp	r1, #110	; 0x6e
 8003d80:	4617      	mov	r7, r2
 8003d82:	4606      	mov	r6, r0
 8003d84:	4698      	mov	r8, r3
 8003d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d88:	f000 80b3 	beq.w	8003ef2 <_printf_i+0x182>
 8003d8c:	d822      	bhi.n	8003dd4 <_printf_i+0x64>
 8003d8e:	2963      	cmp	r1, #99	; 0x63
 8003d90:	d036      	beq.n	8003e00 <_printf_i+0x90>
 8003d92:	d80a      	bhi.n	8003daa <_printf_i+0x3a>
 8003d94:	2900      	cmp	r1, #0
 8003d96:	f000 80b9 	beq.w	8003f0c <_printf_i+0x19c>
 8003d9a:	2958      	cmp	r1, #88	; 0x58
 8003d9c:	f000 8083 	beq.w	8003ea6 <_printf_i+0x136>
 8003da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003da8:	e032      	b.n	8003e10 <_printf_i+0xa0>
 8003daa:	2964      	cmp	r1, #100	; 0x64
 8003dac:	d001      	beq.n	8003db2 <_printf_i+0x42>
 8003dae:	2969      	cmp	r1, #105	; 0x69
 8003db0:	d1f6      	bne.n	8003da0 <_printf_i+0x30>
 8003db2:	6820      	ldr	r0, [r4, #0]
 8003db4:	6813      	ldr	r3, [r2, #0]
 8003db6:	0605      	lsls	r5, r0, #24
 8003db8:	f103 0104 	add.w	r1, r3, #4
 8003dbc:	d52a      	bpl.n	8003e14 <_printf_i+0xa4>
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da03      	bge.n	8003dce <_printf_i+0x5e>
 8003dc6:	222d      	movs	r2, #45	; 0x2d
 8003dc8:	425b      	negs	r3, r3
 8003dca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dce:	486f      	ldr	r0, [pc, #444]	; (8003f8c <_printf_i+0x21c>)
 8003dd0:	220a      	movs	r2, #10
 8003dd2:	e039      	b.n	8003e48 <_printf_i+0xd8>
 8003dd4:	2973      	cmp	r1, #115	; 0x73
 8003dd6:	f000 809d 	beq.w	8003f14 <_printf_i+0x1a4>
 8003dda:	d808      	bhi.n	8003dee <_printf_i+0x7e>
 8003ddc:	296f      	cmp	r1, #111	; 0x6f
 8003dde:	d020      	beq.n	8003e22 <_printf_i+0xb2>
 8003de0:	2970      	cmp	r1, #112	; 0x70
 8003de2:	d1dd      	bne.n	8003da0 <_printf_i+0x30>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	e003      	b.n	8003df6 <_printf_i+0x86>
 8003dee:	2975      	cmp	r1, #117	; 0x75
 8003df0:	d017      	beq.n	8003e22 <_printf_i+0xb2>
 8003df2:	2978      	cmp	r1, #120	; 0x78
 8003df4:	d1d4      	bne.n	8003da0 <_printf_i+0x30>
 8003df6:	2378      	movs	r3, #120	; 0x78
 8003df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dfc:	4864      	ldr	r0, [pc, #400]	; (8003f90 <_printf_i+0x220>)
 8003dfe:	e055      	b.n	8003eac <_printf_i+0x13c>
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	1d19      	adds	r1, r3, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6011      	str	r1, [r2, #0]
 8003e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e10:	2301      	movs	r3, #1
 8003e12:	e08c      	b.n	8003f2e <_printf_i+0x1be>
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6011      	str	r1, [r2, #0]
 8003e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1c:	bf18      	it	ne
 8003e1e:	b21b      	sxthne	r3, r3
 8003e20:	e7cf      	b.n	8003dc2 <_printf_i+0x52>
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	6825      	ldr	r5, [r4, #0]
 8003e26:	1d18      	adds	r0, r3, #4
 8003e28:	6010      	str	r0, [r2, #0]
 8003e2a:	0628      	lsls	r0, r5, #24
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0xc2>
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0xc8>
 8003e32:	0668      	lsls	r0, r5, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0xbe>
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	4854      	ldr	r0, [pc, #336]	; (8003f8c <_printf_i+0x21c>)
 8003e3a:	296f      	cmp	r1, #111	; 0x6f
 8003e3c:	bf14      	ite	ne
 8003e3e:	220a      	movne	r2, #10
 8003e40:	2208      	moveq	r2, #8
 8003e42:	2100      	movs	r1, #0
 8003e44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e48:	6865      	ldr	r5, [r4, #4]
 8003e4a:	60a5      	str	r5, [r4, #8]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	f2c0 8095 	blt.w	8003f7c <_printf_i+0x20c>
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	f021 0104 	bic.w	r1, r1, #4
 8003e58:	6021      	str	r1, [r4, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d13d      	bne.n	8003eda <_printf_i+0x16a>
 8003e5e:	2d00      	cmp	r5, #0
 8003e60:	f040 808e 	bne.w	8003f80 <_printf_i+0x210>
 8003e64:	4665      	mov	r5, ip
 8003e66:	2a08      	cmp	r2, #8
 8003e68:	d10b      	bne.n	8003e82 <_printf_i+0x112>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	07db      	lsls	r3, r3, #31
 8003e6e:	d508      	bpl.n	8003e82 <_printf_i+0x112>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	6862      	ldr	r2, [r4, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	bfde      	ittt	le
 8003e78:	2330      	movle	r3, #48	; 0x30
 8003e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e82:	ebac 0305 	sub.w	r3, ip, r5
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	f8cd 8000 	str.w	r8, [sp]
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	aa03      	add	r2, sp, #12
 8003e90:	4621      	mov	r1, r4
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7ff fef6 	bl	8003c84 <_printf_common>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d14d      	bne.n	8003f38 <_printf_i+0x1c8>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	b005      	add	sp, #20
 8003ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ea6:	4839      	ldr	r0, [pc, #228]	; (8003f8c <_printf_i+0x21c>)
 8003ea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003eac:	6813      	ldr	r3, [r2, #0]
 8003eae:	6821      	ldr	r1, [r4, #0]
 8003eb0:	1d1d      	adds	r5, r3, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6015      	str	r5, [r2, #0]
 8003eb6:	060a      	lsls	r2, r1, #24
 8003eb8:	d50b      	bpl.n	8003ed2 <_printf_i+0x162>
 8003eba:	07ca      	lsls	r2, r1, #31
 8003ebc:	bf44      	itt	mi
 8003ebe:	f041 0120 	orrmi.w	r1, r1, #32
 8003ec2:	6021      	strmi	r1, [r4, #0]
 8003ec4:	b91b      	cbnz	r3, 8003ece <_printf_i+0x15e>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	f022 0220 	bic.w	r2, r2, #32
 8003ecc:	6022      	str	r2, [r4, #0]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	e7b7      	b.n	8003e42 <_printf_i+0xd2>
 8003ed2:	064d      	lsls	r5, r1, #25
 8003ed4:	bf48      	it	mi
 8003ed6:	b29b      	uxthmi	r3, r3
 8003ed8:	e7ef      	b.n	8003eba <_printf_i+0x14a>
 8003eda:	4665      	mov	r5, ip
 8003edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ee0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ee4:	5cc3      	ldrb	r3, [r0, r3]
 8003ee6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003eea:	460b      	mov	r3, r1
 8003eec:	2900      	cmp	r1, #0
 8003eee:	d1f5      	bne.n	8003edc <_printf_i+0x16c>
 8003ef0:	e7b9      	b.n	8003e66 <_printf_i+0xf6>
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	6825      	ldr	r5, [r4, #0]
 8003ef6:	6961      	ldr	r1, [r4, #20]
 8003ef8:	1d18      	adds	r0, r3, #4
 8003efa:	6010      	str	r0, [r2, #0]
 8003efc:	0628      	lsls	r0, r5, #24
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	d501      	bpl.n	8003f06 <_printf_i+0x196>
 8003f02:	6019      	str	r1, [r3, #0]
 8003f04:	e002      	b.n	8003f0c <_printf_i+0x19c>
 8003f06:	066a      	lsls	r2, r5, #25
 8003f08:	d5fb      	bpl.n	8003f02 <_printf_i+0x192>
 8003f0a:	8019      	strh	r1, [r3, #0]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6123      	str	r3, [r4, #16]
 8003f10:	4665      	mov	r5, ip
 8003f12:	e7b9      	b.n	8003e88 <_printf_i+0x118>
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	1d19      	adds	r1, r3, #4
 8003f18:	6011      	str	r1, [r2, #0]
 8003f1a:	681d      	ldr	r5, [r3, #0]
 8003f1c:	6862      	ldr	r2, [r4, #4]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4628      	mov	r0, r5
 8003f22:	f7fc f965 	bl	80001f0 <memchr>
 8003f26:	b108      	cbz	r0, 8003f2c <_printf_i+0x1bc>
 8003f28:	1b40      	subs	r0, r0, r5
 8003f2a:	6060      	str	r0, [r4, #4]
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	2300      	movs	r3, #0
 8003f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f36:	e7a7      	b.n	8003e88 <_printf_i+0x118>
 8003f38:	6923      	ldr	r3, [r4, #16]
 8003f3a:	462a      	mov	r2, r5
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	4630      	mov	r0, r6
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0aa      	beq.n	8003e9c <_printf_i+0x12c>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	079b      	lsls	r3, r3, #30
 8003f4a:	d413      	bmi.n	8003f74 <_printf_i+0x204>
 8003f4c:	68e0      	ldr	r0, [r4, #12]
 8003f4e:	9b03      	ldr	r3, [sp, #12]
 8003f50:	4298      	cmp	r0, r3
 8003f52:	bfb8      	it	lt
 8003f54:	4618      	movlt	r0, r3
 8003f56:	e7a3      	b.n	8003ea0 <_printf_i+0x130>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	464a      	mov	r2, r9
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	4630      	mov	r0, r6
 8003f60:	47c0      	blx	r8
 8003f62:	3001      	adds	r0, #1
 8003f64:	d09a      	beq.n	8003e9c <_printf_i+0x12c>
 8003f66:	3501      	adds	r5, #1
 8003f68:	68e3      	ldr	r3, [r4, #12]
 8003f6a:	9a03      	ldr	r2, [sp, #12]
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	42ab      	cmp	r3, r5
 8003f70:	dcf2      	bgt.n	8003f58 <_printf_i+0x1e8>
 8003f72:	e7eb      	b.n	8003f4c <_printf_i+0x1dc>
 8003f74:	2500      	movs	r5, #0
 8003f76:	f104 0919 	add.w	r9, r4, #25
 8003f7a:	e7f5      	b.n	8003f68 <_printf_i+0x1f8>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ac      	bne.n	8003eda <_printf_i+0x16a>
 8003f80:	7803      	ldrb	r3, [r0, #0]
 8003f82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f8a:	e76c      	b.n	8003e66 <_printf_i+0xf6>
 8003f8c:	08006da2 	.word	0x08006da2
 8003f90:	08006db3 	.word	0x08006db3

08003f94 <iprintf>:
 8003f94:	b40f      	push	{r0, r1, r2, r3}
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <iprintf+0x2c>)
 8003f98:	b513      	push	{r0, r1, r4, lr}
 8003f9a:	681c      	ldr	r4, [r3, #0]
 8003f9c:	b124      	cbz	r4, 8003fa8 <iprintf+0x14>
 8003f9e:	69a3      	ldr	r3, [r4, #24]
 8003fa0:	b913      	cbnz	r3, 8003fa8 <iprintf+0x14>
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f000 fe94 	bl	8004cd0 <__sinit>
 8003fa8:	ab05      	add	r3, sp, #20
 8003faa:	9a04      	ldr	r2, [sp, #16]
 8003fac:	68a1      	ldr	r1, [r4, #8]
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f001 faf3 	bl	800559c <_vfiprintf_r>
 8003fb6:	b002      	add	sp, #8
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	b004      	add	sp, #16
 8003fbe:	4770      	bx	lr
 8003fc0:	2000000c 	.word	0x2000000c

08003fc4 <quorem>:
 8003fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc8:	6903      	ldr	r3, [r0, #16]
 8003fca:	690c      	ldr	r4, [r1, #16]
 8003fcc:	42a3      	cmp	r3, r4
 8003fce:	4680      	mov	r8, r0
 8003fd0:	f2c0 8082 	blt.w	80040d8 <quorem+0x114>
 8003fd4:	3c01      	subs	r4, #1
 8003fd6:	f101 0714 	add.w	r7, r1, #20
 8003fda:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003fde:	f100 0614 	add.w	r6, r0, #20
 8003fe2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003fe6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003fea:	eb06 030c 	add.w	r3, r6, ip
 8003fee:	3501      	adds	r5, #1
 8003ff0:	eb07 090c 	add.w	r9, r7, ip
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	fbb0 f5f5 	udiv	r5, r0, r5
 8003ffa:	b395      	cbz	r5, 8004062 <quorem+0x9e>
 8003ffc:	f04f 0a00 	mov.w	sl, #0
 8004000:	4638      	mov	r0, r7
 8004002:	46b6      	mov	lr, r6
 8004004:	46d3      	mov	fp, sl
 8004006:	f850 2b04 	ldr.w	r2, [r0], #4
 800400a:	b293      	uxth	r3, r2
 800400c:	fb05 a303 	mla	r3, r5, r3, sl
 8004010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004014:	b29b      	uxth	r3, r3
 8004016:	ebab 0303 	sub.w	r3, fp, r3
 800401a:	0c12      	lsrs	r2, r2, #16
 800401c:	f8de b000 	ldr.w	fp, [lr]
 8004020:	fb05 a202 	mla	r2, r5, r2, sl
 8004024:	fa13 f38b 	uxtah	r3, r3, fp
 8004028:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800402c:	fa1f fb82 	uxth.w	fp, r2
 8004030:	f8de 2000 	ldr.w	r2, [lr]
 8004034:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800403c:	b29b      	uxth	r3, r3
 800403e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004042:	4581      	cmp	r9, r0
 8004044:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004048:	f84e 3b04 	str.w	r3, [lr], #4
 800404c:	d2db      	bcs.n	8004006 <quorem+0x42>
 800404e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004052:	b933      	cbnz	r3, 8004062 <quorem+0x9e>
 8004054:	9b01      	ldr	r3, [sp, #4]
 8004056:	3b04      	subs	r3, #4
 8004058:	429e      	cmp	r6, r3
 800405a:	461a      	mov	r2, r3
 800405c:	d330      	bcc.n	80040c0 <quorem+0xfc>
 800405e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004062:	4640      	mov	r0, r8
 8004064:	f001 f8f4 	bl	8005250 <__mcmp>
 8004068:	2800      	cmp	r0, #0
 800406a:	db25      	blt.n	80040b8 <quorem+0xf4>
 800406c:	3501      	adds	r5, #1
 800406e:	4630      	mov	r0, r6
 8004070:	f04f 0c00 	mov.w	ip, #0
 8004074:	f857 2b04 	ldr.w	r2, [r7], #4
 8004078:	f8d0 e000 	ldr.w	lr, [r0]
 800407c:	b293      	uxth	r3, r2
 800407e:	ebac 0303 	sub.w	r3, ip, r3
 8004082:	0c12      	lsrs	r2, r2, #16
 8004084:	fa13 f38e 	uxtah	r3, r3, lr
 8004088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800408c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004090:	b29b      	uxth	r3, r3
 8004092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004096:	45b9      	cmp	r9, r7
 8004098:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800409c:	f840 3b04 	str.w	r3, [r0], #4
 80040a0:	d2e8      	bcs.n	8004074 <quorem+0xb0>
 80040a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80040a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80040aa:	b92a      	cbnz	r2, 80040b8 <quorem+0xf4>
 80040ac:	3b04      	subs	r3, #4
 80040ae:	429e      	cmp	r6, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	d30b      	bcc.n	80040cc <quorem+0x108>
 80040b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80040b8:	4628      	mov	r0, r5
 80040ba:	b003      	add	sp, #12
 80040bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	3b04      	subs	r3, #4
 80040c4:	2a00      	cmp	r2, #0
 80040c6:	d1ca      	bne.n	800405e <quorem+0x9a>
 80040c8:	3c01      	subs	r4, #1
 80040ca:	e7c5      	b.n	8004058 <quorem+0x94>
 80040cc:	6812      	ldr	r2, [r2, #0]
 80040ce:	3b04      	subs	r3, #4
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d1ef      	bne.n	80040b4 <quorem+0xf0>
 80040d4:	3c01      	subs	r4, #1
 80040d6:	e7ea      	b.n	80040ae <quorem+0xea>
 80040d8:	2000      	movs	r0, #0
 80040da:	e7ee      	b.n	80040ba <quorem+0xf6>
 80040dc:	0000      	movs	r0, r0
	...

080040e0 <_dtoa_r>:
 80040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e4:	ec57 6b10 	vmov	r6, r7, d0
 80040e8:	b097      	sub	sp, #92	; 0x5c
 80040ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040ec:	9106      	str	r1, [sp, #24]
 80040ee:	4604      	mov	r4, r0
 80040f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80040f2:	9312      	str	r3, [sp, #72]	; 0x48
 80040f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80040f8:	e9cd 6700 	strd	r6, r7, [sp]
 80040fc:	b93d      	cbnz	r5, 800410e <_dtoa_r+0x2e>
 80040fe:	2010      	movs	r0, #16
 8004100:	f000 fe7e 	bl	8004e00 <malloc>
 8004104:	6260      	str	r0, [r4, #36]	; 0x24
 8004106:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800410a:	6005      	str	r5, [r0, #0]
 800410c:	60c5      	str	r5, [r0, #12]
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	b151      	cbz	r1, 800412a <_dtoa_r+0x4a>
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	604a      	str	r2, [r1, #4]
 8004118:	2301      	movs	r3, #1
 800411a:	4093      	lsls	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
 800411e:	4620      	mov	r0, r4
 8004120:	f000 feb5 	bl	8004e8e <_Bfree>
 8004124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	1e3b      	subs	r3, r7, #0
 800412c:	bfbb      	ittet	lt
 800412e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004132:	9301      	strlt	r3, [sp, #4]
 8004134:	2300      	movge	r3, #0
 8004136:	2201      	movlt	r2, #1
 8004138:	bfac      	ite	ge
 800413a:	f8c8 3000 	strge.w	r3, [r8]
 800413e:	f8c8 2000 	strlt.w	r2, [r8]
 8004142:	4baf      	ldr	r3, [pc, #700]	; (8004400 <_dtoa_r+0x320>)
 8004144:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004148:	ea33 0308 	bics.w	r3, r3, r8
 800414c:	d114      	bne.n	8004178 <_dtoa_r+0x98>
 800414e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004150:	f242 730f 	movw	r3, #9999	; 0x270f
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	b923      	cbnz	r3, 8004164 <_dtoa_r+0x84>
 800415a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800415e:	2800      	cmp	r0, #0
 8004160:	f000 8542 	beq.w	8004be8 <_dtoa_r+0xb08>
 8004164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004166:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004414 <_dtoa_r+0x334>
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8544 	beq.w	8004bf8 <_dtoa_r+0xb18>
 8004170:	f10b 0303 	add.w	r3, fp, #3
 8004174:	f000 bd3e 	b.w	8004bf4 <_dtoa_r+0xb14>
 8004178:	e9dd 6700 	ldrd	r6, r7, [sp]
 800417c:	2200      	movs	r2, #0
 800417e:	2300      	movs	r3, #0
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	f7fc fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004188:	4681      	mov	r9, r0
 800418a:	b168      	cbz	r0, 80041a8 <_dtoa_r+0xc8>
 800418c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800418e:	2301      	movs	r3, #1
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8524 	beq.w	8004be2 <_dtoa_r+0xb02>
 800419a:	4b9a      	ldr	r3, [pc, #616]	; (8004404 <_dtoa_r+0x324>)
 800419c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800419e:	f103 3bff 	add.w	fp, r3, #4294967295
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	f000 bd28 	b.w	8004bf8 <_dtoa_r+0xb18>
 80041a8:	aa14      	add	r2, sp, #80	; 0x50
 80041aa:	a915      	add	r1, sp, #84	; 0x54
 80041ac:	ec47 6b10 	vmov	d0, r6, r7
 80041b0:	4620      	mov	r0, r4
 80041b2:	f001 f8c4 	bl	800533e <__d2b>
 80041b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80041ba:	9004      	str	r0, [sp, #16]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d07c      	beq.n	80042ba <_dtoa_r+0x1da>
 80041c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80041c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80041c8:	46b2      	mov	sl, r6
 80041ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80041ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80041d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80041d6:	2200      	movs	r2, #0
 80041d8:	4b8b      	ldr	r3, [pc, #556]	; (8004408 <_dtoa_r+0x328>)
 80041da:	4650      	mov	r0, sl
 80041dc:	4659      	mov	r1, fp
 80041de:	f7fc f85b 	bl	8000298 <__aeabi_dsub>
 80041e2:	a381      	add	r3, pc, #516	; (adr r3, 80043e8 <_dtoa_r+0x308>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f7fc fa0e 	bl	8000608 <__aeabi_dmul>
 80041ec:	a380      	add	r3, pc, #512	; (adr r3, 80043f0 <_dtoa_r+0x310>)
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f7fc f853 	bl	800029c <__adddf3>
 80041f6:	4606      	mov	r6, r0
 80041f8:	4628      	mov	r0, r5
 80041fa:	460f      	mov	r7, r1
 80041fc:	f7fc f99a 	bl	8000534 <__aeabi_i2d>
 8004200:	a37d      	add	r3, pc, #500	; (adr r3, 80043f8 <_dtoa_r+0x318>)
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	f7fc f9ff 	bl	8000608 <__aeabi_dmul>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4630      	mov	r0, r6
 8004210:	4639      	mov	r1, r7
 8004212:	f7fc f843 	bl	800029c <__adddf3>
 8004216:	4606      	mov	r6, r0
 8004218:	460f      	mov	r7, r1
 800421a:	f7fc fca5 	bl	8000b68 <__aeabi_d2iz>
 800421e:	2200      	movs	r2, #0
 8004220:	4682      	mov	sl, r0
 8004222:	2300      	movs	r3, #0
 8004224:	4630      	mov	r0, r6
 8004226:	4639      	mov	r1, r7
 8004228:	f7fc fc60 	bl	8000aec <__aeabi_dcmplt>
 800422c:	b148      	cbz	r0, 8004242 <_dtoa_r+0x162>
 800422e:	4650      	mov	r0, sl
 8004230:	f7fc f980 	bl	8000534 <__aeabi_i2d>
 8004234:	4632      	mov	r2, r6
 8004236:	463b      	mov	r3, r7
 8004238:	f7fc fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800423c:	b908      	cbnz	r0, 8004242 <_dtoa_r+0x162>
 800423e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004242:	f1ba 0f16 	cmp.w	sl, #22
 8004246:	d859      	bhi.n	80042fc <_dtoa_r+0x21c>
 8004248:	4970      	ldr	r1, [pc, #448]	; (800440c <_dtoa_r+0x32c>)
 800424a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800424e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004256:	f7fc fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800425a:	2800      	cmp	r0, #0
 800425c:	d050      	beq.n	8004300 <_dtoa_r+0x220>
 800425e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004262:	2300      	movs	r3, #0
 8004264:	930f      	str	r3, [sp, #60]	; 0x3c
 8004266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004268:	1b5d      	subs	r5, r3, r5
 800426a:	f1b5 0801 	subs.w	r8, r5, #1
 800426e:	bf49      	itett	mi
 8004270:	f1c5 0301 	rsbmi	r3, r5, #1
 8004274:	2300      	movpl	r3, #0
 8004276:	9305      	strmi	r3, [sp, #20]
 8004278:	f04f 0800 	movmi.w	r8, #0
 800427c:	bf58      	it	pl
 800427e:	9305      	strpl	r3, [sp, #20]
 8004280:	f1ba 0f00 	cmp.w	sl, #0
 8004284:	db3e      	blt.n	8004304 <_dtoa_r+0x224>
 8004286:	2300      	movs	r3, #0
 8004288:	44d0      	add	r8, sl
 800428a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800428e:	9307      	str	r3, [sp, #28]
 8004290:	9b06      	ldr	r3, [sp, #24]
 8004292:	2b09      	cmp	r3, #9
 8004294:	f200 8090 	bhi.w	80043b8 <_dtoa_r+0x2d8>
 8004298:	2b05      	cmp	r3, #5
 800429a:	bfc4      	itt	gt
 800429c:	3b04      	subgt	r3, #4
 800429e:	9306      	strgt	r3, [sp, #24]
 80042a0:	9b06      	ldr	r3, [sp, #24]
 80042a2:	f1a3 0302 	sub.w	r3, r3, #2
 80042a6:	bfcc      	ite	gt
 80042a8:	2500      	movgt	r5, #0
 80042aa:	2501      	movle	r5, #1
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	f200 808f 	bhi.w	80043d0 <_dtoa_r+0x2f0>
 80042b2:	e8df f003 	tbb	[pc, r3]
 80042b6:	7f7d      	.short	0x7f7d
 80042b8:	7131      	.short	0x7131
 80042ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80042be:	441d      	add	r5, r3
 80042c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80042c4:	2820      	cmp	r0, #32
 80042c6:	dd13      	ble.n	80042f0 <_dtoa_r+0x210>
 80042c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80042cc:	9b00      	ldr	r3, [sp, #0]
 80042ce:	fa08 f800 	lsl.w	r8, r8, r0
 80042d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80042d6:	fa23 f000 	lsr.w	r0, r3, r0
 80042da:	ea48 0000 	orr.w	r0, r8, r0
 80042de:	f7fc f919 	bl	8000514 <__aeabi_ui2d>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4682      	mov	sl, r0
 80042e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80042ea:	3d01      	subs	r5, #1
 80042ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80042ee:	e772      	b.n	80041d6 <_dtoa_r+0xf6>
 80042f0:	9b00      	ldr	r3, [sp, #0]
 80042f2:	f1c0 0020 	rsb	r0, r0, #32
 80042f6:	fa03 f000 	lsl.w	r0, r3, r0
 80042fa:	e7f0      	b.n	80042de <_dtoa_r+0x1fe>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e7b1      	b.n	8004264 <_dtoa_r+0x184>
 8004300:	900f      	str	r0, [sp, #60]	; 0x3c
 8004302:	e7b0      	b.n	8004266 <_dtoa_r+0x186>
 8004304:	9b05      	ldr	r3, [sp, #20]
 8004306:	eba3 030a 	sub.w	r3, r3, sl
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	f1ca 0300 	rsb	r3, sl, #0
 8004310:	9307      	str	r3, [sp, #28]
 8004312:	2300      	movs	r3, #0
 8004314:	930e      	str	r3, [sp, #56]	; 0x38
 8004316:	e7bb      	b.n	8004290 <_dtoa_r+0x1b0>
 8004318:	2301      	movs	r3, #1
 800431a:	930a      	str	r3, [sp, #40]	; 0x28
 800431c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800431e:	2b00      	cmp	r3, #0
 8004320:	dd59      	ble.n	80043d6 <_dtoa_r+0x2f6>
 8004322:	9302      	str	r3, [sp, #8]
 8004324:	4699      	mov	r9, r3
 8004326:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004328:	2200      	movs	r2, #0
 800432a:	6072      	str	r2, [r6, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	f102 0014 	add.w	r0, r2, #20
 8004332:	4298      	cmp	r0, r3
 8004334:	6871      	ldr	r1, [r6, #4]
 8004336:	d953      	bls.n	80043e0 <_dtoa_r+0x300>
 8004338:	4620      	mov	r0, r4
 800433a:	f000 fd74 	bl	8004e26 <_Balloc>
 800433e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004340:	6030      	str	r0, [r6, #0]
 8004342:	f1b9 0f0e 	cmp.w	r9, #14
 8004346:	f8d3 b000 	ldr.w	fp, [r3]
 800434a:	f200 80e6 	bhi.w	800451a <_dtoa_r+0x43a>
 800434e:	2d00      	cmp	r5, #0
 8004350:	f000 80e3 	beq.w	800451a <_dtoa_r+0x43a>
 8004354:	ed9d 7b00 	vldr	d7, [sp]
 8004358:	f1ba 0f00 	cmp.w	sl, #0
 800435c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004360:	dd74      	ble.n	800444c <_dtoa_r+0x36c>
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <_dtoa_r+0x32c>)
 8004364:	f00a 030f 	and.w	r3, sl, #15
 8004368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800436c:	ed93 7b00 	vldr	d7, [r3]
 8004370:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004374:	06f0      	lsls	r0, r6, #27
 8004376:	ed8d 7b08 	vstr	d7, [sp, #32]
 800437a:	d565      	bpl.n	8004448 <_dtoa_r+0x368>
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <_dtoa_r+0x330>)
 800437e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004382:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004386:	f7fc fa69 	bl	800085c <__aeabi_ddiv>
 800438a:	e9cd 0100 	strd	r0, r1, [sp]
 800438e:	f006 060f 	and.w	r6, r6, #15
 8004392:	2503      	movs	r5, #3
 8004394:	4f1e      	ldr	r7, [pc, #120]	; (8004410 <_dtoa_r+0x330>)
 8004396:	e04c      	b.n	8004432 <_dtoa_r+0x352>
 8004398:	2301      	movs	r3, #1
 800439a:	930a      	str	r3, [sp, #40]	; 0x28
 800439c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800439e:	4453      	add	r3, sl
 80043a0:	f103 0901 	add.w	r9, r3, #1
 80043a4:	9302      	str	r3, [sp, #8]
 80043a6:	464b      	mov	r3, r9
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bfb8      	it	lt
 80043ac:	2301      	movlt	r3, #1
 80043ae:	e7ba      	b.n	8004326 <_dtoa_r+0x246>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e7b2      	b.n	800431a <_dtoa_r+0x23a>
 80043b4:	2300      	movs	r3, #0
 80043b6:	e7f0      	b.n	800439a <_dtoa_r+0x2ba>
 80043b8:	2501      	movs	r5, #1
 80043ba:	2300      	movs	r3, #0
 80043bc:	9306      	str	r3, [sp, #24]
 80043be:	950a      	str	r5, [sp, #40]	; 0x28
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	4699      	mov	r9, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	2312      	movs	r3, #18
 80043cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80043ce:	e7aa      	b.n	8004326 <_dtoa_r+0x246>
 80043d0:	2301      	movs	r3, #1
 80043d2:	930a      	str	r3, [sp, #40]	; 0x28
 80043d4:	e7f4      	b.n	80043c0 <_dtoa_r+0x2e0>
 80043d6:	2301      	movs	r3, #1
 80043d8:	9302      	str	r3, [sp, #8]
 80043da:	4699      	mov	r9, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	e7f5      	b.n	80043cc <_dtoa_r+0x2ec>
 80043e0:	3101      	adds	r1, #1
 80043e2:	6071      	str	r1, [r6, #4]
 80043e4:	0052      	lsls	r2, r2, #1
 80043e6:	e7a2      	b.n	800432e <_dtoa_r+0x24e>
 80043e8:	636f4361 	.word	0x636f4361
 80043ec:	3fd287a7 	.word	0x3fd287a7
 80043f0:	8b60c8b3 	.word	0x8b60c8b3
 80043f4:	3fc68a28 	.word	0x3fc68a28
 80043f8:	509f79fb 	.word	0x509f79fb
 80043fc:	3fd34413 	.word	0x3fd34413
 8004400:	7ff00000 	.word	0x7ff00000
 8004404:	08006da1 	.word	0x08006da1
 8004408:	3ff80000 	.word	0x3ff80000
 800440c:	08006e60 	.word	0x08006e60
 8004410:	08006e38 	.word	0x08006e38
 8004414:	08006dcd 	.word	0x08006dcd
 8004418:	07f1      	lsls	r1, r6, #31
 800441a:	d508      	bpl.n	800442e <_dtoa_r+0x34e>
 800441c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004424:	f7fc f8f0 	bl	8000608 <__aeabi_dmul>
 8004428:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800442c:	3501      	adds	r5, #1
 800442e:	1076      	asrs	r6, r6, #1
 8004430:	3708      	adds	r7, #8
 8004432:	2e00      	cmp	r6, #0
 8004434:	d1f0      	bne.n	8004418 <_dtoa_r+0x338>
 8004436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800443a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800443e:	f7fc fa0d 	bl	800085c <__aeabi_ddiv>
 8004442:	e9cd 0100 	strd	r0, r1, [sp]
 8004446:	e01a      	b.n	800447e <_dtoa_r+0x39e>
 8004448:	2502      	movs	r5, #2
 800444a:	e7a3      	b.n	8004394 <_dtoa_r+0x2b4>
 800444c:	f000 80a0 	beq.w	8004590 <_dtoa_r+0x4b0>
 8004450:	f1ca 0600 	rsb	r6, sl, #0
 8004454:	4b9f      	ldr	r3, [pc, #636]	; (80046d4 <_dtoa_r+0x5f4>)
 8004456:	4fa0      	ldr	r7, [pc, #640]	; (80046d8 <_dtoa_r+0x5f8>)
 8004458:	f006 020f 	and.w	r2, r6, #15
 800445c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004468:	f7fc f8ce 	bl	8000608 <__aeabi_dmul>
 800446c:	e9cd 0100 	strd	r0, r1, [sp]
 8004470:	1136      	asrs	r6, r6, #4
 8004472:	2300      	movs	r3, #0
 8004474:	2502      	movs	r5, #2
 8004476:	2e00      	cmp	r6, #0
 8004478:	d17f      	bne.n	800457a <_dtoa_r+0x49a>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e1      	bne.n	8004442 <_dtoa_r+0x362>
 800447e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8087 	beq.w	8004594 <_dtoa_r+0x4b4>
 8004486:	e9dd 6700 	ldrd	r6, r7, [sp]
 800448a:	2200      	movs	r2, #0
 800448c:	4b93      	ldr	r3, [pc, #588]	; (80046dc <_dtoa_r+0x5fc>)
 800448e:	4630      	mov	r0, r6
 8004490:	4639      	mov	r1, r7
 8004492:	f7fc fb2b 	bl	8000aec <__aeabi_dcmplt>
 8004496:	2800      	cmp	r0, #0
 8004498:	d07c      	beq.n	8004594 <_dtoa_r+0x4b4>
 800449a:	f1b9 0f00 	cmp.w	r9, #0
 800449e:	d079      	beq.n	8004594 <_dtoa_r+0x4b4>
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dd35      	ble.n	8004512 <_dtoa_r+0x432>
 80044a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80044aa:	9308      	str	r3, [sp, #32]
 80044ac:	4639      	mov	r1, r7
 80044ae:	2200      	movs	r2, #0
 80044b0:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <_dtoa_r+0x600>)
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7fc f8a8 	bl	8000608 <__aeabi_dmul>
 80044b8:	e9cd 0100 	strd	r0, r1, [sp]
 80044bc:	9f02      	ldr	r7, [sp, #8]
 80044be:	3501      	adds	r5, #1
 80044c0:	4628      	mov	r0, r5
 80044c2:	f7fc f837 	bl	8000534 <__aeabi_i2d>
 80044c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ca:	f7fc f89d 	bl	8000608 <__aeabi_dmul>
 80044ce:	2200      	movs	r2, #0
 80044d0:	4b84      	ldr	r3, [pc, #528]	; (80046e4 <_dtoa_r+0x604>)
 80044d2:	f7fb fee3 	bl	800029c <__adddf3>
 80044d6:	4605      	mov	r5, r0
 80044d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80044dc:	2f00      	cmp	r7, #0
 80044de:	d15d      	bne.n	800459c <_dtoa_r+0x4bc>
 80044e0:	2200      	movs	r2, #0
 80044e2:	4b81      	ldr	r3, [pc, #516]	; (80046e8 <_dtoa_r+0x608>)
 80044e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044e8:	f7fb fed6 	bl	8000298 <__aeabi_dsub>
 80044ec:	462a      	mov	r2, r5
 80044ee:	4633      	mov	r3, r6
 80044f0:	e9cd 0100 	strd	r0, r1, [sp]
 80044f4:	f7fc fb18 	bl	8000b28 <__aeabi_dcmpgt>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f040 8288 	bne.w	8004a0e <_dtoa_r+0x92e>
 80044fe:	462a      	mov	r2, r5
 8004500:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004508:	f7fc faf0 	bl	8000aec <__aeabi_dcmplt>
 800450c:	2800      	cmp	r0, #0
 800450e:	f040 827c 	bne.w	8004a0a <_dtoa_r+0x92a>
 8004512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004516:	e9cd 2300 	strd	r2, r3, [sp]
 800451a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800451c:	2b00      	cmp	r3, #0
 800451e:	f2c0 8150 	blt.w	80047c2 <_dtoa_r+0x6e2>
 8004522:	f1ba 0f0e 	cmp.w	sl, #14
 8004526:	f300 814c 	bgt.w	80047c2 <_dtoa_r+0x6e2>
 800452a:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <_dtoa_r+0x5f4>)
 800452c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004530:	ed93 7b00 	vldr	d7, [r3]
 8004534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	ed8d 7b02 	vstr	d7, [sp, #8]
 800453c:	f280 80d8 	bge.w	80046f0 <_dtoa_r+0x610>
 8004540:	f1b9 0f00 	cmp.w	r9, #0
 8004544:	f300 80d4 	bgt.w	80046f0 <_dtoa_r+0x610>
 8004548:	f040 825e 	bne.w	8004a08 <_dtoa_r+0x928>
 800454c:	2200      	movs	r2, #0
 800454e:	4b66      	ldr	r3, [pc, #408]	; (80046e8 <_dtoa_r+0x608>)
 8004550:	ec51 0b17 	vmov	r0, r1, d7
 8004554:	f7fc f858 	bl	8000608 <__aeabi_dmul>
 8004558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800455c:	f7fc fada 	bl	8000b14 <__aeabi_dcmpge>
 8004560:	464f      	mov	r7, r9
 8004562:	464e      	mov	r6, r9
 8004564:	2800      	cmp	r0, #0
 8004566:	f040 8234 	bne.w	80049d2 <_dtoa_r+0x8f2>
 800456a:	2331      	movs	r3, #49	; 0x31
 800456c:	f10b 0501 	add.w	r5, fp, #1
 8004570:	f88b 3000 	strb.w	r3, [fp]
 8004574:	f10a 0a01 	add.w	sl, sl, #1
 8004578:	e22f      	b.n	80049da <_dtoa_r+0x8fa>
 800457a:	07f2      	lsls	r2, r6, #31
 800457c:	d505      	bpl.n	800458a <_dtoa_r+0x4aa>
 800457e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004582:	f7fc f841 	bl	8000608 <__aeabi_dmul>
 8004586:	3501      	adds	r5, #1
 8004588:	2301      	movs	r3, #1
 800458a:	1076      	asrs	r6, r6, #1
 800458c:	3708      	adds	r7, #8
 800458e:	e772      	b.n	8004476 <_dtoa_r+0x396>
 8004590:	2502      	movs	r5, #2
 8004592:	e774      	b.n	800447e <_dtoa_r+0x39e>
 8004594:	f8cd a020 	str.w	sl, [sp, #32]
 8004598:	464f      	mov	r7, r9
 800459a:	e791      	b.n	80044c0 <_dtoa_r+0x3e0>
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <_dtoa_r+0x5f4>)
 800459e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80045a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d047      	beq.n	800463c <_dtoa_r+0x55c>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	2000      	movs	r0, #0
 80045b2:	494e      	ldr	r1, [pc, #312]	; (80046ec <_dtoa_r+0x60c>)
 80045b4:	f7fc f952 	bl	800085c <__aeabi_ddiv>
 80045b8:	462a      	mov	r2, r5
 80045ba:	4633      	mov	r3, r6
 80045bc:	f7fb fe6c 	bl	8000298 <__aeabi_dsub>
 80045c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80045c4:	465d      	mov	r5, fp
 80045c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045ca:	f7fc facd 	bl	8000b68 <__aeabi_d2iz>
 80045ce:	4606      	mov	r6, r0
 80045d0:	f7fb ffb0 	bl	8000534 <__aeabi_i2d>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045dc:	f7fb fe5c 	bl	8000298 <__aeabi_dsub>
 80045e0:	3630      	adds	r6, #48	; 0x30
 80045e2:	f805 6b01 	strb.w	r6, [r5], #1
 80045e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80045ea:	e9cd 0100 	strd	r0, r1, [sp]
 80045ee:	f7fc fa7d 	bl	8000aec <__aeabi_dcmplt>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d163      	bne.n	80046be <_dtoa_r+0x5de>
 80045f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045fa:	2000      	movs	r0, #0
 80045fc:	4937      	ldr	r1, [pc, #220]	; (80046dc <_dtoa_r+0x5fc>)
 80045fe:	f7fb fe4b 	bl	8000298 <__aeabi_dsub>
 8004602:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004606:	f7fc fa71 	bl	8000aec <__aeabi_dcmplt>
 800460a:	2800      	cmp	r0, #0
 800460c:	f040 80b7 	bne.w	800477e <_dtoa_r+0x69e>
 8004610:	eba5 030b 	sub.w	r3, r5, fp
 8004614:	429f      	cmp	r7, r3
 8004616:	f77f af7c 	ble.w	8004512 <_dtoa_r+0x432>
 800461a:	2200      	movs	r2, #0
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <_dtoa_r+0x600>)
 800461e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004622:	f7fb fff1 	bl	8000608 <__aeabi_dmul>
 8004626:	2200      	movs	r2, #0
 8004628:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800462c:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <_dtoa_r+0x600>)
 800462e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004632:	f7fb ffe9 	bl	8000608 <__aeabi_dmul>
 8004636:	e9cd 0100 	strd	r0, r1, [sp]
 800463a:	e7c4      	b.n	80045c6 <_dtoa_r+0x4e6>
 800463c:	462a      	mov	r2, r5
 800463e:	4633      	mov	r3, r6
 8004640:	f7fb ffe2 	bl	8000608 <__aeabi_dmul>
 8004644:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004648:	eb0b 0507 	add.w	r5, fp, r7
 800464c:	465e      	mov	r6, fp
 800464e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004652:	f7fc fa89 	bl	8000b68 <__aeabi_d2iz>
 8004656:	4607      	mov	r7, r0
 8004658:	f7fb ff6c 	bl	8000534 <__aeabi_i2d>
 800465c:	3730      	adds	r7, #48	; 0x30
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004666:	f7fb fe17 	bl	8000298 <__aeabi_dsub>
 800466a:	f806 7b01 	strb.w	r7, [r6], #1
 800466e:	42ae      	cmp	r6, r5
 8004670:	e9cd 0100 	strd	r0, r1, [sp]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	d126      	bne.n	80046c8 <_dtoa_r+0x5e8>
 800467a:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <_dtoa_r+0x60c>)
 800467c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004680:	f7fb fe0c 	bl	800029c <__adddf3>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800468c:	f7fc fa4c 	bl	8000b28 <__aeabi_dcmpgt>
 8004690:	2800      	cmp	r0, #0
 8004692:	d174      	bne.n	800477e <_dtoa_r+0x69e>
 8004694:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004698:	2000      	movs	r0, #0
 800469a:	4914      	ldr	r1, [pc, #80]	; (80046ec <_dtoa_r+0x60c>)
 800469c:	f7fb fdfc 	bl	8000298 <__aeabi_dsub>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046a8:	f7fc fa20 	bl	8000aec <__aeabi_dcmplt>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	f43f af30 	beq.w	8004512 <_dtoa_r+0x432>
 80046b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80046b6:	2b30      	cmp	r3, #48	; 0x30
 80046b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80046bc:	d002      	beq.n	80046c4 <_dtoa_r+0x5e4>
 80046be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80046c2:	e04a      	b.n	800475a <_dtoa_r+0x67a>
 80046c4:	4615      	mov	r5, r2
 80046c6:	e7f4      	b.n	80046b2 <_dtoa_r+0x5d2>
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <_dtoa_r+0x600>)
 80046ca:	f7fb ff9d 	bl	8000608 <__aeabi_dmul>
 80046ce:	e9cd 0100 	strd	r0, r1, [sp]
 80046d2:	e7bc      	b.n	800464e <_dtoa_r+0x56e>
 80046d4:	08006e60 	.word	0x08006e60
 80046d8:	08006e38 	.word	0x08006e38
 80046dc:	3ff00000 	.word	0x3ff00000
 80046e0:	40240000 	.word	0x40240000
 80046e4:	401c0000 	.word	0x401c0000
 80046e8:	40140000 	.word	0x40140000
 80046ec:	3fe00000 	.word	0x3fe00000
 80046f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80046f4:	465d      	mov	r5, fp
 80046f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fc f8ad 	bl	800085c <__aeabi_ddiv>
 8004702:	f7fc fa31 	bl	8000b68 <__aeabi_d2iz>
 8004706:	4680      	mov	r8, r0
 8004708:	f7fb ff14 	bl	8000534 <__aeabi_i2d>
 800470c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004710:	f7fb ff7a 	bl	8000608 <__aeabi_dmul>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4630      	mov	r0, r6
 800471a:	4639      	mov	r1, r7
 800471c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004720:	f7fb fdba 	bl	8000298 <__aeabi_dsub>
 8004724:	f805 6b01 	strb.w	r6, [r5], #1
 8004728:	eba5 060b 	sub.w	r6, r5, fp
 800472c:	45b1      	cmp	r9, r6
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	d139      	bne.n	80047a8 <_dtoa_r+0x6c8>
 8004734:	f7fb fdb2 	bl	800029c <__adddf3>
 8004738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800473c:	4606      	mov	r6, r0
 800473e:	460f      	mov	r7, r1
 8004740:	f7fc f9f2 	bl	8000b28 <__aeabi_dcmpgt>
 8004744:	b9c8      	cbnz	r0, 800477a <_dtoa_r+0x69a>
 8004746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800474a:	4630      	mov	r0, r6
 800474c:	4639      	mov	r1, r7
 800474e:	f7fc f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004752:	b110      	cbz	r0, 800475a <_dtoa_r+0x67a>
 8004754:	f018 0f01 	tst.w	r8, #1
 8004758:	d10f      	bne.n	800477a <_dtoa_r+0x69a>
 800475a:	9904      	ldr	r1, [sp, #16]
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fb96 	bl	8004e8e <_Bfree>
 8004762:	2300      	movs	r3, #0
 8004764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004766:	702b      	strb	r3, [r5, #0]
 8004768:	f10a 0301 	add.w	r3, sl, #1
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8241 	beq.w	8004bf8 <_dtoa_r+0xb18>
 8004776:	601d      	str	r5, [r3, #0]
 8004778:	e23e      	b.n	8004bf8 <_dtoa_r+0xb18>
 800477a:	f8cd a020 	str.w	sl, [sp, #32]
 800477e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004782:	2a39      	cmp	r2, #57	; 0x39
 8004784:	f105 33ff 	add.w	r3, r5, #4294967295
 8004788:	d108      	bne.n	800479c <_dtoa_r+0x6bc>
 800478a:	459b      	cmp	fp, r3
 800478c:	d10a      	bne.n	80047a4 <_dtoa_r+0x6c4>
 800478e:	9b08      	ldr	r3, [sp, #32]
 8004790:	3301      	adds	r3, #1
 8004792:	9308      	str	r3, [sp, #32]
 8004794:	2330      	movs	r3, #48	; 0x30
 8004796:	f88b 3000 	strb.w	r3, [fp]
 800479a:	465b      	mov	r3, fp
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	3201      	adds	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e78c      	b.n	80046be <_dtoa_r+0x5de>
 80047a4:	461d      	mov	r5, r3
 80047a6:	e7ea      	b.n	800477e <_dtoa_r+0x69e>
 80047a8:	2200      	movs	r2, #0
 80047aa:	4b9b      	ldr	r3, [pc, #620]	; (8004a18 <_dtoa_r+0x938>)
 80047ac:	f7fb ff2c 	bl	8000608 <__aeabi_dmul>
 80047b0:	2200      	movs	r2, #0
 80047b2:	2300      	movs	r3, #0
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	f7fc f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d09a      	beq.n	80046f6 <_dtoa_r+0x616>
 80047c0:	e7cb      	b.n	800475a <_dtoa_r+0x67a>
 80047c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	f000 808b 	beq.w	80048e0 <_dtoa_r+0x800>
 80047ca:	9a06      	ldr	r2, [sp, #24]
 80047cc:	2a01      	cmp	r2, #1
 80047ce:	dc6e      	bgt.n	80048ae <_dtoa_r+0x7ce>
 80047d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d067      	beq.n	80048a6 <_dtoa_r+0x7c6>
 80047d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047da:	9f07      	ldr	r7, [sp, #28]
 80047dc:	9d05      	ldr	r5, [sp, #20]
 80047de:	9a05      	ldr	r2, [sp, #20]
 80047e0:	2101      	movs	r1, #1
 80047e2:	441a      	add	r2, r3
 80047e4:	4620      	mov	r0, r4
 80047e6:	9205      	str	r2, [sp, #20]
 80047e8:	4498      	add	r8, r3
 80047ea:	f000 fbf0 	bl	8004fce <__i2b>
 80047ee:	4606      	mov	r6, r0
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	dd0c      	ble.n	800480e <_dtoa_r+0x72e>
 80047f4:	f1b8 0f00 	cmp.w	r8, #0
 80047f8:	dd09      	ble.n	800480e <_dtoa_r+0x72e>
 80047fa:	4545      	cmp	r5, r8
 80047fc:	9a05      	ldr	r2, [sp, #20]
 80047fe:	462b      	mov	r3, r5
 8004800:	bfa8      	it	ge
 8004802:	4643      	movge	r3, r8
 8004804:	1ad2      	subs	r2, r2, r3
 8004806:	9205      	str	r2, [sp, #20]
 8004808:	1aed      	subs	r5, r5, r3
 800480a:	eba8 0803 	sub.w	r8, r8, r3
 800480e:	9b07      	ldr	r3, [sp, #28]
 8004810:	b1eb      	cbz	r3, 800484e <_dtoa_r+0x76e>
 8004812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d067      	beq.n	80048e8 <_dtoa_r+0x808>
 8004818:	b18f      	cbz	r7, 800483e <_dtoa_r+0x75e>
 800481a:	4631      	mov	r1, r6
 800481c:	463a      	mov	r2, r7
 800481e:	4620      	mov	r0, r4
 8004820:	f000 fc74 	bl	800510c <__pow5mult>
 8004824:	9a04      	ldr	r2, [sp, #16]
 8004826:	4601      	mov	r1, r0
 8004828:	4606      	mov	r6, r0
 800482a:	4620      	mov	r0, r4
 800482c:	f000 fbd8 	bl	8004fe0 <__multiply>
 8004830:	9904      	ldr	r1, [sp, #16]
 8004832:	9008      	str	r0, [sp, #32]
 8004834:	4620      	mov	r0, r4
 8004836:	f000 fb2a 	bl	8004e8e <_Bfree>
 800483a:	9b08      	ldr	r3, [sp, #32]
 800483c:	9304      	str	r3, [sp, #16]
 800483e:	9b07      	ldr	r3, [sp, #28]
 8004840:	1bda      	subs	r2, r3, r7
 8004842:	d004      	beq.n	800484e <_dtoa_r+0x76e>
 8004844:	9904      	ldr	r1, [sp, #16]
 8004846:	4620      	mov	r0, r4
 8004848:	f000 fc60 	bl	800510c <__pow5mult>
 800484c:	9004      	str	r0, [sp, #16]
 800484e:	2101      	movs	r1, #1
 8004850:	4620      	mov	r0, r4
 8004852:	f000 fbbc 	bl	8004fce <__i2b>
 8004856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004858:	4607      	mov	r7, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 81d0 	beq.w	8004c00 <_dtoa_r+0xb20>
 8004860:	461a      	mov	r2, r3
 8004862:	4601      	mov	r1, r0
 8004864:	4620      	mov	r0, r4
 8004866:	f000 fc51 	bl	800510c <__pow5mult>
 800486a:	9b06      	ldr	r3, [sp, #24]
 800486c:	2b01      	cmp	r3, #1
 800486e:	4607      	mov	r7, r0
 8004870:	dc40      	bgt.n	80048f4 <_dtoa_r+0x814>
 8004872:	9b00      	ldr	r3, [sp, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d139      	bne.n	80048ec <_dtoa_r+0x80c>
 8004878:	9b01      	ldr	r3, [sp, #4]
 800487a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487e:	2b00      	cmp	r3, #0
 8004880:	d136      	bne.n	80048f0 <_dtoa_r+0x810>
 8004882:	9b01      	ldr	r3, [sp, #4]
 8004884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004888:	0d1b      	lsrs	r3, r3, #20
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	b12b      	cbz	r3, 800489a <_dtoa_r+0x7ba>
 800488e:	9b05      	ldr	r3, [sp, #20]
 8004890:	3301      	adds	r3, #1
 8004892:	9305      	str	r3, [sp, #20]
 8004894:	f108 0801 	add.w	r8, r8, #1
 8004898:	2301      	movs	r3, #1
 800489a:	9307      	str	r3, [sp, #28]
 800489c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d12a      	bne.n	80048f8 <_dtoa_r+0x818>
 80048a2:	2001      	movs	r0, #1
 80048a4:	e030      	b.n	8004908 <_dtoa_r+0x828>
 80048a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80048ac:	e795      	b.n	80047da <_dtoa_r+0x6fa>
 80048ae:	9b07      	ldr	r3, [sp, #28]
 80048b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80048b4:	42bb      	cmp	r3, r7
 80048b6:	bfbf      	itttt	lt
 80048b8:	9b07      	ldrlt	r3, [sp, #28]
 80048ba:	9707      	strlt	r7, [sp, #28]
 80048bc:	1afa      	sublt	r2, r7, r3
 80048be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80048c0:	bfbb      	ittet	lt
 80048c2:	189b      	addlt	r3, r3, r2
 80048c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80048c6:	1bdf      	subge	r7, r3, r7
 80048c8:	2700      	movlt	r7, #0
 80048ca:	f1b9 0f00 	cmp.w	r9, #0
 80048ce:	bfb5      	itete	lt
 80048d0:	9b05      	ldrlt	r3, [sp, #20]
 80048d2:	9d05      	ldrge	r5, [sp, #20]
 80048d4:	eba3 0509 	sublt.w	r5, r3, r9
 80048d8:	464b      	movge	r3, r9
 80048da:	bfb8      	it	lt
 80048dc:	2300      	movlt	r3, #0
 80048de:	e77e      	b.n	80047de <_dtoa_r+0x6fe>
 80048e0:	9f07      	ldr	r7, [sp, #28]
 80048e2:	9d05      	ldr	r5, [sp, #20]
 80048e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80048e6:	e783      	b.n	80047f0 <_dtoa_r+0x710>
 80048e8:	9a07      	ldr	r2, [sp, #28]
 80048ea:	e7ab      	b.n	8004844 <_dtoa_r+0x764>
 80048ec:	2300      	movs	r3, #0
 80048ee:	e7d4      	b.n	800489a <_dtoa_r+0x7ba>
 80048f0:	9b00      	ldr	r3, [sp, #0]
 80048f2:	e7d2      	b.n	800489a <_dtoa_r+0x7ba>
 80048f4:	2300      	movs	r3, #0
 80048f6:	9307      	str	r3, [sp, #28]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80048fe:	6918      	ldr	r0, [r3, #16]
 8004900:	f000 fb17 	bl	8004f32 <__hi0bits>
 8004904:	f1c0 0020 	rsb	r0, r0, #32
 8004908:	4440      	add	r0, r8
 800490a:	f010 001f 	ands.w	r0, r0, #31
 800490e:	d047      	beq.n	80049a0 <_dtoa_r+0x8c0>
 8004910:	f1c0 0320 	rsb	r3, r0, #32
 8004914:	2b04      	cmp	r3, #4
 8004916:	dd3b      	ble.n	8004990 <_dtoa_r+0x8b0>
 8004918:	9b05      	ldr	r3, [sp, #20]
 800491a:	f1c0 001c 	rsb	r0, r0, #28
 800491e:	4403      	add	r3, r0
 8004920:	9305      	str	r3, [sp, #20]
 8004922:	4405      	add	r5, r0
 8004924:	4480      	add	r8, r0
 8004926:	9b05      	ldr	r3, [sp, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dd05      	ble.n	8004938 <_dtoa_r+0x858>
 800492c:	461a      	mov	r2, r3
 800492e:	9904      	ldr	r1, [sp, #16]
 8004930:	4620      	mov	r0, r4
 8004932:	f000 fc39 	bl	80051a8 <__lshift>
 8004936:	9004      	str	r0, [sp, #16]
 8004938:	f1b8 0f00 	cmp.w	r8, #0
 800493c:	dd05      	ble.n	800494a <_dtoa_r+0x86a>
 800493e:	4639      	mov	r1, r7
 8004940:	4642      	mov	r2, r8
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fc30 	bl	80051a8 <__lshift>
 8004948:	4607      	mov	r7, r0
 800494a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800494c:	b353      	cbz	r3, 80049a4 <_dtoa_r+0x8c4>
 800494e:	4639      	mov	r1, r7
 8004950:	9804      	ldr	r0, [sp, #16]
 8004952:	f000 fc7d 	bl	8005250 <__mcmp>
 8004956:	2800      	cmp	r0, #0
 8004958:	da24      	bge.n	80049a4 <_dtoa_r+0x8c4>
 800495a:	2300      	movs	r3, #0
 800495c:	220a      	movs	r2, #10
 800495e:	9904      	ldr	r1, [sp, #16]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 faab 	bl	8004ebc <__multadd>
 8004966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004968:	9004      	str	r0, [sp, #16]
 800496a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 814d 	beq.w	8004c0e <_dtoa_r+0xb2e>
 8004974:	2300      	movs	r3, #0
 8004976:	4631      	mov	r1, r6
 8004978:	220a      	movs	r2, #10
 800497a:	4620      	mov	r0, r4
 800497c:	f000 fa9e 	bl	8004ebc <__multadd>
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	4606      	mov	r6, r0
 8004986:	dc4f      	bgt.n	8004a28 <_dtoa_r+0x948>
 8004988:	9b06      	ldr	r3, [sp, #24]
 800498a:	2b02      	cmp	r3, #2
 800498c:	dd4c      	ble.n	8004a28 <_dtoa_r+0x948>
 800498e:	e011      	b.n	80049b4 <_dtoa_r+0x8d4>
 8004990:	d0c9      	beq.n	8004926 <_dtoa_r+0x846>
 8004992:	9a05      	ldr	r2, [sp, #20]
 8004994:	331c      	adds	r3, #28
 8004996:	441a      	add	r2, r3
 8004998:	9205      	str	r2, [sp, #20]
 800499a:	441d      	add	r5, r3
 800499c:	4498      	add	r8, r3
 800499e:	e7c2      	b.n	8004926 <_dtoa_r+0x846>
 80049a0:	4603      	mov	r3, r0
 80049a2:	e7f6      	b.n	8004992 <_dtoa_r+0x8b2>
 80049a4:	f1b9 0f00 	cmp.w	r9, #0
 80049a8:	dc38      	bgt.n	8004a1c <_dtoa_r+0x93c>
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	dd35      	ble.n	8004a1c <_dtoa_r+0x93c>
 80049b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	b963      	cbnz	r3, 80049d2 <_dtoa_r+0x8f2>
 80049b8:	4639      	mov	r1, r7
 80049ba:	2205      	movs	r2, #5
 80049bc:	4620      	mov	r0, r4
 80049be:	f000 fa7d 	bl	8004ebc <__multadd>
 80049c2:	4601      	mov	r1, r0
 80049c4:	4607      	mov	r7, r0
 80049c6:	9804      	ldr	r0, [sp, #16]
 80049c8:	f000 fc42 	bl	8005250 <__mcmp>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f73f adcc 	bgt.w	800456a <_dtoa_r+0x48a>
 80049d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049d4:	465d      	mov	r5, fp
 80049d6:	ea6f 0a03 	mvn.w	sl, r3
 80049da:	f04f 0900 	mov.w	r9, #0
 80049de:	4639      	mov	r1, r7
 80049e0:	4620      	mov	r0, r4
 80049e2:	f000 fa54 	bl	8004e8e <_Bfree>
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	f43f aeb7 	beq.w	800475a <_dtoa_r+0x67a>
 80049ec:	f1b9 0f00 	cmp.w	r9, #0
 80049f0:	d005      	beq.n	80049fe <_dtoa_r+0x91e>
 80049f2:	45b1      	cmp	r9, r6
 80049f4:	d003      	beq.n	80049fe <_dtoa_r+0x91e>
 80049f6:	4649      	mov	r1, r9
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 fa48 	bl	8004e8e <_Bfree>
 80049fe:	4631      	mov	r1, r6
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 fa44 	bl	8004e8e <_Bfree>
 8004a06:	e6a8      	b.n	800475a <_dtoa_r+0x67a>
 8004a08:	2700      	movs	r7, #0
 8004a0a:	463e      	mov	r6, r7
 8004a0c:	e7e1      	b.n	80049d2 <_dtoa_r+0x8f2>
 8004a0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004a12:	463e      	mov	r6, r7
 8004a14:	e5a9      	b.n	800456a <_dtoa_r+0x48a>
 8004a16:	bf00      	nop
 8004a18:	40240000 	.word	0x40240000
 8004a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80fa 	beq.w	8004c1c <_dtoa_r+0xb3c>
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	dd05      	ble.n	8004a38 <_dtoa_r+0x958>
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	462a      	mov	r2, r5
 8004a30:	4620      	mov	r0, r4
 8004a32:	f000 fbb9 	bl	80051a8 <__lshift>
 8004a36:	4606      	mov	r6, r0
 8004a38:	9b07      	ldr	r3, [sp, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04c      	beq.n	8004ad8 <_dtoa_r+0x9f8>
 8004a3e:	6871      	ldr	r1, [r6, #4]
 8004a40:	4620      	mov	r0, r4
 8004a42:	f000 f9f0 	bl	8004e26 <_Balloc>
 8004a46:	6932      	ldr	r2, [r6, #16]
 8004a48:	3202      	adds	r2, #2
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	0092      	lsls	r2, r2, #2
 8004a4e:	f106 010c 	add.w	r1, r6, #12
 8004a52:	300c      	adds	r0, #12
 8004a54:	f000 f9dc 	bl	8004e10 <memcpy>
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 fba3 	bl	80051a8 <__lshift>
 8004a62:	9b00      	ldr	r3, [sp, #0]
 8004a64:	f8cd b014 	str.w	fp, [sp, #20]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	46b1      	mov	r9, r6
 8004a6e:	9307      	str	r3, [sp, #28]
 8004a70:	4606      	mov	r6, r0
 8004a72:	4639      	mov	r1, r7
 8004a74:	9804      	ldr	r0, [sp, #16]
 8004a76:	f7ff faa5 	bl	8003fc4 <quorem>
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a82:	9804      	ldr	r0, [sp, #16]
 8004a84:	f000 fbe4 	bl	8005250 <__mcmp>
 8004a88:	4632      	mov	r2, r6
 8004a8a:	9000      	str	r0, [sp, #0]
 8004a8c:	4639      	mov	r1, r7
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f000 fbf8 	bl	8005284 <__mdiff>
 8004a94:	68c3      	ldr	r3, [r0, #12]
 8004a96:	4602      	mov	r2, r0
 8004a98:	bb03      	cbnz	r3, 8004adc <_dtoa_r+0x9fc>
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	9008      	str	r0, [sp, #32]
 8004a9e:	9804      	ldr	r0, [sp, #16]
 8004aa0:	f000 fbd6 	bl	8005250 <__mcmp>
 8004aa4:	9a08      	ldr	r2, [sp, #32]
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	4620      	mov	r0, r4
 8004aac:	9308      	str	r3, [sp, #32]
 8004aae:	f000 f9ee 	bl	8004e8e <_Bfree>
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	b9a3      	cbnz	r3, 8004ae0 <_dtoa_r+0xa00>
 8004ab6:	9a06      	ldr	r2, [sp, #24]
 8004ab8:	b992      	cbnz	r2, 8004ae0 <_dtoa_r+0xa00>
 8004aba:	9a07      	ldr	r2, [sp, #28]
 8004abc:	b982      	cbnz	r2, 8004ae0 <_dtoa_r+0xa00>
 8004abe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ac2:	d029      	beq.n	8004b18 <_dtoa_r+0xa38>
 8004ac4:	9b00      	ldr	r3, [sp, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dd01      	ble.n	8004ace <_dtoa_r+0x9ee>
 8004aca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004ace:	9b05      	ldr	r3, [sp, #20]
 8004ad0:	1c5d      	adds	r5, r3, #1
 8004ad2:	f883 8000 	strb.w	r8, [r3]
 8004ad6:	e782      	b.n	80049de <_dtoa_r+0x8fe>
 8004ad8:	4630      	mov	r0, r6
 8004ada:	e7c2      	b.n	8004a62 <_dtoa_r+0x982>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e7e3      	b.n	8004aa8 <_dtoa_r+0x9c8>
 8004ae0:	9a00      	ldr	r2, [sp, #0]
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	db04      	blt.n	8004af0 <_dtoa_r+0xa10>
 8004ae6:	d125      	bne.n	8004b34 <_dtoa_r+0xa54>
 8004ae8:	9a06      	ldr	r2, [sp, #24]
 8004aea:	bb1a      	cbnz	r2, 8004b34 <_dtoa_r+0xa54>
 8004aec:	9a07      	ldr	r2, [sp, #28]
 8004aee:	bb0a      	cbnz	r2, 8004b34 <_dtoa_r+0xa54>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	ddec      	ble.n	8004ace <_dtoa_r+0x9ee>
 8004af4:	2201      	movs	r2, #1
 8004af6:	9904      	ldr	r1, [sp, #16]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 fb55 	bl	80051a8 <__lshift>
 8004afe:	4639      	mov	r1, r7
 8004b00:	9004      	str	r0, [sp, #16]
 8004b02:	f000 fba5 	bl	8005250 <__mcmp>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	dc03      	bgt.n	8004b12 <_dtoa_r+0xa32>
 8004b0a:	d1e0      	bne.n	8004ace <_dtoa_r+0x9ee>
 8004b0c:	f018 0f01 	tst.w	r8, #1
 8004b10:	d0dd      	beq.n	8004ace <_dtoa_r+0x9ee>
 8004b12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b16:	d1d8      	bne.n	8004aca <_dtoa_r+0x9ea>
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	9a05      	ldr	r2, [sp, #20]
 8004b1c:	1c5d      	adds	r5, r3, #1
 8004b1e:	2339      	movs	r3, #57	; 0x39
 8004b20:	7013      	strb	r3, [r2, #0]
 8004b22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b26:	2b39      	cmp	r3, #57	; 0x39
 8004b28:	f105 32ff 	add.w	r2, r5, #4294967295
 8004b2c:	d04f      	beq.n	8004bce <_dtoa_r+0xaee>
 8004b2e:	3301      	adds	r3, #1
 8004b30:	7013      	strb	r3, [r2, #0]
 8004b32:	e754      	b.n	80049de <_dtoa_r+0x8fe>
 8004b34:	9a05      	ldr	r2, [sp, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f102 0501 	add.w	r5, r2, #1
 8004b3c:	dd06      	ble.n	8004b4c <_dtoa_r+0xa6c>
 8004b3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004b42:	d0e9      	beq.n	8004b18 <_dtoa_r+0xa38>
 8004b44:	f108 0801 	add.w	r8, r8, #1
 8004b48:	9b05      	ldr	r3, [sp, #20]
 8004b4a:	e7c2      	b.n	8004ad2 <_dtoa_r+0x9f2>
 8004b4c:	9a02      	ldr	r2, [sp, #8]
 8004b4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004b52:	eba5 030b 	sub.w	r3, r5, fp
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d021      	beq.n	8004b9e <_dtoa_r+0xabe>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	220a      	movs	r2, #10
 8004b5e:	9904      	ldr	r1, [sp, #16]
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 f9ab 	bl	8004ebc <__multadd>
 8004b66:	45b1      	cmp	r9, r6
 8004b68:	9004      	str	r0, [sp, #16]
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	f04f 020a 	mov.w	r2, #10
 8004b72:	4649      	mov	r1, r9
 8004b74:	4620      	mov	r0, r4
 8004b76:	d105      	bne.n	8004b84 <_dtoa_r+0xaa4>
 8004b78:	f000 f9a0 	bl	8004ebc <__multadd>
 8004b7c:	4681      	mov	r9, r0
 8004b7e:	4606      	mov	r6, r0
 8004b80:	9505      	str	r5, [sp, #20]
 8004b82:	e776      	b.n	8004a72 <_dtoa_r+0x992>
 8004b84:	f000 f99a 	bl	8004ebc <__multadd>
 8004b88:	4631      	mov	r1, r6
 8004b8a:	4681      	mov	r9, r0
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	220a      	movs	r2, #10
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 f993 	bl	8004ebc <__multadd>
 8004b96:	4606      	mov	r6, r0
 8004b98:	e7f2      	b.n	8004b80 <_dtoa_r+0xaa0>
 8004b9a:	f04f 0900 	mov.w	r9, #0
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	9904      	ldr	r1, [sp, #16]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 fb00 	bl	80051a8 <__lshift>
 8004ba8:	4639      	mov	r1, r7
 8004baa:	9004      	str	r0, [sp, #16]
 8004bac:	f000 fb50 	bl	8005250 <__mcmp>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	dcb6      	bgt.n	8004b22 <_dtoa_r+0xa42>
 8004bb4:	d102      	bne.n	8004bbc <_dtoa_r+0xadc>
 8004bb6:	f018 0f01 	tst.w	r8, #1
 8004bba:	d1b2      	bne.n	8004b22 <_dtoa_r+0xa42>
 8004bbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bc0:	2b30      	cmp	r3, #48	; 0x30
 8004bc2:	f105 32ff 	add.w	r2, r5, #4294967295
 8004bc6:	f47f af0a 	bne.w	80049de <_dtoa_r+0x8fe>
 8004bca:	4615      	mov	r5, r2
 8004bcc:	e7f6      	b.n	8004bbc <_dtoa_r+0xadc>
 8004bce:	4593      	cmp	fp, r2
 8004bd0:	d105      	bne.n	8004bde <_dtoa_r+0xafe>
 8004bd2:	2331      	movs	r3, #49	; 0x31
 8004bd4:	f10a 0a01 	add.w	sl, sl, #1
 8004bd8:	f88b 3000 	strb.w	r3, [fp]
 8004bdc:	e6ff      	b.n	80049de <_dtoa_r+0x8fe>
 8004bde:	4615      	mov	r5, r2
 8004be0:	e79f      	b.n	8004b22 <_dtoa_r+0xa42>
 8004be2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004c48 <_dtoa_r+0xb68>
 8004be6:	e007      	b.n	8004bf8 <_dtoa_r+0xb18>
 8004be8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bea:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004c4c <_dtoa_r+0xb6c>
 8004bee:	b11b      	cbz	r3, 8004bf8 <_dtoa_r+0xb18>
 8004bf0:	f10b 0308 	add.w	r3, fp, #8
 8004bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4658      	mov	r0, fp
 8004bfa:	b017      	add	sp, #92	; 0x5c
 8004bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c00:	9b06      	ldr	r3, [sp, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	f77f ae35 	ble.w	8004872 <_dtoa_r+0x792>
 8004c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c0a:	9307      	str	r3, [sp, #28]
 8004c0c:	e649      	b.n	80048a2 <_dtoa_r+0x7c2>
 8004c0e:	9b02      	ldr	r3, [sp, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	dc03      	bgt.n	8004c1c <_dtoa_r+0xb3c>
 8004c14:	9b06      	ldr	r3, [sp, #24]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	f73f aecc 	bgt.w	80049b4 <_dtoa_r+0x8d4>
 8004c1c:	465d      	mov	r5, fp
 8004c1e:	4639      	mov	r1, r7
 8004c20:	9804      	ldr	r0, [sp, #16]
 8004c22:	f7ff f9cf 	bl	8003fc4 <quorem>
 8004c26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004c2a:	f805 8b01 	strb.w	r8, [r5], #1
 8004c2e:	9a02      	ldr	r2, [sp, #8]
 8004c30:	eba5 030b 	sub.w	r3, r5, fp
 8004c34:	429a      	cmp	r2, r3
 8004c36:	ddb0      	ble.n	8004b9a <_dtoa_r+0xaba>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	220a      	movs	r2, #10
 8004c3c:	9904      	ldr	r1, [sp, #16]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 f93c 	bl	8004ebc <__multadd>
 8004c44:	9004      	str	r0, [sp, #16]
 8004c46:	e7ea      	b.n	8004c1e <_dtoa_r+0xb3e>
 8004c48:	08006da0 	.word	0x08006da0
 8004c4c:	08006dc4 	.word	0x08006dc4

08004c50 <std>:
 8004c50:	2300      	movs	r3, #0
 8004c52:	b510      	push	{r4, lr}
 8004c54:	4604      	mov	r4, r0
 8004c56:	e9c0 3300 	strd	r3, r3, [r0]
 8004c5a:	6083      	str	r3, [r0, #8]
 8004c5c:	8181      	strh	r1, [r0, #12]
 8004c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c60:	81c2      	strh	r2, [r0, #14]
 8004c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c66:	6183      	str	r3, [r0, #24]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	305c      	adds	r0, #92	; 0x5c
 8004c6e:	f7fe fd2d 	bl	80036cc <memset>
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <std+0x38>)
 8004c74:	6263      	str	r3, [r4, #36]	; 0x24
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <std+0x3c>)
 8004c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <std+0x40>)
 8004c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <std+0x44>)
 8004c80:	6224      	str	r4, [r4, #32]
 8004c82:	6323      	str	r3, [r4, #48]	; 0x30
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	bf00      	nop
 8004c88:	080057e9 	.word	0x080057e9
 8004c8c:	0800580b 	.word	0x0800580b
 8004c90:	08005843 	.word	0x08005843
 8004c94:	08005867 	.word	0x08005867

08004c98 <_cleanup_r>:
 8004c98:	4901      	ldr	r1, [pc, #4]	; (8004ca0 <_cleanup_r+0x8>)
 8004c9a:	f000 b885 	b.w	8004da8 <_fwalk_reent>
 8004c9e:	bf00      	nop
 8004ca0:	08005b41 	.word	0x08005b41

08004ca4 <__sfmoreglue>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	1e4a      	subs	r2, r1, #1
 8004ca8:	2568      	movs	r5, #104	; 0x68
 8004caa:	4355      	muls	r5, r2
 8004cac:	460e      	mov	r6, r1
 8004cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cb2:	f000 fbef 	bl	8005494 <_malloc_r>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	b140      	cbz	r0, 8004ccc <__sfmoreglue+0x28>
 8004cba:	2100      	movs	r1, #0
 8004cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8004cc0:	300c      	adds	r0, #12
 8004cc2:	60a0      	str	r0, [r4, #8]
 8004cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cc8:	f7fe fd00 	bl	80036cc <memset>
 8004ccc:	4620      	mov	r0, r4
 8004cce:	bd70      	pop	{r4, r5, r6, pc}

08004cd0 <__sinit>:
 8004cd0:	6983      	ldr	r3, [r0, #24]
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	bb33      	cbnz	r3, 8004d26 <__sinit+0x56>
 8004cd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004cdc:	6503      	str	r3, [r0, #80]	; 0x50
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <__sinit+0x58>)
 8004ce0:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <__sinit+0x5c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6282      	str	r2, [r0, #40]	; 0x28
 8004ce6:	4298      	cmp	r0, r3
 8004ce8:	bf04      	itt	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	6183      	streq	r3, [r0, #24]
 8004cee:	f000 f81f 	bl	8004d30 <__sfp>
 8004cf2:	6060      	str	r0, [r4, #4]
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 f81b 	bl	8004d30 <__sfp>
 8004cfa:	60a0      	str	r0, [r4, #8]
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f817 	bl	8004d30 <__sfp>
 8004d02:	2200      	movs	r2, #0
 8004d04:	60e0      	str	r0, [r4, #12]
 8004d06:	2104      	movs	r1, #4
 8004d08:	6860      	ldr	r0, [r4, #4]
 8004d0a:	f7ff ffa1 	bl	8004c50 <std>
 8004d0e:	2201      	movs	r2, #1
 8004d10:	2109      	movs	r1, #9
 8004d12:	68a0      	ldr	r0, [r4, #8]
 8004d14:	f7ff ff9c 	bl	8004c50 <std>
 8004d18:	2202      	movs	r2, #2
 8004d1a:	2112      	movs	r1, #18
 8004d1c:	68e0      	ldr	r0, [r4, #12]
 8004d1e:	f7ff ff97 	bl	8004c50 <std>
 8004d22:	2301      	movs	r3, #1
 8004d24:	61a3      	str	r3, [r4, #24]
 8004d26:	bd10      	pop	{r4, pc}
 8004d28:	08006d8c 	.word	0x08006d8c
 8004d2c:	08004c99 	.word	0x08004c99

08004d30 <__sfp>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <__sfp+0x70>)
 8004d34:	681e      	ldr	r6, [r3, #0]
 8004d36:	69b3      	ldr	r3, [r6, #24]
 8004d38:	4607      	mov	r7, r0
 8004d3a:	b913      	cbnz	r3, 8004d42 <__sfp+0x12>
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f7ff ffc7 	bl	8004cd0 <__sinit>
 8004d42:	3648      	adds	r6, #72	; 0x48
 8004d44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	d503      	bpl.n	8004d54 <__sfp+0x24>
 8004d4c:	6833      	ldr	r3, [r6, #0]
 8004d4e:	b133      	cbz	r3, 8004d5e <__sfp+0x2e>
 8004d50:	6836      	ldr	r6, [r6, #0]
 8004d52:	e7f7      	b.n	8004d44 <__sfp+0x14>
 8004d54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d58:	b16d      	cbz	r5, 8004d76 <__sfp+0x46>
 8004d5a:	3468      	adds	r4, #104	; 0x68
 8004d5c:	e7f4      	b.n	8004d48 <__sfp+0x18>
 8004d5e:	2104      	movs	r1, #4
 8004d60:	4638      	mov	r0, r7
 8004d62:	f7ff ff9f 	bl	8004ca4 <__sfmoreglue>
 8004d66:	6030      	str	r0, [r6, #0]
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d1f1      	bne.n	8004d50 <__sfp+0x20>
 8004d6c:	230c      	movs	r3, #12
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4604      	mov	r4, r0
 8004d72:	4620      	mov	r0, r4
 8004d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <__sfp+0x74>)
 8004d78:	6665      	str	r5, [r4, #100]	; 0x64
 8004d7a:	e9c4 5500 	strd	r5, r5, [r4]
 8004d7e:	60a5      	str	r5, [r4, #8]
 8004d80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d90:	f7fe fc9c 	bl	80036cc <memset>
 8004d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d9c:	e7e9      	b.n	8004d72 <__sfp+0x42>
 8004d9e:	bf00      	nop
 8004da0:	08006d8c 	.word	0x08006d8c
 8004da4:	ffff0001 	.word	0xffff0001

08004da8 <_fwalk_reent>:
 8004da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dac:	4680      	mov	r8, r0
 8004dae:	4689      	mov	r9, r1
 8004db0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004db4:	2600      	movs	r6, #0
 8004db6:	b914      	cbnz	r4, 8004dbe <_fwalk_reent+0x16>
 8004db8:	4630      	mov	r0, r6
 8004dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004dc2:	3f01      	subs	r7, #1
 8004dc4:	d501      	bpl.n	8004dca <_fwalk_reent+0x22>
 8004dc6:	6824      	ldr	r4, [r4, #0]
 8004dc8:	e7f5      	b.n	8004db6 <_fwalk_reent+0xe>
 8004dca:	89ab      	ldrh	r3, [r5, #12]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d907      	bls.n	8004de0 <_fwalk_reent+0x38>
 8004dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	d003      	beq.n	8004de0 <_fwalk_reent+0x38>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4640      	mov	r0, r8
 8004ddc:	47c8      	blx	r9
 8004dde:	4306      	orrs	r6, r0
 8004de0:	3568      	adds	r5, #104	; 0x68
 8004de2:	e7ee      	b.n	8004dc2 <_fwalk_reent+0x1a>

08004de4 <_localeconv_r>:
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <_localeconv_r+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6a18      	ldr	r0, [r3, #32]
 8004dea:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <_localeconv_r+0x18>)
 8004dec:	2800      	cmp	r0, #0
 8004dee:	bf08      	it	eq
 8004df0:	4618      	moveq	r0, r3
 8004df2:	30f0      	adds	r0, #240	; 0xf0
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	2000000c 	.word	0x2000000c
 8004dfc:	20000070 	.word	0x20000070

08004e00 <malloc>:
 8004e00:	4b02      	ldr	r3, [pc, #8]	; (8004e0c <malloc+0xc>)
 8004e02:	4601      	mov	r1, r0
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	f000 bb45 	b.w	8005494 <_malloc_r>
 8004e0a:	bf00      	nop
 8004e0c:	2000000c 	.word	0x2000000c

08004e10 <memcpy>:
 8004e10:	b510      	push	{r4, lr}
 8004e12:	1e43      	subs	r3, r0, #1
 8004e14:	440a      	add	r2, r1
 8004e16:	4291      	cmp	r1, r2
 8004e18:	d100      	bne.n	8004e1c <memcpy+0xc>
 8004e1a:	bd10      	pop	{r4, pc}
 8004e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e24:	e7f7      	b.n	8004e16 <memcpy+0x6>

08004e26 <_Balloc>:
 8004e26:	b570      	push	{r4, r5, r6, lr}
 8004e28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	b93d      	cbnz	r5, 8004e40 <_Balloc+0x1a>
 8004e30:	2010      	movs	r0, #16
 8004e32:	f7ff ffe5 	bl	8004e00 <malloc>
 8004e36:	6260      	str	r0, [r4, #36]	; 0x24
 8004e38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e3c:	6005      	str	r5, [r0, #0]
 8004e3e:	60c5      	str	r5, [r0, #12]
 8004e40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e42:	68eb      	ldr	r3, [r5, #12]
 8004e44:	b183      	cbz	r3, 8004e68 <_Balloc+0x42>
 8004e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e4e:	b9b8      	cbnz	r0, 8004e80 <_Balloc+0x5a>
 8004e50:	2101      	movs	r1, #1
 8004e52:	fa01 f506 	lsl.w	r5, r1, r6
 8004e56:	1d6a      	adds	r2, r5, #5
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 fabe 	bl	80053dc <_calloc_r>
 8004e60:	b160      	cbz	r0, 8004e7c <_Balloc+0x56>
 8004e62:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004e66:	e00e      	b.n	8004e86 <_Balloc+0x60>
 8004e68:	2221      	movs	r2, #33	; 0x21
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f000 fab5 	bl	80053dc <_calloc_r>
 8004e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e74:	60e8      	str	r0, [r5, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e4      	bne.n	8004e46 <_Balloc+0x20>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	6802      	ldr	r2, [r0, #0]
 8004e82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004e86:	2300      	movs	r3, #0
 8004e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e8c:	e7f7      	b.n	8004e7e <_Balloc+0x58>

08004e8e <_Bfree>:
 8004e8e:	b570      	push	{r4, r5, r6, lr}
 8004e90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e92:	4606      	mov	r6, r0
 8004e94:	460d      	mov	r5, r1
 8004e96:	b93c      	cbnz	r4, 8004ea8 <_Bfree+0x1a>
 8004e98:	2010      	movs	r0, #16
 8004e9a:	f7ff ffb1 	bl	8004e00 <malloc>
 8004e9e:	6270      	str	r0, [r6, #36]	; 0x24
 8004ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ea4:	6004      	str	r4, [r0, #0]
 8004ea6:	60c4      	str	r4, [r0, #12]
 8004ea8:	b13d      	cbz	r5, 8004eba <_Bfree+0x2c>
 8004eaa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004eac:	686a      	ldr	r2, [r5, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004eb4:	6029      	str	r1, [r5, #0]
 8004eb6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004eba:	bd70      	pop	{r4, r5, r6, pc}

08004ebc <__multadd>:
 8004ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec0:	690d      	ldr	r5, [r1, #16]
 8004ec2:	461f      	mov	r7, r3
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	f101 0c14 	add.w	ip, r1, #20
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8dc 0000 	ldr.w	r0, [ip]
 8004ed2:	b281      	uxth	r1, r0
 8004ed4:	fb02 7101 	mla	r1, r2, r1, r7
 8004ed8:	0c0f      	lsrs	r7, r1, #16
 8004eda:	0c00      	lsrs	r0, r0, #16
 8004edc:	fb02 7000 	mla	r0, r2, r0, r7
 8004ee0:	b289      	uxth	r1, r1
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004ee8:	429d      	cmp	r5, r3
 8004eea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004eee:	f84c 1b04 	str.w	r1, [ip], #4
 8004ef2:	dcec      	bgt.n	8004ece <__multadd+0x12>
 8004ef4:	b1d7      	cbz	r7, 8004f2c <__multadd+0x70>
 8004ef6:	68a3      	ldr	r3, [r4, #8]
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc12      	bgt.n	8004f22 <__multadd+0x66>
 8004efc:	6861      	ldr	r1, [r4, #4]
 8004efe:	4630      	mov	r0, r6
 8004f00:	3101      	adds	r1, #1
 8004f02:	f7ff ff90 	bl	8004e26 <_Balloc>
 8004f06:	6922      	ldr	r2, [r4, #16]
 8004f08:	3202      	adds	r2, #2
 8004f0a:	f104 010c 	add.w	r1, r4, #12
 8004f0e:	4680      	mov	r8, r0
 8004f10:	0092      	lsls	r2, r2, #2
 8004f12:	300c      	adds	r0, #12
 8004f14:	f7ff ff7c 	bl	8004e10 <memcpy>
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff ffb7 	bl	8004e8e <_Bfree>
 8004f20:	4644      	mov	r4, r8
 8004f22:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f26:	3501      	adds	r5, #1
 8004f28:	615f      	str	r7, [r3, #20]
 8004f2a:	6125      	str	r5, [r4, #16]
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f32 <__hi0bits>:
 8004f32:	0c02      	lsrs	r2, r0, #16
 8004f34:	0412      	lsls	r2, r2, #16
 8004f36:	4603      	mov	r3, r0
 8004f38:	b9b2      	cbnz	r2, 8004f68 <__hi0bits+0x36>
 8004f3a:	0403      	lsls	r3, r0, #16
 8004f3c:	2010      	movs	r0, #16
 8004f3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f42:	bf04      	itt	eq
 8004f44:	021b      	lsleq	r3, r3, #8
 8004f46:	3008      	addeq	r0, #8
 8004f48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f4c:	bf04      	itt	eq
 8004f4e:	011b      	lsleq	r3, r3, #4
 8004f50:	3004      	addeq	r0, #4
 8004f52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f56:	bf04      	itt	eq
 8004f58:	009b      	lsleq	r3, r3, #2
 8004f5a:	3002      	addeq	r0, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	db06      	blt.n	8004f6e <__hi0bits+0x3c>
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	d503      	bpl.n	8004f6c <__hi0bits+0x3a>
 8004f64:	3001      	adds	r0, #1
 8004f66:	4770      	bx	lr
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e7e8      	b.n	8004f3e <__hi0bits+0xc>
 8004f6c:	2020      	movs	r0, #32
 8004f6e:	4770      	bx	lr

08004f70 <__lo0bits>:
 8004f70:	6803      	ldr	r3, [r0, #0]
 8004f72:	f013 0207 	ands.w	r2, r3, #7
 8004f76:	4601      	mov	r1, r0
 8004f78:	d00b      	beq.n	8004f92 <__lo0bits+0x22>
 8004f7a:	07da      	lsls	r2, r3, #31
 8004f7c:	d423      	bmi.n	8004fc6 <__lo0bits+0x56>
 8004f7e:	0798      	lsls	r0, r3, #30
 8004f80:	bf49      	itett	mi
 8004f82:	085b      	lsrmi	r3, r3, #1
 8004f84:	089b      	lsrpl	r3, r3, #2
 8004f86:	2001      	movmi	r0, #1
 8004f88:	600b      	strmi	r3, [r1, #0]
 8004f8a:	bf5c      	itt	pl
 8004f8c:	600b      	strpl	r3, [r1, #0]
 8004f8e:	2002      	movpl	r0, #2
 8004f90:	4770      	bx	lr
 8004f92:	b298      	uxth	r0, r3
 8004f94:	b9a8      	cbnz	r0, 8004fc2 <__lo0bits+0x52>
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	2010      	movs	r0, #16
 8004f9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f9e:	bf04      	itt	eq
 8004fa0:	0a1b      	lsreq	r3, r3, #8
 8004fa2:	3008      	addeq	r0, #8
 8004fa4:	071a      	lsls	r2, r3, #28
 8004fa6:	bf04      	itt	eq
 8004fa8:	091b      	lsreq	r3, r3, #4
 8004faa:	3004      	addeq	r0, #4
 8004fac:	079a      	lsls	r2, r3, #30
 8004fae:	bf04      	itt	eq
 8004fb0:	089b      	lsreq	r3, r3, #2
 8004fb2:	3002      	addeq	r0, #2
 8004fb4:	07da      	lsls	r2, r3, #31
 8004fb6:	d402      	bmi.n	8004fbe <__lo0bits+0x4e>
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	d006      	beq.n	8004fca <__lo0bits+0x5a>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	e7e9      	b.n	8004f9a <__lo0bits+0x2a>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	4770      	bx	lr
 8004fca:	2020      	movs	r0, #32
 8004fcc:	4770      	bx	lr

08004fce <__i2b>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f7ff ff27 	bl	8004e26 <_Balloc>
 8004fd8:	2201      	movs	r2, #1
 8004fda:	6144      	str	r4, [r0, #20]
 8004fdc:	6102      	str	r2, [r0, #16]
 8004fde:	bd10      	pop	{r4, pc}

08004fe0 <__multiply>:
 8004fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	690a      	ldr	r2, [r1, #16]
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bfb8      	it	lt
 8004fee:	460b      	movlt	r3, r1
 8004ff0:	4688      	mov	r8, r1
 8004ff2:	bfbc      	itt	lt
 8004ff4:	46a0      	movlt	r8, r4
 8004ff6:	461c      	movlt	r4, r3
 8004ff8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004ffc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005000:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005008:	eb07 0609 	add.w	r6, r7, r9
 800500c:	42b3      	cmp	r3, r6
 800500e:	bfb8      	it	lt
 8005010:	3101      	addlt	r1, #1
 8005012:	f7ff ff08 	bl	8004e26 <_Balloc>
 8005016:	f100 0514 	add.w	r5, r0, #20
 800501a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800501e:	462b      	mov	r3, r5
 8005020:	2200      	movs	r2, #0
 8005022:	4573      	cmp	r3, lr
 8005024:	d316      	bcc.n	8005054 <__multiply+0x74>
 8005026:	f104 0214 	add.w	r2, r4, #20
 800502a:	f108 0114 	add.w	r1, r8, #20
 800502e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005032:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	9b00      	ldr	r3, [sp, #0]
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	4293      	cmp	r3, r2
 800503e:	d80c      	bhi.n	800505a <__multiply+0x7a>
 8005040:	2e00      	cmp	r6, #0
 8005042:	dd03      	ble.n	800504c <__multiply+0x6c>
 8005044:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05d      	beq.n	8005108 <__multiply+0x128>
 800504c:	6106      	str	r6, [r0, #16]
 800504e:	b003      	add	sp, #12
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005054:	f843 2b04 	str.w	r2, [r3], #4
 8005058:	e7e3      	b.n	8005022 <__multiply+0x42>
 800505a:	f8b2 b000 	ldrh.w	fp, [r2]
 800505e:	f1bb 0f00 	cmp.w	fp, #0
 8005062:	d023      	beq.n	80050ac <__multiply+0xcc>
 8005064:	4689      	mov	r9, r1
 8005066:	46ac      	mov	ip, r5
 8005068:	f04f 0800 	mov.w	r8, #0
 800506c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005070:	f8dc a000 	ldr.w	sl, [ip]
 8005074:	b2a3      	uxth	r3, r4
 8005076:	fa1f fa8a 	uxth.w	sl, sl
 800507a:	fb0b a303 	mla	r3, fp, r3, sl
 800507e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005082:	f8dc 4000 	ldr.w	r4, [ip]
 8005086:	4443      	add	r3, r8
 8005088:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800508c:	fb0b 840a 	mla	r4, fp, sl, r8
 8005090:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005094:	46e2      	mov	sl, ip
 8005096:	b29b      	uxth	r3, r3
 8005098:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800509c:	454f      	cmp	r7, r9
 800509e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050a2:	f84a 3b04 	str.w	r3, [sl], #4
 80050a6:	d82b      	bhi.n	8005100 <__multiply+0x120>
 80050a8:	f8cc 8004 	str.w	r8, [ip, #4]
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80050b2:	3204      	adds	r2, #4
 80050b4:	f1ba 0f00 	cmp.w	sl, #0
 80050b8:	d020      	beq.n	80050fc <__multiply+0x11c>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	4689      	mov	r9, r1
 80050be:	46a8      	mov	r8, r5
 80050c0:	f04f 0b00 	mov.w	fp, #0
 80050c4:	f8b9 c000 	ldrh.w	ip, [r9]
 80050c8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80050cc:	fb0a 440c 	mla	r4, sl, ip, r4
 80050d0:	445c      	add	r4, fp
 80050d2:	46c4      	mov	ip, r8
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80050da:	f84c 3b04 	str.w	r3, [ip], #4
 80050de:	f859 3b04 	ldr.w	r3, [r9], #4
 80050e2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80050e6:	0c1b      	lsrs	r3, r3, #16
 80050e8:	fb0a b303 	mla	r3, sl, r3, fp
 80050ec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050f0:	454f      	cmp	r7, r9
 80050f2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80050f6:	d805      	bhi.n	8005104 <__multiply+0x124>
 80050f8:	f8c8 3004 	str.w	r3, [r8, #4]
 80050fc:	3504      	adds	r5, #4
 80050fe:	e79b      	b.n	8005038 <__multiply+0x58>
 8005100:	46d4      	mov	ip, sl
 8005102:	e7b3      	b.n	800506c <__multiply+0x8c>
 8005104:	46e0      	mov	r8, ip
 8005106:	e7dd      	b.n	80050c4 <__multiply+0xe4>
 8005108:	3e01      	subs	r6, #1
 800510a:	e799      	b.n	8005040 <__multiply+0x60>

0800510c <__pow5mult>:
 800510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005110:	4615      	mov	r5, r2
 8005112:	f012 0203 	ands.w	r2, r2, #3
 8005116:	4606      	mov	r6, r0
 8005118:	460f      	mov	r7, r1
 800511a:	d007      	beq.n	800512c <__pow5mult+0x20>
 800511c:	3a01      	subs	r2, #1
 800511e:	4c21      	ldr	r4, [pc, #132]	; (80051a4 <__pow5mult+0x98>)
 8005120:	2300      	movs	r3, #0
 8005122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005126:	f7ff fec9 	bl	8004ebc <__multadd>
 800512a:	4607      	mov	r7, r0
 800512c:	10ad      	asrs	r5, r5, #2
 800512e:	d035      	beq.n	800519c <__pow5mult+0x90>
 8005130:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005132:	b93c      	cbnz	r4, 8005144 <__pow5mult+0x38>
 8005134:	2010      	movs	r0, #16
 8005136:	f7ff fe63 	bl	8004e00 <malloc>
 800513a:	6270      	str	r0, [r6, #36]	; 0x24
 800513c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005140:	6004      	str	r4, [r0, #0]
 8005142:	60c4      	str	r4, [r0, #12]
 8005144:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800514c:	b94c      	cbnz	r4, 8005162 <__pow5mult+0x56>
 800514e:	f240 2171 	movw	r1, #625	; 0x271
 8005152:	4630      	mov	r0, r6
 8005154:	f7ff ff3b 	bl	8004fce <__i2b>
 8005158:	2300      	movs	r3, #0
 800515a:	f8c8 0008 	str.w	r0, [r8, #8]
 800515e:	4604      	mov	r4, r0
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	f04f 0800 	mov.w	r8, #0
 8005166:	07eb      	lsls	r3, r5, #31
 8005168:	d50a      	bpl.n	8005180 <__pow5mult+0x74>
 800516a:	4639      	mov	r1, r7
 800516c:	4622      	mov	r2, r4
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ff36 	bl	8004fe0 <__multiply>
 8005174:	4639      	mov	r1, r7
 8005176:	4681      	mov	r9, r0
 8005178:	4630      	mov	r0, r6
 800517a:	f7ff fe88 	bl	8004e8e <_Bfree>
 800517e:	464f      	mov	r7, r9
 8005180:	106d      	asrs	r5, r5, #1
 8005182:	d00b      	beq.n	800519c <__pow5mult+0x90>
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	b938      	cbnz	r0, 8005198 <__pow5mult+0x8c>
 8005188:	4622      	mov	r2, r4
 800518a:	4621      	mov	r1, r4
 800518c:	4630      	mov	r0, r6
 800518e:	f7ff ff27 	bl	8004fe0 <__multiply>
 8005192:	6020      	str	r0, [r4, #0]
 8005194:	f8c0 8000 	str.w	r8, [r0]
 8005198:	4604      	mov	r4, r0
 800519a:	e7e4      	b.n	8005166 <__pow5mult+0x5a>
 800519c:	4638      	mov	r0, r7
 800519e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a2:	bf00      	nop
 80051a4:	08006f28 	.word	0x08006f28

080051a8 <__lshift>:
 80051a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	460c      	mov	r4, r1
 80051ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	6849      	ldr	r1, [r1, #4]
 80051b6:	eb0a 0903 	add.w	r9, sl, r3
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	4607      	mov	r7, r0
 80051be:	4616      	mov	r6, r2
 80051c0:	f109 0501 	add.w	r5, r9, #1
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	db32      	blt.n	800522e <__lshift+0x86>
 80051c8:	4638      	mov	r0, r7
 80051ca:	f7ff fe2c 	bl	8004e26 <_Balloc>
 80051ce:	2300      	movs	r3, #0
 80051d0:	4680      	mov	r8, r0
 80051d2:	f100 0114 	add.w	r1, r0, #20
 80051d6:	461a      	mov	r2, r3
 80051d8:	4553      	cmp	r3, sl
 80051da:	db2b      	blt.n	8005234 <__lshift+0x8c>
 80051dc:	6920      	ldr	r0, [r4, #16]
 80051de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051e2:	f104 0314 	add.w	r3, r4, #20
 80051e6:	f016 021f 	ands.w	r2, r6, #31
 80051ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051f2:	d025      	beq.n	8005240 <__lshift+0x98>
 80051f4:	f1c2 0e20 	rsb	lr, r2, #32
 80051f8:	2000      	movs	r0, #0
 80051fa:	681e      	ldr	r6, [r3, #0]
 80051fc:	468a      	mov	sl, r1
 80051fe:	4096      	lsls	r6, r2
 8005200:	4330      	orrs	r0, r6
 8005202:	f84a 0b04 	str.w	r0, [sl], #4
 8005206:	f853 0b04 	ldr.w	r0, [r3], #4
 800520a:	459c      	cmp	ip, r3
 800520c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005210:	d814      	bhi.n	800523c <__lshift+0x94>
 8005212:	6048      	str	r0, [r1, #4]
 8005214:	b108      	cbz	r0, 800521a <__lshift+0x72>
 8005216:	f109 0502 	add.w	r5, r9, #2
 800521a:	3d01      	subs	r5, #1
 800521c:	4638      	mov	r0, r7
 800521e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005222:	4621      	mov	r1, r4
 8005224:	f7ff fe33 	bl	8004e8e <_Bfree>
 8005228:	4640      	mov	r0, r8
 800522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522e:	3101      	adds	r1, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	e7c7      	b.n	80051c4 <__lshift+0x1c>
 8005234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005238:	3301      	adds	r3, #1
 800523a:	e7cd      	b.n	80051d8 <__lshift+0x30>
 800523c:	4651      	mov	r1, sl
 800523e:	e7dc      	b.n	80051fa <__lshift+0x52>
 8005240:	3904      	subs	r1, #4
 8005242:	f853 2b04 	ldr.w	r2, [r3], #4
 8005246:	f841 2f04 	str.w	r2, [r1, #4]!
 800524a:	459c      	cmp	ip, r3
 800524c:	d8f9      	bhi.n	8005242 <__lshift+0x9a>
 800524e:	e7e4      	b.n	800521a <__lshift+0x72>

08005250 <__mcmp>:
 8005250:	6903      	ldr	r3, [r0, #16]
 8005252:	690a      	ldr	r2, [r1, #16]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	b530      	push	{r4, r5, lr}
 8005258:	d10c      	bne.n	8005274 <__mcmp+0x24>
 800525a:	0092      	lsls	r2, r2, #2
 800525c:	3014      	adds	r0, #20
 800525e:	3114      	adds	r1, #20
 8005260:	1884      	adds	r4, r0, r2
 8005262:	4411      	add	r1, r2
 8005264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800526c:	4295      	cmp	r5, r2
 800526e:	d003      	beq.n	8005278 <__mcmp+0x28>
 8005270:	d305      	bcc.n	800527e <__mcmp+0x2e>
 8005272:	2301      	movs	r3, #1
 8005274:	4618      	mov	r0, r3
 8005276:	bd30      	pop	{r4, r5, pc}
 8005278:	42a0      	cmp	r0, r4
 800527a:	d3f3      	bcc.n	8005264 <__mcmp+0x14>
 800527c:	e7fa      	b.n	8005274 <__mcmp+0x24>
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	e7f7      	b.n	8005274 <__mcmp+0x24>

08005284 <__mdiff>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	460d      	mov	r5, r1
 800528a:	4607      	mov	r7, r0
 800528c:	4611      	mov	r1, r2
 800528e:	4628      	mov	r0, r5
 8005290:	4614      	mov	r4, r2
 8005292:	f7ff ffdd 	bl	8005250 <__mcmp>
 8005296:	1e06      	subs	r6, r0, #0
 8005298:	d108      	bne.n	80052ac <__mdiff+0x28>
 800529a:	4631      	mov	r1, r6
 800529c:	4638      	mov	r0, r7
 800529e:	f7ff fdc2 	bl	8004e26 <_Balloc>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	bfa4      	itt	ge
 80052ae:	4623      	movge	r3, r4
 80052b0:	462c      	movge	r4, r5
 80052b2:	4638      	mov	r0, r7
 80052b4:	6861      	ldr	r1, [r4, #4]
 80052b6:	bfa6      	itte	ge
 80052b8:	461d      	movge	r5, r3
 80052ba:	2600      	movge	r6, #0
 80052bc:	2601      	movlt	r6, #1
 80052be:	f7ff fdb2 	bl	8004e26 <_Balloc>
 80052c2:	692b      	ldr	r3, [r5, #16]
 80052c4:	60c6      	str	r6, [r0, #12]
 80052c6:	6926      	ldr	r6, [r4, #16]
 80052c8:	f105 0914 	add.w	r9, r5, #20
 80052cc:	f104 0214 	add.w	r2, r4, #20
 80052d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80052d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80052d8:	f100 0514 	add.w	r5, r0, #20
 80052dc:	f04f 0e00 	mov.w	lr, #0
 80052e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80052e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80052e8:	fa1e f18a 	uxtah	r1, lr, sl
 80052ec:	b2a3      	uxth	r3, r4
 80052ee:	1ac9      	subs	r1, r1, r3
 80052f0:	0c23      	lsrs	r3, r4, #16
 80052f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80052f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80052fa:	b289      	uxth	r1, r1
 80052fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005300:	45c8      	cmp	r8, r9
 8005302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005306:	4694      	mov	ip, r2
 8005308:	f845 3b04 	str.w	r3, [r5], #4
 800530c:	d8e8      	bhi.n	80052e0 <__mdiff+0x5c>
 800530e:	45bc      	cmp	ip, r7
 8005310:	d304      	bcc.n	800531c <__mdiff+0x98>
 8005312:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005316:	b183      	cbz	r3, 800533a <__mdiff+0xb6>
 8005318:	6106      	str	r6, [r0, #16]
 800531a:	e7c5      	b.n	80052a8 <__mdiff+0x24>
 800531c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005320:	fa1e f381 	uxtah	r3, lr, r1
 8005324:	141a      	asrs	r2, r3, #16
 8005326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005330:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005334:	f845 3b04 	str.w	r3, [r5], #4
 8005338:	e7e9      	b.n	800530e <__mdiff+0x8a>
 800533a:	3e01      	subs	r6, #1
 800533c:	e7e9      	b.n	8005312 <__mdiff+0x8e>

0800533e <__d2b>:
 800533e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005342:	460e      	mov	r6, r1
 8005344:	2101      	movs	r1, #1
 8005346:	ec59 8b10 	vmov	r8, r9, d0
 800534a:	4615      	mov	r5, r2
 800534c:	f7ff fd6b 	bl	8004e26 <_Balloc>
 8005350:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005354:	4607      	mov	r7, r0
 8005356:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800535a:	bb34      	cbnz	r4, 80053aa <__d2b+0x6c>
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	f1b8 0300 	subs.w	r3, r8, #0
 8005362:	d027      	beq.n	80053b4 <__d2b+0x76>
 8005364:	a802      	add	r0, sp, #8
 8005366:	f840 3d08 	str.w	r3, [r0, #-8]!
 800536a:	f7ff fe01 	bl	8004f70 <__lo0bits>
 800536e:	9900      	ldr	r1, [sp, #0]
 8005370:	b1f0      	cbz	r0, 80053b0 <__d2b+0x72>
 8005372:	9a01      	ldr	r2, [sp, #4]
 8005374:	f1c0 0320 	rsb	r3, r0, #32
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	430b      	orrs	r3, r1
 800537e:	40c2      	lsrs	r2, r0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	9201      	str	r2, [sp, #4]
 8005384:	9b01      	ldr	r3, [sp, #4]
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2102      	movne	r1, #2
 800538e:	2101      	moveq	r1, #1
 8005390:	6139      	str	r1, [r7, #16]
 8005392:	b1c4      	cbz	r4, 80053c6 <__d2b+0x88>
 8005394:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005398:	4404      	add	r4, r0
 800539a:	6034      	str	r4, [r6, #0]
 800539c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053a0:	6028      	str	r0, [r5, #0]
 80053a2:	4638      	mov	r0, r7
 80053a4:	b003      	add	sp, #12
 80053a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ae:	e7d5      	b.n	800535c <__d2b+0x1e>
 80053b0:	6179      	str	r1, [r7, #20]
 80053b2:	e7e7      	b.n	8005384 <__d2b+0x46>
 80053b4:	a801      	add	r0, sp, #4
 80053b6:	f7ff fddb 	bl	8004f70 <__lo0bits>
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	2101      	movs	r1, #1
 80053c0:	6139      	str	r1, [r7, #16]
 80053c2:	3020      	adds	r0, #32
 80053c4:	e7e5      	b.n	8005392 <__d2b+0x54>
 80053c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80053ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053ce:	6030      	str	r0, [r6, #0]
 80053d0:	6918      	ldr	r0, [r3, #16]
 80053d2:	f7ff fdae 	bl	8004f32 <__hi0bits>
 80053d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80053da:	e7e1      	b.n	80053a0 <__d2b+0x62>

080053dc <_calloc_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	fb02 f401 	mul.w	r4, r2, r1
 80053e2:	4621      	mov	r1, r4
 80053e4:	f000 f856 	bl	8005494 <_malloc_r>
 80053e8:	4605      	mov	r5, r0
 80053ea:	b118      	cbz	r0, 80053f4 <_calloc_r+0x18>
 80053ec:	4622      	mov	r2, r4
 80053ee:	2100      	movs	r1, #0
 80053f0:	f7fe f96c 	bl	80036cc <memset>
 80053f4:	4628      	mov	r0, r5
 80053f6:	bd38      	pop	{r3, r4, r5, pc}

080053f8 <_free_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4605      	mov	r5, r0
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d045      	beq.n	800548c <_free_r+0x94>
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f0c      	subs	r4, r1, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfb8      	it	lt
 800540a:	18e4      	addlt	r4, r4, r3
 800540c:	f000 fc4a 	bl	8005ca4 <__malloc_lock>
 8005410:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <_free_r+0x98>)
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	4610      	mov	r0, r2
 8005416:	b933      	cbnz	r3, 8005426 <_free_r+0x2e>
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	6014      	str	r4, [r2, #0]
 800541c:	4628      	mov	r0, r5
 800541e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005422:	f000 bc40 	b.w	8005ca6 <__malloc_unlock>
 8005426:	42a3      	cmp	r3, r4
 8005428:	d90c      	bls.n	8005444 <_free_r+0x4c>
 800542a:	6821      	ldr	r1, [r4, #0]
 800542c:	1862      	adds	r2, r4, r1
 800542e:	4293      	cmp	r3, r2
 8005430:	bf04      	itt	eq
 8005432:	681a      	ldreq	r2, [r3, #0]
 8005434:	685b      	ldreq	r3, [r3, #4]
 8005436:	6063      	str	r3, [r4, #4]
 8005438:	bf04      	itt	eq
 800543a:	1852      	addeq	r2, r2, r1
 800543c:	6022      	streq	r2, [r4, #0]
 800543e:	6004      	str	r4, [r0, #0]
 8005440:	e7ec      	b.n	800541c <_free_r+0x24>
 8005442:	4613      	mov	r3, r2
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	b10a      	cbz	r2, 800544c <_free_r+0x54>
 8005448:	42a2      	cmp	r2, r4
 800544a:	d9fa      	bls.n	8005442 <_free_r+0x4a>
 800544c:	6819      	ldr	r1, [r3, #0]
 800544e:	1858      	adds	r0, r3, r1
 8005450:	42a0      	cmp	r0, r4
 8005452:	d10b      	bne.n	800546c <_free_r+0x74>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	4401      	add	r1, r0
 8005458:	1858      	adds	r0, r3, r1
 800545a:	4282      	cmp	r2, r0
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	d1dd      	bne.n	800541c <_free_r+0x24>
 8005460:	6810      	ldr	r0, [r2, #0]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	4401      	add	r1, r0
 8005468:	6019      	str	r1, [r3, #0]
 800546a:	e7d7      	b.n	800541c <_free_r+0x24>
 800546c:	d902      	bls.n	8005474 <_free_r+0x7c>
 800546e:	230c      	movs	r3, #12
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	e7d3      	b.n	800541c <_free_r+0x24>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	1821      	adds	r1, r4, r0
 8005478:	428a      	cmp	r2, r1
 800547a:	bf04      	itt	eq
 800547c:	6811      	ldreq	r1, [r2, #0]
 800547e:	6852      	ldreq	r2, [r2, #4]
 8005480:	6062      	str	r2, [r4, #4]
 8005482:	bf04      	itt	eq
 8005484:	1809      	addeq	r1, r1, r0
 8005486:	6021      	streq	r1, [r4, #0]
 8005488:	605c      	str	r4, [r3, #4]
 800548a:	e7c7      	b.n	800541c <_free_r+0x24>
 800548c:	bd38      	pop	{r3, r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	200001fc 	.word	0x200001fc

08005494 <_malloc_r>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	1ccd      	adds	r5, r1, #3
 8005498:	f025 0503 	bic.w	r5, r5, #3
 800549c:	3508      	adds	r5, #8
 800549e:	2d0c      	cmp	r5, #12
 80054a0:	bf38      	it	cc
 80054a2:	250c      	movcc	r5, #12
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	4606      	mov	r6, r0
 80054a8:	db01      	blt.n	80054ae <_malloc_r+0x1a>
 80054aa:	42a9      	cmp	r1, r5
 80054ac:	d903      	bls.n	80054b6 <_malloc_r+0x22>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	2000      	movs	r0, #0
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	f000 fbf5 	bl	8005ca4 <__malloc_lock>
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <_malloc_r+0xac>)
 80054bc:	6814      	ldr	r4, [r2, #0]
 80054be:	4621      	mov	r1, r4
 80054c0:	b991      	cbnz	r1, 80054e8 <_malloc_r+0x54>
 80054c2:	4c20      	ldr	r4, [pc, #128]	; (8005544 <_malloc_r+0xb0>)
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	b91b      	cbnz	r3, 80054d0 <_malloc_r+0x3c>
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f97d 	bl	80057c8 <_sbrk_r>
 80054ce:	6020      	str	r0, [r4, #0]
 80054d0:	4629      	mov	r1, r5
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f978 	bl	80057c8 <_sbrk_r>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d124      	bne.n	8005526 <_malloc_r+0x92>
 80054dc:	230c      	movs	r3, #12
 80054de:	6033      	str	r3, [r6, #0]
 80054e0:	4630      	mov	r0, r6
 80054e2:	f000 fbe0 	bl	8005ca6 <__malloc_unlock>
 80054e6:	e7e4      	b.n	80054b2 <_malloc_r+0x1e>
 80054e8:	680b      	ldr	r3, [r1, #0]
 80054ea:	1b5b      	subs	r3, r3, r5
 80054ec:	d418      	bmi.n	8005520 <_malloc_r+0x8c>
 80054ee:	2b0b      	cmp	r3, #11
 80054f0:	d90f      	bls.n	8005512 <_malloc_r+0x7e>
 80054f2:	600b      	str	r3, [r1, #0]
 80054f4:	50cd      	str	r5, [r1, r3]
 80054f6:	18cc      	adds	r4, r1, r3
 80054f8:	4630      	mov	r0, r6
 80054fa:	f000 fbd4 	bl	8005ca6 <__malloc_unlock>
 80054fe:	f104 000b 	add.w	r0, r4, #11
 8005502:	1d23      	adds	r3, r4, #4
 8005504:	f020 0007 	bic.w	r0, r0, #7
 8005508:	1ac3      	subs	r3, r0, r3
 800550a:	d0d3      	beq.n	80054b4 <_malloc_r+0x20>
 800550c:	425a      	negs	r2, r3
 800550e:	50e2      	str	r2, [r4, r3]
 8005510:	e7d0      	b.n	80054b4 <_malloc_r+0x20>
 8005512:	428c      	cmp	r4, r1
 8005514:	684b      	ldr	r3, [r1, #4]
 8005516:	bf16      	itet	ne
 8005518:	6063      	strne	r3, [r4, #4]
 800551a:	6013      	streq	r3, [r2, #0]
 800551c:	460c      	movne	r4, r1
 800551e:	e7eb      	b.n	80054f8 <_malloc_r+0x64>
 8005520:	460c      	mov	r4, r1
 8005522:	6849      	ldr	r1, [r1, #4]
 8005524:	e7cc      	b.n	80054c0 <_malloc_r+0x2c>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d005      	beq.n	800553c <_malloc_r+0xa8>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4630      	mov	r0, r6
 8005534:	f000 f948 	bl	80057c8 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d0cf      	beq.n	80054dc <_malloc_r+0x48>
 800553c:	6025      	str	r5, [r4, #0]
 800553e:	e7db      	b.n	80054f8 <_malloc_r+0x64>
 8005540:	200001fc 	.word	0x200001fc
 8005544:	20000200 	.word	0x20000200

08005548 <__sfputc_r>:
 8005548:	6893      	ldr	r3, [r2, #8]
 800554a:	3b01      	subs	r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	b410      	push	{r4}
 8005550:	6093      	str	r3, [r2, #8]
 8005552:	da08      	bge.n	8005566 <__sfputc_r+0x1e>
 8005554:	6994      	ldr	r4, [r2, #24]
 8005556:	42a3      	cmp	r3, r4
 8005558:	db01      	blt.n	800555e <__sfputc_r+0x16>
 800555a:	290a      	cmp	r1, #10
 800555c:	d103      	bne.n	8005566 <__sfputc_r+0x1e>
 800555e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005562:	f000 b985 	b.w	8005870 <__swbuf_r>
 8005566:	6813      	ldr	r3, [r2, #0]
 8005568:	1c58      	adds	r0, r3, #1
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	7019      	strb	r1, [r3, #0]
 800556e:	4608      	mov	r0, r1
 8005570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005574:	4770      	bx	lr

08005576 <__sfputs_r>:
 8005576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	4614      	mov	r4, r2
 800557e:	18d5      	adds	r5, r2, r3
 8005580:	42ac      	cmp	r4, r5
 8005582:	d101      	bne.n	8005588 <__sfputs_r+0x12>
 8005584:	2000      	movs	r0, #0
 8005586:	e007      	b.n	8005598 <__sfputs_r+0x22>
 8005588:	463a      	mov	r2, r7
 800558a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff ffda 	bl	8005548 <__sfputc_r>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d1f3      	bne.n	8005580 <__sfputs_r+0xa>
 8005598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800559c <_vfiprintf_r>:
 800559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a0:	460c      	mov	r4, r1
 80055a2:	b09d      	sub	sp, #116	; 0x74
 80055a4:	4617      	mov	r7, r2
 80055a6:	461d      	mov	r5, r3
 80055a8:	4606      	mov	r6, r0
 80055aa:	b118      	cbz	r0, 80055b4 <_vfiprintf_r+0x18>
 80055ac:	6983      	ldr	r3, [r0, #24]
 80055ae:	b90b      	cbnz	r3, 80055b4 <_vfiprintf_r+0x18>
 80055b0:	f7ff fb8e 	bl	8004cd0 <__sinit>
 80055b4:	4b7c      	ldr	r3, [pc, #496]	; (80057a8 <_vfiprintf_r+0x20c>)
 80055b6:	429c      	cmp	r4, r3
 80055b8:	d158      	bne.n	800566c <_vfiprintf_r+0xd0>
 80055ba:	6874      	ldr	r4, [r6, #4]
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	0718      	lsls	r0, r3, #28
 80055c0:	d55e      	bpl.n	8005680 <_vfiprintf_r+0xe4>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d05b      	beq.n	8005680 <_vfiprintf_r+0xe4>
 80055c8:	2300      	movs	r3, #0
 80055ca:	9309      	str	r3, [sp, #36]	; 0x24
 80055cc:	2320      	movs	r3, #32
 80055ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055d2:	2330      	movs	r3, #48	; 0x30
 80055d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d8:	9503      	str	r5, [sp, #12]
 80055da:	f04f 0b01 	mov.w	fp, #1
 80055de:	46b8      	mov	r8, r7
 80055e0:	4645      	mov	r5, r8
 80055e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055e6:	b10b      	cbz	r3, 80055ec <_vfiprintf_r+0x50>
 80055e8:	2b25      	cmp	r3, #37	; 0x25
 80055ea:	d154      	bne.n	8005696 <_vfiprintf_r+0xfa>
 80055ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80055f0:	d00b      	beq.n	800560a <_vfiprintf_r+0x6e>
 80055f2:	4653      	mov	r3, sl
 80055f4:	463a      	mov	r2, r7
 80055f6:	4621      	mov	r1, r4
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7ff ffbc 	bl	8005576 <__sfputs_r>
 80055fe:	3001      	adds	r0, #1
 8005600:	f000 80c2 	beq.w	8005788 <_vfiprintf_r+0x1ec>
 8005604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005606:	4453      	add	r3, sl
 8005608:	9309      	str	r3, [sp, #36]	; 0x24
 800560a:	f898 3000 	ldrb.w	r3, [r8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 80ba 	beq.w	8005788 <_vfiprintf_r+0x1ec>
 8005614:	2300      	movs	r3, #0
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800561e:	9304      	str	r3, [sp, #16]
 8005620:	9307      	str	r3, [sp, #28]
 8005622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005626:	931a      	str	r3, [sp, #104]	; 0x68
 8005628:	46a8      	mov	r8, r5
 800562a:	2205      	movs	r2, #5
 800562c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005630:	485e      	ldr	r0, [pc, #376]	; (80057ac <_vfiprintf_r+0x210>)
 8005632:	f7fa fddd 	bl	80001f0 <memchr>
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	bb78      	cbnz	r0, 800569a <_vfiprintf_r+0xfe>
 800563a:	06d9      	lsls	r1, r3, #27
 800563c:	bf44      	itt	mi
 800563e:	2220      	movmi	r2, #32
 8005640:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005644:	071a      	lsls	r2, r3, #28
 8005646:	bf44      	itt	mi
 8005648:	222b      	movmi	r2, #43	; 0x2b
 800564a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800564e:	782a      	ldrb	r2, [r5, #0]
 8005650:	2a2a      	cmp	r2, #42	; 0x2a
 8005652:	d02a      	beq.n	80056aa <_vfiprintf_r+0x10e>
 8005654:	9a07      	ldr	r2, [sp, #28]
 8005656:	46a8      	mov	r8, r5
 8005658:	2000      	movs	r0, #0
 800565a:	250a      	movs	r5, #10
 800565c:	4641      	mov	r1, r8
 800565e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005662:	3b30      	subs	r3, #48	; 0x30
 8005664:	2b09      	cmp	r3, #9
 8005666:	d969      	bls.n	800573c <_vfiprintf_r+0x1a0>
 8005668:	b360      	cbz	r0, 80056c4 <_vfiprintf_r+0x128>
 800566a:	e024      	b.n	80056b6 <_vfiprintf_r+0x11a>
 800566c:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <_vfiprintf_r+0x214>)
 800566e:	429c      	cmp	r4, r3
 8005670:	d101      	bne.n	8005676 <_vfiprintf_r+0xda>
 8005672:	68b4      	ldr	r4, [r6, #8]
 8005674:	e7a2      	b.n	80055bc <_vfiprintf_r+0x20>
 8005676:	4b4f      	ldr	r3, [pc, #316]	; (80057b4 <_vfiprintf_r+0x218>)
 8005678:	429c      	cmp	r4, r3
 800567a:	bf08      	it	eq
 800567c:	68f4      	ldreq	r4, [r6, #12]
 800567e:	e79d      	b.n	80055bc <_vfiprintf_r+0x20>
 8005680:	4621      	mov	r1, r4
 8005682:	4630      	mov	r0, r6
 8005684:	f000 f958 	bl	8005938 <__swsetup_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	d09d      	beq.n	80055c8 <_vfiprintf_r+0x2c>
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	b01d      	add	sp, #116	; 0x74
 8005692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005696:	46a8      	mov	r8, r5
 8005698:	e7a2      	b.n	80055e0 <_vfiprintf_r+0x44>
 800569a:	4a44      	ldr	r2, [pc, #272]	; (80057ac <_vfiprintf_r+0x210>)
 800569c:	1a80      	subs	r0, r0, r2
 800569e:	fa0b f000 	lsl.w	r0, fp, r0
 80056a2:	4318      	orrs	r0, r3
 80056a4:	9004      	str	r0, [sp, #16]
 80056a6:	4645      	mov	r5, r8
 80056a8:	e7be      	b.n	8005628 <_vfiprintf_r+0x8c>
 80056aa:	9a03      	ldr	r2, [sp, #12]
 80056ac:	1d11      	adds	r1, r2, #4
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	9103      	str	r1, [sp, #12]
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	db01      	blt.n	80056ba <_vfiprintf_r+0x11e>
 80056b6:	9207      	str	r2, [sp, #28]
 80056b8:	e004      	b.n	80056c4 <_vfiprintf_r+0x128>
 80056ba:	4252      	negs	r2, r2
 80056bc:	f043 0302 	orr.w	r3, r3, #2
 80056c0:	9207      	str	r2, [sp, #28]
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	f898 3000 	ldrb.w	r3, [r8]
 80056c8:	2b2e      	cmp	r3, #46	; 0x2e
 80056ca:	d10e      	bne.n	80056ea <_vfiprintf_r+0x14e>
 80056cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80056d0:	2b2a      	cmp	r3, #42	; 0x2a
 80056d2:	d138      	bne.n	8005746 <_vfiprintf_r+0x1aa>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bfb8      	it	lt
 80056e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80056e4:	f108 0802 	add.w	r8, r8, #2
 80056e8:	9305      	str	r3, [sp, #20]
 80056ea:	4d33      	ldr	r5, [pc, #204]	; (80057b8 <_vfiprintf_r+0x21c>)
 80056ec:	f898 1000 	ldrb.w	r1, [r8]
 80056f0:	2203      	movs	r2, #3
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7fa fd7c 	bl	80001f0 <memchr>
 80056f8:	b140      	cbz	r0, 800570c <_vfiprintf_r+0x170>
 80056fa:	2340      	movs	r3, #64	; 0x40
 80056fc:	1b40      	subs	r0, r0, r5
 80056fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	4303      	orrs	r3, r0
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	f898 1000 	ldrb.w	r1, [r8]
 8005710:	482a      	ldr	r0, [pc, #168]	; (80057bc <_vfiprintf_r+0x220>)
 8005712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005716:	2206      	movs	r2, #6
 8005718:	f108 0701 	add.w	r7, r8, #1
 800571c:	f7fa fd68 	bl	80001f0 <memchr>
 8005720:	2800      	cmp	r0, #0
 8005722:	d037      	beq.n	8005794 <_vfiprintf_r+0x1f8>
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <_vfiprintf_r+0x224>)
 8005726:	bb1b      	cbnz	r3, 8005770 <_vfiprintf_r+0x1d4>
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	3307      	adds	r3, #7
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	3308      	adds	r3, #8
 8005732:	9303      	str	r3, [sp, #12]
 8005734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005736:	444b      	add	r3, r9
 8005738:	9309      	str	r3, [sp, #36]	; 0x24
 800573a:	e750      	b.n	80055de <_vfiprintf_r+0x42>
 800573c:	fb05 3202 	mla	r2, r5, r2, r3
 8005740:	2001      	movs	r0, #1
 8005742:	4688      	mov	r8, r1
 8005744:	e78a      	b.n	800565c <_vfiprintf_r+0xc0>
 8005746:	2300      	movs	r3, #0
 8005748:	f108 0801 	add.w	r8, r8, #1
 800574c:	9305      	str	r3, [sp, #20]
 800574e:	4619      	mov	r1, r3
 8005750:	250a      	movs	r5, #10
 8005752:	4640      	mov	r0, r8
 8005754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005758:	3a30      	subs	r2, #48	; 0x30
 800575a:	2a09      	cmp	r2, #9
 800575c:	d903      	bls.n	8005766 <_vfiprintf_r+0x1ca>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0c3      	beq.n	80056ea <_vfiprintf_r+0x14e>
 8005762:	9105      	str	r1, [sp, #20]
 8005764:	e7c1      	b.n	80056ea <_vfiprintf_r+0x14e>
 8005766:	fb05 2101 	mla	r1, r5, r1, r2
 800576a:	2301      	movs	r3, #1
 800576c:	4680      	mov	r8, r0
 800576e:	e7f0      	b.n	8005752 <_vfiprintf_r+0x1b6>
 8005770:	ab03      	add	r3, sp, #12
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	4622      	mov	r2, r4
 8005776:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <_vfiprintf_r+0x228>)
 8005778:	a904      	add	r1, sp, #16
 800577a:	4630      	mov	r0, r6
 800577c:	f7fe f842 	bl	8003804 <_printf_float>
 8005780:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005784:	4681      	mov	r9, r0
 8005786:	d1d5      	bne.n	8005734 <_vfiprintf_r+0x198>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	065b      	lsls	r3, r3, #25
 800578c:	f53f af7e 	bmi.w	800568c <_vfiprintf_r+0xf0>
 8005790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005792:	e77d      	b.n	8005690 <_vfiprintf_r+0xf4>
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4622      	mov	r2, r4
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <_vfiprintf_r+0x228>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4630      	mov	r0, r6
 80057a0:	f7fe fae6 	bl	8003d70 <_printf_i>
 80057a4:	e7ec      	b.n	8005780 <_vfiprintf_r+0x1e4>
 80057a6:	bf00      	nop
 80057a8:	08006df4 	.word	0x08006df4
 80057ac:	08006f34 	.word	0x08006f34
 80057b0:	08006e14 	.word	0x08006e14
 80057b4:	08006dd4 	.word	0x08006dd4
 80057b8:	08006f3a 	.word	0x08006f3a
 80057bc:	08006f3e 	.word	0x08006f3e
 80057c0:	08003805 	.word	0x08003805
 80057c4:	08005577 	.word	0x08005577

080057c8 <_sbrk_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4c06      	ldr	r4, [pc, #24]	; (80057e4 <_sbrk_r+0x1c>)
 80057cc:	2300      	movs	r3, #0
 80057ce:	4605      	mov	r5, r0
 80057d0:	4608      	mov	r0, r1
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	f7fb ffc0 	bl	8001758 <_sbrk>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_sbrk_r+0x1a>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_sbrk_r+0x1a>
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	200002dc 	.word	0x200002dc

080057e8 <__sread>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	460c      	mov	r4, r1
 80057ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f0:	f000 fa5a 	bl	8005ca8 <_read_r>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	bfab      	itete	ge
 80057f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057fa:	89a3      	ldrhlt	r3, [r4, #12]
 80057fc:	181b      	addge	r3, r3, r0
 80057fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005802:	bfac      	ite	ge
 8005804:	6563      	strge	r3, [r4, #84]	; 0x54
 8005806:	81a3      	strhlt	r3, [r4, #12]
 8005808:	bd10      	pop	{r4, pc}

0800580a <__swrite>:
 800580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580e:	461f      	mov	r7, r3
 8005810:	898b      	ldrh	r3, [r1, #12]
 8005812:	05db      	lsls	r3, r3, #23
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
 8005818:	4616      	mov	r6, r2
 800581a:	d505      	bpl.n	8005828 <__swrite+0x1e>
 800581c:	2302      	movs	r3, #2
 800581e:	2200      	movs	r2, #0
 8005820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005824:	f000 f9b6 	bl	8005b94 <_lseek_r>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800582e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	4632      	mov	r2, r6
 8005836:	463b      	mov	r3, r7
 8005838:	4628      	mov	r0, r5
 800583a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800583e:	f000 b869 	b.w	8005914 <_write_r>

08005842 <__sseek>:
 8005842:	b510      	push	{r4, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584a:	f000 f9a3 	bl	8005b94 <_lseek_r>
 800584e:	1c43      	adds	r3, r0, #1
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	bf15      	itete	ne
 8005854:	6560      	strne	r0, [r4, #84]	; 0x54
 8005856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800585a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800585e:	81a3      	strheq	r3, [r4, #12]
 8005860:	bf18      	it	ne
 8005862:	81a3      	strhne	r3, [r4, #12]
 8005864:	bd10      	pop	{r4, pc}

08005866 <__sclose>:
 8005866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586a:	f000 b8d3 	b.w	8005a14 <_close_r>
	...

08005870 <__swbuf_r>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4614      	mov	r4, r2
 8005876:	4605      	mov	r5, r0
 8005878:	b118      	cbz	r0, 8005882 <__swbuf_r+0x12>
 800587a:	6983      	ldr	r3, [r0, #24]
 800587c:	b90b      	cbnz	r3, 8005882 <__swbuf_r+0x12>
 800587e:	f7ff fa27 	bl	8004cd0 <__sinit>
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <__swbuf_r+0x98>)
 8005884:	429c      	cmp	r4, r3
 8005886:	d12a      	bne.n	80058de <__swbuf_r+0x6e>
 8005888:	686c      	ldr	r4, [r5, #4]
 800588a:	69a3      	ldr	r3, [r4, #24]
 800588c:	60a3      	str	r3, [r4, #8]
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	071a      	lsls	r2, r3, #28
 8005892:	d52e      	bpl.n	80058f2 <__swbuf_r+0x82>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	b363      	cbz	r3, 80058f2 <__swbuf_r+0x82>
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	1ac0      	subs	r0, r0, r3
 800589e:	6963      	ldr	r3, [r4, #20]
 80058a0:	b2f6      	uxtb	r6, r6
 80058a2:	4283      	cmp	r3, r0
 80058a4:	4637      	mov	r7, r6
 80058a6:	dc04      	bgt.n	80058b2 <__swbuf_r+0x42>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 f948 	bl	8005b40 <_fflush_r>
 80058b0:	bb28      	cbnz	r0, 80058fe <__swbuf_r+0x8e>
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	6022      	str	r2, [r4, #0]
 80058be:	701e      	strb	r6, [r3, #0]
 80058c0:	6963      	ldr	r3, [r4, #20]
 80058c2:	3001      	adds	r0, #1
 80058c4:	4283      	cmp	r3, r0
 80058c6:	d004      	beq.n	80058d2 <__swbuf_r+0x62>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	07db      	lsls	r3, r3, #31
 80058cc:	d519      	bpl.n	8005902 <__swbuf_r+0x92>
 80058ce:	2e0a      	cmp	r6, #10
 80058d0:	d117      	bne.n	8005902 <__swbuf_r+0x92>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 f933 	bl	8005b40 <_fflush_r>
 80058da:	b190      	cbz	r0, 8005902 <__swbuf_r+0x92>
 80058dc:	e00f      	b.n	80058fe <__swbuf_r+0x8e>
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <__swbuf_r+0x9c>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d101      	bne.n	80058e8 <__swbuf_r+0x78>
 80058e4:	68ac      	ldr	r4, [r5, #8]
 80058e6:	e7d0      	b.n	800588a <__swbuf_r+0x1a>
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <__swbuf_r+0xa0>)
 80058ea:	429c      	cmp	r4, r3
 80058ec:	bf08      	it	eq
 80058ee:	68ec      	ldreq	r4, [r5, #12]
 80058f0:	e7cb      	b.n	800588a <__swbuf_r+0x1a>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4628      	mov	r0, r5
 80058f6:	f000 f81f 	bl	8005938 <__swsetup_r>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0cc      	beq.n	8005898 <__swbuf_r+0x28>
 80058fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005902:	4638      	mov	r0, r7
 8005904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005906:	bf00      	nop
 8005908:	08006df4 	.word	0x08006df4
 800590c:	08006e14 	.word	0x08006e14
 8005910:	08006dd4 	.word	0x08006dd4

08005914 <_write_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4c07      	ldr	r4, [pc, #28]	; (8005934 <_write_r+0x20>)
 8005918:	4605      	mov	r5, r0
 800591a:	4608      	mov	r0, r1
 800591c:	4611      	mov	r1, r2
 800591e:	2200      	movs	r2, #0
 8005920:	6022      	str	r2, [r4, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fb fec7 	bl	80016b6 <_write>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_write_r+0x1e>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	b103      	cbz	r3, 8005932 <_write_r+0x1e>
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	200002dc 	.word	0x200002dc

08005938 <__swsetup_r>:
 8005938:	4b32      	ldr	r3, [pc, #200]	; (8005a04 <__swsetup_r+0xcc>)
 800593a:	b570      	push	{r4, r5, r6, lr}
 800593c:	681d      	ldr	r5, [r3, #0]
 800593e:	4606      	mov	r6, r0
 8005940:	460c      	mov	r4, r1
 8005942:	b125      	cbz	r5, 800594e <__swsetup_r+0x16>
 8005944:	69ab      	ldr	r3, [r5, #24]
 8005946:	b913      	cbnz	r3, 800594e <__swsetup_r+0x16>
 8005948:	4628      	mov	r0, r5
 800594a:	f7ff f9c1 	bl	8004cd0 <__sinit>
 800594e:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <__swsetup_r+0xd0>)
 8005950:	429c      	cmp	r4, r3
 8005952:	d10f      	bne.n	8005974 <__swsetup_r+0x3c>
 8005954:	686c      	ldr	r4, [r5, #4]
 8005956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595a:	b29a      	uxth	r2, r3
 800595c:	0715      	lsls	r5, r2, #28
 800595e:	d42c      	bmi.n	80059ba <__swsetup_r+0x82>
 8005960:	06d0      	lsls	r0, r2, #27
 8005962:	d411      	bmi.n	8005988 <__swsetup_r+0x50>
 8005964:	2209      	movs	r2, #9
 8005966:	6032      	str	r2, [r6, #0]
 8005968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596c:	81a3      	strh	r3, [r4, #12]
 800596e:	f04f 30ff 	mov.w	r0, #4294967295
 8005972:	e03e      	b.n	80059f2 <__swsetup_r+0xba>
 8005974:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <__swsetup_r+0xd4>)
 8005976:	429c      	cmp	r4, r3
 8005978:	d101      	bne.n	800597e <__swsetup_r+0x46>
 800597a:	68ac      	ldr	r4, [r5, #8]
 800597c:	e7eb      	b.n	8005956 <__swsetup_r+0x1e>
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <__swsetup_r+0xd8>)
 8005980:	429c      	cmp	r4, r3
 8005982:	bf08      	it	eq
 8005984:	68ec      	ldreq	r4, [r5, #12]
 8005986:	e7e6      	b.n	8005956 <__swsetup_r+0x1e>
 8005988:	0751      	lsls	r1, r2, #29
 800598a:	d512      	bpl.n	80059b2 <__swsetup_r+0x7a>
 800598c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598e:	b141      	cbz	r1, 80059a2 <__swsetup_r+0x6a>
 8005990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__swsetup_r+0x66>
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff fd2d 	bl	80053f8 <_free_r>
 800599e:	2300      	movs	r3, #0
 80059a0:	6363      	str	r3, [r4, #52]	; 0x34
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	b94b      	cbnz	r3, 80059d2 <__swsetup_r+0x9a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c8:	d003      	beq.n	80059d2 <__swsetup_r+0x9a>
 80059ca:	4621      	mov	r1, r4
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f917 	bl	8005c00 <__smakebuf_r>
 80059d2:	89a2      	ldrh	r2, [r4, #12]
 80059d4:	f012 0301 	ands.w	r3, r2, #1
 80059d8:	d00c      	beq.n	80059f4 <__swsetup_r+0xbc>
 80059da:	2300      	movs	r3, #0
 80059dc:	60a3      	str	r3, [r4, #8]
 80059de:	6963      	ldr	r3, [r4, #20]
 80059e0:	425b      	negs	r3, r3
 80059e2:	61a3      	str	r3, [r4, #24]
 80059e4:	6923      	ldr	r3, [r4, #16]
 80059e6:	b953      	cbnz	r3, 80059fe <__swsetup_r+0xc6>
 80059e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059f0:	d1ba      	bne.n	8005968 <__swsetup_r+0x30>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	0792      	lsls	r2, r2, #30
 80059f6:	bf58      	it	pl
 80059f8:	6963      	ldrpl	r3, [r4, #20]
 80059fa:	60a3      	str	r3, [r4, #8]
 80059fc:	e7f2      	b.n	80059e4 <__swsetup_r+0xac>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e7f7      	b.n	80059f2 <__swsetup_r+0xba>
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
 8005a08:	08006df4 	.word	0x08006df4
 8005a0c:	08006e14 	.word	0x08006e14
 8005a10:	08006dd4 	.word	0x08006dd4

08005a14 <_close_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4c06      	ldr	r4, [pc, #24]	; (8005a30 <_close_r+0x1c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	f7fb fe65 	bl	80016ee <_close>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_close_r+0x1a>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_close_r+0x1a>
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200002dc 	.word	0x200002dc

08005a34 <__sflush_r>:
 8005a34:	898a      	ldrh	r2, [r1, #12]
 8005a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	0710      	lsls	r0, r2, #28
 8005a3e:	460c      	mov	r4, r1
 8005a40:	d458      	bmi.n	8005af4 <__sflush_r+0xc0>
 8005a42:	684b      	ldr	r3, [r1, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc05      	bgt.n	8005a54 <__sflush_r+0x20>
 8005a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dc02      	bgt.n	8005a54 <__sflush_r+0x20>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	d0f9      	beq.n	8005a4e <__sflush_r+0x1a>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a60:	682f      	ldr	r7, [r5, #0]
 8005a62:	6a21      	ldr	r1, [r4, #32]
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	d032      	beq.n	8005ace <__sflush_r+0x9a>
 8005a68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	075a      	lsls	r2, r3, #29
 8005a6e:	d505      	bpl.n	8005a7c <__sflush_r+0x48>
 8005a70:	6863      	ldr	r3, [r4, #4]
 8005a72:	1ac0      	subs	r0, r0, r3
 8005a74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a76:	b10b      	cbz	r3, 8005a7c <__sflush_r+0x48>
 8005a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a7a:	1ac0      	subs	r0, r0, r3
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a82:	6a21      	ldr	r1, [r4, #32]
 8005a84:	4628      	mov	r0, r5
 8005a86:	47b0      	blx	r6
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	d106      	bne.n	8005a9c <__sflush_r+0x68>
 8005a8e:	6829      	ldr	r1, [r5, #0]
 8005a90:	291d      	cmp	r1, #29
 8005a92:	d848      	bhi.n	8005b26 <__sflush_r+0xf2>
 8005a94:	4a29      	ldr	r2, [pc, #164]	; (8005b3c <__sflush_r+0x108>)
 8005a96:	40ca      	lsrs	r2, r1
 8005a98:	07d6      	lsls	r6, r2, #31
 8005a9a:	d544      	bpl.n	8005b26 <__sflush_r+0xf2>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	6062      	str	r2, [r4, #4]
 8005aa0:	04d9      	lsls	r1, r3, #19
 8005aa2:	6922      	ldr	r2, [r4, #16]
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	d504      	bpl.n	8005ab2 <__sflush_r+0x7e>
 8005aa8:	1c42      	adds	r2, r0, #1
 8005aaa:	d101      	bne.n	8005ab0 <__sflush_r+0x7c>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b903      	cbnz	r3, 8005ab2 <__sflush_r+0x7e>
 8005ab0:	6560      	str	r0, [r4, #84]	; 0x54
 8005ab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ab4:	602f      	str	r7, [r5, #0]
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	d0c9      	beq.n	8005a4e <__sflush_r+0x1a>
 8005aba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005abe:	4299      	cmp	r1, r3
 8005ac0:	d002      	beq.n	8005ac8 <__sflush_r+0x94>
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7ff fc98 	bl	80053f8 <_free_r>
 8005ac8:	2000      	movs	r0, #0
 8005aca:	6360      	str	r0, [r4, #52]	; 0x34
 8005acc:	e7c0      	b.n	8005a50 <__sflush_r+0x1c>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b0      	blx	r6
 8005ad4:	1c41      	adds	r1, r0, #1
 8005ad6:	d1c8      	bne.n	8005a6a <__sflush_r+0x36>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0c5      	beq.n	8005a6a <__sflush_r+0x36>
 8005ade:	2b1d      	cmp	r3, #29
 8005ae0:	d001      	beq.n	8005ae6 <__sflush_r+0xb2>
 8005ae2:	2b16      	cmp	r3, #22
 8005ae4:	d101      	bne.n	8005aea <__sflush_r+0xb6>
 8005ae6:	602f      	str	r7, [r5, #0]
 8005ae8:	e7b1      	b.n	8005a4e <__sflush_r+0x1a>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	e7ad      	b.n	8005a50 <__sflush_r+0x1c>
 8005af4:	690f      	ldr	r7, [r1, #16]
 8005af6:	2f00      	cmp	r7, #0
 8005af8:	d0a9      	beq.n	8005a4e <__sflush_r+0x1a>
 8005afa:	0793      	lsls	r3, r2, #30
 8005afc:	680e      	ldr	r6, [r1, #0]
 8005afe:	bf08      	it	eq
 8005b00:	694b      	ldreq	r3, [r1, #20]
 8005b02:	600f      	str	r7, [r1, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2300      	movne	r3, #0
 8005b08:	eba6 0807 	sub.w	r8, r6, r7
 8005b0c:	608b      	str	r3, [r1, #8]
 8005b0e:	f1b8 0f00 	cmp.w	r8, #0
 8005b12:	dd9c      	ble.n	8005a4e <__sflush_r+0x1a>
 8005b14:	4643      	mov	r3, r8
 8005b16:	463a      	mov	r2, r7
 8005b18:	6a21      	ldr	r1, [r4, #32]
 8005b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	47b0      	blx	r6
 8005b20:	2800      	cmp	r0, #0
 8005b22:	dc06      	bgt.n	8005b32 <__sflush_r+0xfe>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b2a:	81a3      	strh	r3, [r4, #12]
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e78e      	b.n	8005a50 <__sflush_r+0x1c>
 8005b32:	4407      	add	r7, r0
 8005b34:	eba8 0800 	sub.w	r8, r8, r0
 8005b38:	e7e9      	b.n	8005b0e <__sflush_r+0xda>
 8005b3a:	bf00      	nop
 8005b3c:	20400001 	.word	0x20400001

08005b40 <_fflush_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	690b      	ldr	r3, [r1, #16]
 8005b44:	4605      	mov	r5, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	b1db      	cbz	r3, 8005b82 <_fflush_r+0x42>
 8005b4a:	b118      	cbz	r0, 8005b54 <_fflush_r+0x14>
 8005b4c:	6983      	ldr	r3, [r0, #24]
 8005b4e:	b90b      	cbnz	r3, 8005b54 <_fflush_r+0x14>
 8005b50:	f7ff f8be 	bl	8004cd0 <__sinit>
 8005b54:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <_fflush_r+0x48>)
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d109      	bne.n	8005b6e <_fflush_r+0x2e>
 8005b5a:	686c      	ldr	r4, [r5, #4]
 8005b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b60:	b17b      	cbz	r3, 8005b82 <_fflush_r+0x42>
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b6a:	f7ff bf63 	b.w	8005a34 <__sflush_r>
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <_fflush_r+0x4c>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	d101      	bne.n	8005b78 <_fflush_r+0x38>
 8005b74:	68ac      	ldr	r4, [r5, #8]
 8005b76:	e7f1      	b.n	8005b5c <_fflush_r+0x1c>
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <_fflush_r+0x50>)
 8005b7a:	429c      	cmp	r4, r3
 8005b7c:	bf08      	it	eq
 8005b7e:	68ec      	ldreq	r4, [r5, #12]
 8005b80:	e7ec      	b.n	8005b5c <_fflush_r+0x1c>
 8005b82:	2000      	movs	r0, #0
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	bf00      	nop
 8005b88:	08006df4 	.word	0x08006df4
 8005b8c:	08006e14 	.word	0x08006e14
 8005b90:	08006dd4 	.word	0x08006dd4

08005b94 <_lseek_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4c07      	ldr	r4, [pc, #28]	; (8005bb4 <_lseek_r+0x20>)
 8005b98:	4605      	mov	r5, r0
 8005b9a:	4608      	mov	r0, r1
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	6022      	str	r2, [r4, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f7fb fdca 	bl	800173c <_lseek>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_lseek_r+0x1e>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_lseek_r+0x1e>
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200002dc 	.word	0x200002dc

08005bb8 <__swhatbuf_r>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	460e      	mov	r6, r1
 8005bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	b096      	sub	sp, #88	; 0x58
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	da07      	bge.n	8005bda <__swhatbuf_r+0x22>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	89b3      	ldrh	r3, [r6, #12]
 8005bd0:	061a      	lsls	r2, r3, #24
 8005bd2:	d410      	bmi.n	8005bf6 <__swhatbuf_r+0x3e>
 8005bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd8:	e00e      	b.n	8005bf8 <__swhatbuf_r+0x40>
 8005bda:	466a      	mov	r2, sp
 8005bdc:	f000 f884 	bl	8005ce8 <_fstat_r>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	dbf2      	blt.n	8005bca <__swhatbuf_r+0x12>
 8005be4:	9a01      	ldr	r2, [sp, #4]
 8005be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bee:	425a      	negs	r2, r3
 8005bf0:	415a      	adcs	r2, r3
 8005bf2:	602a      	str	r2, [r5, #0]
 8005bf4:	e7ee      	b.n	8005bd4 <__swhatbuf_r+0x1c>
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	b016      	add	sp, #88	; 0x58
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}

08005c00 <__smakebuf_r>:
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c04:	079d      	lsls	r5, r3, #30
 8005c06:	4606      	mov	r6, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	d507      	bpl.n	8005c1c <__smakebuf_r+0x1c>
 8005c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2301      	movs	r3, #1
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	ab01      	add	r3, sp, #4
 8005c1e:	466a      	mov	r2, sp
 8005c20:	f7ff ffca 	bl	8005bb8 <__swhatbuf_r>
 8005c24:	9900      	ldr	r1, [sp, #0]
 8005c26:	4605      	mov	r5, r0
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f7ff fc33 	bl	8005494 <_malloc_r>
 8005c2e:	b948      	cbnz	r0, 8005c44 <__smakebuf_r+0x44>
 8005c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c34:	059a      	lsls	r2, r3, #22
 8005c36:	d4ef      	bmi.n	8005c18 <__smakebuf_r+0x18>
 8005c38:	f023 0303 	bic.w	r3, r3, #3
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	81a3      	strh	r3, [r4, #12]
 8005c42:	e7e3      	b.n	8005c0c <__smakebuf_r+0xc>
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <__smakebuf_r+0x7c>)
 8005c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	6020      	str	r0, [r4, #0]
 8005c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	9b00      	ldr	r3, [sp, #0]
 8005c54:	6163      	str	r3, [r4, #20]
 8005c56:	9b01      	ldr	r3, [sp, #4]
 8005c58:	6120      	str	r0, [r4, #16]
 8005c5a:	b15b      	cbz	r3, 8005c74 <__smakebuf_r+0x74>
 8005c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f853 	bl	8005d0c <_isatty_r>
 8005c66:	b128      	cbz	r0, 8005c74 <__smakebuf_r+0x74>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	431d      	orrs	r5, r3
 8005c78:	81a5      	strh	r5, [r4, #12]
 8005c7a:	e7cd      	b.n	8005c18 <__smakebuf_r+0x18>
 8005c7c:	08004c99 	.word	0x08004c99

08005c80 <__ascii_mbtowc>:
 8005c80:	b082      	sub	sp, #8
 8005c82:	b901      	cbnz	r1, 8005c86 <__ascii_mbtowc+0x6>
 8005c84:	a901      	add	r1, sp, #4
 8005c86:	b142      	cbz	r2, 8005c9a <__ascii_mbtowc+0x1a>
 8005c88:	b14b      	cbz	r3, 8005c9e <__ascii_mbtowc+0x1e>
 8005c8a:	7813      	ldrb	r3, [r2, #0]
 8005c8c:	600b      	str	r3, [r1, #0]
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	1c10      	adds	r0, r2, #0
 8005c92:	bf18      	it	ne
 8005c94:	2001      	movne	r0, #1
 8005c96:	b002      	add	sp, #8
 8005c98:	4770      	bx	lr
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	e7fb      	b.n	8005c96 <__ascii_mbtowc+0x16>
 8005c9e:	f06f 0001 	mvn.w	r0, #1
 8005ca2:	e7f8      	b.n	8005c96 <__ascii_mbtowc+0x16>

08005ca4 <__malloc_lock>:
 8005ca4:	4770      	bx	lr

08005ca6 <__malloc_unlock>:
 8005ca6:	4770      	bx	lr

08005ca8 <_read_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4c07      	ldr	r4, [pc, #28]	; (8005cc8 <_read_r+0x20>)
 8005cac:	4605      	mov	r5, r0
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f7fb fce0 	bl	800167c <_read>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_read_r+0x1e>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_read_r+0x1e>
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	200002dc 	.word	0x200002dc

08005ccc <__ascii_wctomb>:
 8005ccc:	b149      	cbz	r1, 8005ce2 <__ascii_wctomb+0x16>
 8005cce:	2aff      	cmp	r2, #255	; 0xff
 8005cd0:	bf85      	ittet	hi
 8005cd2:	238a      	movhi	r3, #138	; 0x8a
 8005cd4:	6003      	strhi	r3, [r0, #0]
 8005cd6:	700a      	strbls	r2, [r1, #0]
 8005cd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8005cdc:	bf98      	it	ls
 8005cde:	2001      	movls	r0, #1
 8005ce0:	4770      	bx	lr
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4770      	bx	lr
	...

08005ce8 <_fstat_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4c07      	ldr	r4, [pc, #28]	; (8005d08 <_fstat_r+0x20>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	f7fb fd06 	bl	8001706 <_fstat>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d102      	bne.n	8005d04 <_fstat_r+0x1c>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	b103      	cbz	r3, 8005d04 <_fstat_r+0x1c>
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	200002dc 	.word	0x200002dc

08005d0c <_isatty_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4c06      	ldr	r4, [pc, #24]	; (8005d28 <_isatty_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4605      	mov	r5, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	f7fb fd05 	bl	8001726 <_isatty>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_isatty_r+0x1a>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_isatty_r+0x1a>
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200002dc 	.word	0x200002dc
 8005d2c:	00000000 	.word	0x00000000

08005d30 <floor>:
 8005d30:	ec51 0b10 	vmov	r0, r1, d0
 8005d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005d3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005d40:	2e13      	cmp	r6, #19
 8005d42:	460c      	mov	r4, r1
 8005d44:	ee10 5a10 	vmov	r5, s0
 8005d48:	4680      	mov	r8, r0
 8005d4a:	dc34      	bgt.n	8005db6 <floor+0x86>
 8005d4c:	2e00      	cmp	r6, #0
 8005d4e:	da16      	bge.n	8005d7e <floor+0x4e>
 8005d50:	a335      	add	r3, pc, #212	; (adr r3, 8005e28 <floor+0xf8>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa faa1 	bl	800029c <__adddf3>
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f7fa fee3 	bl	8000b28 <__aeabi_dcmpgt>
 8005d62:	b148      	cbz	r0, 8005d78 <floor+0x48>
 8005d64:	2c00      	cmp	r4, #0
 8005d66:	da59      	bge.n	8005e1c <floor+0xec>
 8005d68:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d6c:	4a30      	ldr	r2, [pc, #192]	; (8005e30 <floor+0x100>)
 8005d6e:	432b      	orrs	r3, r5
 8005d70:	2500      	movs	r5, #0
 8005d72:	42ab      	cmp	r3, r5
 8005d74:	bf18      	it	ne
 8005d76:	4614      	movne	r4, r2
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	e025      	b.n	8005dca <floor+0x9a>
 8005d7e:	4f2d      	ldr	r7, [pc, #180]	; (8005e34 <floor+0x104>)
 8005d80:	4137      	asrs	r7, r6
 8005d82:	ea01 0307 	and.w	r3, r1, r7
 8005d86:	4303      	orrs	r3, r0
 8005d88:	d01f      	beq.n	8005dca <floor+0x9a>
 8005d8a:	a327      	add	r3, pc, #156	; (adr r3, 8005e28 <floor+0xf8>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa fa84 	bl	800029c <__adddf3>
 8005d94:	2200      	movs	r2, #0
 8005d96:	2300      	movs	r3, #0
 8005d98:	f7fa fec6 	bl	8000b28 <__aeabi_dcmpgt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d0eb      	beq.n	8005d78 <floor+0x48>
 8005da0:	2c00      	cmp	r4, #0
 8005da2:	bfbe      	ittt	lt
 8005da4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005da8:	fa43 f606 	asrlt.w	r6, r3, r6
 8005dac:	19a4      	addlt	r4, r4, r6
 8005dae:	ea24 0407 	bic.w	r4, r4, r7
 8005db2:	2500      	movs	r5, #0
 8005db4:	e7e0      	b.n	8005d78 <floor+0x48>
 8005db6:	2e33      	cmp	r6, #51	; 0x33
 8005db8:	dd0b      	ble.n	8005dd2 <floor+0xa2>
 8005dba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005dbe:	d104      	bne.n	8005dca <floor+0x9a>
 8005dc0:	ee10 2a10 	vmov	r2, s0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	f7fa fa69 	bl	800029c <__adddf3>
 8005dca:	ec41 0b10 	vmov	d0, r0, r1
 8005dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dd2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	fa23 f707 	lsr.w	r7, r3, r7
 8005dde:	4207      	tst	r7, r0
 8005de0:	d0f3      	beq.n	8005dca <floor+0x9a>
 8005de2:	a311      	add	r3, pc, #68	; (adr r3, 8005e28 <floor+0xf8>)
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f7fa fa58 	bl	800029c <__adddf3>
 8005dec:	2200      	movs	r2, #0
 8005dee:	2300      	movs	r3, #0
 8005df0:	f7fa fe9a 	bl	8000b28 <__aeabi_dcmpgt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d0bf      	beq.n	8005d78 <floor+0x48>
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	da02      	bge.n	8005e02 <floor+0xd2>
 8005dfc:	2e14      	cmp	r6, #20
 8005dfe:	d103      	bne.n	8005e08 <floor+0xd8>
 8005e00:	3401      	adds	r4, #1
 8005e02:	ea25 0507 	bic.w	r5, r5, r7
 8005e06:	e7b7      	b.n	8005d78 <floor+0x48>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005e0e:	fa03 f606 	lsl.w	r6, r3, r6
 8005e12:	4435      	add	r5, r6
 8005e14:	4545      	cmp	r5, r8
 8005e16:	bf38      	it	cc
 8005e18:	18e4      	addcc	r4, r4, r3
 8005e1a:	e7f2      	b.n	8005e02 <floor+0xd2>
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	462c      	mov	r4, r5
 8005e20:	e7aa      	b.n	8005d78 <floor+0x48>
 8005e22:	bf00      	nop
 8005e24:	f3af 8000 	nop.w
 8005e28:	8800759c 	.word	0x8800759c
 8005e2c:	7e37e43c 	.word	0x7e37e43c
 8005e30:	bff00000 	.word	0xbff00000
 8005e34:	000fffff 	.word	0x000fffff

08005e38 <sin>:
 8005e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e3a:	ec51 0b10 	vmov	r0, r1, d0
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <sin+0x88>)
 8005e40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e44:	4293      	cmp	r3, r2
 8005e46:	dc07      	bgt.n	8005e58 <sin+0x20>
 8005e48:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8005eb8 <sin+0x80>
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f000 fe37 	bl	8006ac0 <__kernel_sin>
 8005e52:	ec51 0b10 	vmov	r0, r1, d0
 8005e56:	e007      	b.n	8005e68 <sin+0x30>
 8005e58:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <sin+0x8c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	dd09      	ble.n	8005e72 <sin+0x3a>
 8005e5e:	ee10 2a10 	vmov	r2, s0
 8005e62:	460b      	mov	r3, r1
 8005e64:	f7fa fa18 	bl	8000298 <__aeabi_dsub>
 8005e68:	ec41 0b10 	vmov	d0, r0, r1
 8005e6c:	b005      	add	sp, #20
 8005e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e72:	4668      	mov	r0, sp
 8005e74:	f000 f828 	bl	8005ec8 <__ieee754_rem_pio2>
 8005e78:	f000 0003 	and.w	r0, r0, #3
 8005e7c:	2801      	cmp	r0, #1
 8005e7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e82:	ed9d 0b00 	vldr	d0, [sp]
 8005e86:	d004      	beq.n	8005e92 <sin+0x5a>
 8005e88:	2802      	cmp	r0, #2
 8005e8a:	d005      	beq.n	8005e98 <sin+0x60>
 8005e8c:	b970      	cbnz	r0, 8005eac <sin+0x74>
 8005e8e:	2001      	movs	r0, #1
 8005e90:	e7dd      	b.n	8005e4e <sin+0x16>
 8005e92:	f000 fa0d 	bl	80062b0 <__kernel_cos>
 8005e96:	e7dc      	b.n	8005e52 <sin+0x1a>
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f000 fe11 	bl	8006ac0 <__kernel_sin>
 8005e9e:	ec53 2b10 	vmov	r2, r3, d0
 8005ea2:	ee10 0a10 	vmov	r0, s0
 8005ea6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005eaa:	e7dd      	b.n	8005e68 <sin+0x30>
 8005eac:	f000 fa00 	bl	80062b0 <__kernel_cos>
 8005eb0:	e7f5      	b.n	8005e9e <sin+0x66>
 8005eb2:	bf00      	nop
 8005eb4:	f3af 8000 	nop.w
	...
 8005ec0:	3fe921fb 	.word	0x3fe921fb
 8005ec4:	7fefffff 	.word	0x7fefffff

08005ec8 <__ieee754_rem_pio2>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	ec57 6b10 	vmov	r6, r7, d0
 8005ed0:	4bc3      	ldr	r3, [pc, #780]	; (80061e0 <__ieee754_rem_pio2+0x318>)
 8005ed2:	b08d      	sub	sp, #52	; 0x34
 8005ed4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ed8:	4598      	cmp	r8, r3
 8005eda:	4604      	mov	r4, r0
 8005edc:	9704      	str	r7, [sp, #16]
 8005ede:	dc07      	bgt.n	8005ef0 <__ieee754_rem_pio2+0x28>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	ed84 0b00 	vstr	d0, [r4]
 8005ee8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005eec:	2500      	movs	r5, #0
 8005eee:	e027      	b.n	8005f40 <__ieee754_rem_pio2+0x78>
 8005ef0:	4bbc      	ldr	r3, [pc, #752]	; (80061e4 <__ieee754_rem_pio2+0x31c>)
 8005ef2:	4598      	cmp	r8, r3
 8005ef4:	dc75      	bgt.n	8005fe2 <__ieee754_rem_pio2+0x11a>
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	4dbb      	ldr	r5, [pc, #748]	; (80061e8 <__ieee754_rem_pio2+0x320>)
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	ee10 0a10 	vmov	r0, s0
 8005f00:	a3a9      	add	r3, pc, #676	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x2e0>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	4639      	mov	r1, r7
 8005f08:	dd36      	ble.n	8005f78 <__ieee754_rem_pio2+0xb0>
 8005f0a:	f7fa f9c5 	bl	8000298 <__aeabi_dsub>
 8005f0e:	45a8      	cmp	r8, r5
 8005f10:	4606      	mov	r6, r0
 8005f12:	460f      	mov	r7, r1
 8005f14:	d018      	beq.n	8005f48 <__ieee754_rem_pio2+0x80>
 8005f16:	a3a6      	add	r3, pc, #664	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2e8>)
 8005f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1c:	f7fa f9bc 	bl	8000298 <__aeabi_dsub>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	e9c4 2300 	strd	r2, r3, [r4]
 8005f28:	4630      	mov	r0, r6
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa f9b4 	bl	8000298 <__aeabi_dsub>
 8005f30:	a39f      	add	r3, pc, #636	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2e8>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa f9af 	bl	8000298 <__aeabi_dsub>
 8005f3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f3e:	2501      	movs	r5, #1
 8005f40:	4628      	mov	r0, r5
 8005f42:	b00d      	add	sp, #52	; 0x34
 8005f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	a39b      	add	r3, pc, #620	; (adr r3, 80061b8 <__ieee754_rem_pio2+0x2f0>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f9a3 	bl	8000298 <__aeabi_dsub>
 8005f52:	a39b      	add	r3, pc, #620	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x2f8>)
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	4606      	mov	r6, r0
 8005f5a:	460f      	mov	r7, r1
 8005f5c:	f7fa f99c 	bl	8000298 <__aeabi_dsub>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	e9c4 2300 	strd	r2, r3, [r4]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa f994 	bl	8000298 <__aeabi_dsub>
 8005f70:	a393      	add	r3, pc, #588	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x2f8>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	e7de      	b.n	8005f36 <__ieee754_rem_pio2+0x6e>
 8005f78:	f7fa f990 	bl	800029c <__adddf3>
 8005f7c:	45a8      	cmp	r8, r5
 8005f7e:	4606      	mov	r6, r0
 8005f80:	460f      	mov	r7, r1
 8005f82:	d016      	beq.n	8005fb2 <__ieee754_rem_pio2+0xea>
 8005f84:	a38a      	add	r3, pc, #552	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2e8>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa f987 	bl	800029c <__adddf3>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	e9c4 2300 	strd	r2, r3, [r4]
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa f97d 	bl	8000298 <__aeabi_dsub>
 8005f9e:	a384      	add	r3, pc, #528	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2e8>)
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f7fa f97a 	bl	800029c <__adddf3>
 8005fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8005fac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fb0:	e7c6      	b.n	8005f40 <__ieee754_rem_pio2+0x78>
 8005fb2:	a381      	add	r3, pc, #516	; (adr r3, 80061b8 <__ieee754_rem_pio2+0x2f0>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa f970 	bl	800029c <__adddf3>
 8005fbc:	a380      	add	r3, pc, #512	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x2f8>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	460f      	mov	r7, r1
 8005fc6:	f7fa f969 	bl	800029c <__adddf3>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	e9c4 2300 	strd	r2, r3, [r4]
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	f7fa f95f 	bl	8000298 <__aeabi_dsub>
 8005fda:	a379      	add	r3, pc, #484	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x2f8>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	e7e0      	b.n	8005fa4 <__ieee754_rem_pio2+0xdc>
 8005fe2:	4b82      	ldr	r3, [pc, #520]	; (80061ec <__ieee754_rem_pio2+0x324>)
 8005fe4:	4598      	cmp	r8, r3
 8005fe6:	f300 80d0 	bgt.w	800618a <__ieee754_rem_pio2+0x2c2>
 8005fea:	f000 fe23 	bl	8006c34 <fabs>
 8005fee:	ec57 6b10 	vmov	r6, r7, d0
 8005ff2:	ee10 0a10 	vmov	r0, s0
 8005ff6:	a374      	add	r3, pc, #464	; (adr r3, 80061c8 <__ieee754_rem_pio2+0x300>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa fb03 	bl	8000608 <__aeabi_dmul>
 8006002:	2200      	movs	r2, #0
 8006004:	4b7a      	ldr	r3, [pc, #488]	; (80061f0 <__ieee754_rem_pio2+0x328>)
 8006006:	f7fa f949 	bl	800029c <__adddf3>
 800600a:	f7fa fdad 	bl	8000b68 <__aeabi_d2iz>
 800600e:	4605      	mov	r5, r0
 8006010:	f7fa fa90 	bl	8000534 <__aeabi_i2d>
 8006014:	a364      	add	r3, pc, #400	; (adr r3, 80061a8 <__ieee754_rem_pio2+0x2e0>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800601e:	f7fa faf3 	bl	8000608 <__aeabi_dmul>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4630      	mov	r0, r6
 8006028:	4639      	mov	r1, r7
 800602a:	f7fa f935 	bl	8000298 <__aeabi_dsub>
 800602e:	a360      	add	r3, pc, #384	; (adr r3, 80061b0 <__ieee754_rem_pio2+0x2e8>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	4682      	mov	sl, r0
 8006036:	468b      	mov	fp, r1
 8006038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603c:	f7fa fae4 	bl	8000608 <__aeabi_dmul>
 8006040:	2d1f      	cmp	r5, #31
 8006042:	4606      	mov	r6, r0
 8006044:	460f      	mov	r7, r1
 8006046:	dc0c      	bgt.n	8006062 <__ieee754_rem_pio2+0x19a>
 8006048:	1e6a      	subs	r2, r5, #1
 800604a:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <__ieee754_rem_pio2+0x32c>)
 800604c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006050:	4543      	cmp	r3, r8
 8006052:	d006      	beq.n	8006062 <__ieee754_rem_pio2+0x19a>
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	4650      	mov	r0, sl
 800605a:	4659      	mov	r1, fp
 800605c:	f7fa f91c 	bl	8000298 <__aeabi_dsub>
 8006060:	e00e      	b.n	8006080 <__ieee754_rem_pio2+0x1b8>
 8006062:	4632      	mov	r2, r6
 8006064:	463b      	mov	r3, r7
 8006066:	4650      	mov	r0, sl
 8006068:	4659      	mov	r1, fp
 800606a:	f7fa f915 	bl	8000298 <__aeabi_dsub>
 800606e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	9a05      	ldr	r2, [sp, #20]
 8006076:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b10      	cmp	r3, #16
 800607e:	dc02      	bgt.n	8006086 <__ieee754_rem_pio2+0x1be>
 8006080:	e9c4 0100 	strd	r0, r1, [r4]
 8006084:	e039      	b.n	80060fa <__ieee754_rem_pio2+0x232>
 8006086:	a34c      	add	r3, pc, #304	; (adr r3, 80061b8 <__ieee754_rem_pio2+0x2f0>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006090:	f7fa faba 	bl	8000608 <__aeabi_dmul>
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa f8fa 	bl	8000298 <__aeabi_dsub>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4680      	mov	r8, r0
 80060aa:	4689      	mov	r9, r1
 80060ac:	4650      	mov	r0, sl
 80060ae:	4659      	mov	r1, fp
 80060b0:	f7fa f8f2 	bl	8000298 <__aeabi_dsub>
 80060b4:	4632      	mov	r2, r6
 80060b6:	463b      	mov	r3, r7
 80060b8:	f7fa f8ee 	bl	8000298 <__aeabi_dsub>
 80060bc:	a340      	add	r3, pc, #256	; (adr r3, 80061c0 <__ieee754_rem_pio2+0x2f8>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ca:	f7fa fa9d 	bl	8000608 <__aeabi_dmul>
 80060ce:	4632      	mov	r2, r6
 80060d0:	463b      	mov	r3, r7
 80060d2:	f7fa f8e1 	bl	8000298 <__aeabi_dsub>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4606      	mov	r6, r0
 80060dc:	460f      	mov	r7, r1
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f7fa f8d9 	bl	8000298 <__aeabi_dsub>
 80060e6:	9a05      	ldr	r2, [sp, #20]
 80060e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b31      	cmp	r3, #49	; 0x31
 80060f0:	dc20      	bgt.n	8006134 <__ieee754_rem_pio2+0x26c>
 80060f2:	e9c4 0100 	strd	r0, r1, [r4]
 80060f6:	46c2      	mov	sl, r8
 80060f8:	46cb      	mov	fp, r9
 80060fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80060fe:	4650      	mov	r0, sl
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	4659      	mov	r1, fp
 8006106:	f7fa f8c7 	bl	8000298 <__aeabi_dsub>
 800610a:	463b      	mov	r3, r7
 800610c:	4632      	mov	r2, r6
 800610e:	f7fa f8c3 	bl	8000298 <__aeabi_dsub>
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800611a:	f6bf af11 	bge.w	8005f40 <__ieee754_rem_pio2+0x78>
 800611e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	f8c4 8000 	str.w	r8, [r4]
 8006128:	60a0      	str	r0, [r4, #8]
 800612a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800612e:	60e3      	str	r3, [r4, #12]
 8006130:	426d      	negs	r5, r5
 8006132:	e705      	b.n	8005f40 <__ieee754_rem_pio2+0x78>
 8006134:	a326      	add	r3, pc, #152	; (adr r3, 80061d0 <__ieee754_rem_pio2+0x308>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800613e:	f7fa fa63 	bl	8000608 <__aeabi_dmul>
 8006142:	4606      	mov	r6, r0
 8006144:	460f      	mov	r7, r1
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa f8a3 	bl	8000298 <__aeabi_dsub>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4682      	mov	sl, r0
 8006158:	468b      	mov	fp, r1
 800615a:	4640      	mov	r0, r8
 800615c:	4649      	mov	r1, r9
 800615e:	f7fa f89b 	bl	8000298 <__aeabi_dsub>
 8006162:	4632      	mov	r2, r6
 8006164:	463b      	mov	r3, r7
 8006166:	f7fa f897 	bl	8000298 <__aeabi_dsub>
 800616a:	a31b      	add	r3, pc, #108	; (adr r3, 80061d8 <__ieee754_rem_pio2+0x310>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	4606      	mov	r6, r0
 8006172:	460f      	mov	r7, r1
 8006174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006178:	f7fa fa46 	bl	8000608 <__aeabi_dmul>
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	f7fa f88a 	bl	8000298 <__aeabi_dsub>
 8006184:	4606      	mov	r6, r0
 8006186:	460f      	mov	r7, r1
 8006188:	e764      	b.n	8006054 <__ieee754_rem_pio2+0x18c>
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <__ieee754_rem_pio2+0x330>)
 800618c:	4598      	cmp	r8, r3
 800618e:	dd35      	ble.n	80061fc <__ieee754_rem_pio2+0x334>
 8006190:	ee10 2a10 	vmov	r2, s0
 8006194:	463b      	mov	r3, r7
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f7fa f87d 	bl	8000298 <__aeabi_dsub>
 800619e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80061a2:	e9c4 0100 	strd	r0, r1, [r4]
 80061a6:	e6a1      	b.n	8005eec <__ieee754_rem_pio2+0x24>
 80061a8:	54400000 	.word	0x54400000
 80061ac:	3ff921fb 	.word	0x3ff921fb
 80061b0:	1a626331 	.word	0x1a626331
 80061b4:	3dd0b461 	.word	0x3dd0b461
 80061b8:	1a600000 	.word	0x1a600000
 80061bc:	3dd0b461 	.word	0x3dd0b461
 80061c0:	2e037073 	.word	0x2e037073
 80061c4:	3ba3198a 	.word	0x3ba3198a
 80061c8:	6dc9c883 	.word	0x6dc9c883
 80061cc:	3fe45f30 	.word	0x3fe45f30
 80061d0:	2e000000 	.word	0x2e000000
 80061d4:	3ba3198a 	.word	0x3ba3198a
 80061d8:	252049c1 	.word	0x252049c1
 80061dc:	397b839a 	.word	0x397b839a
 80061e0:	3fe921fb 	.word	0x3fe921fb
 80061e4:	4002d97b 	.word	0x4002d97b
 80061e8:	3ff921fb 	.word	0x3ff921fb
 80061ec:	413921fb 	.word	0x413921fb
 80061f0:	3fe00000 	.word	0x3fe00000
 80061f4:	08007050 	.word	0x08007050
 80061f8:	7fefffff 	.word	0x7fefffff
 80061fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006200:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006204:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006208:	4630      	mov	r0, r6
 800620a:	460f      	mov	r7, r1
 800620c:	f7fa fcac 	bl	8000b68 <__aeabi_d2iz>
 8006210:	f7fa f990 	bl	8000534 <__aeabi_i2d>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006220:	f7fa f83a 	bl	8000298 <__aeabi_dsub>
 8006224:	2200      	movs	r2, #0
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <__ieee754_rem_pio2+0x3dc>)
 8006228:	f7fa f9ee 	bl	8000608 <__aeabi_dmul>
 800622c:	460f      	mov	r7, r1
 800622e:	4606      	mov	r6, r0
 8006230:	f7fa fc9a 	bl	8000b68 <__aeabi_d2iz>
 8006234:	f7fa f97e 	bl	8000534 <__aeabi_i2d>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4630      	mov	r0, r6
 800623e:	4639      	mov	r1, r7
 8006240:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006244:	f7fa f828 	bl	8000298 <__aeabi_dsub>
 8006248:	2200      	movs	r2, #0
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <__ieee754_rem_pio2+0x3dc>)
 800624c:	f7fa f9dc 	bl	8000608 <__aeabi_dmul>
 8006250:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006254:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006258:	f04f 0803 	mov.w	r8, #3
 800625c:	2600      	movs	r6, #0
 800625e:	2700      	movs	r7, #0
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006268:	f108 3aff 	add.w	sl, r8, #4294967295
 800626c:	f7fa fc34 	bl	8000ad8 <__aeabi_dcmpeq>
 8006270:	b9b0      	cbnz	r0, 80062a0 <__ieee754_rem_pio2+0x3d8>
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <__ieee754_rem_pio2+0x3e0>)
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	2302      	movs	r3, #2
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	462a      	mov	r2, r5
 800627c:	4643      	mov	r3, r8
 800627e:	4621      	mov	r1, r4
 8006280:	a806      	add	r0, sp, #24
 8006282:	f000 f8dd 	bl	8006440 <__kernel_rem_pio2>
 8006286:	9b04      	ldr	r3, [sp, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	4605      	mov	r5, r0
 800628c:	f6bf ae58 	bge.w	8005f40 <__ieee754_rem_pio2+0x78>
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	68e3      	ldr	r3, [r4, #12]
 800629a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800629e:	e746      	b.n	800612e <__ieee754_rem_pio2+0x266>
 80062a0:	46d0      	mov	r8, sl
 80062a2:	e7dd      	b.n	8006260 <__ieee754_rem_pio2+0x398>
 80062a4:	41700000 	.word	0x41700000
 80062a8:	080070d0 	.word	0x080070d0
 80062ac:	00000000 	.word	0x00000000

080062b0 <__kernel_cos>:
 80062b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	ec59 8b10 	vmov	r8, r9, d0
 80062b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80062bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80062c0:	ed2d 8b02 	vpush	{d8}
 80062c4:	eeb0 8a41 	vmov.f32	s16, s2
 80062c8:	eef0 8a61 	vmov.f32	s17, s3
 80062cc:	da07      	bge.n	80062de <__kernel_cos+0x2e>
 80062ce:	ee10 0a10 	vmov	r0, s0
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7fa fc48 	bl	8000b68 <__aeabi_d2iz>
 80062d8:	2800      	cmp	r0, #0
 80062da:	f000 8089 	beq.w	80063f0 <__kernel_cos+0x140>
 80062de:	4642      	mov	r2, r8
 80062e0:	464b      	mov	r3, r9
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa f98f 	bl	8000608 <__aeabi_dmul>
 80062ea:	2200      	movs	r2, #0
 80062ec:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <__kernel_cos+0x178>)
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	f7fa f989 	bl	8000608 <__aeabi_dmul>
 80062f6:	a340      	add	r3, pc, #256	; (adr r3, 80063f8 <__kernel_cos+0x148>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	4682      	mov	sl, r0
 80062fe:	468b      	mov	fp, r1
 8006300:	4620      	mov	r0, r4
 8006302:	4629      	mov	r1, r5
 8006304:	f7fa f980 	bl	8000608 <__aeabi_dmul>
 8006308:	a33d      	add	r3, pc, #244	; (adr r3, 8006400 <__kernel_cos+0x150>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7f9 ffc5 	bl	800029c <__adddf3>
 8006312:	4622      	mov	r2, r4
 8006314:	462b      	mov	r3, r5
 8006316:	f7fa f977 	bl	8000608 <__aeabi_dmul>
 800631a:	a33b      	add	r3, pc, #236	; (adr r3, 8006408 <__kernel_cos+0x158>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7f9 ffba 	bl	8000298 <__aeabi_dsub>
 8006324:	4622      	mov	r2, r4
 8006326:	462b      	mov	r3, r5
 8006328:	f7fa f96e 	bl	8000608 <__aeabi_dmul>
 800632c:	a338      	add	r3, pc, #224	; (adr r3, 8006410 <__kernel_cos+0x160>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7f9 ffb3 	bl	800029c <__adddf3>
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	f7fa f965 	bl	8000608 <__aeabi_dmul>
 800633e:	a336      	add	r3, pc, #216	; (adr r3, 8006418 <__kernel_cos+0x168>)
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f7f9 ffa8 	bl	8000298 <__aeabi_dsub>
 8006348:	4622      	mov	r2, r4
 800634a:	462b      	mov	r3, r5
 800634c:	f7fa f95c 	bl	8000608 <__aeabi_dmul>
 8006350:	a333      	add	r3, pc, #204	; (adr r3, 8006420 <__kernel_cos+0x170>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ffa1 	bl	800029c <__adddf3>
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	f7fa f953 	bl	8000608 <__aeabi_dmul>
 8006362:	4622      	mov	r2, r4
 8006364:	462b      	mov	r3, r5
 8006366:	f7fa f94f 	bl	8000608 <__aeabi_dmul>
 800636a:	ec53 2b18 	vmov	r2, r3, d8
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	4640      	mov	r0, r8
 8006374:	4649      	mov	r1, r9
 8006376:	f7fa f947 	bl	8000608 <__aeabi_dmul>
 800637a:	460b      	mov	r3, r1
 800637c:	4602      	mov	r2, r0
 800637e:	4629      	mov	r1, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f7f9 ff89 	bl	8000298 <__aeabi_dsub>
 8006386:	4b29      	ldr	r3, [pc, #164]	; (800642c <__kernel_cos+0x17c>)
 8006388:	429e      	cmp	r6, r3
 800638a:	4680      	mov	r8, r0
 800638c:	4689      	mov	r9, r1
 800638e:	dc11      	bgt.n	80063b4 <__kernel_cos+0x104>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4650      	mov	r0, sl
 8006396:	4659      	mov	r1, fp
 8006398:	f7f9 ff7e 	bl	8000298 <__aeabi_dsub>
 800639c:	460b      	mov	r3, r1
 800639e:	4924      	ldr	r1, [pc, #144]	; (8006430 <__kernel_cos+0x180>)
 80063a0:	4602      	mov	r2, r0
 80063a2:	2000      	movs	r0, #0
 80063a4:	f7f9 ff78 	bl	8000298 <__aeabi_dsub>
 80063a8:	ecbd 8b02 	vpop	{d8}
 80063ac:	ec41 0b10 	vmov	d0, r0, r1
 80063b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b4:	4b1f      	ldr	r3, [pc, #124]	; (8006434 <__kernel_cos+0x184>)
 80063b6:	491e      	ldr	r1, [pc, #120]	; (8006430 <__kernel_cos+0x180>)
 80063b8:	429e      	cmp	r6, r3
 80063ba:	bfcc      	ite	gt
 80063bc:	4d1e      	ldrgt	r5, [pc, #120]	; (8006438 <__kernel_cos+0x188>)
 80063be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80063c2:	2400      	movs	r4, #0
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	2000      	movs	r0, #0
 80063ca:	f7f9 ff65 	bl	8000298 <__aeabi_dsub>
 80063ce:	4622      	mov	r2, r4
 80063d0:	4606      	mov	r6, r0
 80063d2:	460f      	mov	r7, r1
 80063d4:	462b      	mov	r3, r5
 80063d6:	4650      	mov	r0, sl
 80063d8:	4659      	mov	r1, fp
 80063da:	f7f9 ff5d 	bl	8000298 <__aeabi_dsub>
 80063de:	4642      	mov	r2, r8
 80063e0:	464b      	mov	r3, r9
 80063e2:	f7f9 ff59 	bl	8000298 <__aeabi_dsub>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4630      	mov	r0, r6
 80063ec:	4639      	mov	r1, r7
 80063ee:	e7d9      	b.n	80063a4 <__kernel_cos+0xf4>
 80063f0:	2000      	movs	r0, #0
 80063f2:	490f      	ldr	r1, [pc, #60]	; (8006430 <__kernel_cos+0x180>)
 80063f4:	e7d8      	b.n	80063a8 <__kernel_cos+0xf8>
 80063f6:	bf00      	nop
 80063f8:	be8838d4 	.word	0xbe8838d4
 80063fc:	bda8fae9 	.word	0xbda8fae9
 8006400:	bdb4b1c4 	.word	0xbdb4b1c4
 8006404:	3e21ee9e 	.word	0x3e21ee9e
 8006408:	809c52ad 	.word	0x809c52ad
 800640c:	3e927e4f 	.word	0x3e927e4f
 8006410:	19cb1590 	.word	0x19cb1590
 8006414:	3efa01a0 	.word	0x3efa01a0
 8006418:	16c15177 	.word	0x16c15177
 800641c:	3f56c16c 	.word	0x3f56c16c
 8006420:	5555554c 	.word	0x5555554c
 8006424:	3fa55555 	.word	0x3fa55555
 8006428:	3fe00000 	.word	0x3fe00000
 800642c:	3fd33332 	.word	0x3fd33332
 8006430:	3ff00000 	.word	0x3ff00000
 8006434:	3fe90000 	.word	0x3fe90000
 8006438:	3fd20000 	.word	0x3fd20000
 800643c:	00000000 	.word	0x00000000

08006440 <__kernel_rem_pio2>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	ed2d 8b02 	vpush	{d8}
 8006448:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800644c:	1ed4      	subs	r4, r2, #3
 800644e:	9308      	str	r3, [sp, #32]
 8006450:	9101      	str	r1, [sp, #4]
 8006452:	4bc5      	ldr	r3, [pc, #788]	; (8006768 <__kernel_rem_pio2+0x328>)
 8006454:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006456:	9009      	str	r0, [sp, #36]	; 0x24
 8006458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	9b08      	ldr	r3, [sp, #32]
 8006460:	3b01      	subs	r3, #1
 8006462:	9307      	str	r3, [sp, #28]
 8006464:	2318      	movs	r3, #24
 8006466:	fb94 f4f3 	sdiv	r4, r4, r3
 800646a:	f06f 0317 	mvn.w	r3, #23
 800646e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006472:	fb04 3303 	mla	r3, r4, r3, r3
 8006476:	eb03 0a02 	add.w	sl, r3, r2
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	9a07      	ldr	r2, [sp, #28]
 800647e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006758 <__kernel_rem_pio2+0x318>
 8006482:	eb03 0802 	add.w	r8, r3, r2
 8006486:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006488:	1aa7      	subs	r7, r4, r2
 800648a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800648e:	ae22      	add	r6, sp, #136	; 0x88
 8006490:	2500      	movs	r5, #0
 8006492:	4545      	cmp	r5, r8
 8006494:	dd13      	ble.n	80064be <__kernel_rem_pio2+0x7e>
 8006496:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8006758 <__kernel_rem_pio2+0x318>
 800649a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800649e:	2600      	movs	r6, #0
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	429e      	cmp	r6, r3
 80064a4:	dc32      	bgt.n	800650c <__kernel_rem_pio2+0xcc>
 80064a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	199d      	adds	r5, r3, r6
 80064ae:	ab22      	add	r3, sp, #136	; 0x88
 80064b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80064b4:	9306      	str	r3, [sp, #24]
 80064b6:	ec59 8b18 	vmov	r8, r9, d8
 80064ba:	2700      	movs	r7, #0
 80064bc:	e01f      	b.n	80064fe <__kernel_rem_pio2+0xbe>
 80064be:	42ef      	cmn	r7, r5
 80064c0:	d407      	bmi.n	80064d2 <__kernel_rem_pio2+0x92>
 80064c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80064c6:	f7fa f835 	bl	8000534 <__aeabi_i2d>
 80064ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80064ce:	3501      	adds	r5, #1
 80064d0:	e7df      	b.n	8006492 <__kernel_rem_pio2+0x52>
 80064d2:	ec51 0b18 	vmov	r0, r1, d8
 80064d6:	e7f8      	b.n	80064ca <__kernel_rem_pio2+0x8a>
 80064d8:	9906      	ldr	r1, [sp, #24]
 80064da:	9d02      	ldr	r5, [sp, #8]
 80064dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80064e0:	9106      	str	r1, [sp, #24]
 80064e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80064e6:	9502      	str	r5, [sp, #8]
 80064e8:	f7fa f88e 	bl	8000608 <__aeabi_dmul>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4640      	mov	r0, r8
 80064f2:	4649      	mov	r1, r9
 80064f4:	f7f9 fed2 	bl	800029c <__adddf3>
 80064f8:	3701      	adds	r7, #1
 80064fa:	4680      	mov	r8, r0
 80064fc:	4689      	mov	r9, r1
 80064fe:	9b07      	ldr	r3, [sp, #28]
 8006500:	429f      	cmp	r7, r3
 8006502:	dde9      	ble.n	80064d8 <__kernel_rem_pio2+0x98>
 8006504:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006508:	3601      	adds	r6, #1
 800650a:	e7c9      	b.n	80064a0 <__kernel_rem_pio2+0x60>
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	aa0e      	add	r2, sp, #56	; 0x38
 8006510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006514:	930c      	str	r3, [sp, #48]	; 0x30
 8006516:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006518:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800651c:	9c04      	ldr	r4, [sp, #16]
 800651e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006520:	ab9a      	add	r3, sp, #616	; 0x268
 8006522:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8006526:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800652a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800652e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8006532:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006536:	ab9a      	add	r3, sp, #616	; 0x268
 8006538:	445b      	add	r3, fp
 800653a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800653e:	2500      	movs	r5, #0
 8006540:	1b63      	subs	r3, r4, r5
 8006542:	2b00      	cmp	r3, #0
 8006544:	dc78      	bgt.n	8006638 <__kernel_rem_pio2+0x1f8>
 8006546:	4650      	mov	r0, sl
 8006548:	ec49 8b10 	vmov	d0, r8, r9
 800654c:	f000 fb7c 	bl	8006c48 <scalbn>
 8006550:	ec57 6b10 	vmov	r6, r7, d0
 8006554:	2200      	movs	r2, #0
 8006556:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800655a:	ee10 0a10 	vmov	r0, s0
 800655e:	4639      	mov	r1, r7
 8006560:	f7fa f852 	bl	8000608 <__aeabi_dmul>
 8006564:	ec41 0b10 	vmov	d0, r0, r1
 8006568:	f7ff fbe2 	bl	8005d30 <floor>
 800656c:	2200      	movs	r2, #0
 800656e:	ec51 0b10 	vmov	r0, r1, d0
 8006572:	4b7e      	ldr	r3, [pc, #504]	; (800676c <__kernel_rem_pio2+0x32c>)
 8006574:	f7fa f848 	bl	8000608 <__aeabi_dmul>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4630      	mov	r0, r6
 800657e:	4639      	mov	r1, r7
 8006580:	f7f9 fe8a 	bl	8000298 <__aeabi_dsub>
 8006584:	460f      	mov	r7, r1
 8006586:	4606      	mov	r6, r0
 8006588:	f7fa faee 	bl	8000b68 <__aeabi_d2iz>
 800658c:	9006      	str	r0, [sp, #24]
 800658e:	f7f9 ffd1 	bl	8000534 <__aeabi_i2d>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4630      	mov	r0, r6
 8006598:	4639      	mov	r1, r7
 800659a:	f7f9 fe7d 	bl	8000298 <__aeabi_dsub>
 800659e:	f1ba 0f00 	cmp.w	sl, #0
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	dd6c      	ble.n	8006682 <__kernel_rem_pio2+0x242>
 80065a8:	1e62      	subs	r2, r4, #1
 80065aa:	ab0e      	add	r3, sp, #56	; 0x38
 80065ac:	f1ca 0118 	rsb	r1, sl, #24
 80065b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80065b4:	9d06      	ldr	r5, [sp, #24]
 80065b6:	fa40 f301 	asr.w	r3, r0, r1
 80065ba:	441d      	add	r5, r3
 80065bc:	408b      	lsls	r3, r1
 80065be:	1ac0      	subs	r0, r0, r3
 80065c0:	ab0e      	add	r3, sp, #56	; 0x38
 80065c2:	9506      	str	r5, [sp, #24]
 80065c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80065c8:	f1ca 0317 	rsb	r3, sl, #23
 80065cc:	fa40 f303 	asr.w	r3, r0, r3
 80065d0:	9302      	str	r3, [sp, #8]
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd62      	ble.n	800669e <__kernel_rem_pio2+0x25e>
 80065d8:	9b06      	ldr	r3, [sp, #24]
 80065da:	2200      	movs	r2, #0
 80065dc:	3301      	adds	r3, #1
 80065de:	9306      	str	r3, [sp, #24]
 80065e0:	4615      	mov	r5, r2
 80065e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80065e6:	4294      	cmp	r4, r2
 80065e8:	f300 8095 	bgt.w	8006716 <__kernel_rem_pio2+0x2d6>
 80065ec:	f1ba 0f00 	cmp.w	sl, #0
 80065f0:	dd07      	ble.n	8006602 <__kernel_rem_pio2+0x1c2>
 80065f2:	f1ba 0f01 	cmp.w	sl, #1
 80065f6:	f000 80a2 	beq.w	800673e <__kernel_rem_pio2+0x2fe>
 80065fa:	f1ba 0f02 	cmp.w	sl, #2
 80065fe:	f000 80c1 	beq.w	8006784 <__kernel_rem_pio2+0x344>
 8006602:	9b02      	ldr	r3, [sp, #8]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d14a      	bne.n	800669e <__kernel_rem_pio2+0x25e>
 8006608:	4632      	mov	r2, r6
 800660a:	463b      	mov	r3, r7
 800660c:	2000      	movs	r0, #0
 800660e:	4958      	ldr	r1, [pc, #352]	; (8006770 <__kernel_rem_pio2+0x330>)
 8006610:	f7f9 fe42 	bl	8000298 <__aeabi_dsub>
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	2d00      	cmp	r5, #0
 800661a:	d040      	beq.n	800669e <__kernel_rem_pio2+0x25e>
 800661c:	4650      	mov	r0, sl
 800661e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006760 <__kernel_rem_pio2+0x320>
 8006622:	f000 fb11 	bl	8006c48 <scalbn>
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	ec53 2b10 	vmov	r2, r3, d0
 800662e:	f7f9 fe33 	bl	8000298 <__aeabi_dsub>
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	e032      	b.n	800669e <__kernel_rem_pio2+0x25e>
 8006638:	2200      	movs	r2, #0
 800663a:	4b4e      	ldr	r3, [pc, #312]	; (8006774 <__kernel_rem_pio2+0x334>)
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7f9 ffe2 	bl	8000608 <__aeabi_dmul>
 8006644:	f7fa fa90 	bl	8000b68 <__aeabi_d2iz>
 8006648:	f7f9 ff74 	bl	8000534 <__aeabi_i2d>
 800664c:	2200      	movs	r2, #0
 800664e:	4b4a      	ldr	r3, [pc, #296]	; (8006778 <__kernel_rem_pio2+0x338>)
 8006650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006654:	f7f9 ffd8 	bl	8000608 <__aeabi_dmul>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7f9 fe1a 	bl	8000298 <__aeabi_dsub>
 8006664:	f7fa fa80 	bl	8000b68 <__aeabi_d2iz>
 8006668:	ab0e      	add	r3, sp, #56	; 0x38
 800666a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800666e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006676:	f7f9 fe11 	bl	800029c <__adddf3>
 800667a:	3501      	adds	r5, #1
 800667c:	4680      	mov	r8, r0
 800667e:	4689      	mov	r9, r1
 8006680:	e75e      	b.n	8006540 <__kernel_rem_pio2+0x100>
 8006682:	d105      	bne.n	8006690 <__kernel_rem_pio2+0x250>
 8006684:	1e63      	subs	r3, r4, #1
 8006686:	aa0e      	add	r2, sp, #56	; 0x38
 8006688:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800668c:	15c3      	asrs	r3, r0, #23
 800668e:	e79f      	b.n	80065d0 <__kernel_rem_pio2+0x190>
 8006690:	2200      	movs	r2, #0
 8006692:	4b3a      	ldr	r3, [pc, #232]	; (800677c <__kernel_rem_pio2+0x33c>)
 8006694:	f7fa fa3e 	bl	8000b14 <__aeabi_dcmpge>
 8006698:	2800      	cmp	r0, #0
 800669a:	d139      	bne.n	8006710 <__kernel_rem_pio2+0x2d0>
 800669c:	9002      	str	r0, [sp, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7fa fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f000 80c7 	beq.w	800683e <__kernel_rem_pio2+0x3fe>
 80066b0:	1e65      	subs	r5, r4, #1
 80066b2:	462b      	mov	r3, r5
 80066b4:	2200      	movs	r2, #0
 80066b6:	9904      	ldr	r1, [sp, #16]
 80066b8:	428b      	cmp	r3, r1
 80066ba:	da6a      	bge.n	8006792 <__kernel_rem_pio2+0x352>
 80066bc:	2a00      	cmp	r2, #0
 80066be:	f000 8088 	beq.w	80067d2 <__kernel_rem_pio2+0x392>
 80066c2:	ab0e      	add	r3, sp, #56	; 0x38
 80066c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80066c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80b4 	beq.w	800683a <__kernel_rem_pio2+0x3fa>
 80066d2:	4650      	mov	r0, sl
 80066d4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8006760 <__kernel_rem_pio2+0x320>
 80066d8:	f000 fab6 	bl	8006c48 <scalbn>
 80066dc:	00ec      	lsls	r4, r5, #3
 80066de:	ab72      	add	r3, sp, #456	; 0x1c8
 80066e0:	191e      	adds	r6, r3, r4
 80066e2:	ec59 8b10 	vmov	r8, r9, d0
 80066e6:	f106 0a08 	add.w	sl, r6, #8
 80066ea:	462f      	mov	r7, r5
 80066ec:	2f00      	cmp	r7, #0
 80066ee:	f280 80df 	bge.w	80068b0 <__kernel_rem_pio2+0x470>
 80066f2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8006758 <__kernel_rem_pio2+0x318>
 80066f6:	f04f 0a00 	mov.w	sl, #0
 80066fa:	eba5 030a 	sub.w	r3, r5, sl
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f2c0 810a 	blt.w	8006918 <__kernel_rem_pio2+0x4d8>
 8006704:	f8df b078 	ldr.w	fp, [pc, #120]	; 8006780 <__kernel_rem_pio2+0x340>
 8006708:	ec59 8b18 	vmov	r8, r9, d8
 800670c:	2700      	movs	r7, #0
 800670e:	e0f5      	b.n	80068fc <__kernel_rem_pio2+0x4bc>
 8006710:	2302      	movs	r3, #2
 8006712:	9302      	str	r3, [sp, #8]
 8006714:	e760      	b.n	80065d8 <__kernel_rem_pio2+0x198>
 8006716:	ab0e      	add	r3, sp, #56	; 0x38
 8006718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671c:	b94d      	cbnz	r5, 8006732 <__kernel_rem_pio2+0x2f2>
 800671e:	b12b      	cbz	r3, 800672c <__kernel_rem_pio2+0x2ec>
 8006720:	a80e      	add	r0, sp, #56	; 0x38
 8006722:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006726:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800672a:	2301      	movs	r3, #1
 800672c:	3201      	adds	r2, #1
 800672e:	461d      	mov	r5, r3
 8006730:	e759      	b.n	80065e6 <__kernel_rem_pio2+0x1a6>
 8006732:	a80e      	add	r0, sp, #56	; 0x38
 8006734:	1acb      	subs	r3, r1, r3
 8006736:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800673a:	462b      	mov	r3, r5
 800673c:	e7f6      	b.n	800672c <__kernel_rem_pio2+0x2ec>
 800673e:	1e62      	subs	r2, r4, #1
 8006740:	ab0e      	add	r3, sp, #56	; 0x38
 8006742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006746:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800674a:	a90e      	add	r1, sp, #56	; 0x38
 800674c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006750:	e757      	b.n	8006602 <__kernel_rem_pio2+0x1c2>
 8006752:	bf00      	nop
 8006754:	f3af 8000 	nop.w
	...
 8006764:	3ff00000 	.word	0x3ff00000
 8006768:	08007218 	.word	0x08007218
 800676c:	40200000 	.word	0x40200000
 8006770:	3ff00000 	.word	0x3ff00000
 8006774:	3e700000 	.word	0x3e700000
 8006778:	41700000 	.word	0x41700000
 800677c:	3fe00000 	.word	0x3fe00000
 8006780:	080071d8 	.word	0x080071d8
 8006784:	1e62      	subs	r2, r4, #1
 8006786:	ab0e      	add	r3, sp, #56	; 0x38
 8006788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006790:	e7db      	b.n	800674a <__kernel_rem_pio2+0x30a>
 8006792:	a90e      	add	r1, sp, #56	; 0x38
 8006794:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006798:	3b01      	subs	r3, #1
 800679a:	430a      	orrs	r2, r1
 800679c:	e78b      	b.n	80066b6 <__kernel_rem_pio2+0x276>
 800679e:	3301      	adds	r3, #1
 80067a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d0fa      	beq.n	800679e <__kernel_rem_pio2+0x35e>
 80067a8:	9a08      	ldr	r2, [sp, #32]
 80067aa:	4422      	add	r2, r4
 80067ac:	00d2      	lsls	r2, r2, #3
 80067ae:	a922      	add	r1, sp, #136	; 0x88
 80067b0:	18e3      	adds	r3, r4, r3
 80067b2:	9206      	str	r2, [sp, #24]
 80067b4:	440a      	add	r2, r1
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	f10b 0108 	add.w	r1, fp, #8
 80067bc:	f102 0308 	add.w	r3, r2, #8
 80067c0:	1c66      	adds	r6, r4, #1
 80067c2:	910a      	str	r1, [sp, #40]	; 0x28
 80067c4:	2500      	movs	r5, #0
 80067c6:	930d      	str	r3, [sp, #52]	; 0x34
 80067c8:	9b02      	ldr	r3, [sp, #8]
 80067ca:	42b3      	cmp	r3, r6
 80067cc:	da04      	bge.n	80067d8 <__kernel_rem_pio2+0x398>
 80067ce:	461c      	mov	r4, r3
 80067d0:	e6a6      	b.n	8006520 <__kernel_rem_pio2+0xe0>
 80067d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067d4:	2301      	movs	r3, #1
 80067d6:	e7e3      	b.n	80067a0 <__kernel_rem_pio2+0x360>
 80067d8:	9b06      	ldr	r3, [sp, #24]
 80067da:	18ef      	adds	r7, r5, r3
 80067dc:	ab22      	add	r3, sp, #136	; 0x88
 80067de:	441f      	add	r7, r3
 80067e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067e6:	f7f9 fea5 	bl	8000534 <__aeabi_i2d>
 80067ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ec:	461c      	mov	r4, r3
 80067ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067f0:	e9c7 0100 	strd	r0, r1, [r7]
 80067f4:	eb03 0b05 	add.w	fp, r3, r5
 80067f8:	2700      	movs	r7, #0
 80067fa:	f04f 0800 	mov.w	r8, #0
 80067fe:	f04f 0900 	mov.w	r9, #0
 8006802:	9b07      	ldr	r3, [sp, #28]
 8006804:	429f      	cmp	r7, r3
 8006806:	dd08      	ble.n	800681a <__kernel_rem_pio2+0x3da>
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	aa72      	add	r2, sp, #456	; 0x1c8
 800680c:	18eb      	adds	r3, r5, r3
 800680e:	4413      	add	r3, r2
 8006810:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8006814:	3601      	adds	r6, #1
 8006816:	3508      	adds	r5, #8
 8006818:	e7d6      	b.n	80067c8 <__kernel_rem_pio2+0x388>
 800681a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800681e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006822:	f7f9 fef1 	bl	8000608 <__aeabi_dmul>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fd35 	bl	800029c <__adddf3>
 8006832:	3701      	adds	r7, #1
 8006834:	4680      	mov	r8, r0
 8006836:	4689      	mov	r9, r1
 8006838:	e7e3      	b.n	8006802 <__kernel_rem_pio2+0x3c2>
 800683a:	3d01      	subs	r5, #1
 800683c:	e741      	b.n	80066c2 <__kernel_rem_pio2+0x282>
 800683e:	f1ca 0000 	rsb	r0, sl, #0
 8006842:	ec47 6b10 	vmov	d0, r6, r7
 8006846:	f000 f9ff 	bl	8006c48 <scalbn>
 800684a:	ec57 6b10 	vmov	r6, r7, d0
 800684e:	2200      	movs	r2, #0
 8006850:	4b99      	ldr	r3, [pc, #612]	; (8006ab8 <__kernel_rem_pio2+0x678>)
 8006852:	ee10 0a10 	vmov	r0, s0
 8006856:	4639      	mov	r1, r7
 8006858:	f7fa f95c 	bl	8000b14 <__aeabi_dcmpge>
 800685c:	b1f8      	cbz	r0, 800689e <__kernel_rem_pio2+0x45e>
 800685e:	2200      	movs	r2, #0
 8006860:	4b96      	ldr	r3, [pc, #600]	; (8006abc <__kernel_rem_pio2+0x67c>)
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fecf 	bl	8000608 <__aeabi_dmul>
 800686a:	f7fa f97d 	bl	8000b68 <__aeabi_d2iz>
 800686e:	4680      	mov	r8, r0
 8006870:	f7f9 fe60 	bl	8000534 <__aeabi_i2d>
 8006874:	2200      	movs	r2, #0
 8006876:	4b90      	ldr	r3, [pc, #576]	; (8006ab8 <__kernel_rem_pio2+0x678>)
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	460b      	mov	r3, r1
 800687e:	4602      	mov	r2, r0
 8006880:	4639      	mov	r1, r7
 8006882:	4630      	mov	r0, r6
 8006884:	f7f9 fd08 	bl	8000298 <__aeabi_dsub>
 8006888:	f7fa f96e 	bl	8000b68 <__aeabi_d2iz>
 800688c:	1c65      	adds	r5, r4, #1
 800688e:	ab0e      	add	r3, sp, #56	; 0x38
 8006890:	f10a 0a18 	add.w	sl, sl, #24
 8006894:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006898:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800689c:	e719      	b.n	80066d2 <__kernel_rem_pio2+0x292>
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7fa f961 	bl	8000b68 <__aeabi_d2iz>
 80068a6:	ab0e      	add	r3, sp, #56	; 0x38
 80068a8:	4625      	mov	r5, r4
 80068aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80068ae:	e710      	b.n	80066d2 <__kernel_rem_pio2+0x292>
 80068b0:	ab0e      	add	r3, sp, #56	; 0x38
 80068b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80068b6:	f7f9 fe3d 	bl	8000534 <__aeabi_i2d>
 80068ba:	4642      	mov	r2, r8
 80068bc:	464b      	mov	r3, r9
 80068be:	f7f9 fea3 	bl	8000608 <__aeabi_dmul>
 80068c2:	2200      	movs	r2, #0
 80068c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80068c8:	4b7c      	ldr	r3, [pc, #496]	; (8006abc <__kernel_rem_pio2+0x67c>)
 80068ca:	4640      	mov	r0, r8
 80068cc:	4649      	mov	r1, r9
 80068ce:	f7f9 fe9b 	bl	8000608 <__aeabi_dmul>
 80068d2:	3f01      	subs	r7, #1
 80068d4:	4680      	mov	r8, r0
 80068d6:	4689      	mov	r9, r1
 80068d8:	e708      	b.n	80066ec <__kernel_rem_pio2+0x2ac>
 80068da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80068e6:	f7f9 fe8f 	bl	8000608 <__aeabi_dmul>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4640      	mov	r0, r8
 80068f0:	4649      	mov	r1, r9
 80068f2:	f7f9 fcd3 	bl	800029c <__adddf3>
 80068f6:	3701      	adds	r7, #1
 80068f8:	4680      	mov	r8, r0
 80068fa:	4689      	mov	r9, r1
 80068fc:	9b04      	ldr	r3, [sp, #16]
 80068fe:	429f      	cmp	r7, r3
 8006900:	dc01      	bgt.n	8006906 <__kernel_rem_pio2+0x4c6>
 8006902:	45ba      	cmp	sl, r7
 8006904:	dae9      	bge.n	80068da <__kernel_rem_pio2+0x49a>
 8006906:	ab4a      	add	r3, sp, #296	; 0x128
 8006908:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800690c:	e9c3 8900 	strd	r8, r9, [r3]
 8006910:	f10a 0a01 	add.w	sl, sl, #1
 8006914:	3e08      	subs	r6, #8
 8006916:	e6f0      	b.n	80066fa <__kernel_rem_pio2+0x2ba>
 8006918:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800691a:	2b03      	cmp	r3, #3
 800691c:	d85b      	bhi.n	80069d6 <__kernel_rem_pio2+0x596>
 800691e:	e8df f003 	tbb	[pc, r3]
 8006922:	264a      	.short	0x264a
 8006924:	0226      	.short	0x0226
 8006926:	ab9a      	add	r3, sp, #616	; 0x268
 8006928:	441c      	add	r4, r3
 800692a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800692e:	46a2      	mov	sl, r4
 8006930:	46ab      	mov	fp, r5
 8006932:	f1bb 0f00 	cmp.w	fp, #0
 8006936:	dc6c      	bgt.n	8006a12 <__kernel_rem_pio2+0x5d2>
 8006938:	46a2      	mov	sl, r4
 800693a:	46ab      	mov	fp, r5
 800693c:	f1bb 0f01 	cmp.w	fp, #1
 8006940:	f300 8086 	bgt.w	8006a50 <__kernel_rem_pio2+0x610>
 8006944:	2000      	movs	r0, #0
 8006946:	2100      	movs	r1, #0
 8006948:	2d01      	cmp	r5, #1
 800694a:	f300 80a0 	bgt.w	8006a8e <__kernel_rem_pio2+0x64e>
 800694e:	9b02      	ldr	r3, [sp, #8]
 8006950:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006954:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 809e 	bne.w	8006a9a <__kernel_rem_pio2+0x65a>
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	e9c3 7800 	strd	r7, r8, [r3]
 8006964:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006968:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800696c:	e033      	b.n	80069d6 <__kernel_rem_pio2+0x596>
 800696e:	3408      	adds	r4, #8
 8006970:	ab4a      	add	r3, sp, #296	; 0x128
 8006972:	441c      	add	r4, r3
 8006974:	462e      	mov	r6, r5
 8006976:	2000      	movs	r0, #0
 8006978:	2100      	movs	r1, #0
 800697a:	2e00      	cmp	r6, #0
 800697c:	da3a      	bge.n	80069f4 <__kernel_rem_pio2+0x5b4>
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d03d      	beq.n	8006a00 <__kernel_rem_pio2+0x5c0>
 8006984:	4602      	mov	r2, r0
 8006986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800698a:	9c01      	ldr	r4, [sp, #4]
 800698c:	e9c4 2300 	strd	r2, r3, [r4]
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006998:	f7f9 fc7e 	bl	8000298 <__aeabi_dsub>
 800699c:	ae4c      	add	r6, sp, #304	; 0x130
 800699e:	2401      	movs	r4, #1
 80069a0:	42a5      	cmp	r5, r4
 80069a2:	da30      	bge.n	8006a06 <__kernel_rem_pio2+0x5c6>
 80069a4:	9b02      	ldr	r3, [sp, #8]
 80069a6:	b113      	cbz	r3, 80069ae <__kernel_rem_pio2+0x56e>
 80069a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ac:	4619      	mov	r1, r3
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80069b4:	e00f      	b.n	80069d6 <__kernel_rem_pio2+0x596>
 80069b6:	ab9a      	add	r3, sp, #616	; 0x268
 80069b8:	441c      	add	r4, r3
 80069ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80069be:	2000      	movs	r0, #0
 80069c0:	2100      	movs	r1, #0
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	da10      	bge.n	80069e8 <__kernel_rem_pio2+0x5a8>
 80069c6:	9b02      	ldr	r3, [sp, #8]
 80069c8:	b113      	cbz	r3, 80069d0 <__kernel_rem_pio2+0x590>
 80069ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ce:	4619      	mov	r1, r3
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	e9c3 0100 	strd	r0, r1, [r3]
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	f003 0007 	and.w	r0, r3, #7
 80069dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80069e0:	ecbd 8b02 	vpop	{d8}
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	3d01      	subs	r5, #1
 80069f2:	e7e6      	b.n	80069c2 <__kernel_rem_pio2+0x582>
 80069f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069f8:	f7f9 fc50 	bl	800029c <__adddf3>
 80069fc:	3e01      	subs	r6, #1
 80069fe:	e7bc      	b.n	800697a <__kernel_rem_pio2+0x53a>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	e7c1      	b.n	800698a <__kernel_rem_pio2+0x54a>
 8006a06:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006a0a:	f7f9 fc47 	bl	800029c <__adddf3>
 8006a0e:	3401      	adds	r4, #1
 8006a10:	e7c6      	b.n	80069a0 <__kernel_rem_pio2+0x560>
 8006a12:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8006a16:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	ec53 2b17 	vmov	r2, r3, d7
 8006a20:	4649      	mov	r1, r9
 8006a22:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a26:	f7f9 fc39 	bl	800029c <__adddf3>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7f9 fc2f 	bl	8000298 <__aeabi_dsub>
 8006a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a3e:	f7f9 fc2d 	bl	800029c <__adddf3>
 8006a42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a46:	e9ca 0100 	strd	r0, r1, [sl]
 8006a4a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8006a4e:	e770      	b.n	8006932 <__kernel_rem_pio2+0x4f2>
 8006a50:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8006a54:	ed3a 7b02 	vldmdb	sl!, {d7}
 8006a58:	4630      	mov	r0, r6
 8006a5a:	ec53 2b17 	vmov	r2, r3, d7
 8006a5e:	4639      	mov	r1, r7
 8006a60:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a64:	f7f9 fc1a 	bl	800029c <__adddf3>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	4689      	mov	r9, r1
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7f9 fc10 	bl	8000298 <__aeabi_dsub>
 8006a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a7c:	f7f9 fc0e 	bl	800029c <__adddf3>
 8006a80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a84:	e9ca 0100 	strd	r0, r1, [sl]
 8006a88:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8006a8c:	e756      	b.n	800693c <__kernel_rem_pio2+0x4fc>
 8006a8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a92:	f7f9 fc03 	bl	800029c <__adddf3>
 8006a96:	3d01      	subs	r5, #1
 8006a98:	e756      	b.n	8006948 <__kernel_rem_pio2+0x508>
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	9a01      	ldr	r2, [sp, #4]
 8006a9e:	601f      	str	r7, [r3, #0]
 8006aa0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006aa4:	605c      	str	r4, [r3, #4]
 8006aa6:	609d      	str	r5, [r3, #8]
 8006aa8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006aac:	60d3      	str	r3, [r2, #12]
 8006aae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ab2:	6110      	str	r0, [r2, #16]
 8006ab4:	6153      	str	r3, [r2, #20]
 8006ab6:	e78e      	b.n	80069d6 <__kernel_rem_pio2+0x596>
 8006ab8:	41700000 	.word	0x41700000
 8006abc:	3e700000 	.word	0x3e700000

08006ac0 <__kernel_sin>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	ec55 4b10 	vmov	r4, r5, d0
 8006ac8:	b085      	sub	sp, #20
 8006aca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006ace:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006ad2:	ed8d 1b00 	vstr	d1, [sp]
 8006ad6:	9002      	str	r0, [sp, #8]
 8006ad8:	da06      	bge.n	8006ae8 <__kernel_sin+0x28>
 8006ada:	ee10 0a10 	vmov	r0, s0
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7fa f842 	bl	8000b68 <__aeabi_d2iz>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d051      	beq.n	8006b8c <__kernel_sin+0xcc>
 8006ae8:	4622      	mov	r2, r4
 8006aea:	462b      	mov	r3, r5
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fd8a 	bl	8000608 <__aeabi_dmul>
 8006af4:	4682      	mov	sl, r0
 8006af6:	468b      	mov	fp, r1
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fd82 	bl	8000608 <__aeabi_dmul>
 8006b04:	a341      	add	r3, pc, #260	; (adr r3, 8006c0c <__kernel_sin+0x14c>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	4650      	mov	r0, sl
 8006b10:	4659      	mov	r1, fp
 8006b12:	f7f9 fd79 	bl	8000608 <__aeabi_dmul>
 8006b16:	a33f      	add	r3, pc, #252	; (adr r3, 8006c14 <__kernel_sin+0x154>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f7f9 fbbc 	bl	8000298 <__aeabi_dsub>
 8006b20:	4652      	mov	r2, sl
 8006b22:	465b      	mov	r3, fp
 8006b24:	f7f9 fd70 	bl	8000608 <__aeabi_dmul>
 8006b28:	a33c      	add	r3, pc, #240	; (adr r3, 8006c1c <__kernel_sin+0x15c>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fbb5 	bl	800029c <__adddf3>
 8006b32:	4652      	mov	r2, sl
 8006b34:	465b      	mov	r3, fp
 8006b36:	f7f9 fd67 	bl	8000608 <__aeabi_dmul>
 8006b3a:	a33a      	add	r3, pc, #232	; (adr r3, 8006c24 <__kernel_sin+0x164>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	f7f9 fbaa 	bl	8000298 <__aeabi_dsub>
 8006b44:	4652      	mov	r2, sl
 8006b46:	465b      	mov	r3, fp
 8006b48:	f7f9 fd5e 	bl	8000608 <__aeabi_dmul>
 8006b4c:	a337      	add	r3, pc, #220	; (adr r3, 8006c2c <__kernel_sin+0x16c>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fba3 	bl	800029c <__adddf3>
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	4606      	mov	r6, r0
 8006b5a:	460f      	mov	r7, r1
 8006b5c:	b9db      	cbnz	r3, 8006b96 <__kernel_sin+0xd6>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4650      	mov	r0, sl
 8006b64:	4659      	mov	r1, fp
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	a325      	add	r3, pc, #148	; (adr r3, 8006c00 <__kernel_sin+0x140>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fb92 	bl	8000298 <__aeabi_dsub>
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	f7f9 fd46 	bl	8000608 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4620      	mov	r0, r4
 8006b82:	4629      	mov	r1, r5
 8006b84:	f7f9 fb8a 	bl	800029c <__adddf3>
 8006b88:	4604      	mov	r4, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	ec45 4b10 	vmov	d0, r4, r5
 8006b90:	b005      	add	sp, #20
 8006b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b96:	2200      	movs	r2, #0
 8006b98:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <__kernel_sin+0x148>)
 8006b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b9e:	f7f9 fd33 	bl	8000608 <__aeabi_dmul>
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba8:	463b      	mov	r3, r7
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fd2b 	bl	8000608 <__aeabi_dmul>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bba:	f7f9 fb6d 	bl	8000298 <__aeabi_dsub>
 8006bbe:	4652      	mov	r2, sl
 8006bc0:	465b      	mov	r3, fp
 8006bc2:	f7f9 fd21 	bl	8000608 <__aeabi_dmul>
 8006bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bca:	f7f9 fb65 	bl	8000298 <__aeabi_dsub>
 8006bce:	a30c      	add	r3, pc, #48	; (adr r3, 8006c00 <__kernel_sin+0x140>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	460f      	mov	r7, r1
 8006bd8:	4640      	mov	r0, r8
 8006bda:	4649      	mov	r1, r9
 8006bdc:	f7f9 fd14 	bl	8000608 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4630      	mov	r0, r6
 8006be6:	4639      	mov	r1, r7
 8006be8:	f7f9 fb58 	bl	800029c <__adddf3>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	f7f9 fb50 	bl	8000298 <__aeabi_dsub>
 8006bf8:	e7c6      	b.n	8006b88 <__kernel_sin+0xc8>
 8006bfa:	bf00      	nop
 8006bfc:	f3af 8000 	nop.w
 8006c00:	55555549 	.word	0x55555549
 8006c04:	3fc55555 	.word	0x3fc55555
 8006c08:	3fe00000 	.word	0x3fe00000
 8006c0c:	5acfd57c 	.word	0x5acfd57c
 8006c10:	3de5d93a 	.word	0x3de5d93a
 8006c14:	8a2b9ceb 	.word	0x8a2b9ceb
 8006c18:	3e5ae5e6 	.word	0x3e5ae5e6
 8006c1c:	57b1fe7d 	.word	0x57b1fe7d
 8006c20:	3ec71de3 	.word	0x3ec71de3
 8006c24:	19c161d5 	.word	0x19c161d5
 8006c28:	3f2a01a0 	.word	0x3f2a01a0
 8006c2c:	1110f8a6 	.word	0x1110f8a6
 8006c30:	3f811111 	.word	0x3f811111

08006c34 <fabs>:
 8006c34:	ec51 0b10 	vmov	r0, r1, d0
 8006c38:	ee10 2a10 	vmov	r2, s0
 8006c3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c40:	ec43 2b10 	vmov	d0, r2, r3
 8006c44:	4770      	bx	lr
	...

08006c48 <scalbn>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	ec55 4b10 	vmov	r4, r5, d0
 8006c4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006c52:	4606      	mov	r6, r0
 8006c54:	462b      	mov	r3, r5
 8006c56:	b9aa      	cbnz	r2, 8006c84 <scalbn+0x3c>
 8006c58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c5c:	4323      	orrs	r3, r4
 8006c5e:	d03b      	beq.n	8006cd8 <scalbn+0x90>
 8006c60:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <scalbn+0xe0>)
 8006c62:	4629      	mov	r1, r5
 8006c64:	2200      	movs	r2, #0
 8006c66:	ee10 0a10 	vmov	r0, s0
 8006c6a:	f7f9 fccd 	bl	8000608 <__aeabi_dmul>
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <scalbn+0xe4>)
 8006c70:	429e      	cmp	r6, r3
 8006c72:	4604      	mov	r4, r0
 8006c74:	460d      	mov	r5, r1
 8006c76:	da12      	bge.n	8006c9e <scalbn+0x56>
 8006c78:	a327      	add	r3, pc, #156	; (adr r3, 8006d18 <scalbn+0xd0>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fcc3 	bl	8000608 <__aeabi_dmul>
 8006c82:	e009      	b.n	8006c98 <scalbn+0x50>
 8006c84:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006c88:	428a      	cmp	r2, r1
 8006c8a:	d10c      	bne.n	8006ca6 <scalbn+0x5e>
 8006c8c:	ee10 2a10 	vmov	r2, s0
 8006c90:	4620      	mov	r0, r4
 8006c92:	4629      	mov	r1, r5
 8006c94:	f7f9 fb02 	bl	800029c <__adddf3>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	e01c      	b.n	8006cd8 <scalbn+0x90>
 8006c9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	3a36      	subs	r2, #54	; 0x36
 8006ca6:	4432      	add	r2, r6
 8006ca8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006cac:	428a      	cmp	r2, r1
 8006cae:	dd0b      	ble.n	8006cc8 <scalbn+0x80>
 8006cb0:	ec45 4b11 	vmov	d1, r4, r5
 8006cb4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006d20 <scalbn+0xd8>
 8006cb8:	f000 f83c 	bl	8006d34 <copysign>
 8006cbc:	a318      	add	r3, pc, #96	; (adr r3, 8006d20 <scalbn+0xd8>)
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	ec51 0b10 	vmov	r0, r1, d0
 8006cc6:	e7da      	b.n	8006c7e <scalbn+0x36>
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	dd08      	ble.n	8006cde <scalbn+0x96>
 8006ccc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cd8:	ec45 4b10 	vmov	d0, r4, r5
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
 8006cde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ce2:	da0d      	bge.n	8006d00 <scalbn+0xb8>
 8006ce4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ce8:	429e      	cmp	r6, r3
 8006cea:	ec45 4b11 	vmov	d1, r4, r5
 8006cee:	dce1      	bgt.n	8006cb4 <scalbn+0x6c>
 8006cf0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006d18 <scalbn+0xd0>
 8006cf4:	f000 f81e 	bl	8006d34 <copysign>
 8006cf8:	a307      	add	r3, pc, #28	; (adr r3, 8006d18 <scalbn+0xd0>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	e7e0      	b.n	8006cc2 <scalbn+0x7a>
 8006d00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d04:	3236      	adds	r2, #54	; 0x36
 8006d06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	2200      	movs	r2, #0
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <scalbn+0xe8>)
 8006d16:	e7b2      	b.n	8006c7e <scalbn+0x36>
 8006d18:	c2f8f359 	.word	0xc2f8f359
 8006d1c:	01a56e1f 	.word	0x01a56e1f
 8006d20:	8800759c 	.word	0x8800759c
 8006d24:	7e37e43c 	.word	0x7e37e43c
 8006d28:	43500000 	.word	0x43500000
 8006d2c:	ffff3cb0 	.word	0xffff3cb0
 8006d30:	3c900000 	.word	0x3c900000

08006d34 <copysign>:
 8006d34:	ec51 0b10 	vmov	r0, r1, d0
 8006d38:	ee11 0a90 	vmov	r0, s3
 8006d3c:	ee10 2a10 	vmov	r2, s0
 8006d40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006d48:	ea41 0300 	orr.w	r3, r1, r0
 8006d4c:	ec43 2b10 	vmov	d0, r2, r3
 8006d50:	4770      	bx	lr
	...

08006d54 <_init>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr

08006d60 <_fini>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr
